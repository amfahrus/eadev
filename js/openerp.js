Date.CultureInfo={
    name:"en-US",
    englishName:"English (United States)",
    nativeName:"English (United States)",
    dayNames:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],
    abbreviatedDayNames:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],
    shortestDayNames:["Su","Mo","Tu","We","Th","Fr","Sa"],
    firstLetterDayNames:["S","M","T","W","T","F","S"],
    monthNames:["January","February","March","April","May","June","July","August","September","October","November","December"],
    abbreviatedMonthNames:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],
    amDesignator:"AM",
    pmDesignator:"PM",
    firstDayOfWeek:0,
    twoDigitYearMax:2029,
    dateElementOrder:"mdy",
    formatPatterns:{
        shortDate:"M/d/yyyy",
        longDate:"dddd, MMMM dd, yyyy",
        shortTime:"h:mm tt",
        longTime:"h:mm:ss tt",
        fullDateTime:"dddd, MMMM dd, yyyy h:mm:ss tt",
        sortableDateTime:"yyyy-MM-ddTHH:mm:ss",
        universalSortableDateTime:"yyyy-MM-dd HH:mm:ssZ",
        rfc1123:"ddd, dd MMM yyyy HH:mm:ss GMT",
        monthDay:"MMMM dd",
        yearMonth:"MMMM, yyyy"
    },
    regexPatterns:{
        jan:/^jan(uary)?/i,
        feb:/^feb(ruary)?/i,
        mar:/^mar(ch)?/i,
        apr:/^apr(il)?/i,
        may:/^may/i,
        jun:/^jun(e)?/i,
        jul:/^jul(y)?/i,
        aug:/^aug(ust)?/i,
        sep:/^sep(t(ember)?)?/i,
        oct:/^oct(ober)?/i,
        nov:/^nov(ember)?/i,
        dec:/^dec(ember)?/i,
        sun:/^su(n(day)?)?/i,
        mon:/^mo(n(day)?)?/i,
        tue:/^tu(e(s(day)?)?)?/i,
        wed:/^we(d(nesday)?)?/i,
        thu:/^th(u(r(s(day)?)?)?)?/i,
        fri:/^fr(i(day)?)?/i,
        sat:/^sa(t(urday)?)?/i,
        future:/^next/i,
        past:/^last|past|prev(ious)?/i,
        add:/^(\+|aft(er)?|from|hence)/i,
        subtract:/^(\-|bef(ore)?|ago)/i,
        yesterday:/^yes(terday)?/i,
        today:/^t(od(ay)?)?/i,
        tomorrow:/^tom(orrow)?/i,
        now:/^n(ow)?/i,
        millisecond:/^ms|milli(second)?s?/i,
        second:/^sec(ond)?s?/i,
        minute:/^mn|min(ute)?s?/i,
        hour:/^h(our)?s?/i,
        week:/^w(eek)?s?/i,
        month:/^m(onth)?s?/i,
        day:/^d(ay)?s?/i,
        year:/^y(ear)?s?/i,
        shortMeridian:/^(a|p)/i,
        longMeridian:/^(a\.?m?\.?|p\.?m?\.?)/i,
        timezone:/^((e(s|d)t|c(s|d)t|m(s|d)t|p(s|d)t)|((gmt)?\s*(\+|\-)\s*\d\d\d\d?)|gmt|utc)/i,
        ordinalSuffix:/^\s*(st|nd|rd|th)/i,
        timeContext:/^\s*(\:|a(?!u|p)|p)/i
    },
    timezones:[{
        name:"UTC",
        offset:"-000"
    },{
        name:"GMT",
        offset:"-000"
    },{
        name:"EST",
        offset:"-0500"
    },{
        name:"EDT",
        offset:"-0400"
    },{
        name:"CST",
        offset:"-0600"
    },{
        name:"CDT",
        offset:"-0500"
    },{
        name:"MST",
        offset:"-0700"
    },{
        name:"MDT",
        offset:"-0600"
    },{
        name:"PST",
        offset:"-0800"
    },{
        name:"PDT",
        offset:"-0700"
    }]
    };
;
(function(){
    var $D=Date,$P=$D.prototype,p=function(s,l){
        if(!l){
            l=2;
        }
        return("000"+s).slice(l*-1);
    };
    
    $P.clearTime=function(){
        this.setHours(0);
        this.setMinutes(0);
        this.setSeconds(0);
        this.setMilliseconds(0);
        return this;
    };
    
    $P.setTimeToNow=function(){
        var n=new Date();
        this.setHours(n.getHours());
        this.setMinutes(n.getMinutes());
        this.setSeconds(n.getSeconds());
        this.setMilliseconds(n.getMilliseconds());
        return this;
    };
    
    $D.today=function(){
        return new Date().clearTime();
    };
    
    $D.compare=function(date1,date2){
        if(isNaN(date1)||isNaN(date2)){
            throw new Error(date1+" - "+date2);
        }else if(date1 instanceof Date&&date2 instanceof Date){
            return(date1<date2)?-1:(date1>date2)?1:0;
        }else{
            throw new TypeError(date1+" - "+date2);
        }
    };
    
$D.equals=function(date1,date2){
    return(date1.compareTo(date2)===0);
};

$D.getDayNumberFromName=function(name){
    var n=$D.CultureInfo.dayNames,m=$D.CultureInfo.abbreviatedDayNames,o=$D.CultureInfo.shortestDayNames,s=name.toLowerCase();
    for(var i=0;i<n.length;i++){
        if(n[i].toLowerCase()==s||m[i].toLowerCase()==s||o[i].toLowerCase()==s){
            return i;
        }
    }
return-1;
};

$D.getMonthNumberFromName=function(name){
    var n=$D.CultureInfo.monthNames,m=$D.CultureInfo.abbreviatedMonthNames,s=name.toLowerCase();
    for(var i=0;i<n.length;i++){
        if(n[i].toLowerCase()==s||m[i].toLowerCase()==s){
            return i;
        }
    }
return-1;
};

$D.isLeapYear=function(year){
    return((year%4===0&&year%100!==0)||year%400===0);
};

$D.getDaysInMonth=function(year,month){
    return[31,($D.isLeapYear(year)?29:28),31,30,31,30,31,31,30,31,30,31][month];
};

$D.getTimezoneAbbreviation=function(offset){
    var z=$D.CultureInfo.timezones,p;
    for(var i=0;i<z.length;i++){
        if(z[i].offset===offset){
            return z[i].name;
        }
    }
return null;
};

$D.getTimezoneOffset=function(name){
    var z=$D.CultureInfo.timezones,p;
    for(var i=0;i<z.length;i++){
        if(z[i].name===name.toUpperCase()){
            return z[i].offset;
        }
    }
return null;
};

$P.clone=function(){
    return new Date(this.getTime());
};

$P.compareTo=function(date){
    return Date.compare(this,date);
};

$P.equals=function(date){
    return Date.equals(this,date||new Date());
};

$P.between=function(start,end){
    return this.getTime()>=start.getTime()&&this.getTime()<=end.getTime();
};

$P.isAfter=function(date){
    return this.compareTo(date||new Date())===1;
};

$P.isBefore=function(date){
    return(this.compareTo(date||new Date())===-1);
};

$P.isToday=$P.isSameDay=function(date){
    return this.clone().clearTime().equals((date||new Date()).clone().clearTime());
};

$P.addMilliseconds=function(value){
    this.setMilliseconds(this.getMilliseconds()+value*1);
    return this;
};

$P.addSeconds=function(value){
    return this.addMilliseconds(value*1000);
};

$P.addMinutes=function(value){
    return this.addMilliseconds(value*60000);
};

$P.addHours=function(value){
    return this.addMilliseconds(value*3600000);
};

$P.addDays=function(value){
    this.setDate(this.getDate()+value*1);
    return this;
};

$P.addWeeks=function(value){
    return this.addDays(value*7);
};

$P.addMonths=function(value){
    var n=this.getDate();
    this.setDate(1);
    this.setMonth(this.getMonth()+value*1);
    this.setDate(Math.min(n,$D.getDaysInMonth(this.getFullYear(),this.getMonth())));
    return this;
};

$P.addYears=function(value){
    return this.addMonths(value*12);
};

$P.add=function(config){
    if(typeof config=="number"){
        this._orient=config;
        return this;
    }
    var x=config;
    if(x.milliseconds){
        this.addMilliseconds(x.milliseconds);
    }
    if(x.seconds){
        this.addSeconds(x.seconds);
    }
    if(x.minutes){
        this.addMinutes(x.minutes);
    }
    if(x.hours){
        this.addHours(x.hours);
    }
    if(x.weeks){
        this.addWeeks(x.weeks);
    }
    if(x.months){
        this.addMonths(x.months);
    }
    if(x.years){
        this.addYears(x.years);
    }
    if(x.days){
        this.addDays(x.days);
    }
    return this;
};

var $y,$m,$d;
$P.getWeek=function(){
    var a,b,c,d,e,f,g,n,s,w;
    $y=(!$y)?this.getFullYear():$y;
    $m=(!$m)?this.getMonth()+1:$m;
    $d=(!$d)?this.getDate():$d;
    if($m<=2){
        a=$y-1;
        b=(a/4|0)-(a/100|0)+(a/400|0);
        c=((a-1)/4|0)-((a-1)/100|0)+((a-1)/400|0);
        s=b-c;
        e=0;
        f=$d-1+(31*($m-1));
    }else{
        a=$y;
        b=(a/4|0)-(a/100|0)+(a/400|0);
        c=((a-1)/4|0)-((a-1)/100|0)+((a-1)/400|0);
        s=b-c;
        e=s+1;
        f=$d+((153*($m-3)+2)/5)+58+s;
    }
    g=(a+b)%7;
    d=(f+g-e)%7;
    n=(f+3-d)|0;
    if(n<0){
        w=53-((g-s)/5|0);
    }else if(n>364+s){
        w=1;
    }else{
        w=(n/7|0)+1;
    }
    $y=$m=$d=null;
    return w;
};

$P.getISOWeek=function(){
    $y=this.getUTCFullYear();
    $m=this.getUTCMonth()+1;
    $d=this.getUTCDate();
    return p(this.getWeek());
};

$P.setWeek=function(n){
    return this.moveToDayOfWeek(1).addWeeks(n-this.getWeek());
};

var validate=function(n,min,max,name){
    if(typeof n=="undefined"){
        return false;
    }else if(typeof n!="number"){
        throw new TypeError(n+" is not a Number.");
    }else if(n<min||n>max){
        throw new RangeError(n+" is not a valid value for "+name+".");
    }
    return true;
};

$D.validateMillisecond=function(value){
    return validate(value,0,999,"millisecond");
};

$D.validateSecond=function(value){
    return validate(value,0,59,"second");
};

$D.validateMinute=function(value){
    return validate(value,0,59,"minute");
};

$D.validateHour=function(value){
    return validate(value,0,23,"hour");
};

$D.validateDay=function(value,year,month){
    return validate(value,1,$D.getDaysInMonth(year,month),"day");
};

$D.validateMonth=function(value){
    return validate(value,0,11,"month");
};

$D.validateYear=function(value){
    return validate(value,0,9999,"year");
};

$P.set=function(config){
    if($D.validateMillisecond(config.millisecond)){
        this.addMilliseconds(config.millisecond-this.getMilliseconds());
    }
    if($D.validateSecond(config.second)){
        this.addSeconds(config.second-this.getSeconds());
    }
    if($D.validateMinute(config.minute)){
        this.addMinutes(config.minute-this.getMinutes());
    }
    if($D.validateHour(config.hour)){
        this.addHours(config.hour-this.getHours());
    }
    if($D.validateMonth(config.month)){
        this.addMonths(config.month-this.getMonth());
    }
    if($D.validateYear(config.year)){
        this.addYears(config.year-this.getFullYear());
    }
    if($D.validateDay(config.day,this.getFullYear(),this.getMonth())){
        this.addDays(config.day-this.getDate());
    }
    if(config.timezone){
        this.setTimezone(config.timezone);
    }
    if(config.timezoneOffset){
        this.setTimezoneOffset(config.timezoneOffset);
    }
    if(config.week&&validate(config.week,0,53,"week")){
        this.setWeek(config.week);
    }
    return this;
};

$P.moveToFirstDayOfMonth=function(){
    return this.set({
        day:1
    });
};

$P.moveToLastDayOfMonth=function(){
    return this.set({
        day:$D.getDaysInMonth(this.getFullYear(),this.getMonth())
        });
};

$P.moveToNthOccurrence=function(dayOfWeek,occurrence){
    var shift=0;
    if(occurrence>0){
        shift=occurrence-1;
    }
    else if(occurrence===-1){
        this.moveToLastDayOfMonth();
        if(this.getDay()!==dayOfWeek){
            this.moveToDayOfWeek(dayOfWeek,-1);
        }
        return this;
    }
    return this.moveToFirstDayOfMonth().addDays(-1).moveToDayOfWeek(dayOfWeek,+1).addWeeks(shift);
};

$P.moveToDayOfWeek=function(dayOfWeek,orient){
    var diff=(dayOfWeek-this.getDay()+7*(orient||+1))%7;
    return this.addDays((diff===0)?diff+=7*(orient||+1):diff);
};

$P.moveToMonth=function(month,orient){
    var diff=(month-this.getMonth()+12*(orient||+1))%12;
    return this.addMonths((diff===0)?diff+=12*(orient||+1):diff);
};

$P.getOrdinalNumber=function(){
    return Math.ceil((this.clone().clearTime()-new Date(this.getFullYear(),0,1))/86400000)+1;
};

$P.getTimezone=function(){
    return $D.getTimezoneAbbreviation(this.getUTCOffset());
};

$P.setTimezoneOffset=function(offset){
    var here=this.getTimezoneOffset(),there=Number(offset)*-6/10;
    return this.addMinutes(there-here);
};

$P.setTimezone=function(offset){
    return this.setTimezoneOffset($D.getTimezoneOffset(offset));
};

$P.hasDaylightSavingTime=function(){
    return(Date.today().set({
        month:0,
        day:1
    }).getTimezoneOffset()!==Date.today().set({
        month:6,
        day:1
    }).getTimezoneOffset());
};

$P.isDaylightSavingTime=function(){
    return Date.today().set({
        month:0,
        day:1
    }).getTimezoneOffset()!=this.getTimezoneOffset();
};

$P.getUTCOffset=function(){
    var n=this.getTimezoneOffset()*-10/6,r;
    if(n<0){
        r=(n-10000).toString();
        return r.charAt(0)+r.substr(2);
    }else{
        r=(n+10000).toString();
        return"+"+r.substr(1);
    }
};

$P.getElapsed=function(date){
    return(date||new Date())-this;
};

if(!$P.toISOString){
    $P.toISOString=function(){
        function f(n){
            return n<10?'0'+n:n;
        }
        return'"'+this.getUTCFullYear()+'-'+
        f(this.getUTCMonth()+1)+'-'+
        f(this.getUTCDate())+'T'+
        f(this.getUTCHours())+':'+
        f(this.getUTCMinutes())+':'+
        f(this.getUTCSeconds())+'Z"';
    };

}
$P._toString=$P.toString;
$P.toString=function(format){
    var x=this;
    if(format&&format.length==1){
        var c=$D.CultureInfo.formatPatterns;
        x.t=x.toString;
        switch(format){
            case"d":
                return x.t(c.shortDate);
            case"D":
                return x.t(c.longDate);
            case"F":
                return x.t(c.fullDateTime);
            case"m":
                return x.t(c.monthDay);
            case"r":
                return x.t(c.rfc1123);
            case"s":
                return x.t(c.sortableDateTime);
            case"t":
                return x.t(c.shortTime);
            case"T":
                return x.t(c.longTime);
            case"u":
                return x.t(c.universalSortableDateTime);
            case"y":
                return x.t(c.yearMonth);
        }
    }
var ord=function(n){
    switch(n*1){
        case 1:case 21:case 31:
            return"st";
        case 2:case 22:
            return"nd";
        case 3:case 23:
            return"rd";
        default:
            return"th";
    }
};

return format?format.replace(/(\\)?(dd?d?d?|MM?M?M?|yy?y?y?|hh?|HH?|mm?|ss?|tt?|S)/g,function(m){
    if(m.charAt(0)==="\\"){
        return m.replace("\\","");
    }
    x.h=x.getHours;
    switch(m){
        case"hh":
            return p(x.h()<13?(x.h()===0?12:x.h()):(x.h()-12));
        case"h":
            return x.h()<13?(x.h()===0?12:x.h()):(x.h()-12);
        case"HH":
            return p(x.h());
        case"H":
            return x.h();
        case"mm":
            return p(x.getMinutes());
        case"m":
            return x.getMinutes();
        case"ss":
            return p(x.getSeconds());
        case"s":
            return x.getSeconds();
        case"yyyy":
            return p(x.getFullYear(),4);
        case"yy":
            return p(x.getFullYear());
        case"dddd":
            return $D.CultureInfo.dayNames[x.getDay()];
        case"ddd":
            return $D.CultureInfo.abbreviatedDayNames[x.getDay()];
        case"dd":
            return p(x.getDate());
        case"d":
            return x.getDate();
        case"MMMM":
            return $D.CultureInfo.monthNames[x.getMonth()];
        case"MMM":
            return $D.CultureInfo.abbreviatedMonthNames[x.getMonth()];
        case"MM":
            return p((x.getMonth()+1));
        case"M":
            return x.getMonth()+1;
        case"t":
            return x.h()<12?$D.CultureInfo.amDesignator.substring(0,1):$D.CultureInfo.pmDesignator.substring(0,1);
        case"tt":
            return x.h()<12?$D.CultureInfo.amDesignator:$D.CultureInfo.pmDesignator;
        case"S":
            return ord(x.getDate());
        default:
            return m;
    }
}):this._toString();
};

}());
;
(function(){
    Date.Parsing={
        Exception:function(s){
            this.message="Parse error at '"+s.substring(0,10)+" ...'";
        }
    };
    
var $P=Date.Parsing;
var _=$P.Operators={
    rtoken:function(r){
        return function(s){
            var mx=s.match(r);
            if(mx){
                return([mx[0],s.substring(mx[0].length)]);
            }else{
                throw new $P.Exception(s);
            }
        };
    
},
token:function(s){
    return function(s){
        return _.rtoken(new RegExp("^\s*"+s+"\s*"))(s);
    };

},
stoken:function(s){
    return _.rtoken(new RegExp("^"+s));
},
until:function(p){
    return function(s){
        var qx=[],rx=null;
        while(s.length){
            try{
                rx=p.call(this,s);
            }catch(e){
                qx.push(rx[0]);
                s=rx[1];
                continue;
            }
            break;
        }
        return[qx,s];
    };

},
many:function(p){
    return function(s){
        var rx=[],r=null;
        while(s.length){
            try{
                r=p.call(this,s);
            }catch(e){
                return[rx,s];
            }
            rx.push(r[0]);
            s=r[1];
        }
        return[rx,s];
    };

},
optional:function(p){
    return function(s){
        var r=null;
        try{
            r=p.call(this,s);
        }catch(e){
            return[null,s];
        }
        return[r[0],r[1]];
    };

},
not:function(p){
    return function(s){
        try{
            p.call(this,s);
        }catch(e){
            return[null,s];
        }
        throw new $P.Exception(s);
    };

},
ignore:function(p){
    return p?function(s){
        var r=null;
        r=p.call(this,s);
        return[null,r[1]];
    }:null;
},
product:function(){
    var px=arguments[0],qx=Array.prototype.slice.call(arguments,1),rx=[];
    for(var i=0;i<px.length;i++){
        rx.push(_.each(px[i],qx));
    }
    return rx;
},
cache:function(rule){
    var cache={},r=null;
    return function(s){
        try{
            r=cache[s]=(cache[s]||rule.call(this,s));
        }catch(e){
            r=cache[s]=e;
        }
        if(r instanceof $P.Exception){
            throw r;
        }else{
            return r;
        }
    };

},
any:function(){
    var px=arguments;
    return function(s){
        var r=null;
        for(var i=0;i<px.length;i++){
            if(px[i]==null){
                continue;
            }
            try{
                r=(px[i].call(this,s));
            }catch(e){
                r=null;
            }
            if(r){
                return r;
            }
        }
    throw new $P.Exception(s);
};

},
each:function(){
    var px=arguments;
    return function(s){
        var rx=[],r=null;
        for(var i=0;i<px.length;i++){
            if(px[i]==null){
                continue;
            }
            try{
                r=(px[i].call(this,s));
            }catch(e){
                throw new $P.Exception(s);
            }
            rx.push(r[0]);
            s=r[1];
        }
        return[rx,s];
    };

},
all:function(){
    var px=arguments,_=_;
    return _.each(_.optional(px));
},
sequence:function(px,d,c){
    d=d||_.rtoken(/^\s*/);
    c=c||null;
    if(px.length==1){
        return px[0];
    }
    return function(s){
        var r=null,q=null;
        var rx=[];
        for(var i=0;i<px.length;i++){
            try{
                r=px[i].call(this,s);
            }catch(e){
                break;
            }
            rx.push(r[0]);
            try{
                q=d.call(this,r[1]);
            }catch(ex){
                q=null;
                break;
            }
            s=q[1];
        }
        if(!r){
            throw new $P.Exception(s);
        }
        if(q){
            throw new $P.Exception(q[1]);
        }
        if(c){
            try{
                r=c.call(this,r[1]);
            }catch(ey){
                throw new $P.Exception(r[1]);
            }
        }
    return[rx,(r?r[1]:s)];
};

},
between:function(d1,p,d2){
    d2=d2||d1;
    var _fn=_.each(_.ignore(d1),p,_.ignore(d2));
    return function(s){
        var rx=_fn.call(this,s);
        return[[rx[0][0],r[0][2]],rx[1]];
    };

},
list:function(p,d,c){
    d=d||_.rtoken(/^\s*/);
    c=c||null;
    return(p instanceof Array?_.each(_.product(p.slice(0,-1),_.ignore(d)),p.slice(-1),_.ignore(c)):_.each(_.many(_.each(p,_.ignore(d))),px,_.ignore(c)));
},
set:function(px,d,c){
    d=d||_.rtoken(/^\s*/);
    c=c||null;
    return function(s){
        var r=null,p=null,q=null,rx=null,best=[[],s],last=false;
        for(var i=0;i<px.length;i++){
            q=null;
            p=null;
            r=null;
            last=(px.length==1);
            try{
                r=px[i].call(this,s);
            }catch(e){
                continue;
            }
            rx=[[r[0]],r[1]];
            if(r[1].length>0&&!last){
                try{
                    q=d.call(this,r[1]);
                }catch(ex){
                    last=true;
                }
            }else{
            last=true;
        }
        if(!last&&q[1].length===0){
            last=true;
        }
        if(!last){
            var qx=[];
            for(var j=0;j<px.length;j++){
                if(i!=j){
                    qx.push(px[j]);
                }
            }
        p=_.set(qx,d).call(this,q[1]);
            if(p[0].length>0){
            rx[0]=rx[0].concat(p[0]);
            rx[1]=p[1];
        }
        }
    if(rx[1].length<best[1].length){
        best=rx;
    }
    if(best[1].length===0){
        break;
    }
}
if(best[0].length===0){
    return best;
}
if(c){
    try{
        q=c.call(this,best[1]);
    }catch(ey){
        throw new $P.Exception(best[1]);
    }
    best[1]=q[1];
}
return best;
};

},
forward:function(gr,fname){
    return function(s){
        return gr[fname].call(this,s);
    };

},
replace:function(rule,repl){
    return function(s){
        var r=rule.call(this,s);
        return[repl,r[1]];
    };

},
process:function(rule,fn){
    return function(s){
        var r=rule.call(this,s);
        return[fn.call(this,r[0]),r[1]];
    };

},
min:function(min,rule){
    return function(s){
        var rx=rule.call(this,s);
        if(rx[0].length<min){
            throw new $P.Exception(s);
        }
        return rx;
    };

}
};

var _generator=function(op){
    return function(){
        var args=null,rx=[];
        if(arguments.length>1){
            args=Array.prototype.slice.call(arguments);
        }else if(arguments[0]instanceof Array){
            args=arguments[0];
        }
        if(args){
            for(var i=0,px=args.shift();i<px.length;i++){
                args.unshift(px[i]);
                rx.push(op.apply(null,args));
                args.shift();
                return rx;
            }
            }else{
        return op.apply(null,arguments);
    }
};

};

var gx="optional not ignore cache".split(/\s/);
for(var i=0;i<gx.length;i++){
    _[gx[i]]=_generator(_[gx[i]]);
}
var _vector=function(op){
    return function(){
        if(arguments[0]instanceof Array){
            return op.apply(null,arguments[0]);
        }else{
            return op.apply(null,arguments);
        }
    };

};

var vx="each any all".split(/\s/);
for(var j=0;j<vx.length;j++){
    _[vx[j]]=_vector(_[vx[j]]);
}
}());
(function(){
    var $D=Date,$P=$D.prototype;
    var flattenAndCompact=function(ax){
        var rx=[];
        for(var i=0;i<ax.length;i++){
            if(ax[i]instanceof Array){
                rx=rx.concat(flattenAndCompact(ax[i]));
            }else{
                if(ax[i]){
                    rx.push(ax[i]);
                }
            }
        }
return rx;
};

$D.Grammar={};

$D.Translator={
    hour:function(s){
        return function(){
            this.hour=Number(s);
        };
    
},
minute:function(s){
    return function(){
        this.minute=Number(s);
    };

},
second:function(s){
    return function(){
        this.second=Number(s);
    };

},
meridian:function(s){
    return function(){
        this.meridian=s.slice(0,1).toLowerCase();
    };

},
timezone:function(s){
    return function(){
        var n=s.replace(/[^\d\+\-]/g,"");
        if(n.length){
            this.timezoneOffset=Number(n);
        }else{
            this.timezone=s.toLowerCase();
        }
    };

},
day:function(x){
    var s=x[0];
    return function(){
        this.day=Number(s.match(/\d+/)[0]);
    };

},
month:function(s){
    return function(){
        this.month=(s.length==3)?"jan feb mar apr may jun jul aug sep oct nov dec".indexOf(s)/4:Number(s)-1;
    };

},
year:function(s){
    return function(){
        var n=Number(s);
        this.year=((s.length>2)?n:(n+(((n+2000)<$D.CultureInfo.twoDigitYearMax)?2000:1900)));
    };

},
rday:function(s){
    return function(){
        switch(s){
            case"yesterday":
                this.days=-1;
                break;
            case"tomorrow":
                this.days=1;
                break;
            case"today":
                this.days=0;
                break;
            case"now":
                this.days=0;
                this.now=true;
                break;
        }
    };

},
finishExact:function(x){
    x=(x instanceof Array)?x:[x];
    for(var i=0;i<x.length;i++){
        if(x[i]){
            x[i].call(this);
        }
    }
var now=new Date();
if((this.hour||this.minute)&&(!this.month&&!this.year&&!this.day)){
    this.day=now.getDate();
}
if(!this.year){
    this.year=now.getFullYear();
}
if(!this.month&&this.month!==0){
    this.month=now.getMonth();
}
if(!this.day){
    this.day=1;
}
if(!this.hour){
    this.hour=0;
}
if(!this.minute){
    this.minute=0;
}
if(!this.second){
    this.second=0;
}
if(this.meridian&&this.hour){
    if(this.meridian=="p"&&this.hour<12){
        this.hour=this.hour+12;
    }else if(this.meridian=="a"&&this.hour==12){
        this.hour=0;
    }
}
if(this.day>$D.getDaysInMonth(this.year,this.month)){
    throw new RangeError(this.day+" is not a valid value for days.");
}
var r=new Date(this.year,this.month,this.day,this.hour,this.minute,this.second);
if(this.timezone){
    r.set({
        timezone:this.timezone
        });
}else if(this.timezoneOffset){
    r.set({
        timezoneOffset:this.timezoneOffset
        });
}
return r;
},
finish:function(x){
    x=(x instanceof Array)?flattenAndCompact(x):[x];
    if(x.length===0){
        return null;
    }
    for(var i=0;i<x.length;i++){
        if(typeof x[i]=="function"){
            x[i].call(this);
        }
    }
var today=$D.today();
if(this.now&&!this.unit&&!this.operator){
    return new Date();
}else if(this.now){
    today=new Date();
}
var expression=!!(this.days&&this.days!==null||this.orient||this.operator);
var gap,mod,orient;
orient=((this.orient=="past"||this.operator=="subtract")?-1:1);
if(!this.now&&"hour minute second".indexOf(this.unit)!=-1){
    today.setTimeToNow();
}
if(this.month||this.month===0){
    if("year day hour minute second".indexOf(this.unit)!=-1){
        this.value=this.month+1;
        this.month=null;
        expression=true;
    }
}
if(!expression&&this.weekday&&!this.day&&!this.days){
    var temp=Date[this.weekday]();
    this.day=temp.getDate();
    if(!this.month){
        this.month=temp.getMonth();
    }
    this.year=temp.getFullYear();
}
if(expression&&this.weekday&&this.unit!="month"){
    this.unit="day";
    gap=($D.getDayNumberFromName(this.weekday)-today.getDay());
    mod=7;
    this.days=gap?((gap+(orient*mod))%mod):(orient*mod);
}
if(this.month&&this.unit=="day"&&this.operator){
    this.value=(this.month+1);
    this.month=null;
}
if(this.value!=null&&this.month!=null&&this.year!=null){
    this.day=this.value*1;
}
if(this.month&&!this.day&&this.value){
    today.set({
        day:this.value*1
    });
    if(!expression){
        this.day=this.value*1;
    }
}
if(!this.month&&this.value&&this.unit=="month"&&!this.now){
    this.month=this.value;
    expression=true;
}
if(expression&&(this.month||this.month===0)&&this.unit!="year"){
    this.unit="month";
    gap=(this.month-today.getMonth());
    mod=12;
    this.months=gap?((gap+(orient*mod))%mod):(orient*mod);
    this.month=null;
}
if(!this.unit){
    this.unit="day";
}
if(!this.value&&this.operator&&this.operator!==null&&this[this.unit+"s"]&&this[this.unit+"s"]!==null){
    this[this.unit+"s"]=this[this.unit+"s"]+((this.operator=="add")?1:-1)+(this.value||0)*orient;
}else if(this[this.unit+"s"]==null||this.operator!=null){
    if(!this.value){
        this.value=1;
    }
    this[this.unit+"s"]=this.value*orient;
}
if(this.meridian&&this.hour){
    if(this.meridian=="p"&&this.hour<12){
        this.hour=this.hour+12;
    }else if(this.meridian=="a"&&this.hour==12){
        this.hour=0;
    }
}
if(this.weekday&&!this.day&&!this.days){
    var temp=Date[this.weekday]();
    this.day=temp.getDate();
    if(temp.getMonth()!==today.getMonth()){
        this.month=temp.getMonth();
    }
}
if((this.month||this.month===0)&&!this.day){
    this.day=1;
}
if(!this.orient&&!this.operator&&this.unit=="week"&&this.value&&!this.day&&!this.month){
    return Date.today().setWeek(this.value);
}
if(expression&&this.timezone&&this.day&&this.days){
    this.day=this.days;
}
return(expression)?today.add(this):today.set(this);
}
};

var _=$D.Parsing.Operators,g=$D.Grammar,t=$D.Translator,_fn;
g.datePartDelimiter=_.rtoken(/^([\s\-\.\,\/\x27]+)/);
g.timePartDelimiter=_.stoken(":");
g.whiteSpace=_.rtoken(/^\s*/);
g.generalDelimiter=_.rtoken(/^(([\s\,]|at|@|on)+)/);
var _C={};

g.ctoken=function(keys){
    var fn=_C[keys];
    if(!fn){
        var c=$D.CultureInfo.regexPatterns;
        var kx=keys.split(/\s+/),px=[];
        for(var i=0;i<kx.length;i++){
            px.push(_.replace(_.rtoken(c[kx[i]]),kx[i]));
        }
        fn=_C[keys]=_.any.apply(null,px);
    }
    return fn;
};

g.ctoken2=function(key){
    return _.rtoken($D.CultureInfo.regexPatterns[key]);
};

g.h=_.cache(_.process(_.rtoken(/^(0[0-9]|1[0-2]|[1-9])/),t.hour));
g.hh=_.cache(_.process(_.rtoken(/^(0[0-9]|1[0-2])/),t.hour));
g.H=_.cache(_.process(_.rtoken(/^([0-1][0-9]|2[0-3]|[0-9])/),t.hour));
g.HH=_.cache(_.process(_.rtoken(/^([0-1][0-9]|2[0-3])/),t.hour));
g.m=_.cache(_.process(_.rtoken(/^([0-5][0-9]|[0-9])/),t.minute));
g.mm=_.cache(_.process(_.rtoken(/^[0-5][0-9]/),t.minute));
g.s=_.cache(_.process(_.rtoken(/^([0-5][0-9]|[0-9])/),t.second));
g.ss=_.cache(_.process(_.rtoken(/^[0-5][0-9]/),t.second));
g.hms=_.cache(_.sequence([g.H,g.m,g.s],g.timePartDelimiter));
g.t=_.cache(_.process(g.ctoken2("shortMeridian"),t.meridian));
g.tt=_.cache(_.process(g.ctoken2("longMeridian"),t.meridian));
g.z=_.cache(_.process(_.rtoken(/^((\+|\-)\s*\d\d\d\d)|((\+|\-)\d\d\:?\d\d)/),t.timezone));
g.zz=_.cache(_.process(_.rtoken(/^((\+|\-)\s*\d\d\d\d)|((\+|\-)\d\d\:?\d\d)/),t.timezone));
g.zzz=_.cache(_.process(g.ctoken2("timezone"),t.timezone));
g.timeSuffix=_.each(_.ignore(g.whiteSpace),_.set([g.tt,g.zzz]));
g.time=_.each(_.optional(_.ignore(_.stoken("T"))),g.hms,g.timeSuffix);
g.d=_.cache(_.process(_.each(_.rtoken(/^([0-2]\d|3[0-1]|\d)/),_.optional(g.ctoken2("ordinalSuffix"))),t.day));
g.dd=_.cache(_.process(_.each(_.rtoken(/^([0-2]\d|3[0-1])/),_.optional(g.ctoken2("ordinalSuffix"))),t.day));
g.ddd=g.dddd=_.cache(_.process(g.ctoken("sun mon tue wed thu fri sat"),function(s){
    return function(){
        this.weekday=s;
    };

}));
g.M=_.cache(_.process(_.rtoken(/^(1[0-2]|0\d|\d)/),t.month));
g.MM=_.cache(_.process(_.rtoken(/^(1[0-2]|0\d)/),t.month));
g.MMM=g.MMMM=_.cache(_.process(g.ctoken("jan feb mar apr may jun jul aug sep oct nov dec"),t.month));
g.y=_.cache(_.process(_.rtoken(/^(\d\d?)/),t.year));
g.yy=_.cache(_.process(_.rtoken(/^(\d\d)/),t.year));
g.yyy=_.cache(_.process(_.rtoken(/^(\d\d?\d?\d?)/),t.year));
g.yyyy=_.cache(_.process(_.rtoken(/^(\d\d\d\d)/),t.year));
_fn=function(){
    return _.each(_.any.apply(null,arguments),_.not(g.ctoken2("timeContext")));
};

g.day=_fn(g.d,g.dd);
g.month=_fn(g.M,g.MMM);
g.year=_fn(g.yyyy,g.yy);
g.orientation=_.process(g.ctoken("past future"),function(s){
    return function(){
        this.orient=s;
    };

});
g.operator=_.process(g.ctoken("add subtract"),function(s){
    return function(){
        this.operator=s;
    };

});
g.rday=_.process(g.ctoken("yesterday tomorrow today now"),t.rday);
g.unit=_.process(g.ctoken("second minute hour day week month year"),function(s){
    return function(){
        this.unit=s;
    };

});
g.value=_.process(_.rtoken(/^\d\d?(st|nd|rd|th)?/),function(s){
    return function(){
        this.value=s.replace(/\D/g,"");
    };

});
g.expression=_.set([g.rday,g.operator,g.value,g.unit,g.orientation,g.ddd,g.MMM]);
_fn=function(){
    return _.set(arguments,g.datePartDelimiter);
};

g.mdy=_fn(g.ddd,g.month,g.day,g.year);
g.ymd=_fn(g.ddd,g.year,g.month,g.day);
g.dmy=_fn(g.ddd,g.day,g.month,g.year);
g.date=function(s){
    return((g[$D.CultureInfo.dateElementOrder]||g.mdy).call(this,s));
};

g.format=_.process(_.many(_.any(_.process(_.rtoken(/^(dd?d?d?|MM?M?M?|yy?y?y?|hh?|HH?|mm?|ss?|tt?|zz?z?)/),function(fmt){
    if(g[fmt]){
        return g[fmt];
    }else{
        throw $D.Parsing.Exception(fmt);
    }
}),_.process(_.rtoken(/^[^dMyhHmstz]+/),function(s){
    return _.ignore(_.stoken(s));
}))),function(rules){
    return _.process(_.each.apply(null,rules),t.finishExact);
});
var _F={};

var _get=function(f){
    return _F[f]=(_F[f]||g.format(f)[0]);
};

g.formats=function(fx){
    if(fx instanceof Array){
        var rx=[];
        for(var i=0;i<fx.length;i++){
            rx.push(_get(fx[i]));
        }
        return _.any.apply(null,rx);
    }else{
        return _get(fx);
    }
};

g._formats=g.formats(["\"yyyy-MM-ddTHH:mm:ssZ\"","yyyy-MM-ddTHH:mm:ssZ","yyyy-MM-ddTHH:mm:ssz","yyyy-MM-ddTHH:mm:ss","yyyy-MM-ddTHH:mmZ","yyyy-MM-ddTHH:mmz","yyyy-MM-ddTHH:mm","ddd, MMM dd, yyyy H:mm:ss tt","ddd MMM d yyyy HH:mm:ss zzz","MMddyyyy","ddMMyyyy","Mddyyyy","ddMyyyy","Mdyyyy","dMyyyy","yyyy","Mdyy","dMyy","d"]);
g._start=_.process(_.set([g.date,g.time,g.expression],g.generalDelimiter,g.whiteSpace),t.finish);
g.start=function(s){
    try{
        var r=g._formats.call({},s);
        if(r[1].length===0){
            return r;
        }
    }catch(e){}
return g._start.call({},s);
};

$D._parse=$D.parse;
$D.parse=function(s){
    var r=null;
    if(!s){
        return null;
    }
    if(s instanceof Date){
        return s;
    }
    try{
        r=$D.Grammar.start.call({},s.replace(/^\s*(\S*(\s+\S+)*)\s*$/,"$1"));
    }catch(e){
        return null;
    }
    return((r[1].length===0)?r[0]:null);
};

$D.getParseFunction=function(fx){
    var fn=$D.Grammar.formats(fx);
    return function(s){
        var r=null;
        try{
            r=fn.call({},s);
        }catch(e){
            return null;
        }
        return((r[1].length===0)?r[0]:null);
    };

};

$D.parseExact=function(s,fx){
    return $D.getParseFunction(fx)(s);
};

}());
;
(function(){
    var $D=Date,$P=$D.prototype,$N=Number.prototype;
    $P._orient=+1;
    $P._nth=null;
    $P._is=false;
    $P._same=false;
    $P._isSecond=false;
    $N._dateElement="day";
    $P.next=function(){
        this._orient=+1;
        return this;
    };
    
    $D.next=function(){
        return $D.today().next();
    };
    
    $P.last=$P.prev=$P.previous=function(){
        this._orient=-1;
        return this;
    };
    
    $D.last=$D.prev=$D.previous=function(){
        return $D.today().last();
    };
    
    $P.is=function(){
        this._is=true;
        return this;
    };
    
    $P.same=function(){
        this._same=true;
        this._isSecond=false;
        return this;
    };
    
    $P.today=function(){
        return this.same().day();
    };
    
    $P.weekday=function(){
        if(this._is){
            this._is=false;
            return(!this.is().sat()&&!this.is().sun());
        }
        return false;
    };
    
    $P.at=function(time){
        return(typeof time==="string")?$D.parse(this.toString("d")+" "+time):this.set(time);
    };
    
    $N.fromNow=$N.after=function(date){
        var c={};
        
        c[this._dateElement]=this;
        return((!date)?new Date():date.clone()).add(c);
    };
    
    $N.ago=$N.before=function(date){
        var c={};
        
        c[this._dateElement]=this*-1;
        return((!date)?new Date():date.clone()).add(c);
    };
    
    var dx=("sunday monday tuesday wednesday thursday friday saturday").split(/\s/),mx=("january february march april may june july august september october november december").split(/\s/),px=("Millisecond Second Minute Hour Day Week Month Year").split(/\s/),pxf=("Milliseconds Seconds Minutes Hours Date Week Month FullYear").split(/\s/),nth=("final first second third fourth fifth").split(/\s/),de;
    $P.toObject=function(){
        var o={};
        
        for(var i=0;i<px.length;i++){
            o[px[i].toLowerCase()]=this["get"+pxf[i]]();
        }
        return o;
    };
    
    $D.fromObject=function(config){
        config.week=null;
        return Date.today().set(config);
    };
    
    var df=function(n){
        return function(){
            if(this._is){
                this._is=false;
                return this.getDay()==n;
            }
            if(this._nth!==null){
                if(this._isSecond){
                    this.addSeconds(this._orient*-1);
                }
                this._isSecond=false;
                var ntemp=this._nth;
                this._nth=null;
                var temp=this.clone().moveToLastDayOfMonth();
                this.moveToNthOccurrence(n,ntemp);
                if(this>temp){
                    throw new RangeError($D.getDayName(n)+" does not occur "+ntemp+" times in the month of "+$D.getMonthName(temp.getMonth())+" "+temp.getFullYear()+".");
                }
                return this;
            }
            return this.moveToDayOfWeek(n,this._orient);
        };
    
};

var sdf=function(n){
    return function(){
        var t=$D.today(),shift=n-t.getDay();
        if(n===0&&$D.CultureInfo.firstDayOfWeek===1&&t.getDay()!==0){
            shift=shift+7;
        }
        return t.addDays(shift);
    };

};

for(var i=0;i<dx.length;i++){
    $D[dx[i].toUpperCase()]=$D[dx[i].toUpperCase().substring(0,3)]=i;
    $D[dx[i]]=$D[dx[i].substring(0,3)]=sdf(i);
    $P[dx[i]]=$P[dx[i].substring(0,3)]=df(i);
}
var mf=function(n){
    return function(){
        if(this._is){
            this._is=false;
            return this.getMonth()===n;
        }
        return this.moveToMonth(n,this._orient);
    };

};

var smf=function(n){
    return function(){
        return $D.today().set({
            month:n,
            day:1
        });
    };

};

for(var j=0;j<mx.length;j++){
    $D[mx[j].toUpperCase()]=$D[mx[j].toUpperCase().substring(0,3)]=j;
    $D[mx[j]]=$D[mx[j].substring(0,3)]=smf(j);
    $P[mx[j]]=$P[mx[j].substring(0,3)]=mf(j);
}
var ef=function(j){
    return function(){
        if(this._isSecond){
            this._isSecond=false;
            return this;
        }
        if(this._same){
            this._same=this._is=false;
            var o1=this.toObject(),o2=(arguments[0]||new Date()).toObject(),v="",k=j.toLowerCase();
            for(var m=(px.length-1);m>-1;m--){
                v=px[m].toLowerCase();
                if(o1[v]!=o2[v]){
                    return false;
                }
                if(k==v){
                    break;
                }
            }
        return true;
    }
    if(j.substring(j.length-1)!="s"){
        j+="s";
    }
    return this["add"+j](this._orient);
};

};

var nf=function(n){
    return function(){
        this._dateElement=n;
        return this;
    };

};

for(var k=0;k<px.length;k++){
    de=px[k].toLowerCase();
    $P[de]=$P[de+"s"]=ef(px[k]);
    $N[de]=$N[de+"s"]=nf(de);
}
$P._ss=ef("Second");
var nthfn=function(n){
    return function(dayOfWeek){
        if(this._same){
            return this._ss(arguments[0]);
        }
        if(dayOfWeek||dayOfWeek===0){
            return this.moveToNthOccurrence(dayOfWeek,n);
        }
        this._nth=n;
        if(n===2&&(dayOfWeek===undefined||dayOfWeek===null)){
            this._isSecond=true;
            return this.addSeconds(this._orient);
        }
        return this;
    };

};

for(var l=0;l<nth.length;l++){
    $P[nth[l]]=(l===0)?nthfn(-1):nthfn(l);
}
}());
;
(function(){
    var $D=Date,$P=$D.prototype,$f=[],p=function(s,l){
        if(!l){
            l=2;
        }
        return("000"+s).slice(l*-1);
    };
    
    $D.normalizeFormat=function(format){
        $f=[];
        var t=new Date().$format(format);
        return $f.join("");
    };
    
    $D.strftime=function(format,time){
        return new Date(time*1000).$format(format);
    };
    
    $D.strtotime=function(time){
        var d=$D.parse(time);
        d.addMinutes(d.getTimezoneOffset()*-1);
        return Math.round($D.UTC(d.getUTCFullYear(),d.getUTCMonth(),d.getUTCDate(),d.getUTCHours(),d.getUTCMinutes(),d.getUTCSeconds(),d.getUTCMilliseconds())/1000);
    };
    
    $P.$format=function(format){
        var x=this,y,t=function(v){
            $f.push(v);
            return x.toString(v);
        };
        
        return format?format.replace(/(%|\\)?.|%%/g,function(m){
            if(m.charAt(0)==="\\"||m.substring(0,2)==="%%"){
                return m.replace("\\","").replace("%%","%");
            }
            switch(m){
                case"d":case"%d":
                    return t("dd");
                case"D":case"%a":
                    return t("ddd");
                case"j":case"%e":
                    return t("d");
                case"l":case"%A":
                    return t("dddd");
                case"N":case"%u":
                    return x.getDay()+1;
                case"S":
                    return t("S");
                case"w":case"%w":
                    return x.getDay();
                case"z":
                    return x.getOrdinalNumber();
                case"%j":
                    return p(x.getOrdinalNumber(),3);
                case"%U":
                    var d1=x.clone().set({
                    month:0,
                    day:1
                }).addDays(-1).moveToDayOfWeek(0),d2=x.clone().addDays(1).moveToDayOfWeek(0,-1);
                    return(d2<d1)?"00":p((d2.getOrdinalNumber()-d1.getOrdinalNumber())/7+1);
                case"W":case"%V":
                    return x.getISOWeek();
                case"%W":
                    return p(x.getWeek());
                case"F":case"%B":
                    return t("MMMM");
                case"m":case"%m":
                    return t("MM");
                case"M":case"%b":case"%h":
                    return t("MMM");
                case"n":
                    return t("M");
                case"t":
                    return $D.getDaysInMonth(x.getFullYear(),x.getMonth());
                case"L":
                    return($D.isLeapYear(x.getFullYear()))?1:0;
                case"o":case"%G":
                    return x.setWeek(x.getISOWeek()).toString("yyyy");
                case"%g":
                    return x.$format("%G").slice(-2);
                case"Y":case"%Y":
                    return t("yyyy");
                case"y":case"%y":
                    return t("yy");
                case"a":case"%p":
                    return t("tt").toLowerCase();
                case"A":
                    return t("tt").toUpperCase();
                case"g":case"%I":
                    return t("h");
                case"G":
                    return t("H");
                case"h":
                    return t("hh");
                case"H":case"%H":
                    return t("HH");
                case"i":case"%M":
                    return t("mm");
                case"s":case"%S":
                    return t("ss");
                case"u":
                    return p(x.getMilliseconds(),3);
                case"I":
                    return(x.isDaylightSavingTime())?1:0;
                case"O":
                    return x.getUTCOffset();
                case"P":
                    y=x.getUTCOffset();
                    return y.substring(0,y.length-2)+":"+y.substring(y.length-2);
                case"e":case"T":case"%z":case"%Z":
                    return x.getTimezone();
                case"Z":
                    return x.getTimezoneOffset()*-60;
                case"B":
                    var now=new Date();
                    return Math.floor(((now.getHours()*3600)+(now.getMinutes()*60)+now.getSeconds()+(now.getTimezoneOffset()+60)*60)/86.4);
                case"c":
                    return x.toISOString().replace(/\"/g,"");
                case"U":
                    return $D.strtotime("now");
                case"%c":
                    return t("d")+" "+t("t");
                case"%C":
                    return Math.floor(x.getFullYear()/100+1);
                case"%D":
                    return t("MM/dd/yy");
                case"%n":
                    return"\\n";
                case"%t":
                    return"\\t";
                case"%r":
                    return t("hh:mm tt");
                case"%R":
                    return t("H:mm");
                case"%T":
                    return t("H:mm:ss");
                case"%x":
                    return t("d");
                case"%X":
                    return t("t");
                default:
                    $f.push(m);
                    return m;
            }
        }):this._toString();
};

if(!$P.format){
    $P.format=$P.$format;
}
}());
;
(function(window,undefined){
    var
    rootjQuery,readyList,document=window.document,location=window.location,navigator=window.navigator,_jQuery=window.jQuery,_$=window.$,core_push=Array.prototype.push,core_slice=Array.prototype.slice,core_indexOf=Array.prototype.indexOf,core_toString=Object.prototype.toString,core_hasOwn=Object.prototype.hasOwnProperty,core_trim=String.prototype.trim,jQuery=function(selector,context){
        return new jQuery.fn.init(selector,context,rootjQuery);
    },core_pnum=/[\-+]?(?:\d*\.|)\d+(?:[eE][\-+]?\d+|)/.source,core_rnotwhite=/\S/,core_rspace=/\s+/,rtrim=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,rquickExpr=/^(?:[^#<]*(<[\w\W]+>)[^>]*$|#([\w\-]*)$)/,rsingleTag=/^<(\w+)\s*\/?>(?:<\/\1>|)$/,rvalidchars=/^[\],:{}\s]*$/,rvalidbraces=/(?:^|:|,)(?:\s*\[)+/g,rvalidescape=/\\(?:["\\\/bfnrt]|u[\da-fA-F]{4})/g,rvalidtokens=/"[^"\\\r\n]*"|true|false|null|-?(?:\d\d*\.|)\d+(?:[eE][\-+]?\d+|)/g,rmsPrefix=/^-ms-/,rdashAlpha=/-([\da-z])/gi,fcamelCase=function(all,letter){
        return(letter+"").toUpperCase();
    },DOMContentLoaded=function(){
        if(document.addEventListener){
            document.removeEventListener("DOMContentLoaded",DOMContentLoaded,false);
            jQuery.ready();
        }else if(document.readyState==="complete"){
            document.detachEvent("onreadystatechange",DOMContentLoaded);
            jQuery.ready();
        }
    },class2type={};

jQuery.fn=jQuery.prototype={
    constructor:jQuery,
    init:function(selector,context,rootjQuery){
        var match,elem,ret,doc;
        if(!selector){
            return this;
        }
        if(selector.nodeType){
            this.context=this[0]=selector;
            this.length=1;
            return this;
        }
        if(typeof selector==="string"){
            if(selector.charAt(0)==="<"&&selector.charAt(selector.length-1)===">"&&selector.length>=3){
                match=[null,selector,null];
            }else{
                match=rquickExpr.exec(selector);
            }
            if(match&&(match[1]||!context)){
                if(match[1]){
                    context=context instanceof jQuery?context[0]:context;
                    doc=(context&&context.nodeType?context.ownerDocument||context:document);
                    selector=jQuery.parseHTML(match[1],doc,true);
                    if(rsingleTag.test(match[1])&&jQuery.isPlainObject(context)){
                        this.attr.call(selector,context,true);
                    }
                    return jQuery.merge(this,selector);
                }else{
                    elem=document.getElementById(match[2]);
                    if(elem&&elem.parentNode){
                        if(elem.id!==match[2]){
                            return rootjQuery.find(selector);
                        }
                        this.length=1;
                        this[0]=elem;
                    }
                    this.context=document;
                    this.selector=selector;
                    return this;
                }
            }else if(!context||context.jquery){
            return(context||rootjQuery).find(selector);
        }else{
            return this.constructor(context).find(selector);
        }
    }else if(jQuery.isFunction(selector)){
    return rootjQuery.ready(selector);
}
if(selector.selector!==undefined){
    this.selector=selector.selector;
    this.context=selector.context;
}
return jQuery.makeArray(selector,this);
    },
    selector:"",
    jquery:"1.8.3",
    length:0,
    size:function(){
        return this.length;
    },
    toArray:function(){
        return core_slice.call(this);
    },
    get:function(num){
        return num==null?this.toArray():(num<0?this[this.length+num]:this[num]);
    },
    pushStack:function(elems,name,selector){
        var ret=jQuery.merge(this.constructor(),elems);
        ret.prevObject=this;
        ret.context=this.context;
        if(name==="find"){
            ret.selector=this.selector+(this.selector?" ":"")+selector;
        }else if(name){
            ret.selector=this.selector+"."+name+"("+selector+")";
        }
        return ret;
    },
    each:function(callback,args){
        return jQuery.each(this,callback,args);
    },
    ready:function(fn){
        jQuery.ready.promise().done(fn);
        return this;
    },
    eq:function(i){
        i=+i;
        return i===-1?this.slice(i):this.slice(i,i+1);
    },
    first:function(){
        return this.eq(0);
    },
    last:function(){
        return this.eq(-1);
    },
    slice:function(){
        return this.pushStack(core_slice.apply(this,arguments),"slice",core_slice.call(arguments).join(","));
    },
    map:function(callback){
        return this.pushStack(jQuery.map(this,function(elem,i){
            return callback.call(elem,i,elem);
        }));
    },
    end:function(){
        return this.prevObject||this.constructor(null);
    },
    push:core_push,
    sort:[].sort,
    splice:[].splice
    };
    
jQuery.fn.init.prototype=jQuery.fn;
jQuery.extend=jQuery.fn.extend=function(){
    var options,name,src,copy,copyIsArray,clone,target=arguments[0]||{},i=1,length=arguments.length,deep=false;
    if(typeof target==="boolean"){
        deep=target;
        target=arguments[1]||{};
        
        i=2;
    }
    if(typeof target!=="object"&&!jQuery.isFunction(target)){
        target={};
    
}
if(length===i){
    target=this;
    --i;
}
for(;i<length;i++){
    if((options=arguments[i])!=null){
        for(name in options){
            src=target[name];
            copy=options[name];
            if(target===copy){
                continue;
            }
            if(deep&&copy&&(jQuery.isPlainObject(copy)||(copyIsArray=jQuery.isArray(copy)))){
                if(copyIsArray){
                    copyIsArray=false;
                    clone=src&&jQuery.isArray(src)?src:[];
                }else{
                    clone=src&&jQuery.isPlainObject(src)?src:{};
                
            }
            target[name]=jQuery.extend(deep,clone,copy);
        }else if(copy!==undefined){
            target[name]=copy;
        }
        }
        }
}
return target;
};

jQuery.extend({
    noConflict:function(deep){
        if(window.$===jQuery){
            window.$=_$;
        }
        if(deep&&window.jQuery===jQuery){
            window.jQuery=_jQuery;
        }
        return jQuery;
    },
    isReady:false,
    readyWait:1,
    holdReady:function(hold){
        if(hold){
            jQuery.readyWait++;
        }else{
            jQuery.ready(true);
        }
    },
ready:function(wait){
    if(wait===true?--jQuery.readyWait:jQuery.isReady){
        return;
    }
    if(!document.body){
        return setTimeout(jQuery.ready,1);
    }
    jQuery.isReady=true;
    if(wait!==true&&--jQuery.readyWait>0){
        return;
    }
    readyList.resolveWith(document,[jQuery]);
    if(jQuery.fn.trigger){
        jQuery(document).trigger("ready").off("ready");
    }
},
isFunction:function(obj){
    return jQuery.type(obj)==="function";
},
isArray:Array.isArray||function(obj){
    return jQuery.type(obj)==="array";
},
isWindow:function(obj){
    return obj!=null&&obj==obj.window;
},
isNumeric:function(obj){
    return!isNaN(parseFloat(obj))&&isFinite(obj);
},
type:function(obj){
    return obj==null?String(obj):class2type[core_toString.call(obj)]||"object";
},
isPlainObject:function(obj){
    if(!obj||jQuery.type(obj)!=="object"||obj.nodeType||jQuery.isWindow(obj)){
        return false;
    }
    try{
        if(obj.constructor&&!core_hasOwn.call(obj,"constructor")&&!core_hasOwn.call(obj.constructor.prototype,"isPrototypeOf")){
            return false;
        }
    }catch(e){
    return false;
}
var key;
for(key in obj){}
return key===undefined||core_hasOwn.call(obj,key);
},
isEmptyObject:function(obj){
    var name;
    for(name in obj){
        return false;
    }
    return true;
},
error:function(msg){
    throw new Error(msg);
},
parseHTML:function(data,context,scripts){
    var parsed;
    if(!data||typeof data!=="string"){
        return null;
    }
    if(typeof context==="boolean"){
        scripts=context;
        context=0;
    }
    context=context||document;
    if((parsed=rsingleTag.exec(data))){
        return[context.createElement(parsed[1])];
    }
    parsed=jQuery.buildFragment([data],context,scripts?null:[]);
    return jQuery.merge([],(parsed.cacheable?jQuery.clone(parsed.fragment):parsed.fragment).childNodes);
},
parseJSON:function(data){
    if(!data||typeof data!=="string"){
        return null;
    }
    data=jQuery.trim(data);
    if(window.JSON&&window.JSON.parse){
        return window.JSON.parse(data);
    }
    if(rvalidchars.test(data.replace(rvalidescape,"@").replace(rvalidtokens,"]").replace(rvalidbraces,""))){
        return(new Function("return "+data))();
    }
    jQuery.error("Invalid JSON: "+data);
},
parseXML:function(data){
    var xml,tmp;
    if(!data||typeof data!=="string"){
        return null;
    }
    try{
        if(window.DOMParser){
            tmp=new DOMParser();
            xml=tmp.parseFromString(data,"text/xml");
        }else{
            xml=new ActiveXObject("Microsoft.XMLDOM");
            xml.async="false";
            xml.loadXML(data);
        }
    }catch(e){
    xml=undefined;
}
if(!xml||!xml.documentElement||xml.getElementsByTagName("parsererror").length){
    jQuery.error("Invalid XML: "+data);
}
return xml;
},
noop:function(){},
globalEval:function(data){
    if(data&&core_rnotwhite.test(data)){
        (window.execScript||function(data){
            window["eval"].call(window,data);
        })(data);
    }
},
camelCase:function(string){
    return string.replace(rmsPrefix,"ms-").replace(rdashAlpha,fcamelCase);
},
nodeName:function(elem,name){
    return elem.nodeName&&elem.nodeName.toLowerCase()===name.toLowerCase();
},
each:function(obj,callback,args){
    var name,i=0,length=obj.length,isObj=length===undefined||jQuery.isFunction(obj);
    if(args){
        if(isObj){
            for(name in obj){
                if(callback.apply(obj[name],args)===false){
                    break;
                }
            }
            }else{
    for(;i<length;){
        if(callback.apply(obj[i++],args)===false){
            break;
        }
    }
    }
}else{
    if(isObj){
        for(name in obj){
            if(callback.call(obj[name],name,obj[name])===false){
                break;
            }
        }
        }else{
    for(;i<length;){
        if(callback.call(obj[i],i,obj[i++])===false){
            break;
        }
    }
    }
}
return obj;
},
trim:core_trim&&!core_trim.call("\uFEFF\xA0")?function(text){
    return text==null?"":core_trim.call(text);
}:function(text){
    return text==null?"":(text+"").replace(rtrim,"");
},
makeArray:function(arr,results){
    var type,ret=results||[];
    if(arr!=null){
        type=jQuery.type(arr);
        if(arr.length==null||type==="string"||type==="function"||type==="regexp"||jQuery.isWindow(arr)){
            core_push.call(ret,arr);
        }else{
            jQuery.merge(ret,arr);
        }
    }
return ret;
},
inArray:function(elem,arr,i){
    var len;
    if(arr){
        if(core_indexOf){
            return core_indexOf.call(arr,elem,i);
        }
        len=arr.length;
        i=i?i<0?Math.max(0,len+i):i:0;
        for(;i<len;i++){
            if(i in arr&&arr[i]===elem){
                return i;
            }
        }
        }
return-1;
},
merge:function(first,second){
    var l=second.length,i=first.length,j=0;
    if(typeof l==="number"){
        for(;j<l;j++){
            first[i++]=second[j];
        }
        }else{
    while(second[j]!==undefined){
        first[i++]=second[j++];
    }
}
first.length=i;
return first;
},
grep:function(elems,callback,inv){
    var retVal,ret=[],i=0,length=elems.length;
    inv=!!inv;
    for(;i<length;i++){
        retVal=!!callback(elems[i],i);
        if(inv!==retVal){
            ret.push(elems[i]);
        }
    }
return ret;
},
map:function(elems,callback,arg){
    var value,key,ret=[],i=0,length=elems.length,isArray=elems instanceof jQuery||length!==undefined&&typeof length==="number"&&((length>0&&elems[0]&&elems[length-1])||length===0||jQuery.isArray(elems));
    if(isArray){
        for(;i<length;i++){
            value=callback(elems[i],i,arg);
            if(value!=null){
                ret[ret.length]=value;
            }
        }
        }else{
    for(key in elems){
        value=callback(elems[key],key,arg);
        if(value!=null){
            ret[ret.length]=value;
        }
    }
    }
return ret.concat.apply([],ret);
},
guid:1,
proxy:function(fn,context){
    var tmp,args,proxy;
    if(typeof context==="string"){
        tmp=fn[context];
        context=fn;
        fn=tmp;
    }
    if(!jQuery.isFunction(fn)){
        return undefined;
    }
    args=core_slice.call(arguments,2);
    proxy=function(){
        return fn.apply(context,args.concat(core_slice.call(arguments)));
    };
    
    proxy.guid=fn.guid=fn.guid||jQuery.guid++;
    return proxy;
},
access:function(elems,fn,key,value,chainable,emptyGet,pass){
    var exec,bulk=key==null,i=0,length=elems.length;
    if(key&&typeof key==="object"){
        for(i in key){
            jQuery.access(elems,fn,i,key[i],1,emptyGet,value);
        }
        chainable=1;
    }else if(value!==undefined){
        exec=pass===undefined&&jQuery.isFunction(value);
        if(bulk){
            if(exec){
                exec=fn;
                fn=function(elem,key,value){
                    return exec.call(jQuery(elem),value);
                };
            
        }else{
            fn.call(elems,value);
            fn=null;
        }
    }
if(fn){
    for(;i<length;i++){
        fn(elems[i],key,exec?value.call(elems[i],i,fn(elems[i],key)):value,pass);
    }
    }
chainable=1;
}
return chainable?elems:bulk?fn.call(elems):length?fn(elems[0],key):emptyGet;
},
now:function(){
    return(new Date()).getTime();
}
});
jQuery.ready.promise=function(obj){
    if(!readyList){
        readyList=jQuery.Deferred();
        if(document.readyState==="complete"){
            setTimeout(jQuery.ready,1);
        }else if(document.addEventListener){
            document.addEventListener("DOMContentLoaded",DOMContentLoaded,false);
            window.addEventListener("load",jQuery.ready,false);
        }else{
            document.attachEvent("onreadystatechange",DOMContentLoaded);
            window.attachEvent("onload",jQuery.ready);
            var top=false;
            try{
                top=window.frameElement==null&&document.documentElement;
            }catch(e){}
            if(top&&top.doScroll){
                (function doScrollCheck(){
                    if(!jQuery.isReady){
                        try{
                            top.doScroll("left");
                        }catch(e){
                            return setTimeout(doScrollCheck,50);
                        }
                        jQuery.ready();
                    }
                })();
        }
    }
}
return readyList.promise(obj);
};

jQuery.each("Boolean Number String Function Array Date RegExp Object".split(" "),function(i,name){
    class2type["[object "+name+"]"]=name.toLowerCase();
});
rootjQuery=jQuery(document);
var optionsCache={};

function createOptions(options){
    var object=optionsCache[options]={};
    
    jQuery.each(options.split(core_rspace),function(_,flag){
        object[flag]=true;
    });
    return object;
}
jQuery.Callbacks=function(options){
    options=typeof options==="string"?(optionsCache[options]||createOptions(options)):jQuery.extend({},options);
    var
    memory,fired,firing,firingStart,firingLength,firingIndex,list=[],stack=!options.once&&[],fire=function(data){
        memory=options.memory&&data;
        fired=true;
        firingIndex=firingStart||0;
        firingStart=0;
        firingLength=list.length;
        firing=true;
        for(;list&&firingIndex<firingLength;firingIndex++){
            if(list[firingIndex].apply(data[0],data[1])===false&&options.stopOnFalse){
                memory=false;
                break;
            }
        }
    firing=false;
    if(list){
        if(stack){
            if(stack.length){
                fire(stack.shift());
            }
        }else if(memory){
        list=[];
    }else{
        self.disable();
    }
}
},self={
    add:function(){
        if(list){
            var start=list.length;
            (function add(args){
                jQuery.each(args,function(_,arg){
                    var type=jQuery.type(arg);
                    if(type==="function"){
                        if(!options.unique||!self.has(arg)){
                            list.push(arg);
                        }
                    }else if(arg&&arg.length&&type!=="string"){
                    add(arg);
                }
                });
        })(arguments);
    if(firing){
        firingLength=list.length;
    }else if(memory){
        firingStart=start;
        fire(memory);
    }
}
return this;
},
remove:function(){
    if(list){
        jQuery.each(arguments,function(_,arg){
            var index;
            while((index=jQuery.inArray(arg,list,index))>-1){
                list.splice(index,1);
                if(firing){
                    if(index<=firingLength){
                        firingLength--;
                    }
                    if(index<=firingIndex){
                        firingIndex--;
                    }
                }
            }
        });
}
return this;
},
has:function(fn){
    return jQuery.inArray(fn,list)>-1;
},
empty:function(){
    list=[];
    return this;
},
disable:function(){
    list=stack=memory=undefined;
    return this;
},
disabled:function(){
    return!list;
},
lock:function(){
    stack=undefined;
    if(!memory){
        self.disable();
    }
    return this;
},
locked:function(){
    return!stack;
},
fireWith:function(context,args){
    args=args||[];
    args=[context,args.slice?args.slice():args];
    if(list&&(!fired||stack)){
        if(firing){
            stack.push(args);
        }else{
            fire(args);
        }
    }
return this;
},
fire:function(){
    self.fireWith(this,arguments);
    return this;
},
fired:function(){
    return!!fired;
}
};

return self;
};

jQuery.extend({
    Deferred:function(func){
        var tuples=[["resolve","done",jQuery.Callbacks("once memory"),"resolved"],["reject","fail",jQuery.Callbacks("once memory"),"rejected"],["notify","progress",jQuery.Callbacks("memory")]],state="pending",promise={
            state:function(){
                return state;
            },
            always:function(){
                deferred.done(arguments).fail(arguments);
                return this;
            },
            then:function(){
                var fns=arguments;
                return jQuery.Deferred(function(newDefer){
                    jQuery.each(tuples,function(i,tuple){
                        var action=tuple[0],fn=fns[i];
                        deferred[tuple[1]](jQuery.isFunction(fn)?function(){
                            var returned=fn.apply(this,arguments);
                            if(returned&&jQuery.isFunction(returned.promise)){
                                returned.promise().done(newDefer.resolve).fail(newDefer.reject).progress(newDefer.notify);
                            }else{
                                newDefer[action+"With"](this===deferred?newDefer:this,[returned]);
                            }
                        }:newDefer[action]);
                    });
                fns=null;
                }).promise();
        },
        promise:function(obj){
            return obj!=null?jQuery.extend(obj,promise):promise;
        }
    },deferred={};

promise.pipe=promise.then;
jQuery.each(tuples,function(i,tuple){
    var list=tuple[2],stateString=tuple[3];
    promise[tuple[1]]=list.add;
    if(stateString){
        list.add(function(){
            state=stateString;
        },tuples[i^1][2].disable,tuples[2][2].lock);
    }
    deferred[tuple[0]]=list.fire;
    deferred[tuple[0]+"With"]=list.fireWith;
});
promise.promise(deferred);
    if(func){
    func.call(deferred,deferred);
}
return deferred;
},
when:function(subordinate){
    var i=0,resolveValues=core_slice.call(arguments),length=resolveValues.length,remaining=length!==1||(subordinate&&jQuery.isFunction(subordinate.promise))?length:0,deferred=remaining===1?subordinate:jQuery.Deferred(),updateFunc=function(i,contexts,values){
        return function(value){
            contexts[i]=this;
            values[i]=arguments.length>1?core_slice.call(arguments):value;
            if(values===progressValues){
                deferred.notifyWith(contexts,values);
            }else if(!(--remaining)){
                deferred.resolveWith(contexts,values);
            }
        };
    
},progressValues,progressContexts,resolveContexts;
if(length>1){
    progressValues=new Array(length);
    progressContexts=new Array(length);
    resolveContexts=new Array(length);
    for(;i<length;i++){
        if(resolveValues[i]&&jQuery.isFunction(resolveValues[i].promise)){
            resolveValues[i].promise().done(updateFunc(i,resolveContexts,resolveValues)).fail(deferred.reject).progress(updateFunc(i,progressContexts,progressValues));
        }else{
            --remaining;
        }
    }
    }
if(!remaining){
    deferred.resolveWith(resolveContexts,resolveValues);
}
return deferred.promise();
}
});
jQuery.support=(function(){
    var support,all,a,select,opt,input,fragment,eventName,i,isSupported,clickFn,div=document.createElement("div");
    div.setAttribute("className","t");
    div.innerHTML="  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>";
    all=div.getElementsByTagName("*");
    a=div.getElementsByTagName("a")[0];
    if(!all||!a||!all.length){
        return{};
    
}
select=document.createElement("select");
    opt=select.appendChild(document.createElement("option"));
    input=div.getElementsByTagName("input")[0];
    a.style.cssText="top:1px;float:left;opacity:.5";
    support={
    leadingWhitespace:(div.firstChild.nodeType===3),
    tbody:!div.getElementsByTagName("tbody").length,
    htmlSerialize:!!div.getElementsByTagName("link").length,
    style:/top/.test(a.getAttribute("style")),
    hrefNormalized:(a.getAttribute("href")==="/a"),
    opacity:/^0.5/.test(a.style.opacity),
    cssFloat:!!a.style.cssFloat,
    checkOn:(input.value==="on"),
    optSelected:opt.selected,
    getSetAttribute:div.className!=="t",
    enctype:!!document.createElement("form").enctype,
    html5Clone:document.createElement("nav").cloneNode(true).outerHTML!=="<:nav></:nav>",
    boxModel:(document.compatMode==="CSS1Compat"),
    submitBubbles:true,
    changeBubbles:true,
    focusinBubbles:false,
    deleteExpando:true,
    noCloneEvent:true,
    inlineBlockNeedsLayout:false,
    shrinkWrapBlocks:false,
    reliableMarginRight:true,
    boxSizingReliable:true,
    pixelPosition:false
};

input.checked=true;
support.noCloneChecked=input.cloneNode(true).checked;
    select.disabled=true;
    support.optDisabled=!opt.disabled;
    try{
    delete div.test;
}catch(e){
    support.deleteExpando=false;
}
    if(!div.addEventListener&&div.attachEvent&&div.fireEvent){
        div.attachEvent("onclick",clickFn=function(){
            support.noCloneEvent=false;
        });
        div.cloneNode(true).fireEvent("onclick");
        div.detachEvent("onclick",clickFn);
    }
    input=document.createElement("input");
    input.value="t";
    input.setAttribute("type","radio");
    support.radioValue=input.value==="t";
    input.setAttribute("checked","checked");
    input.setAttribute("name","t");
    div.appendChild(input);
    fragment=document.createDocumentFragment();
    fragment.appendChild(div.lastChild);
    support.checkClone=fragment.cloneNode(true).cloneNode(true).lastChild.checked;
    support.appendChecked=input.checked;
    fragment.removeChild(input);
    fragment.appendChild(div);
    if(div.attachEvent){
        for(i in{
            submit:true,
            change:true,
            focusin:true
        }){
            eventName="on"+i;
            isSupported=(eventName in div);
            if(!isSupported){
                div.setAttribute(eventName,"return;");
                isSupported=(typeof div[eventName]==="function");
            }
            support[i+"Bubbles"]=isSupported;
        }
        }
jQuery(function(){
    var container,div,tds,marginDiv,divReset="padding:0;margin:0;border:0;display:block;overflow:hidden;",body=document.getElementsByTagName("body")[0];
    if(!body){
        return;
    }
    container=document.createElement("div");
    container.style.cssText="visibility:hidden;border:0;width:0;height:0;position:static;top:0;margin-top:1px";
    body.insertBefore(container,body.firstChild);
    div=document.createElement("div");
    container.appendChild(div);
    div.innerHTML="<table><tr><td></td><td>t</td></tr></table>";
    tds=div.getElementsByTagName("td");
    tds[0].style.cssText="padding:0;margin:0;border:0;display:none";
    isSupported=(tds[0].offsetHeight===0);
    tds[0].style.display="";
    tds[1].style.display="none";
    support.reliableHiddenOffsets=isSupported&&(tds[0].offsetHeight===0);
    div.innerHTML="";
    div.style.cssText="box-sizing:border-box;-moz-box-sizing:border-box;-webkit-box-sizing:border-box;padding:1px;border:1px;display:block;width:4px;margin-top:1%;position:absolute;top:1%;";
    support.boxSizing=(div.offsetWidth===4);
    support.doesNotIncludeMarginInBodyOffset=(body.offsetTop!==1);
    if(window.getComputedStyle){
        support.pixelPosition=(window.getComputedStyle(div,null)||{}).top!=="1%";
        support.boxSizingReliable=(window.getComputedStyle(div,null)||{
            width:"4px"
        }).width==="4px";
        marginDiv=document.createElement("div");
        marginDiv.style.cssText=div.style.cssText=divReset;
        marginDiv.style.marginRight=marginDiv.style.width="0";
        div.style.width="1px";
        div.appendChild(marginDiv);
        support.reliableMarginRight=!parseFloat((window.getComputedStyle(marginDiv,null)||{}).marginRight);
    }
    if(typeof div.style.zoom!=="undefined"){
        div.innerHTML="";
        div.style.cssText=divReset+"width:1px;padding:1px;display:inline;zoom:1";
        support.inlineBlockNeedsLayout=(div.offsetWidth===3);
        div.style.display="block";
        div.style.overflow="visible";
        div.innerHTML="<div></div>";
        div.firstChild.style.width="5px";
        support.shrinkWrapBlocks=(div.offsetWidth!==3);
        container.style.zoom=1;
    }
    body.removeChild(container);
    container=div=tds=marginDiv=null;
});
fragment.removeChild(div);
all=a=select=opt=input=fragment=div=null;
return support;
})();
var rbrace=/(?:\{[\s\S]*\}|\[[\s\S]*\])$/,rmultiDash=/([A-Z])/g;
jQuery.extend({
    cache:{},
    deletedIds:[],
    uuid:0,
    expando:"jQuery"+(jQuery.fn.jquery+Math.random()).replace(/\D/g,""),
    noData:{
        "embed":true,
        "object":"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000",
        "applet":true
    },
    hasData:function(elem){
        elem=elem.nodeType?jQuery.cache[elem[jQuery.expando]]:elem[jQuery.expando];
        return!!elem&&!isEmptyDataObject(elem);
    },
    data:function(elem,name,data,pvt){
        if(!jQuery.acceptData(elem)){
            return;
        }
        var thisCache,ret,internalKey=jQuery.expando,getByName=typeof name==="string",isNode=elem.nodeType,cache=isNode?jQuery.cache:elem,id=isNode?elem[internalKey]:elem[internalKey]&&internalKey;
        if((!id||!cache[id]||(!pvt&&!cache[id].data))&&getByName&&data===undefined){
            return;
        }
        if(!id){
            if(isNode){
                elem[internalKey]=id=jQuery.deletedIds.pop()||jQuery.guid++;
            }else{
                id=internalKey;
            }
        }
    if(!cache[id]){
        cache[id]={};
        
        if(!isNode){
            cache[id].toJSON=jQuery.noop;
        }
    }
if(typeof name==="object"||typeof name==="function"){
    if(pvt){
        cache[id]=jQuery.extend(cache[id],name);
    }else{
        cache[id].data=jQuery.extend(cache[id].data,name);
    }
}
thisCache=cache[id];
if(!pvt){
    if(!thisCache.data){
        thisCache.data={};
    
}
thisCache=thisCache.data;
}
if(data!==undefined){
    thisCache[jQuery.camelCase(name)]=data;
}
if(getByName){
    ret=thisCache[name];
    if(ret==null){
        ret=thisCache[jQuery.camelCase(name)];
    }
}else{
    ret=thisCache;
}
return ret;
},
removeData:function(elem,name,pvt){
    if(!jQuery.acceptData(elem)){
        return;
    }
    var thisCache,i,l,isNode=elem.nodeType,cache=isNode?jQuery.cache:elem,id=isNode?elem[jQuery.expando]:jQuery.expando;
    if(!cache[id]){
        return;
    }
    if(name){
        thisCache=pvt?cache[id]:cache[id].data;
        if(thisCache){
            if(!jQuery.isArray(name)){
                if(name in thisCache){
                    name=[name];
                }else{
                    name=jQuery.camelCase(name);
                    if(name in thisCache){
                        name=[name];
                    }else{
                        name=name.split(" ");
                    }
                }
            }
    for(i=0,l=name.length;i<l;i++){
        delete thisCache[name[i]];
    }
    if(!(pvt?isEmptyDataObject:jQuery.isEmptyObject)(thisCache)){
        return;
    }
}
}
if(!pvt){
    delete cache[id].data;
    if(!isEmptyDataObject(cache[id])){
        return;
    }
}
if(isNode){
    jQuery.cleanData([elem],true);
}else if(jQuery.support.deleteExpando||cache!=cache.window){
    delete cache[id];
}else{
    cache[id]=null;
}
},
_data:function(elem,name,data){
    return jQuery.data(elem,name,data,true);
},
acceptData:function(elem){
    var noData=elem.nodeName&&jQuery.noData[elem.nodeName.toLowerCase()];
    return!noData||noData!==true&&elem.getAttribute("classid")===noData;
}
});
jQuery.fn.extend({
    data:function(key,value){
        var parts,part,attr,name,l,elem=this[0],i=0,data=null;
        if(key===undefined){
            if(this.length){
                data=jQuery.data(elem);
                if(elem.nodeType===1&&!jQuery._data(elem,"parsedAttrs")){
                    attr=elem.attributes;
                    for(l=attr.length;i<l;i++){
                        name=attr[i].name;
                        if(!name.indexOf("data-")){
                            name=jQuery.camelCase(name.substring(5));
                            dataAttr(elem,name,data[name]);
                        }
                    }
                jQuery._data(elem,"parsedAttrs",true);
            }
        }
    return data;
}
if(typeof key==="object"){
    return this.each(function(){
        jQuery.data(this,key);
    });
}
parts=key.split(".",2);
    parts[1]=parts[1]?"."+parts[1]:"";
    part=parts[1]+"!";
    return jQuery.access(this,function(value){
    if(value===undefined){
        data=this.triggerHandler("getData"+part,[parts[0]]);
        if(data===undefined&&elem){
            data=jQuery.data(elem,key);
            data=dataAttr(elem,key,data);
        }
        return data===undefined&&parts[1]?this.data(parts[0]):data;
    }
    parts[1]=value;
    this.each(function(){
        var self=jQuery(this);
        self.triggerHandler("setData"+part,parts);
        jQuery.data(this,key,value);
        self.triggerHandler("changeData"+part,parts);
    });
},null,value,arguments.length>1,null,false);
},
removeData:function(key){
    return this.each(function(){
        jQuery.removeData(this,key);
    });
}
});
function dataAttr(elem,key,data){
    if(data===undefined&&elem.nodeType===1){
        var name="data-"+key.replace(rmultiDash,"-$1").toLowerCase();
        data=elem.getAttribute(name);
        if(typeof data==="string"){
            try{
                data=data==="true"?true:data==="false"?false:data==="null"?null:+data+""===data?+data:rbrace.test(data)?jQuery.parseJSON(data):data;
            }catch(e){}
            jQuery.data(elem,key,data);
        }else{
            data=undefined;
        }
    }
return data;
}
function isEmptyDataObject(obj){
    var name;
    for(name in obj){
        if(name==="data"&&jQuery.isEmptyObject(obj[name])){
            continue;
        }
        if(name!=="toJSON"){
            return false;
        }
    }
return true;
}
jQuery.extend({
    queue:function(elem,type,data){
        var queue;
        if(elem){
            type=(type||"fx")+"queue";
            queue=jQuery._data(elem,type);
            if(data){
                if(!queue||jQuery.isArray(data)){
                    queue=jQuery._data(elem,type,jQuery.makeArray(data));
                }else{
                    queue.push(data);
                }
            }
        return queue||[];
    }
},
dequeue:function(elem,type){
    type=type||"fx";
    var queue=jQuery.queue(elem,type),startLength=queue.length,fn=queue.shift(),hooks=jQuery._queueHooks(elem,type),next=function(){
        jQuery.dequeue(elem,type);
    };
    
    if(fn==="inprogress"){
        fn=queue.shift();
        startLength--;
    }
    if(fn){
        if(type==="fx"){
            queue.unshift("inprogress");
        }
        delete hooks.stop;
        fn.call(elem,next,hooks);
    }
    if(!startLength&&hooks){
        hooks.empty.fire();
    }
},
_queueHooks:function(elem,type){
    var key=type+"queueHooks";
    return jQuery._data(elem,key)||jQuery._data(elem,key,{
        empty:jQuery.Callbacks("once memory").add(function(){
            jQuery.removeData(elem,type+"queue",true);
            jQuery.removeData(elem,key,true);
        })
        });
}
});
jQuery.fn.extend({
    queue:function(type,data){
        var setter=2;
        if(typeof type!=="string"){
            data=type;
            type="fx";
            setter--;
        }
        if(arguments.length<setter){
            return jQuery.queue(this[0],type);
        }
        return data===undefined?this:this.each(function(){
            var queue=jQuery.queue(this,type,data);
            jQuery._queueHooks(this,type);
            if(type==="fx"&&queue[0]!=="inprogress"){
                jQuery.dequeue(this,type);
            }
        });
},
dequeue:function(type){
    return this.each(function(){
        jQuery.dequeue(this,type);
    });
},
delay:function(time,type){
    time=jQuery.fx?jQuery.fx.speeds[time]||time:time;
    type=type||"fx";
    return this.queue(type,function(next,hooks){
        var timeout=setTimeout(next,time);
        hooks.stop=function(){
            clearTimeout(timeout);
        };
    
    });
},
clearQueue:function(type){
    return this.queue(type||"fx",[]);
},
promise:function(type,obj){
    var tmp,count=1,defer=jQuery.Deferred(),elements=this,i=this.length,resolve=function(){
        if(!(--count)){
            defer.resolveWith(elements,[elements]);
        }
    };
    
if(typeof type!=="string"){
    obj=type;
    type=undefined;
}
type=type||"fx";
while(i--){
    tmp=jQuery._data(elements[i],type+"queueHooks");
    if(tmp&&tmp.empty){
        count++;
        tmp.empty.add(resolve);
    }
}
resolve();
return defer.promise(obj);
}
});
var nodeHook,boolHook,fixSpecified,rclass=/[\t\r\n]/g,rreturn=/\r/g,rtype=/^(?:button|input)$/i,rfocusable=/^(?:button|input|object|select|textarea)$/i,rclickable=/^a(?:rea|)$/i,rboolean=/^(?:autofocus|autoplay|async|checked|controls|defer|disabled|hidden|loop|multiple|open|readonly|required|scoped|selected)$/i,getSetAttribute=jQuery.support.getSetAttribute;
jQuery.fn.extend({
    attr:function(name,value){
        return jQuery.access(this,jQuery.attr,name,value,arguments.length>1);
    },
    removeAttr:function(name){
        return this.each(function(){
            jQuery.removeAttr(this,name);
        });
    },
    prop:function(name,value){
        return jQuery.access(this,jQuery.prop,name,value,arguments.length>1);
    },
    removeProp:function(name){
        name=jQuery.propFix[name]||name;
        return this.each(function(){
            try{
                this[name]=undefined;
                delete this[name];
            }catch(e){}
        });
},
addClass:function(value){
    var classNames,i,l,elem,setClass,c,cl;
    if(jQuery.isFunction(value)){
        return this.each(function(j){
            jQuery(this).addClass(value.call(this,j,this.className));
        });
    }
    if(value&&typeof value==="string"){
        classNames=value.split(core_rspace);
        for(i=0,l=this.length;i<l;i++){
            elem=this[i];
            if(elem.nodeType===1){
                if(!elem.className&&classNames.length===1){
                    elem.className=value;
                }else{
                    setClass=" "+elem.className+" ";
                    for(c=0,cl=classNames.length;c<cl;c++){
                        if(setClass.indexOf(" "+classNames[c]+" ")<0){
                            setClass+=classNames[c]+" ";
                        }
                    }
                elem.className=jQuery.trim(setClass);
            }
        }
        }
}
return this;
},
removeClass:function(value){
    var removes,className,elem,c,cl,i,l;
    if(jQuery.isFunction(value)){
        return this.each(function(j){
            jQuery(this).removeClass(value.call(this,j,this.className));
        });
    }
    if((value&&typeof value==="string")||value===undefined){
        removes=(value||"").split(core_rspace);
        for(i=0,l=this.length;i<l;i++){
            elem=this[i];
            if(elem.nodeType===1&&elem.className){
                className=(" "+elem.className+" ").replace(rclass," ");
                for(c=0,cl=removes.length;c<cl;c++){
                    while(className.indexOf(" "+removes[c]+" ")>=0){
                        className=className.replace(" "+removes[c]+" "," ");
                    }
                }
            elem.className=value?jQuery.trim(className):"";
        }
        }
    }
return this;
},
toggleClass:function(value,stateVal){
    var type=typeof value,isBool=typeof stateVal==="boolean";
    if(jQuery.isFunction(value)){
        return this.each(function(i){
            jQuery(this).toggleClass(value.call(this,i,this.className,stateVal),stateVal);
        });
    }
    return this.each(function(){
        if(type==="string"){
            var className,i=0,self=jQuery(this),state=stateVal,classNames=value.split(core_rspace);
            while((className=classNames[i++])){
                state=isBool?state:!self.hasClass(className);
                self[state?"addClass":"removeClass"](className);
            }
        }else if(type==="undefined"||type==="boolean"){
        if(this.className){
            jQuery._data(this,"__className__",this.className);
        }
        this.className=this.className||value===false?"":jQuery._data(this,"__className__")||"";
    }
    });
},
hasClass:function(selector){
    var className=" "+selector+" ",i=0,l=this.length;
    for(;i<l;i++){
        if(this[i].nodeType===1&&(" "+this[i].className+" ").replace(rclass," ").indexOf(className)>=0){
            return true;
        }
    }
return false;
},
val:function(value){
    var hooks,ret,isFunction,elem=this[0];
    if(!arguments.length){
        if(elem){
            hooks=jQuery.valHooks[elem.type]||jQuery.valHooks[elem.nodeName.toLowerCase()];
            if(hooks&&"get"in hooks&&(ret=hooks.get(elem,"value"))!==undefined){
                return ret;
            }
            ret=elem.value;
            return typeof ret==="string"?ret.replace(rreturn,""):ret==null?"":ret;
        }
        return;
    }
    isFunction=jQuery.isFunction(value);
    return this.each(function(i){
        var val,self=jQuery(this);
        if(this.nodeType!==1){
            return;
        }
        if(isFunction){
            val=value.call(this,i,self.val());
        }else{
            val=value;
        }
        if(val==null){
            val="";
        }else if(typeof val==="number"){
            val+="";
        }else if(jQuery.isArray(val)){
            val=jQuery.map(val,function(value){
                return value==null?"":value+"";
            });
        }
        hooks=jQuery.valHooks[this.type]||jQuery.valHooks[this.nodeName.toLowerCase()];
        if(!hooks||!("set"in hooks)||hooks.set(this,val,"value")===undefined){
            this.value=val;
        }
    });
}
});
jQuery.extend({
    valHooks:{
        option:{
            get:function(elem){
                var val=elem.attributes.value;
                return!val||val.specified?elem.value:elem.text;
            }
        },
    select:{
        get:function(elem){
            var value,option,options=elem.options,index=elem.selectedIndex,one=elem.type==="select-one"||index<0,values=one?null:[],max=one?index+1:options.length,i=index<0?max:one?index:0;
            for(;i<max;i++){
                option=options[i];
                if((option.selected||i===index)&&(jQuery.support.optDisabled?!option.disabled:option.getAttribute("disabled")===null)&&(!option.parentNode.disabled||!jQuery.nodeName(option.parentNode,"optgroup"))){
                    value=jQuery(option).val();
                    if(one){
                        return value;
                    }
                    values.push(value);
                }
            }
        return values;
    },
    set:function(elem,value){
        var values=jQuery.makeArray(value);
        jQuery(elem).find("option").each(function(){
            this.selected=jQuery.inArray(jQuery(this).val(),values)>=0;
        });
        if(!values.length){
            elem.selectedIndex=-1;
        }
        return values;
    }
}
},
attrFn:{},
attr:function(elem,name,value,pass){
    var ret,hooks,notxml,nType=elem.nodeType;
    if(!elem||nType===3||nType===8||nType===2){
        return;
    }
    if(pass&&jQuery.isFunction(jQuery.fn[name])){
        return jQuery(elem)[name](value);
    }
    if(typeof elem.getAttribute==="undefined"){
        return jQuery.prop(elem,name,value);
    }
    notxml=nType!==1||!jQuery.isXMLDoc(elem);
    if(notxml){
        name=name.toLowerCase();
        hooks=jQuery.attrHooks[name]||(rboolean.test(name)?boolHook:nodeHook);
    }
    if(value!==undefined){
        if(value===null){
            jQuery.removeAttr(elem,name);
            return;
        }else if(hooks&&"set"in hooks&&notxml&&(ret=hooks.set(elem,value,name))!==undefined){
            return ret;
        }else{
            elem.setAttribute(name,value+"");
            return value;
        }
    }else if(hooks&&"get"in hooks&&notxml&&(ret=hooks.get(elem,name))!==null){
    return ret;
}else{
    ret=elem.getAttribute(name);
    return ret===null?undefined:ret;
}
},
removeAttr:function(elem,value){
    var propName,attrNames,name,isBool,i=0;
    if(value&&elem.nodeType===1){
        attrNames=value.split(core_rspace);
        for(;i<attrNames.length;i++){
            name=attrNames[i];
            if(name){
                propName=jQuery.propFix[name]||name;
                isBool=rboolean.test(name);
                if(!isBool){
                    jQuery.attr(elem,name,"");
                }
                elem.removeAttribute(getSetAttribute?name:propName);
                if(isBool&&propName in elem){
                    elem[propName]=false;
                }
            }
        }
    }
},
attrHooks:{
    type:{
        set:function(elem,value){
            if(rtype.test(elem.nodeName)&&elem.parentNode){
                jQuery.error("type property can't be changed");
            }else if(!jQuery.support.radioValue&&value==="radio"&&jQuery.nodeName(elem,"input")){
                var val=elem.value;
                elem.setAttribute("type",value);
                if(val){
                    elem.value=val;
                }
                return value;
            }
        }
    },
value:{
    get:function(elem,name){
        if(nodeHook&&jQuery.nodeName(elem,"button")){
            return nodeHook.get(elem,name);
        }
        return name in elem?elem.value:null;
    },
    set:function(elem,value,name){
        if(nodeHook&&jQuery.nodeName(elem,"button")){
            return nodeHook.set(elem,value,name);
        }
        elem.value=value;
    }
}
},
propFix:{
    tabindex:"tabIndex",
    readonly:"readOnly",
    "for":"htmlFor",
    "class":"className",
    maxlength:"maxLength",
    cellspacing:"cellSpacing",
    cellpadding:"cellPadding",
    rowspan:"rowSpan",
    colspan:"colSpan",
    usemap:"useMap",
    frameborder:"frameBorder",
    contenteditable:"contentEditable"
},
prop:function(elem,name,value){
    var ret,hooks,notxml,nType=elem.nodeType;
    if(!elem||nType===3||nType===8||nType===2){
        return;
    }
    notxml=nType!==1||!jQuery.isXMLDoc(elem);
    if(notxml){
        name=jQuery.propFix[name]||name;
        hooks=jQuery.propHooks[name];
    }
    if(value!==undefined){
        if(hooks&&"set"in hooks&&(ret=hooks.set(elem,value,name))!==undefined){
            return ret;
        }else{
            return(elem[name]=value);
        }
    }else{
    if(hooks&&"get"in hooks&&(ret=hooks.get(elem,name))!==null){
        return ret;
    }else{
        return elem[name];
    }
}
},
propHooks:{
    tabIndex:{
        get:function(elem){
            var attributeNode=elem.getAttributeNode("tabindex");
            return attributeNode&&attributeNode.specified?parseInt(attributeNode.value,10):rfocusable.test(elem.nodeName)||rclickable.test(elem.nodeName)&&elem.href?0:undefined;
        }
    }
}
});
boolHook={
    get:function(elem,name){
        var attrNode,property=jQuery.prop(elem,name);
        return property===true||typeof property!=="boolean"&&(attrNode=elem.getAttributeNode(name))&&attrNode.nodeValue!==false?name.toLowerCase():undefined;
    },
    set:function(elem,value,name){
        var propName;
        if(value===false){
            jQuery.removeAttr(elem,name);
        }else{
            propName=jQuery.propFix[name]||name;
            if(propName in elem){
                elem[propName]=true;
            }
            elem.setAttribute(name,name.toLowerCase());
        }
        return name;
    }
};

if(!getSetAttribute){
    fixSpecified={
        name:true,
        id:true,
        coords:true
    };
    
    nodeHook=jQuery.valHooks.button={
        get:function(elem,name){
            var ret;
            ret=elem.getAttributeNode(name);
            return ret&&(fixSpecified[name]?ret.value!=="":ret.specified)?ret.value:undefined;
        },
        set:function(elem,value,name){
            var ret=elem.getAttributeNode(name);
            if(!ret){
                ret=document.createAttribute(name);
                elem.setAttributeNode(ret);
            }
            return(ret.value=value+"");
        }
    };
    
jQuery.each(["width","height"],function(i,name){
    jQuery.attrHooks[name]=jQuery.extend(jQuery.attrHooks[name],{
        set:function(elem,value){
            if(value===""){
                elem.setAttribute(name,"auto");
                return value;
            }
        }
    });
});
jQuery.attrHooks.contenteditable={
    get:nodeHook.get,
    set:function(elem,value,name){
        if(value===""){
            value="false";
        }
        nodeHook.set(elem,value,name);
    }
};

}
if(!jQuery.support.hrefNormalized){
    jQuery.each(["href","src","width","height"],function(i,name){
        jQuery.attrHooks[name]=jQuery.extend(jQuery.attrHooks[name],{
            get:function(elem){
                var ret=elem.getAttribute(name,2);
                return ret===null?undefined:ret;
            }
        });
    });
}
if(!jQuery.support.style){
    jQuery.attrHooks.style={
        get:function(elem){
            return elem.style.cssText.toLowerCase()||undefined;
        },
        set:function(elem,value){
            return(elem.style.cssText=value+"");
        }
    };

}
if(!jQuery.support.optSelected){
    jQuery.propHooks.selected=jQuery.extend(jQuery.propHooks.selected,{
        get:function(elem){
            var parent=elem.parentNode;
            if(parent){
                parent.selectedIndex;
                if(parent.parentNode){
                    parent.parentNode.selectedIndex;
                }
            }
        return null;
    }
    });
}
if(!jQuery.support.enctype){
    jQuery.propFix.enctype="encoding";
}
if(!jQuery.support.checkOn){
    jQuery.each(["radio","checkbox"],function(){
        jQuery.valHooks[this]={
            get:function(elem){
                return elem.getAttribute("value")===null?"on":elem.value;
            }
        };
    
});
}
jQuery.each(["radio","checkbox"],function(){
    jQuery.valHooks[this]=jQuery.extend(jQuery.valHooks[this],{
        set:function(elem,value){
            if(jQuery.isArray(value)){
                return(elem.checked=jQuery.inArray(jQuery(elem).val(),value)>=0);
            }
        }
    });
});
var rformElems=/^(?:textarea|input|select)$/i,rtypenamespace=/^([^\.]*|)(?:\.(.+)|)$/,rhoverHack=/(?:^|\s)hover(\.\S+|)\b/,rkeyEvent=/^key/,rmouseEvent=/^(?:mouse|contextmenu)|click/,rfocusMorph=/^(?:focusinfocus|focusoutblur)$/,hoverHack=function(events){
    return jQuery.event.special.hover?events:events.replace(rhoverHack,"mouseenter$1 mouseleave$1");
};

jQuery.event={
    add:function(elem,types,handler,data,selector){
        var elemData,eventHandle,events,t,tns,type,namespaces,handleObj,handleObjIn,handlers,special;
        if(elem.nodeType===3||elem.nodeType===8||!types||!handler||!(elemData=jQuery._data(elem))){
            return;
        }
        if(handler.handler){
            handleObjIn=handler;
            handler=handleObjIn.handler;
            selector=handleObjIn.selector;
        }
        if(!handler.guid){
            handler.guid=jQuery.guid++;
        }
        events=elemData.events;
        if(!events){
            elemData.events=events={};
        
    }
    eventHandle=elemData.handle;
    if(!eventHandle){
        elemData.handle=eventHandle=function(e){
            return typeof jQuery!=="undefined"&&(!e||jQuery.event.triggered!==e.type)?jQuery.event.dispatch.apply(eventHandle.elem,arguments):undefined;
        };
        
        eventHandle.elem=elem;
    }
    types=jQuery.trim(hoverHack(types)).split(" ");
    for(t=0;t<types.length;t++){
        tns=rtypenamespace.exec(types[t])||[];
        type=tns[1];
        namespaces=(tns[2]||"").split(".").sort();
        special=jQuery.event.special[type]||{};
        
        type=(selector?special.delegateType:special.bindType)||type;
        special=jQuery.event.special[type]||{};
        
        handleObj=jQuery.extend({
            type:type,
            origType:tns[1],
            data:data,
            handler:handler,
            guid:handler.guid,
            selector:selector,
            needsContext:selector&&jQuery.expr.match.needsContext.test(selector),
            namespace:namespaces.join(".")
            },handleObjIn);
        handlers=events[type];
        if(!handlers){
            handlers=events[type]=[];
            handlers.delegateCount=0;
            if(!special.setup||special.setup.call(elem,data,namespaces,eventHandle)===false){
                if(elem.addEventListener){
                    elem.addEventListener(type,eventHandle,false);
                }else if(elem.attachEvent){
                    elem.attachEvent("on"+type,eventHandle);
                }
            }
        }
    if(special.add){
        special.add.call(elem,handleObj);
        if(!handleObj.handler.guid){
            handleObj.handler.guid=handler.guid;
        }
    }
if(selector){
    handlers.splice(handlers.delegateCount++,0,handleObj);
}else{
    handlers.push(handleObj);
}
jQuery.event.global[type]=true;
}
elem=null;
},
global:{},
remove:function(elem,types,handler,selector,mappedTypes){
    var t,tns,type,origType,namespaces,origCount,j,events,special,eventType,handleObj,elemData=jQuery.hasData(elem)&&jQuery._data(elem);
    if(!elemData||!(events=elemData.events)){
        return;
    }
    types=jQuery.trim(hoverHack(types||"")).split(" ");
    for(t=0;t<types.length;t++){
        tns=rtypenamespace.exec(types[t])||[];
        type=origType=tns[1];
        namespaces=tns[2];
        if(!type){
            for(type in events){
                jQuery.event.remove(elem,type+types[t],handler,selector,true);
            }
            continue;
        }
        special=jQuery.event.special[type]||{};
        
        type=(selector?special.delegateType:special.bindType)||type;
        eventType=events[type]||[];
        origCount=eventType.length;
        namespaces=namespaces?new RegExp("(^|\\.)"+namespaces.split(".").sort().join("\\.(?:.*\\.|)")+"(\\.|$)"):null;
        for(j=0;j<eventType.length;j++){
            handleObj=eventType[j];
            if((mappedTypes||origType===handleObj.origType)&&(!handler||handler.guid===handleObj.guid)&&(!namespaces||namespaces.test(handleObj.namespace))&&(!selector||selector===handleObj.selector||selector==="**"&&handleObj.selector)){
                eventType.splice(j--,1);
                if(handleObj.selector){
                    eventType.delegateCount--;
                }
                if(special.remove){
                    special.remove.call(elem,handleObj);
                }
            }
        }
    if(eventType.length===0&&origCount!==eventType.length){
        if(!special.teardown||special.teardown.call(elem,namespaces,elemData.handle)===false){
            jQuery.removeEvent(elem,type,elemData.handle);
        }
        delete events[type];
    }
}
if(jQuery.isEmptyObject(events)){
    delete elemData.handle;
    jQuery.removeData(elem,"events",true);
}
},
customEvent:{
    "getData":true,
    "setData":true,
    "changeData":true
},
trigger:function(event,data,elem,onlyHandlers){
    if(elem&&(elem.nodeType===3||elem.nodeType===8)){
        return;
    }
    var cache,exclusive,i,cur,old,ontype,special,handle,eventPath,bubbleType,type=event.type||event,namespaces=[];
    if(rfocusMorph.test(type+jQuery.event.triggered)){
        return;
    }
    if(type.indexOf("!")>=0){
        type=type.slice(0,-1);
        exclusive=true;
    }
    if(type.indexOf(".")>=0){
        namespaces=type.split(".");
        type=namespaces.shift();
        namespaces.sort();
    }
    if((!elem||jQuery.event.customEvent[type])&&!jQuery.event.global[type]){
        return;
    }
    event=typeof event==="object"?event[jQuery.expando]?event:new jQuery.Event(type,event):new jQuery.Event(type);
    event.type=type;
    event.isTrigger=true;
    event.exclusive=exclusive;
    event.namespace=namespaces.join(".");
    event.namespace_re=event.namespace?new RegExp("(^|\\.)"+namespaces.join("\\.(?:.*\\.|)")+"(\\.|$)"):null;
    ontype=type.indexOf(":")<0?"on"+type:"";
    if(!elem){
        cache=jQuery.cache;
        for(i in cache){
            if(cache[i].events&&cache[i].events[type]){
                jQuery.event.trigger(event,data,cache[i].handle.elem,true);
            }
        }
    return;
}
event.result=undefined;
if(!event.target){
    event.target=elem;
}
data=data!=null?jQuery.makeArray(data):[];
data.unshift(event);
special=jQuery.event.special[type]||{};

if(special.trigger&&special.trigger.apply(elem,data)===false){
    return;
}
eventPath=[[elem,special.bindType||type]];
if(!onlyHandlers&&!special.noBubble&&!jQuery.isWindow(elem)){
    bubbleType=special.delegateType||type;
    cur=rfocusMorph.test(bubbleType+type)?elem:elem.parentNode;
    for(old=elem;cur;cur=cur.parentNode){
        eventPath.push([cur,bubbleType]);
        old=cur;
    }
    if(old===(elem.ownerDocument||document)){
        eventPath.push([old.defaultView||old.parentWindow||window,bubbleType]);
    }
}
for(i=0;i<eventPath.length&&!event.isPropagationStopped();i++){
    cur=eventPath[i][0];
    event.type=eventPath[i][1];
    handle=(jQuery._data(cur,"events")||{})[event.type]&&jQuery._data(cur,"handle");
    if(handle){
        handle.apply(cur,data);
    }
    handle=ontype&&cur[ontype];
    if(handle&&jQuery.acceptData(cur)&&handle.apply&&handle.apply(cur,data)===false){
        event.preventDefault();
    }
}
event.type=type;
if(!onlyHandlers&&!event.isDefaultPrevented()){
    if((!special._default||special._default.apply(elem.ownerDocument,data)===false)&&!(type==="click"&&jQuery.nodeName(elem,"a"))&&jQuery.acceptData(elem)){
        if(ontype&&elem[type]&&((type!=="focus"&&type!=="blur")||event.target.offsetWidth!==0)&&!jQuery.isWindow(elem)){
            old=elem[ontype];
            if(old){
                elem[ontype]=null;
            }
            jQuery.event.triggered=type;
            elem[type]();
            jQuery.event.triggered=undefined;
            if(old){
                elem[ontype]=old;
            }
        }
    }
}
return event.result;
},
dispatch:function(event){
    event=jQuery.event.fix(event||window.event);
    var i,j,cur,ret,selMatch,matched,matches,handleObj,sel,related,handlers=((jQuery._data(this,"events")||{})[event.type]||[]),delegateCount=handlers.delegateCount,args=core_slice.call(arguments),run_all=!event.exclusive&&!event.namespace,special=jQuery.event.special[event.type]||{},handlerQueue=[];
    args[0]=event;
    event.delegateTarget=this;
    if(special.preDispatch&&special.preDispatch.call(this,event)===false){
        return;
    }
    if(delegateCount&&!(event.button&&event.type==="click")){
        for(cur=event.target;cur!=this;cur=cur.parentNode||this){
            if(cur.disabled!==true||event.type!=="click"){
                selMatch={};
                
                matches=[];
                for(i=0;i<delegateCount;i++){
                    handleObj=handlers[i];
                    sel=handleObj.selector;
                    if(selMatch[sel]===undefined){
                        selMatch[sel]=handleObj.needsContext?jQuery(sel,this).index(cur)>=0:jQuery.find(sel,this,null,[cur]).length;
                    }
                    if(selMatch[sel]){
                        matches.push(handleObj);
                    }
                }
            if(matches.length){
                handlerQueue.push({
                    elem:cur,
                    matches:matches
                });
            }
        }
        }
}
if(handlers.length>delegateCount){
    handlerQueue.push({
        elem:this,
        matches:handlers.slice(delegateCount)
        });
}
for(i=0;i<handlerQueue.length&&!event.isPropagationStopped();i++){
    matched=handlerQueue[i];
    event.currentTarget=matched.elem;
    for(j=0;j<matched.matches.length&&!event.isImmediatePropagationStopped();j++){
        handleObj=matched.matches[j];
        if(run_all||(!event.namespace&&!handleObj.namespace)||event.namespace_re&&event.namespace_re.test(handleObj.namespace)){
            event.data=handleObj.data;
            event.handleObj=handleObj;
            ret=((jQuery.event.special[handleObj.origType]||{}).handle||handleObj.handler).apply(matched.elem,args);
            if(ret!==undefined){
                event.result=ret;
                if(ret===false){
                    event.preventDefault();
                    event.stopPropagation();
                }
            }
        }
    }
}
if(special.postDispatch){
    special.postDispatch.call(this,event);
}
return event.result;
},
props:"attrChange attrName relatedNode srcElement altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),
fixHooks:{},
keyHooks:{
    props:"char charCode key keyCode".split(" "),
    filter:function(event,original){
        if(event.which==null){
            event.which=original.charCode!=null?original.charCode:original.keyCode;
        }
        return event;
    }
},
mouseHooks:{
    props:"button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),
    filter:function(event,original){
        var eventDoc,doc,body,button=original.button,fromElement=original.fromElement;
        if(event.pageX==null&&original.clientX!=null){
            eventDoc=event.target.ownerDocument||document;
            doc=eventDoc.documentElement;
            body=eventDoc.body;
            event.pageX=original.clientX+(doc&&doc.scrollLeft||body&&body.scrollLeft||0)-(doc&&doc.clientLeft||body&&body.clientLeft||0);
            event.pageY=original.clientY+(doc&&doc.scrollTop||body&&body.scrollTop||0)-(doc&&doc.clientTop||body&&body.clientTop||0);
        }
        if(!event.relatedTarget&&fromElement){
            event.relatedTarget=fromElement===event.target?original.toElement:fromElement;
        }
        if(!event.which&&button!==undefined){
            event.which=(button&1?1:(button&2?3:(button&4?2:0)));
        }
        return event;
    }
},
fix:function(event){
    if(event[jQuery.expando]){
        return event;
    }
    var i,prop,originalEvent=event,fixHook=jQuery.event.fixHooks[event.type]||{},copy=fixHook.props?this.props.concat(fixHook.props):this.props;
    event=jQuery.Event(originalEvent);
    for(i=copy.length;i;){
        prop=copy[--i];
        event[prop]=originalEvent[prop];
    }
    if(!event.target){
        event.target=originalEvent.srcElement||document;
    }
    if(event.target.nodeType===3){
        event.target=event.target.parentNode;
    }
    event.metaKey=!!event.metaKey;
    return fixHook.filter?fixHook.filter(event,originalEvent):event;
},
special:{
    load:{
        noBubble:true
    },
    focus:{
        delegateType:"focusin"
    },
    blur:{
        delegateType:"focusout"
    },
    beforeunload:{
        setup:function(data,namespaces,eventHandle){
            if(jQuery.isWindow(this)){
                this.onbeforeunload=eventHandle;
            }
        },
    teardown:function(namespaces,eventHandle){
        if(this.onbeforeunload===eventHandle){
            this.onbeforeunload=null;
        }
    }
}
},
simulate:function(type,elem,event,bubble){
    var e=jQuery.extend(new jQuery.Event(),event,{
        type:type,
        isSimulated:true,
        originalEvent:{}
    });
if(bubble){
    jQuery.event.trigger(e,null,elem);
}else{
    jQuery.event.dispatch.call(elem,e);
}
if(e.isDefaultPrevented()){
    event.preventDefault();
}
}
};

jQuery.event.handle=jQuery.event.dispatch;
jQuery.removeEvent=document.removeEventListener?function(elem,type,handle){
    if(elem.removeEventListener){
        elem.removeEventListener(type,handle,false);
    }
}:function(elem,type,handle){
    var name="on"+type;
    if(elem.detachEvent){
        if(typeof elem[name]==="undefined"){
            elem[name]=null;
        }
        elem.detachEvent(name,handle);
    }
};

jQuery.Event=function(src,props){
    if(!(this instanceof jQuery.Event)){
        return new jQuery.Event(src,props);
    }
    if(src&&src.type){
        this.originalEvent=src;
        this.type=src.type;
        this.isDefaultPrevented=(src.defaultPrevented||src.returnValue===false||src.getPreventDefault&&src.getPreventDefault())?returnTrue:returnFalse;
    }else{
        this.type=src;
    }
    if(props){
        jQuery.extend(this,props);
    }
    this.timeStamp=src&&src.timeStamp||jQuery.now();
    this[jQuery.expando]=true;
};

function returnFalse(){
    return false;
}
function returnTrue(){
    return true;
}
jQuery.Event.prototype={
    preventDefault:function(){
        this.isDefaultPrevented=returnTrue;
        var e=this.originalEvent;
        if(!e){
            return;
        }
        if(e.preventDefault){
            e.preventDefault();
        }else{
            e.returnValue=false;
        }
    },
stopPropagation:function(){
    this.isPropagationStopped=returnTrue;
    var e=this.originalEvent;
    if(!e){
        return;
    }
    if(e.stopPropagation){
        e.stopPropagation();
    }
    e.cancelBubble=true;
},
stopImmediatePropagation:function(){
    this.isImmediatePropagationStopped=returnTrue;
    this.stopPropagation();
},
isDefaultPrevented:returnFalse,
isPropagationStopped:returnFalse,
isImmediatePropagationStopped:returnFalse
};

jQuery.each({
    mouseenter:"mouseover",
    mouseleave:"mouseout"
},function(orig,fix){
    jQuery.event.special[orig]={
        delegateType:fix,
        bindType:fix,
        handle:function(event){
            var ret,target=this,related=event.relatedTarget,handleObj=event.handleObj,selector=handleObj.selector;
            if(!related||(related!==target&&!jQuery.contains(target,related))){
                event.type=handleObj.origType;
                ret=handleObj.handler.apply(this,arguments);
                event.type=fix;
            }
            return ret;
        }
    };

});
if(!jQuery.support.submitBubbles){
    jQuery.event.special.submit={
        setup:function(){
            if(jQuery.nodeName(this,"form")){
                return false;
            }
            jQuery.event.add(this,"click._submit keypress._submit",function(e){
                var elem=e.target,form=jQuery.nodeName(elem,"input")||jQuery.nodeName(elem,"button")?elem.form:undefined;
                if(form&&!jQuery._data(form,"_submit_attached")){
                    jQuery.event.add(form,"submit._submit",function(event){
                        event._submit_bubble=true;
                    });
                    jQuery._data(form,"_submit_attached",true);
                }
            });
    },
    postDispatch:function(event){
        if(event._submit_bubble){
            delete event._submit_bubble;
            if(this.parentNode&&!event.isTrigger){
                jQuery.event.simulate("submit",this.parentNode,event,true);
            }
        }
    },
teardown:function(){
    if(jQuery.nodeName(this,"form")){
        return false;
    }
    jQuery.event.remove(this,"._submit");
}
};

}
if(!jQuery.support.changeBubbles){
    jQuery.event.special.change={
        setup:function(){
            if(rformElems.test(this.nodeName)){
                if(this.type==="checkbox"||this.type==="radio"){
                    jQuery.event.add(this,"propertychange._change",function(event){
                        if(event.originalEvent.propertyName==="checked"){
                            this._just_changed=true;
                        }
                    });
                jQuery.event.add(this,"click._change",function(event){
                    if(this._just_changed&&!event.isTrigger){
                        this._just_changed=false;
                    }
                    jQuery.event.simulate("change",this,event,true);
                });
            }
            return false;
        }
        jQuery.event.add(this,"beforeactivate._change",function(e){
            var elem=e.target;
            if(rformElems.test(elem.nodeName)&&!jQuery._data(elem,"_change_attached")){
                jQuery.event.add(elem,"change._change",function(event){
                    if(this.parentNode&&!event.isSimulated&&!event.isTrigger){
                        jQuery.event.simulate("change",this.parentNode,event,true);
                    }
                });
            jQuery._data(elem,"_change_attached",true);
        }
        });
},
handle:function(event){
    var elem=event.target;
    if(this!==elem||event.isSimulated||event.isTrigger||(elem.type!=="radio"&&elem.type!=="checkbox")){
        return event.handleObj.handler.apply(this,arguments);
    }
},
teardown:function(){
    jQuery.event.remove(this,"._change");
    return!rformElems.test(this.nodeName);
}
};

}
if(!jQuery.support.focusinBubbles){
    jQuery.each({
        focus:"focusin",
        blur:"focusout"
    },function(orig,fix){
        var attaches=0,handler=function(event){
            jQuery.event.simulate(fix,event.target,jQuery.event.fix(event),true);
        };
        
        jQuery.event.special[fix]={
            setup:function(){
                if(attaches++===0){
                    document.addEventListener(orig,handler,true);
                }
            },
        teardown:function(){
            if(--attaches===0){
                document.removeEventListener(orig,handler,true);
            }
        }
    };

});
}
jQuery.fn.extend({
    on:function(types,selector,data,fn,one){
        var origFn,type;
        if(typeof types==="object"){
            if(typeof selector!=="string"){
                data=data||selector;
                selector=undefined;
            }
            for(type in types){
                this.on(type,selector,data,types[type],one);
            }
            return this;
        }
        if(data==null&&fn==null){
            fn=selector;
            data=selector=undefined;
        }else if(fn==null){
            if(typeof selector==="string"){
                fn=data;
                data=undefined;
            }else{
                fn=data;
                data=selector;
                selector=undefined;
            }
        }
    if(fn===false){
        fn=returnFalse;
    }else if(!fn){
        return this;
    }
    if(one===1){
        origFn=fn;
        fn=function(event){
            jQuery().off(event);
            return origFn.apply(this,arguments);
        };
        
        fn.guid=origFn.guid||(origFn.guid=jQuery.guid++);
    }
    return this.each(function(){
        jQuery.event.add(this,types,fn,data,selector);
    });
},
one:function(types,selector,data,fn){
    return this.on(types,selector,data,fn,1);
},
off:function(types,selector,fn){
    var handleObj,type;
    if(types&&types.preventDefault&&types.handleObj){
        handleObj=types.handleObj;
        jQuery(types.delegateTarget).off(handleObj.namespace?handleObj.origType+"."+handleObj.namespace:handleObj.origType,handleObj.selector,handleObj.handler);
        return this;
    }
    if(typeof types==="object"){
        for(type in types){
            this.off(type,selector,types[type]);
        }
        return this;
    }
    if(selector===false||typeof selector==="function"){
        fn=selector;
        selector=undefined;
    }
    if(fn===false){
        fn=returnFalse;
    }
    return this.each(function(){
        jQuery.event.remove(this,types,fn,selector);
    });
},
bind:function(types,data,fn){
    return this.on(types,null,data,fn);
},
unbind:function(types,fn){
    return this.off(types,null,fn);
},
live:function(types,data,fn){
    jQuery(this.context).on(types,this.selector,data,fn);
    return this;
},
die:function(types,fn){
    jQuery(this.context).off(types,this.selector||"**",fn);
    return this;
},
delegate:function(selector,types,data,fn){
    return this.on(types,selector,data,fn);
},
undelegate:function(selector,types,fn){
    return arguments.length===1?this.off(selector,"**"):this.off(types,selector||"**",fn);
},
trigger:function(type,data){
    return this.each(function(){
        jQuery.event.trigger(type,data,this);
    });
},
triggerHandler:function(type,data){
    if(this[0]){
        return jQuery.event.trigger(type,data,this[0],true);
    }
},
toggle:function(fn){
    var args=arguments,guid=fn.guid||jQuery.guid++,i=0,toggler=function(event){
        var lastToggle=(jQuery._data(this,"lastToggle"+fn.guid)||0)%i;
        jQuery._data(this,"lastToggle"+fn.guid,lastToggle+1);
        event.preventDefault();
        return args[lastToggle].apply(this,arguments)||false;
    };
    
    toggler.guid=guid;
    while(i<args.length){
        args[i++].guid=guid;
    }
    return this.click(toggler);
},
hover:function(fnOver,fnOut){
    return this.mouseenter(fnOver).mouseleave(fnOut||fnOver);
}
});
jQuery.each(("blur focus focusin focusout load resize scroll unload click dblclick "+"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave "+"change select submit keydown keypress keyup error contextmenu").split(" "),function(i,name){
    jQuery.fn[name]=function(data,fn){
        if(fn==null){
            fn=data;
            data=null;
        }
        return arguments.length>0?this.on(name,null,data,fn):this.trigger(name);
    };
    
    if(rkeyEvent.test(name)){
        jQuery.event.fixHooks[name]=jQuery.event.keyHooks;
    }
    if(rmouseEvent.test(name)){
        jQuery.event.fixHooks[name]=jQuery.event.mouseHooks;
    }
});
(function(window,undefined){
    var cachedruns,assertGetIdNotName,Expr,getText,isXML,contains,compile,sortOrder,hasDuplicate,outermostContext,baseHasDuplicate=true,strundefined="undefined",expando=("sizcache"+Math.random()).replace(".",""),Token=String,document=window.document,docElem=document.documentElement,dirruns=0,done=0,pop=[].pop,push=[].push,slice=[].slice,indexOf=[].indexOf||function(elem){
        var i=0,len=this.length;
        for(;i<len;i++){
            if(this[i]===elem){
                return i;
            }
        }
    return-1;
},markFunction=function(fn,value){
    fn[expando]=value==null||value;
    return fn;
},createCache=function(){
    var cache={},keys=[];
    return markFunction(function(key,value){
        if(keys.push(key)>Expr.cacheLength){
            delete cache[keys.shift()];
        }
        return(cache[key+" "]=value);
    },cache);
},classCache=createCache(),tokenCache=createCache(),compilerCache=createCache(),whitespace="[\\x20\\t\\r\\n\\f]",characterEncoding="(?:\\\\.|[-\\w]|[^\\x00-\\xa0])+",identifier=characterEncoding.replace("w","w#"),operators="([*^$|!~]?=)",attributes="\\["+whitespace+"*("+characterEncoding+")"+whitespace+"*(?:"+operators+whitespace+"*(?:(['\"])((?:\\\\.|[^\\\\])*?)\\3|("+identifier+")|)|)"+whitespace+"*\\]",pseudos=":("+characterEncoding+")(?:\\((?:(['\"])((?:\\\\.|[^\\\\])*?)\\2|([^()[\\]]*|(?:(?:"+attributes+")|[^:]|\\\\.)*|.*))\\)|)",pos=":(even|odd|eq|gt|lt|nth|first|last)(?:\\("+whitespace+"*((?:-\\d)?\\d*)"+whitespace+"*\\)|)(?=[^-]|$)",rtrim=new RegExp("^"+whitespace+"+|((?:^|[^\\\\])(?:\\\\.)*)"+whitespace+"+$","g"),rcomma=new RegExp("^"+whitespace+"*,"+whitespace+"*"),rcombinators=new RegExp("^"+whitespace+"*([\\x20\\t\\r\\n\\f>+~])"+whitespace+"*"),rpseudo=new RegExp(pseudos),rquickExpr=/^(?:#([\w\-]+)|(\w+)|\.([\w\-]+))$/,rnot=/^:not/,rsibling=/[\x20\t\r\n\f]*[+~]/,rendsWithNot=/:not\($/,rheader=/h\d/i,rinputs=/input|select|textarea|button/i,rbackslash=/\\(?!\\)/g,matchExpr={
    "ID":new RegExp("^#("+characterEncoding+")"),
    "CLASS":new RegExp("^\\.("+characterEncoding+")"),
    "NAME":new RegExp("^\\[name=['\"]?("+characterEncoding+")['\"]?\\]"),
    "TAG":new RegExp("^("+characterEncoding.replace("w","w*")+")"),
    "ATTR":new RegExp("^"+attributes),
    "PSEUDO":new RegExp("^"+pseudos),
    "POS":new RegExp(pos,"i"),
    "CHILD":new RegExp("^:(only|nth|first|last)-child(?:\\("+whitespace+"*(even|odd|(([+-]|)(\\d*)n|)"+whitespace+"*(?:([+-]|)"+whitespace+"*(\\d+)|))"+whitespace+"*\\)|)","i"),
    "needsContext":new RegExp("^"+whitespace+"*[>+~]|"+pos,"i")
    },assert=function(fn){
    var div=document.createElement("div");
    try{
        return fn(div);
    }catch(e){
        return false;
    }finally{
        div=null;
    }
},assertTagNameNoComments=assert(function(div){
    div.appendChild(document.createComment(""));
    return!div.getElementsByTagName("*").length;
}),assertHrefNotNormalized=assert(function(div){
    div.innerHTML="<a href='#'></a>";
    return div.firstChild&&typeof div.firstChild.getAttribute!==strundefined&&div.firstChild.getAttribute("href")==="#";
}),assertAttributes=assert(function(div){
    div.innerHTML="<select></select>";
    var type=typeof div.lastChild.getAttribute("multiple");
    return type!=="boolean"&&type!=="string";
}),assertUsableClassName=assert(function(div){
    div.innerHTML="<div class='hidden e'></div><div class='hidden'></div>";
    if(!div.getElementsByClassName||!div.getElementsByClassName("e").length){
        return false;
    }
    div.lastChild.className="e";
    return div.getElementsByClassName("e").length===2;
}),assertUsableName=assert(function(div){
    div.id=expando+0;
    div.innerHTML="<a name='"+expando+"'></a><div name='"+expando+"'></div>";
    docElem.insertBefore(div,docElem.firstChild);
    var pass=document.getElementsByName&&document.getElementsByName(expando).length===2+
    document.getElementsByName(expando+0).length;
    assertGetIdNotName=!document.getElementById(expando);
    docElem.removeChild(div);
    return pass;
});
try{
    slice.call(docElem.childNodes,0)[0].nodeType;
}catch(e){
    slice=function(i){
        var elem,results=[];
        for(;(elem=this[i]);i++){
            results.push(elem);
        }
        return results;
    };

}
function Sizzle(selector,context,results,seed){
    results=results||[];
    context=context||document;
    var match,elem,xml,m,nodeType=context.nodeType;
    if(!selector||typeof selector!=="string"){
        return results;
    }
    if(nodeType!==1&&nodeType!==9){
        return[];
    }
    xml=isXML(context);
    if(!xml&&!seed){
        if((match=rquickExpr.exec(selector))){
            if((m=match[1])){
                if(nodeType===9){
                    elem=context.getElementById(m);
                    if(elem&&elem.parentNode){
                        if(elem.id===m){
                            results.push(elem);
                            return results;
                        }
                    }else{
                    return results;
                }
            }else{
            if(context.ownerDocument&&(elem=context.ownerDocument.getElementById(m))&&contains(context,elem)&&elem.id===m){
                results.push(elem);
                return results;
            }
        }
    }else if(match[2]){
    push.apply(results,slice.call(context.getElementsByTagName(selector),0));
    return results;
}else if((m=match[3])&&assertUsableClassName&&context.getElementsByClassName){
    push.apply(results,slice.call(context.getElementsByClassName(m),0));
    return results;
}
}
}
return select(selector.replace(rtrim,"$1"),context,results,seed,xml);
}
Sizzle.matches=function(expr,elements){
    return Sizzle(expr,null,null,elements);
};

Sizzle.matchesSelector=function(elem,expr){
    return Sizzle(expr,null,null,[elem]).length>0;
};

function createInputPseudo(type){
    return function(elem){
        var name=elem.nodeName.toLowerCase();
        return name==="input"&&elem.type===type;
    };

}
function createButtonPseudo(type){
    return function(elem){
        var name=elem.nodeName.toLowerCase();
        return(name==="input"||name==="button")&&elem.type===type;
    };

}
function createPositionalPseudo(fn){
    return markFunction(function(argument){
        argument=+argument;
        return markFunction(function(seed,matches){
            var j,matchIndexes=fn([],seed.length,argument),i=matchIndexes.length;
            while(i--){
                if(seed[(j=matchIndexes[i])]){
                    seed[j]=!(matches[j]=seed[j]);
                }
            }
        });
});
}
getText=Sizzle.getText=function(elem){
    var node,ret="",i=0,nodeType=elem.nodeType;
    if(nodeType){
        if(nodeType===1||nodeType===9||nodeType===11){
            if(typeof elem.textContent==="string"){
                return elem.textContent;
            }else{
                for(elem=elem.firstChild;elem;elem=elem.nextSibling){
                    ret+=getText(elem);
                }
                }
            }else if(nodeType===3||nodeType===4){
    return elem.nodeValue;
}
}else{
    for(;(node=elem[i]);i++){
        ret+=getText(node);
    }
    }
return ret;
};

isXML=Sizzle.isXML=function(elem){
    var documentElement=elem&&(elem.ownerDocument||elem).documentElement;
    return documentElement?documentElement.nodeName!=="HTML":false;
};

contains=Sizzle.contains=docElem.contains?function(a,b){
    var adown=a.nodeType===9?a.documentElement:a,bup=b&&b.parentNode;
    return a===bup||!!(bup&&bup.nodeType===1&&adown.contains&&adown.contains(bup));
}:docElem.compareDocumentPosition?function(a,b){
    return b&&!!(a.compareDocumentPosition(b)&16);
}:function(a,b){
    while((b=b.parentNode)){
        if(b===a){
            return true;
        }
    }
return false;
};

Sizzle.attr=function(elem,name){
    var val,xml=isXML(elem);
    if(!xml){
        name=name.toLowerCase();
    }
    if((val=Expr.attrHandle[name])){
        return val(elem);
    }
    if(xml||assertAttributes){
        return elem.getAttribute(name);
    }
    val=elem.getAttributeNode(name);
    return val?typeof elem[name]==="boolean"?elem[name]?name:null:val.specified?val.value:null:null;
};

Expr=Sizzle.selectors={
    cacheLength:50,
    createPseudo:markFunction,
    match:matchExpr,
    attrHandle:assertHrefNotNormalized?{}:{
        "href":function(elem){
            return elem.getAttribute("href",2);
        },
        "type":function(elem){
            return elem.getAttribute("type");
        }
    },
find:{
    "ID":assertGetIdNotName?function(id,context,xml){
        if(typeof context.getElementById!==strundefined&&!xml){
            var m=context.getElementById(id);
            return m&&m.parentNode?[m]:[];
        }
    }:function(id,context,xml){
    if(typeof context.getElementById!==strundefined&&!xml){
        var m=context.getElementById(id);
        return m?m.id===id||typeof m.getAttributeNode!==strundefined&&m.getAttributeNode("id").value===id?[m]:undefined:[];
    }
},
"TAG":assertTagNameNoComments?function(tag,context){
    if(typeof context.getElementsByTagName!==strundefined){
        return context.getElementsByTagName(tag);
    }
}:function(tag,context){
    var results=context.getElementsByTagName(tag);
    if(tag==="*"){
        var elem,tmp=[],i=0;
        for(;(elem=results[i]);i++){
            if(elem.nodeType===1){
                tmp.push(elem);
            }
        }
    return tmp;
}
return results;
},
"NAME":assertUsableName&&function(tag,context){
    if(typeof context.getElementsByName!==strundefined){
        return context.getElementsByName(name);
    }
},
"CLASS":assertUsableClassName&&function(className,context,xml){
    if(typeof context.getElementsByClassName!==strundefined&&!xml){
        return context.getElementsByClassName(className);
    }
}
},
relative:{
    ">":{
        dir:"parentNode",
        first:true
    },
    " ":{
        dir:"parentNode"
    },
    "+":{
        dir:"previousSibling",
        first:true
    },
    "~":{
        dir:"previousSibling"
    }
},
preFilter:{
    "ATTR":function(match){
        match[1]=match[1].replace(rbackslash,"");
        match[3]=(match[4]||match[5]||"").replace(rbackslash,"");
        if(match[2]==="~="){
            match[3]=" "+match[3]+" ";
        }
        return match.slice(0,4);
    },
    "CHILD":function(match){
        match[1]=match[1].toLowerCase();
        if(match[1]==="nth"){
            if(!match[2]){
                Sizzle.error(match[0]);
            }
            match[3]=+(match[3]?match[4]+(match[5]||1):2*(match[2]==="even"||match[2]==="odd"));
            match[4]=+((match[6]+match[7])||match[2]==="odd");
        }else if(match[2]){
            Sizzle.error(match[0]);
        }
        return match;
    },
    "PSEUDO":function(match){
        var unquoted,excess;
        if(matchExpr["CHILD"].test(match[0])){
            return null;
        }
        if(match[3]){
            match[2]=match[3];
        }else if((unquoted=match[4])){
            if(rpseudo.test(unquoted)&&(excess=tokenize(unquoted,true))&&(excess=unquoted.indexOf(")",unquoted.length-excess)-unquoted.length)){
                unquoted=unquoted.slice(0,excess);
                match[0]=match[0].slice(0,excess);
            }
            match[2]=unquoted;
        }
        return match.slice(0,3);
    }
},
filter:{
    "ID":assertGetIdNotName?function(id){
        id=id.replace(rbackslash,"");
        return function(elem){
            return elem.getAttribute("id")===id;
        };
    
}:function(id){
    id=id.replace(rbackslash,"");
    return function(elem){
        var node=typeof elem.getAttributeNode!==strundefined&&elem.getAttributeNode("id");
        return node&&node.value===id;
    };

},
"TAG":function(nodeName){
    if(nodeName==="*"){
        return function(){
            return true;
        };
    
}
nodeName=nodeName.replace(rbackslash,"").toLowerCase();
return function(elem){
    return elem.nodeName&&elem.nodeName.toLowerCase()===nodeName;
};

},
"CLASS":function(className){
    var pattern=classCache[expando][className+" "];
    return pattern||(pattern=new RegExp("(^|"+whitespace+")"+className+"("+whitespace+"|$)"))&&classCache(className,function(elem){
        return pattern.test(elem.className||(typeof elem.getAttribute!==strundefined&&elem.getAttribute("class"))||"");
    });
},
"ATTR":function(name,operator,check){
    return function(elem,context){
        var result=Sizzle.attr(elem,name);
        if(result==null){
            return operator==="!=";
        }
        if(!operator){
            return true;
        }
        result+="";
        return operator==="="?result===check:operator==="!="?result!==check:operator==="^="?check&&result.indexOf(check)===0:operator==="*="?check&&result.indexOf(check)>-1:operator==="$="?check&&result.substr(result.length-check.length)===check:operator==="~="?(" "+result+" ").indexOf(check)>-1:operator==="|="?result===check||result.substr(0,check.length+1)===check+"-":false;
    };

},
"CHILD":function(type,argument,first,last){
    if(type==="nth"){
        return function(elem){
            var node,diff,parent=elem.parentNode;
            if(first===1&&last===0){
                return true;
            }
            if(parent){
                diff=0;
                for(node=parent.firstChild;node;node=node.nextSibling){
                    if(node.nodeType===1){
                        diff++;
                        if(elem===node){
                            break;
                        }
                    }
                }
            }
diff-=last;
return diff===first||(diff%first===0&&diff/first>=0);
};

}
return function(elem){
    var node=elem;
    switch(type){
        case"only":case"first":
            while((node=node.previousSibling)){
            if(node.nodeType===1){
                return false;
            }
        }
        if(type==="first"){
            return true;
        }
        node=elem;
    case"last":
        while((node=node.nextSibling)){
        if(node.nodeType===1){
            return false;
        }
    }
    return true;
}
};

},
"PSEUDO":function(pseudo,argument){
    var args,fn=Expr.pseudos[pseudo]||Expr.setFilters[pseudo.toLowerCase()]||Sizzle.error("unsupported pseudo: "+pseudo);
    if(fn[expando]){
        return fn(argument);
    }
    if(fn.length>1){
        args=[pseudo,pseudo,"",argument];
        return Expr.setFilters.hasOwnProperty(pseudo.toLowerCase())?markFunction(function(seed,matches){
            var idx,matched=fn(seed,argument),i=matched.length;
            while(i--){
                idx=indexOf.call(seed,matched[i]);
                seed[idx]=!(matches[idx]=matched[i]);
            }
        }):function(elem){
        return fn(elem,0,args);
    };

}
return fn;
}
},
pseudos:{
    "not":markFunction(function(selector){
        var input=[],results=[],matcher=compile(selector.replace(rtrim,"$1"));
        return matcher[expando]?markFunction(function(seed,matches,context,xml){
            var elem,unmatched=matcher(seed,null,xml,[]),i=seed.length;
            while(i--){
                if((elem=unmatched[i])){
                    seed[i]=!(matches[i]=elem);
                }
            }
        }):function(elem,context,xml){
        input[0]=elem;
        matcher(input,null,xml,results);
        return!results.pop();
    };

}),
"has":markFunction(function(selector){
    return function(elem){
        return Sizzle(selector,elem).length>0;
    };

}),
"contains":markFunction(function(text){
    return function(elem){
        return(elem.textContent||elem.innerText||getText(elem)).indexOf(text)>-1;
    };

}),
"enabled":function(elem){
    return elem.disabled===false;
},
"disabled":function(elem){
    return elem.disabled===true;
},
"checked":function(elem){
    var nodeName=elem.nodeName.toLowerCase();
    return(nodeName==="input"&&!!elem.checked)||(nodeName==="option"&&!!elem.selected);
},
"selected":function(elem){
    if(elem.parentNode){
        elem.parentNode.selectedIndex;
    }
    return elem.selected===true;
},
"parent":function(elem){
    return!Expr.pseudos["empty"](elem);
},
"empty":function(elem){
    var nodeType;
    elem=elem.firstChild;
    while(elem){
        if(elem.nodeName>"@"||(nodeType=elem.nodeType)===3||nodeType===4){
            return false;
        }
        elem=elem.nextSibling;
    }
    return true;
},
"header":function(elem){
    return rheader.test(elem.nodeName);
},
"text":function(elem){
    var type,attr;
    return elem.nodeName.toLowerCase()==="input"&&(type=elem.type)==="text"&&((attr=elem.getAttribute("type"))==null||attr.toLowerCase()===type);
},
"radio":createInputPseudo("radio"),
"checkbox":createInputPseudo("checkbox"),
"file":createInputPseudo("file"),
"password":createInputPseudo("password"),
"image":createInputPseudo("image"),
"submit":createButtonPseudo("submit"),
"reset":createButtonPseudo("reset"),
"button":function(elem){
    var name=elem.nodeName.toLowerCase();
    return name==="input"&&elem.type==="button"||name==="button";
},
"input":function(elem){
    return rinputs.test(elem.nodeName);
},
"focus":function(elem){
    var doc=elem.ownerDocument;
    return elem===doc.activeElement&&(!doc.hasFocus||doc.hasFocus())&&!!(elem.type||elem.href||~elem.tabIndex);
},
"active":function(elem){
    return elem===elem.ownerDocument.activeElement;
},
"first":createPositionalPseudo(function(){
    return[0];
}),
"last":createPositionalPseudo(function(matchIndexes,length){
    return[length-1];
}),
"eq":createPositionalPseudo(function(matchIndexes,length,argument){
    return[argument<0?argument+length:argument];
}),
"even":createPositionalPseudo(function(matchIndexes,length){
    for(var i=0;i<length;i+=2){
        matchIndexes.push(i);
    }
    return matchIndexes;
}),
"odd":createPositionalPseudo(function(matchIndexes,length){
    for(var i=1;i<length;i+=2){
        matchIndexes.push(i);
    }
    return matchIndexes;
}),
"lt":createPositionalPseudo(function(matchIndexes,length,argument){
    for(var i=argument<0?argument+length:argument;--i>=0;){
        matchIndexes.push(i);
    }
    return matchIndexes;
}),
"gt":createPositionalPseudo(function(matchIndexes,length,argument){
    for(var i=argument<0?argument+length:argument;++i<length;){
        matchIndexes.push(i);
    }
    return matchIndexes;
})
}
};

function siblingCheck(a,b,ret){
    if(a===b){
        return ret;
    }
    var cur=a.nextSibling;
    while(cur){
        if(cur===b){
            return-1;
        }
        cur=cur.nextSibling;
    }
    return 1;
}
sortOrder=docElem.compareDocumentPosition?function(a,b){
    if(a===b){
        hasDuplicate=true;
        return 0;
    }
    return(!a.compareDocumentPosition||!b.compareDocumentPosition?a.compareDocumentPosition:a.compareDocumentPosition(b)&4)?-1:1;
}:function(a,b){
    if(a===b){
        hasDuplicate=true;
        return 0;
    }else if(a.sourceIndex&&b.sourceIndex){
        return a.sourceIndex-b.sourceIndex;
    }
    var al,bl,ap=[],bp=[],aup=a.parentNode,bup=b.parentNode,cur=aup;
    if(aup===bup){
        return siblingCheck(a,b);
    }else if(!aup){
        return-1;
    }else if(!bup){
        return 1;
    }
    while(cur){
        ap.unshift(cur);
        cur=cur.parentNode;
    }
    cur=bup;
    while(cur){
        bp.unshift(cur);
        cur=cur.parentNode;
    }
    al=ap.length;
    bl=bp.length;
    for(var i=0;i<al&&i<bl;i++){
        if(ap[i]!==bp[i]){
            return siblingCheck(ap[i],bp[i]);
        }
    }
return i===al?siblingCheck(a,bp[i],-1):siblingCheck(ap[i],b,1);
};

[0,0].sort(sortOrder);
baseHasDuplicate=!hasDuplicate;
Sizzle.uniqueSort=function(results){
    var elem,duplicates=[],i=1,j=0;
    hasDuplicate=baseHasDuplicate;
    results.sort(sortOrder);
    if(hasDuplicate){
        for(;(elem=results[i]);i++){
            if(elem===results[i-1]){
                j=duplicates.push(i);
            }
        }
    while(j--){
        results.splice(duplicates[j],1);
    }
}
return results;
};

Sizzle.error=function(msg){
    throw new Error("Syntax error, unrecognized expression: "+msg);
};

function tokenize(selector,parseOnly){
    var matched,match,tokens,type,soFar,groups,preFilters,cached=tokenCache[expando][selector+" "];
    if(cached){
        return parseOnly?0:cached.slice(0);
    }
    soFar=selector;
    groups=[];
    preFilters=Expr.preFilter;
    while(soFar){
        if(!matched||(match=rcomma.exec(soFar))){
            if(match){
                soFar=soFar.slice(match[0].length)||soFar;
            }
            groups.push(tokens=[]);
        }
        matched=false;
        if((match=rcombinators.exec(soFar))){
            tokens.push(matched=new Token(match.shift()));
            soFar=soFar.slice(matched.length);
            matched.type=match[0].replace(rtrim," ");
        }
        for(type in Expr.filter){
            if((match=matchExpr[type].exec(soFar))&&(!preFilters[type]||(match=preFilters[type](match)))){
                tokens.push(matched=new Token(match.shift()));
                soFar=soFar.slice(matched.length);
                matched.type=type;
                matched.matches=match;
            }
        }
    if(!matched){
        break;
    }
}
return parseOnly?soFar.length:soFar?Sizzle.error(selector):tokenCache(selector,groups).slice(0);
}
function addCombinator(matcher,combinator,base){
    var dir=combinator.dir,checkNonElements=base&&combinator.dir==="parentNode",doneName=done++;
    return combinator.first?function(elem,context,xml){
        while((elem=elem[dir])){
            if(checkNonElements||elem.nodeType===1){
                return matcher(elem,context,xml);
            }
        }
    }:function(elem,context,xml){
    if(!xml){
        var cache,dirkey=dirruns+" "+doneName+" ",cachedkey=dirkey+cachedruns;
        while((elem=elem[dir])){
            if(checkNonElements||elem.nodeType===1){
                if((cache=elem[expando])===cachedkey){
                    return elem.sizset;
                }else if(typeof cache==="string"&&cache.indexOf(dirkey)===0){
                    if(elem.sizset){
                        return elem;
                    }
                }else{
                elem[expando]=cachedkey;
                if(matcher(elem,context,xml)){
                    elem.sizset=true;
                    return elem;
                }
                elem.sizset=false;
            }
        }
    }
}else{
    while((elem=elem[dir])){
        if(checkNonElements||elem.nodeType===1){
            if(matcher(elem,context,xml)){
                return elem;
            }
        }
    }
}
};

}
function elementMatcher(matchers){
    return matchers.length>1?function(elem,context,xml){
        var i=matchers.length;
        while(i--){
            if(!matchers[i](elem,context,xml)){
                return false;
            }
        }
    return true;
}:matchers[0];
}
function condense(unmatched,map,filter,context,xml){
    var elem,newUnmatched=[],i=0,len=unmatched.length,mapped=map!=null;
    for(;i<len;i++){
        if((elem=unmatched[i])){
            if(!filter||filter(elem,context,xml)){
                newUnmatched.push(elem);
                if(mapped){
                    map.push(i);
                }
            }
        }
    }
return newUnmatched;
}
function setMatcher(preFilter,selector,matcher,postFilter,postFinder,postSelector){
    if(postFilter&&!postFilter[expando]){
        postFilter=setMatcher(postFilter);
    }
    if(postFinder&&!postFinder[expando]){
        postFinder=setMatcher(postFinder,postSelector);
    }
    return markFunction(function(seed,results,context,xml){
        var temp,i,elem,preMap=[],postMap=[],preexisting=results.length,elems=seed||multipleContexts(selector||"*",context.nodeType?[context]:context,[]),matcherIn=preFilter&&(seed||!selector)?condense(elems,preMap,preFilter,context,xml):elems,matcherOut=matcher?postFinder||(seed?preFilter:preexisting||postFilter)?[]:results:matcherIn;
        if(matcher){
            matcher(matcherIn,matcherOut,context,xml);
        }
        if(postFilter){
            temp=condense(matcherOut,postMap);
            postFilter(temp,[],context,xml);
            i=temp.length;
            while(i--){
                if((elem=temp[i])){
                    matcherOut[postMap[i]]=!(matcherIn[postMap[i]]=elem);
                }
            }
        }
    if(seed){
        if(postFinder||preFilter){
            if(postFinder){
                temp=[];
                i=matcherOut.length;
                while(i--){
                    if((elem=matcherOut[i])){
                        temp.push((matcherIn[i]=elem));
                    }
                }
            postFinder(null,(matcherOut=[]),temp,xml);
        }
        i=matcherOut.length;
        while(i--){
            if((elem=matcherOut[i])&&(temp=postFinder?indexOf.call(seed,elem):preMap[i])>-1){
                seed[temp]=!(results[temp]=elem);
            }
        }
    }
}else{
    matcherOut=condense(matcherOut===results?matcherOut.splice(preexisting,matcherOut.length):matcherOut);
    if(postFinder){
        postFinder(null,results,matcherOut,xml);
    }else{
        push.apply(results,matcherOut);
    }
}
});
}
function matcherFromTokens(tokens){
    var checkContext,matcher,j,len=tokens.length,leadingRelative=Expr.relative[tokens[0].type],implicitRelative=leadingRelative||Expr.relative[" "],i=leadingRelative?1:0,matchContext=addCombinator(function(elem){
        return elem===checkContext;
    },implicitRelative,true),matchAnyContext=addCombinator(function(elem){
        return indexOf.call(checkContext,elem)>-1;
    },implicitRelative,true),matchers=[function(elem,context,xml){
        return(!leadingRelative&&(xml||context!==outermostContext))||((checkContext=context).nodeType?matchContext(elem,context,xml):matchAnyContext(elem,context,xml));
    }];
    for(;i<len;i++){
        if((matcher=Expr.relative[tokens[i].type])){
            matchers=[addCombinator(elementMatcher(matchers),matcher)];
        }else{
            matcher=Expr.filter[tokens[i].type].apply(null,tokens[i].matches);
            if(matcher[expando]){
                j=++i;
                for(;j<len;j++){
                    if(Expr.relative[tokens[j].type]){
                        break;
                    }
                }
            return setMatcher(i>1&&elementMatcher(matchers),i>1&&tokens.slice(0,i-1).join("").replace(rtrim,"$1"),matcher,i<j&&matcherFromTokens(tokens.slice(i,j)),j<len&&matcherFromTokens((tokens=tokens.slice(j))),j<len&&tokens.join(""));
        }
        matchers.push(matcher);
    }
    }
return elementMatcher(matchers);
}
function matcherFromGroupMatchers(elementMatchers,setMatchers){
    var bySet=setMatchers.length>0,byElement=elementMatchers.length>0,superMatcher=function(seed,context,xml,results,expandContext){
        var elem,j,matcher,setMatched=[],matchedCount=0,i="0",unmatched=seed&&[],outermost=expandContext!=null,contextBackup=outermostContext,elems=seed||byElement&&Expr.find["TAG"]("*",expandContext&&context.parentNode||context),dirrunsUnique=(dirruns+=contextBackup==null?1:Math.E);
        if(outermost){
            outermostContext=context!==document&&context;
            cachedruns=superMatcher.el;
        }
        for(;(elem=elems[i])!=null;i++){
            if(byElement&&elem){
                for(j=0;(matcher=elementMatchers[j]);j++){
                    if(matcher(elem,context,xml)){
                        results.push(elem);
                        break;
                    }
                }
            if(outermost){
                dirruns=dirrunsUnique;
                cachedruns=++superMatcher.el;
            }
        }
        if(bySet){
            if((elem=!matcher&&elem)){
                matchedCount--;
            }
            if(seed){
                unmatched.push(elem);
            }
        }
    }
matchedCount+=i;
if(bySet&&i!==matchedCount){
    for(j=0;(matcher=setMatchers[j]);j++){
        matcher(unmatched,setMatched,context,xml);
    }
    if(seed){
        if(matchedCount>0){
            while(i--){
                if(!(unmatched[i]||setMatched[i])){
                    setMatched[i]=pop.call(results);
                }
            }
        }
setMatched=condense(setMatched);
}
push.apply(results,setMatched);
if(outermost&&!seed&&setMatched.length>0&&(matchedCount+setMatchers.length)>1){
    Sizzle.uniqueSort(results);
}
}
if(outermost){
    dirruns=dirrunsUnique;
    outermostContext=contextBackup;
}
return unmatched;
};

superMatcher.el=0;
return bySet?markFunction(superMatcher):superMatcher;
}
compile=Sizzle.compile=function(selector,group){
    var i,setMatchers=[],elementMatchers=[],cached=compilerCache[expando][selector+" "];
    if(!cached){
        if(!group){
            group=tokenize(selector);
        }
        i=group.length;
        while(i--){
            cached=matcherFromTokens(group[i]);
            if(cached[expando]){
                setMatchers.push(cached);
            }else{
                elementMatchers.push(cached);
            }
        }
    cached=compilerCache(selector,matcherFromGroupMatchers(elementMatchers,setMatchers));
}
return cached;
};

function multipleContexts(selector,contexts,results){
    var i=0,len=contexts.length;
    for(;i<len;i++){
        Sizzle(selector,contexts[i],results);
    }
    return results;
}
function select(selector,context,results,seed,xml){
    var i,tokens,token,type,find,match=tokenize(selector),j=match.length;
    if(!seed){
        if(match.length===1){
            tokens=match[0]=match[0].slice(0);
            if(tokens.length>2&&(token=tokens[0]).type==="ID"&&context.nodeType===9&&!xml&&Expr.relative[tokens[1].type]){
                context=Expr.find["ID"](token.matches[0].replace(rbackslash,""),context,xml)[0];
                if(!context){
                    return results;
                }
                selector=selector.slice(tokens.shift().length);
            }
            for(i=matchExpr["POS"].test(selector)?-1:tokens.length-1;i>=0;i--){
                token=tokens[i];
                if(Expr.relative[(type=token.type)]){
                    break;
                }
                if((find=Expr.find[type])){
                    if((seed=find(token.matches[0].replace(rbackslash,""),rsibling.test(tokens[0].type)&&context.parentNode||context,xml))){
                        tokens.splice(i,1);
                        selector=seed.length&&tokens.join("");
                        if(!selector){
                            push.apply(results,slice.call(seed,0));
                            return results;
                        }
                        break;
                    }
                }
            }
        }
}
compile(selector,match)(seed,context,xml,results,rsibling.test(selector));
return results;
}
if(document.querySelectorAll){
    (function(){
        var disconnectedMatch,oldSelect=select,rescape=/'|\\/g,rattributeQuotes=/\=[\x20\t\r\n\f]*([^'"\]]*)[\x20\t\r\n\f]*\]/g,rbuggyQSA=[":focus"],rbuggyMatches=[":active"],matches=docElem.matchesSelector||docElem.mozMatchesSelector||docElem.webkitMatchesSelector||docElem.oMatchesSelector||docElem.msMatchesSelector;
        assert(function(div){
            div.innerHTML="<select><option selected=''></option></select>";
            if(!div.querySelectorAll("[selected]").length){
                rbuggyQSA.push("\\["+whitespace+"*(?:checked|disabled|ismap|multiple|readonly|selected|value)");
            }
            if(!div.querySelectorAll(":checked").length){
                rbuggyQSA.push(":checked");
            }
        });
    assert(function(div){
        div.innerHTML="<p test=''></p>";
        if(div.querySelectorAll("[test^='']").length){
            rbuggyQSA.push("[*^$]="+whitespace+"*(?:\"\"|'')");
        }
        div.innerHTML="<input type='hidden'/>";
        if(!div.querySelectorAll(":enabled").length){
            rbuggyQSA.push(":enabled",":disabled");
        }
    });
    rbuggyQSA=new RegExp(rbuggyQSA.join("|"));
    select=function(selector,context,results,seed,xml){
        if(!seed&&!xml&&!rbuggyQSA.test(selector)){
            var groups,i,old=true,nid=expando,newContext=context,newSelector=context.nodeType===9&&selector;
            if(context.nodeType===1&&context.nodeName.toLowerCase()!=="object"){
                groups=tokenize(selector);
                if((old=context.getAttribute("id"))){
                    nid=old.replace(rescape,"\\$&");
                }else{
                    context.setAttribute("id",nid);
                }
                nid="[id='"+nid+"'] ";
                i=groups.length;
                while(i--){
                    groups[i]=nid+groups[i].join("");
                }
                newContext=rsibling.test(selector)&&context.parentNode||context;
                newSelector=groups.join(",");
            }
            if(newSelector){
                try{
                    push.apply(results,slice.call(newContext.querySelectorAll(newSelector),0));
                    return results;
                }catch(qsaError){}finally{
                    if(!old){
                        context.removeAttribute("id");
                    }
                }
            }
    }
return oldSelect(selector,context,results,seed,xml);
};

if(matches){
    assert(function(div){
        disconnectedMatch=matches.call(div,"div");
        try{
            matches.call(div,"[test!='']:sizzle");
            rbuggyMatches.push("!=",pseudos);
        }catch(e){}
    });
rbuggyMatches=new RegExp(rbuggyMatches.join("|"));
Sizzle.matchesSelector=function(elem,expr){
    expr=expr.replace(rattributeQuotes,"='$1']");
    if(!isXML(elem)&&!rbuggyMatches.test(expr)&&!rbuggyQSA.test(expr)){
        try{
            var ret=matches.call(elem,expr);
            if(ret||disconnectedMatch||elem.document&&elem.document.nodeType!==11){
                return ret;
            }
        }catch(e){}
}
return Sizzle(expr,null,null,[elem]).length>0;
};

}
})();
}
Expr.pseudos["nth"]=Expr.pseudos["eq"];
function setFilters(){}
Expr.filters=setFilters.prototype=Expr.pseudos;
Expr.setFilters=new setFilters();
Sizzle.attr=jQuery.attr;
jQuery.find=Sizzle;
jQuery.expr=Sizzle.selectors;
jQuery.expr[":"]=jQuery.expr.pseudos;
jQuery.unique=Sizzle.uniqueSort;
jQuery.text=Sizzle.getText;
jQuery.isXMLDoc=Sizzle.isXML;
jQuery.contains=Sizzle.contains;
})(window);
var runtil=/Until$/,rparentsprev=/^(?:parents|prev(?:Until|All))/,isSimple=/^.[^:#\[\.,]*$/,rneedsContext=jQuery.expr.match.needsContext,guaranteedUnique={
    children:true,
    contents:true,
    next:true,
    prev:true
};

jQuery.fn.extend({
    find:function(selector){
        var i,l,length,n,r,ret,self=this;
        if(typeof selector!=="string"){
            return jQuery(selector).filter(function(){
                for(i=0,l=self.length;i<l;i++){
                    if(jQuery.contains(self[i],this)){
                        return true;
                    }
                }
                });
}
ret=this.pushStack("","find",selector);
    for(i=0,l=this.length;i<l;i++){
    length=ret.length;
    jQuery.find(selector,this[i],ret);
    if(i>0){
        for(n=length;n<ret.length;n++){
            for(r=0;r<length;r++){
                if(ret[r]===ret[n]){
                    ret.splice(n--,1);
                    break;
                }
            }
            }
        }
}
return ret;
},
has:function(target){
    var i,targets=jQuery(target,this),len=targets.length;
    return this.filter(function(){
        for(i=0;i<len;i++){
            if(jQuery.contains(this,targets[i])){
                return true;
            }
        }
        });
},
not:function(selector){
    return this.pushStack(winnow(this,selector,false),"not",selector);
},
filter:function(selector){
    return this.pushStack(winnow(this,selector,true),"filter",selector);
},
is:function(selector){
    return!!selector&&(typeof selector==="string"?rneedsContext.test(selector)?jQuery(selector,this.context).index(this[0])>=0:jQuery.filter(selector,this).length>0:this.filter(selector).length>0);
},
closest:function(selectors,context){
    var cur,i=0,l=this.length,ret=[],pos=rneedsContext.test(selectors)||typeof selectors!=="string"?jQuery(selectors,context||this.context):0;
    for(;i<l;i++){
        cur=this[i];
        while(cur&&cur.ownerDocument&&cur!==context&&cur.nodeType!==11){
            if(pos?pos.index(cur)>-1:jQuery.find.matchesSelector(cur,selectors)){
                ret.push(cur);
                break;
            }
            cur=cur.parentNode;
        }
    }
ret=ret.length>1?jQuery.unique(ret):ret;
return this.pushStack(ret,"closest",selectors);
},
index:function(elem){
    if(!elem){
        return(this[0]&&this[0].parentNode)?this.prevAll().length:-1;
    }
    if(typeof elem==="string"){
        return jQuery.inArray(this[0],jQuery(elem));
    }
    return jQuery.inArray(elem.jquery?elem[0]:elem,this);
},
add:function(selector,context){
    var set=typeof selector==="string"?jQuery(selector,context):jQuery.makeArray(selector&&selector.nodeType?[selector]:selector),all=jQuery.merge(this.get(),set);
    return this.pushStack(isDisconnected(set[0])||isDisconnected(all[0])?all:jQuery.unique(all));
},
addBack:function(selector){
    return this.add(selector==null?this.prevObject:this.prevObject.filter(selector));
}
});
jQuery.fn.andSelf=jQuery.fn.addBack;
function isDisconnected(node){
    return!node||!node.parentNode||node.parentNode.nodeType===11;
}
function sibling(cur,dir){
    do{
        cur=cur[dir];
    }while(cur&&cur.nodeType!==1);
    return cur;
}
jQuery.each({
    parent:function(elem){
        var parent=elem.parentNode;
        return parent&&parent.nodeType!==11?parent:null;
    },
    parents:function(elem){
        return jQuery.dir(elem,"parentNode");
    },
    parentsUntil:function(elem,i,until){
        return jQuery.dir(elem,"parentNode",until);
    },
    next:function(elem){
        return sibling(elem,"nextSibling");
    },
    prev:function(elem){
        return sibling(elem,"previousSibling");
    },
    nextAll:function(elem){
        return jQuery.dir(elem,"nextSibling");
    },
    prevAll:function(elem){
        return jQuery.dir(elem,"previousSibling");
    },
    nextUntil:function(elem,i,until){
        return jQuery.dir(elem,"nextSibling",until);
    },
    prevUntil:function(elem,i,until){
        return jQuery.dir(elem,"previousSibling",until);
    },
    siblings:function(elem){
        return jQuery.sibling((elem.parentNode||{}).firstChild,elem);
    },
    children:function(elem){
        return jQuery.sibling(elem.firstChild);
    },
    contents:function(elem){
        return jQuery.nodeName(elem,"iframe")?elem.contentDocument||elem.contentWindow.document:jQuery.merge([],elem.childNodes);
    }
},function(name,fn){
    jQuery.fn[name]=function(until,selector){
        var ret=jQuery.map(this,fn,until);
        if(!runtil.test(name)){
            selector=until;
        }
        if(selector&&typeof selector==="string"){
            ret=jQuery.filter(selector,ret);
        }
        ret=this.length>1&&!guaranteedUnique[name]?jQuery.unique(ret):ret;
        if(this.length>1&&rparentsprev.test(name)){
            ret=ret.reverse();
        }
        return this.pushStack(ret,name,core_slice.call(arguments).join(","));
    };

});
jQuery.extend({
    filter:function(expr,elems,not){
        if(not){
            expr=":not("+expr+")";
        }
        return elems.length===1?jQuery.find.matchesSelector(elems[0],expr)?[elems[0]]:[]:jQuery.find.matches(expr,elems);
    },
    dir:function(elem,dir,until){
        var matched=[],cur=elem[dir];
        while(cur&&cur.nodeType!==9&&(until===undefined||cur.nodeType!==1||!jQuery(cur).is(until))){
            if(cur.nodeType===1){
                matched.push(cur);
            }
            cur=cur[dir];
        }
        return matched;
    },
    sibling:function(n,elem){
        var r=[];
        for(;n;n=n.nextSibling){
            if(n.nodeType===1&&n!==elem){
                r.push(n);
            }
        }
    return r;
}
});
function winnow(elements,qualifier,keep){
    qualifier=qualifier||0;
    if(jQuery.isFunction(qualifier)){
        return jQuery.grep(elements,function(elem,i){
            var retVal=!!qualifier.call(elem,i,elem);
            return retVal===keep;
        });
    }else if(qualifier.nodeType){
        return jQuery.grep(elements,function(elem,i){
            return(elem===qualifier)===keep;
        });
    }else if(typeof qualifier==="string"){
        var filtered=jQuery.grep(elements,function(elem){
            return elem.nodeType===1;
        });
        if(isSimple.test(qualifier)){
            return jQuery.filter(qualifier,filtered,!keep);
        }else{
            qualifier=jQuery.filter(qualifier,filtered);
        }
    }
return jQuery.grep(elements,function(elem,i){
    return(jQuery.inArray(elem,qualifier)>=0)===keep;
});
}
function createSafeFragment(document){
    var list=nodeNames.split("|"),safeFrag=document.createDocumentFragment();
    if(safeFrag.createElement){
        while(list.length){
            safeFrag.createElement(list.pop());
        }
    }
return safeFrag;
}
var nodeNames="abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|"+"header|hgroup|mark|meter|nav|output|progress|section|summary|time|video",rinlinejQuery=/ jQuery\d+="(?:null|\d+)"/g,rleadingWhitespace=/^\s+/,rxhtmlTag=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,rtagName=/<([\w:]+)/,rtbody=/<tbody/i,rhtml=/<|&#?\w+;/,rnoInnerhtml=/<(?:script|style|link)/i,rnocache=/<(?:script|object|embed|option|style)/i,rnoshimcache=new RegExp("<(?:"+nodeNames+")[\\s/>]","i"),rcheckableType=/^(?:checkbox|radio)$/,rchecked=/checked\s*(?:[^=]|=\s*.checked.)/i,rscriptType=/\/(java|ecma)script/i,rcleanScript=/^\s*<!(?:\[CDATA\[|\-\-)|[\]\-]{2}>\s*$/g,wrapMap={
    option:[1,"<select multiple='multiple'>","</select>"],
    legend:[1,"<fieldset>","</fieldset>"],
    thead:[1,"<table>","</table>"],
    tr:[2,"<table><tbody>","</tbody></table>"],
    td:[3,"<table><tbody><tr>","</tr></tbody></table>"],
    col:[2,"<table><tbody></tbody><colgroup>","</colgroup></table>"],
    area:[1,"<map>","</map>"],
    _default:[0,"",""]
    },safeFragment=createSafeFragment(document),fragmentDiv=safeFragment.appendChild(document.createElement("div"));
wrapMap.optgroup=wrapMap.option;
wrapMap.tbody=wrapMap.tfoot=wrapMap.colgroup=wrapMap.caption=wrapMap.thead;
wrapMap.th=wrapMap.td;
if(!jQuery.support.htmlSerialize){
    wrapMap._default=[1,"X<div>","</div>"];
}
jQuery.fn.extend({
    text:function(value){
        return jQuery.access(this,function(value){
            return value===undefined?jQuery.text(this):this.empty().append((this[0]&&this[0].ownerDocument||document).createTextNode(value));
        },null,value,arguments.length);
    },
    wrapAll:function(html){
        if(jQuery.isFunction(html)){
            return this.each(function(i){
                jQuery(this).wrapAll(html.call(this,i));
            });
        }
        if(this[0]){
            var wrap=jQuery(html,this[0].ownerDocument).eq(0).clone(true);
            if(this[0].parentNode){
                wrap.insertBefore(this[0]);
            }
            wrap.map(function(){
                var elem=this;
                while(elem.firstChild&&elem.firstChild.nodeType===1){
                    elem=elem.firstChild;
                }
                return elem;
            }).append(this);
        }
        return this;
    },
    wrapInner:function(html){
        if(jQuery.isFunction(html)){
            return this.each(function(i){
                jQuery(this).wrapInner(html.call(this,i));
            });
        }
        return this.each(function(){
            var self=jQuery(this),contents=self.contents();
            if(contents.length){
                contents.wrapAll(html);
            }else{
                self.append(html);
            }
        });
},
wrap:function(html){
    var isFunction=jQuery.isFunction(html);
    return this.each(function(i){
        jQuery(this).wrapAll(isFunction?html.call(this,i):html);
    });
},
unwrap:function(){
    return this.parent().each(function(){
        if(!jQuery.nodeName(this,"body")){
            jQuery(this).replaceWith(this.childNodes);
        }
    }).end();
},
append:function(){
    return this.domManip(arguments,true,function(elem){
        if(this.nodeType===1||this.nodeType===11){
            this.appendChild(elem);
        }
    });
},
prepend:function(){
    return this.domManip(arguments,true,function(elem){
        if(this.nodeType===1||this.nodeType===11){
            this.insertBefore(elem,this.firstChild);
        }
    });
},
before:function(){
    if(!isDisconnected(this[0])){
        return this.domManip(arguments,false,function(elem){
            this.parentNode.insertBefore(elem,this);
        });
    }
    if(arguments.length){
        var set=jQuery.clean(arguments);
        return this.pushStack(jQuery.merge(set,this),"before",this.selector);
    }
},
after:function(){
    if(!isDisconnected(this[0])){
        return this.domManip(arguments,false,function(elem){
            this.parentNode.insertBefore(elem,this.nextSibling);
        });
    }
    if(arguments.length){
        var set=jQuery.clean(arguments);
        return this.pushStack(jQuery.merge(this,set),"after",this.selector);
    }
},
remove:function(selector,keepData){
    var elem,i=0;
    for(;(elem=this[i])!=null;i++){
        if(!selector||jQuery.filter(selector,[elem]).length){
            if(!keepData&&elem.nodeType===1){
                jQuery.cleanData(elem.getElementsByTagName("*"));
                jQuery.cleanData([elem]);
            }
            if(elem.parentNode){
                elem.parentNode.removeChild(elem);
            }
        }
    }
return this;
},
empty:function(){
    var elem,i=0;
    for(;(elem=this[i])!=null;i++){
        if(elem.nodeType===1){
            jQuery.cleanData(elem.getElementsByTagName("*"));
        }
        while(elem.firstChild){
            elem.removeChild(elem.firstChild);
        }
    }
return this;
},
clone:function(dataAndEvents,deepDataAndEvents){
    dataAndEvents=dataAndEvents==null?false:dataAndEvents;
    deepDataAndEvents=deepDataAndEvents==null?dataAndEvents:deepDataAndEvents;
    return this.map(function(){
        return jQuery.clone(this,dataAndEvents,deepDataAndEvents);
    });
},
html:function(value){
    return jQuery.access(this,function(value){
        var elem=this[0]||{},i=0,l=this.length;
        if(value===undefined){
            return elem.nodeType===1?elem.innerHTML.replace(rinlinejQuery,""):undefined;
        }
        if(typeof value==="string"&&!rnoInnerhtml.test(value)&&(jQuery.support.htmlSerialize||!rnoshimcache.test(value))&&(jQuery.support.leadingWhitespace||!rleadingWhitespace.test(value))&&!wrapMap[(rtagName.exec(value)||["",""])[1].toLowerCase()]){
            value=value.replace(rxhtmlTag,"<$1></$2>");
            try{
                for(;i<l;i++){
                    elem=this[i]||{};
                    
                    if(elem.nodeType===1){
                        jQuery.cleanData(elem.getElementsByTagName("*"));
                        elem.innerHTML=value;
                    }
                }
            elem=0;
        }catch(e){}
    }
    if(elem){
        this.empty().append(value);
    }
},null,value,arguments.length);
},
replaceWith:function(value){
    if(!isDisconnected(this[0])){
        if(jQuery.isFunction(value)){
            return this.each(function(i){
                var self=jQuery(this),old=self.html();
                self.replaceWith(value.call(this,i,old));
            });
        }
        if(typeof value!=="string"){
            value=jQuery(value).detach();
        }
        return this.each(function(){
            var next=this.nextSibling,parent=this.parentNode;
            jQuery(this).remove();
            if(next){
                jQuery(next).before(value);
            }else{
                jQuery(parent).append(value);
            }
        });
}
return this.length?this.pushStack(jQuery(jQuery.isFunction(value)?value():value),"replaceWith",value):this;
},
detach:function(selector){
    return this.remove(selector,true);
},
domManip:function(args,table,callback){
    args=[].concat.apply([],args);
    var results,first,fragment,iNoClone,i=0,value=args[0],scripts=[],l=this.length;
    if(!jQuery.support.checkClone&&l>1&&typeof value==="string"&&rchecked.test(value)){
        return this.each(function(){
            jQuery(this).domManip(args,table,callback);
        });
    }
    if(jQuery.isFunction(value)){
        return this.each(function(i){
            var self=jQuery(this);
            args[0]=value.call(this,i,table?self.html():undefined);
            self.domManip(args,table,callback);
        });
    }
    if(this[0]){
        results=jQuery.buildFragment(args,this,scripts);
        fragment=results.fragment;
        first=fragment.firstChild;
        if(fragment.childNodes.length===1){
            fragment=first;
        }
        if(first){
            table=table&&jQuery.nodeName(first,"tr");
            for(iNoClone=results.cacheable||l-1;i<l;i++){
                callback.call(table&&jQuery.nodeName(this[i],"table")?findOrAppend(this[i],"tbody"):this[i],i===iNoClone?fragment:jQuery.clone(fragment,true,true));
            }
            }
    fragment=first=null;
    if(scripts.length){
        jQuery.each(scripts,function(i,elem){
            if(elem.src){
                if(jQuery.ajax){
                    jQuery.ajax({
                        url:elem.src,
                        type:"GET",
                        dataType:"script",
                        async:false,
                        global:false,
                        "throws":true
                    });
                }else{
                    jQuery.error("no ajax");
                }
            }else{
            jQuery.globalEval((elem.text||elem.textContent||elem.innerHTML||"").replace(rcleanScript,""));
        }
        if(elem.parentNode){
            elem.parentNode.removeChild(elem);
        }
        });
}
}
return this;
}
});
function findOrAppend(elem,tag){
    return elem.getElementsByTagName(tag)[0]||elem.appendChild(elem.ownerDocument.createElement(tag));
}
function cloneCopyEvent(src,dest){
    if(dest.nodeType!==1||!jQuery.hasData(src)){
        return;
    }
    var type,i,l,oldData=jQuery._data(src),curData=jQuery._data(dest,oldData),events=oldData.events;
    if(events){
        delete curData.handle;
        curData.events={};
        
        for(type in events){
            for(i=0,l=events[type].length;i<l;i++){
                jQuery.event.add(dest,type,events[type][i]);
            }
            }
        }
if(curData.data){
    curData.data=jQuery.extend({},curData.data);
}
}
function cloneFixAttributes(src,dest){
    var nodeName;
    if(dest.nodeType!==1){
        return;
    }
    if(dest.clearAttributes){
        dest.clearAttributes();
    }
    if(dest.mergeAttributes){
        dest.mergeAttributes(src);
    }
    nodeName=dest.nodeName.toLowerCase();
    if(nodeName==="object"){
        if(dest.parentNode){
            dest.outerHTML=src.outerHTML;
        }
        if(jQuery.support.html5Clone&&(src.innerHTML&&!jQuery.trim(dest.innerHTML))){
            dest.innerHTML=src.innerHTML;
        }
    }else if(nodeName==="input"&&rcheckableType.test(src.type)){
    dest.defaultChecked=dest.checked=src.checked;
    if(dest.value!==src.value){
        dest.value=src.value;
    }
}else if(nodeName==="option"){
    dest.selected=src.defaultSelected;
}else if(nodeName==="input"||nodeName==="textarea"){
    dest.defaultValue=src.defaultValue;
}else if(nodeName==="script"&&dest.text!==src.text){
    dest.text=src.text;
}
dest.removeAttribute(jQuery.expando);
}
jQuery.buildFragment=function(args,context,scripts){
    var fragment,cacheable,cachehit,first=args[0];
    context=context||document;
    context=!context.nodeType&&context[0]||context;
    context=context.ownerDocument||context;
    if(args.length===1&&typeof first==="string"&&first.length<512&&context===document&&first.charAt(0)==="<"&&!rnocache.test(first)&&(jQuery.support.checkClone||!rchecked.test(first))&&(jQuery.support.html5Clone||!rnoshimcache.test(first))){
        cacheable=true;
        fragment=jQuery.fragments[first];
        cachehit=fragment!==undefined;
    }
    if(!fragment){
        fragment=context.createDocumentFragment();
        jQuery.clean(args,context,fragment,scripts);
        if(cacheable){
            jQuery.fragments[first]=cachehit&&fragment;
        }
    }
return{
    fragment:fragment,
    cacheable:cacheable
};

};

jQuery.fragments={};

jQuery.each({
    appendTo:"append",
    prependTo:"prepend",
    insertBefore:"before",
    insertAfter:"after",
    replaceAll:"replaceWith"
},function(name,original){
    jQuery.fn[name]=function(selector){
        var elems,i=0,ret=[],insert=jQuery(selector),l=insert.length,parent=this.length===1&&this[0].parentNode;
        if((parent==null||parent&&parent.nodeType===11&&parent.childNodes.length===1)&&l===1){
            insert[original](this[0]);
            return this;
        }else{
            for(;i<l;i++){
                elems=(i>0?this.clone(true):this).get();
                jQuery(insert[i])[original](elems);
                ret=ret.concat(elems);
            }
            return this.pushStack(ret,name,insert.selector);
        }
    };

});
function getAll(elem){
    if(typeof elem.getElementsByTagName!=="undefined"){
        return elem.getElementsByTagName("*");
    }else if(typeof elem.querySelectorAll!=="undefined"){
        return elem.querySelectorAll("*");
    }else{
        return[];
    }
}
function fixDefaultChecked(elem){
    if(rcheckableType.test(elem.type)){
        elem.defaultChecked=elem.checked;
    }
}
jQuery.extend({
    clone:function(elem,dataAndEvents,deepDataAndEvents){
        var srcElements,destElements,i,clone;
        if(jQuery.support.html5Clone||jQuery.isXMLDoc(elem)||!rnoshimcache.test("<"+elem.nodeName+">")){
            clone=elem.cloneNode(true);
        }else{
            fragmentDiv.innerHTML=elem.outerHTML;
            fragmentDiv.removeChild(clone=fragmentDiv.firstChild);
        }
        if((!jQuery.support.noCloneEvent||!jQuery.support.noCloneChecked)&&(elem.nodeType===1||elem.nodeType===11)&&!jQuery.isXMLDoc(elem)){
            cloneFixAttributes(elem,clone);
            srcElements=getAll(elem);
            destElements=getAll(clone);
            for(i=0;srcElements[i];++i){
                if(destElements[i]){
                    cloneFixAttributes(srcElements[i],destElements[i]);
                }
            }
            }
if(dataAndEvents){
    cloneCopyEvent(elem,clone);
    if(deepDataAndEvents){
        srcElements=getAll(elem);
        destElements=getAll(clone);
        for(i=0;srcElements[i];++i){
            cloneCopyEvent(srcElements[i],destElements[i]);
        }
        }
    }
srcElements=destElements=null;
return clone;
},
clean:function(elems,context,fragment,scripts){
    var i,j,elem,tag,wrap,depth,div,hasBody,tbody,len,handleScript,jsTags,safe=context===document&&safeFragment,ret=[];
    if(!context||typeof context.createDocumentFragment==="undefined"){
        context=document;
    }
    for(i=0;(elem=elems[i])!=null;i++){
        if(typeof elem==="number"){
            elem+="";
        }
        if(!elem){
            continue;
        }
        if(typeof elem==="string"){
            if(!rhtml.test(elem)){
                elem=context.createTextNode(elem);
            }else{
                safe=safe||createSafeFragment(context);
                div=context.createElement("div");
                safe.appendChild(div);
                elem=elem.replace(rxhtmlTag,"<$1></$2>");
                tag=(rtagName.exec(elem)||["",""])[1].toLowerCase();
                wrap=wrapMap[tag]||wrapMap._default;
                depth=wrap[0];
                div.innerHTML=wrap[1]+elem+wrap[2];
                while(depth--){
                    div=div.lastChild;
                }
                if(!jQuery.support.tbody){
                    hasBody=rtbody.test(elem);
                    tbody=tag==="table"&&!hasBody?div.firstChild&&div.firstChild.childNodes:wrap[1]==="<table>"&&!hasBody?div.childNodes:[];
                    for(j=tbody.length-1;j>=0;--j){
                        if(jQuery.nodeName(tbody[j],"tbody")&&!tbody[j].childNodes.length){
                            tbody[j].parentNode.removeChild(tbody[j]);
                        }
                    }
                    }
        if(!jQuery.support.leadingWhitespace&&rleadingWhitespace.test(elem)){
            div.insertBefore(context.createTextNode(rleadingWhitespace.exec(elem)[0]),div.firstChild);
        }
        elem=div.childNodes;
        div.parentNode.removeChild(div);
    }
    }
if(elem.nodeType){
    ret.push(elem);
}else{
    jQuery.merge(ret,elem);
}
}
if(div){
    elem=div=safe=null;
}
if(!jQuery.support.appendChecked){
    for(i=0;(elem=ret[i])!=null;i++){
        if(jQuery.nodeName(elem,"input")){
            fixDefaultChecked(elem);
        }else if(typeof elem.getElementsByTagName!=="undefined"){
            jQuery.grep(elem.getElementsByTagName("input"),fixDefaultChecked);
        }
    }
    }
if(fragment){
    handleScript=function(elem){
        if(!elem.type||rscriptType.test(elem.type)){
            return scripts?scripts.push(elem.parentNode?elem.parentNode.removeChild(elem):elem):fragment.appendChild(elem);
        }
    };
    
for(i=0;(elem=ret[i])!=null;i++){
    if(!(jQuery.nodeName(elem,"script")&&handleScript(elem))){
        fragment.appendChild(elem);
        if(typeof elem.getElementsByTagName!=="undefined"){
            jsTags=jQuery.grep(jQuery.merge([],elem.getElementsByTagName("script")),handleScript);
            ret.splice.apply(ret,[i+1,0].concat(jsTags));
            i+=jsTags.length;
        }
    }
}
}
return ret;
},
cleanData:function(elems,acceptData){
    var data,id,elem,type,i=0,internalKey=jQuery.expando,cache=jQuery.cache,deleteExpando=jQuery.support.deleteExpando,special=jQuery.event.special;
    for(;(elem=elems[i])!=null;i++){
        if(acceptData||jQuery.acceptData(elem)){
            id=elem[internalKey];
            data=id&&cache[id];
            if(data){
                if(data.events){
                    for(type in data.events){
                        if(special[type]){
                            jQuery.event.remove(elem,type);
                        }else{
                            jQuery.removeEvent(elem,type,data.handle);
                        }
                    }
                    }
        if(cache[id]){
            delete cache[id];
            if(deleteExpando){
                delete elem[internalKey];
            }else if(elem.removeAttribute){
                elem.removeAttribute(internalKey);
            }else{
                elem[internalKey]=null;
            }
            jQuery.deletedIds.push(id);
        }
    }
    }
}
}
});
(function(){
    var matched,browser;
    jQuery.uaMatch=function(ua){
        ua=ua.toLowerCase();
        var match=/(chrome)[ \/]([\w.]+)/.exec(ua)||(/(webkit)[ \/]([\w.]+)/.exec(ua))||(/(opera)(?:.*version|)[ \/]([\w.]+)/.exec(ua))||(/(msie) ([\w.]+)/.exec(ua))||ua.indexOf("compatible")<0&&/(mozilla)(?:.*? rv:([\w.]+)|)/.exec(ua)||[];
        return{
            browser:match[1]||"",
            version:match[2]||"0"
            };
        
};

matched=jQuery.uaMatch(navigator.userAgent);
    browser={};
    
    if(matched.browser){
    browser[matched.browser]=true;
    browser.version=matched.version;
}
if(browser.chrome){
    browser.webkit=true;
}else if(browser.webkit){
    browser.safari=true;
}
jQuery.browser=browser;
jQuery.sub=function(){
    function jQuerySub(selector,context){
        return new jQuerySub.fn.init(selector,context);
    }
    jQuery.extend(true,jQuerySub,this);
    jQuerySub.superclass=this;
    jQuerySub.fn=jQuerySub.prototype=this();
    jQuerySub.fn.constructor=jQuerySub;
    jQuerySub.sub=this.sub;
    jQuerySub.fn.init=function init(selector,context){
        if(context&&context instanceof jQuery&&!(context instanceof jQuerySub)){
            context=jQuerySub(context);
        }
        return jQuery.fn.init.call(this,selector,context,rootjQuerySub);
    };
    
    jQuerySub.fn.init.prototype=jQuerySub.fn;
    var rootjQuerySub=jQuerySub(document);
    return jQuerySub;
};

})();
var curCSS,iframe,iframeDoc,ralpha=/alpha\([^)]*\)/i,ropacity=/opacity=([^)]*)/,rposition=/^(top|right|bottom|left)$/,rdisplayswap=/^(none|table(?!-c[ea]).+)/,rmargin=/^margin/,rnumsplit=new RegExp("^("+core_pnum+")(.*)$","i"),rnumnonpx=new RegExp("^("+core_pnum+")(?!px)[a-z%]+$","i"),rrelNum=new RegExp("^([-+])=("+core_pnum+")","i"),elemdisplay={
    BODY:"block"
},cssShow={
    position:"absolute",
    visibility:"hidden",
    display:"block"
},cssNormalTransform={
    letterSpacing:0,
    fontWeight:400
},cssExpand=["Top","Right","Bottom","Left"],cssPrefixes=["Webkit","O","Moz","ms"],eventsToggle=jQuery.fn.toggle;
function vendorPropName(style,name){
    if(name in style){
        return name;
    }
    var capName=name.charAt(0).toUpperCase()+name.slice(1),origName=name,i=cssPrefixes.length;
    while(i--){
        name=cssPrefixes[i]+capName;
        if(name in style){
            return name;
        }
    }
return origName;
}
function isHidden(elem,el){
    elem=el||elem;
    return jQuery.css(elem,"display")==="none"||!jQuery.contains(elem.ownerDocument,elem);
}
function showHide(elements,show){
    var elem,display,values=[],index=0,length=elements.length;
    for(;index<length;index++){
        elem=elements[index];
        if(!elem.style){
            continue;
        }
        values[index]=jQuery._data(elem,"olddisplay");
        if(show){
            if(!values[index]&&elem.style.display==="none"){
                elem.style.display="";
            }
            if(elem.style.display===""&&isHidden(elem)){
                values[index]=jQuery._data(elem,"olddisplay",css_defaultDisplay(elem.nodeName));
            }
        }else{
        display=curCSS(elem,"display");
        if(!values[index]&&display!=="none"){
            jQuery._data(elem,"olddisplay",display);
        }
    }
    }
for(index=0;index<length;index++){
    elem=elements[index];
    if(!elem.style){
        continue;
    }
    if(!show||elem.style.display==="none"||elem.style.display===""){
        elem.style.display=show?values[index]||"":"none";
    }
}
return elements;
}
jQuery.fn.extend({
    css:function(name,value){
        return jQuery.access(this,function(elem,name,value){
            return value!==undefined?jQuery.style(elem,name,value):jQuery.css(elem,name);
        },name,value,arguments.length>1);
    },
    show:function(){
        return showHide(this,true);
    },
    hide:function(){
        return showHide(this);
    },
    toggle:function(state,fn2){
        var bool=typeof state==="boolean";
        if(jQuery.isFunction(state)&&jQuery.isFunction(fn2)){
            return eventsToggle.apply(this,arguments);
        }
        return this.each(function(){
            if(bool?state:isHidden(this)){
                jQuery(this).show();
            }else{
                jQuery(this).hide();
            }
        });
}
});
jQuery.extend({
    cssHooks:{
        opacity:{
            get:function(elem,computed){
                if(computed){
                    var ret=curCSS(elem,"opacity");
                    return ret===""?"1":ret;
                }
            }
        }
},
cssNumber:{
    "fillOpacity":true,
    "fontWeight":true,
    "lineHeight":true,
    "opacity":true,
    "orphans":true,
    "widows":true,
    "zIndex":true,
    "zoom":true
},
cssProps:{
    "float":jQuery.support.cssFloat?"cssFloat":"styleFloat"
    },
style:function(elem,name,value,extra){
    if(!elem||elem.nodeType===3||elem.nodeType===8||!elem.style){
        return;
    }
    var ret,type,hooks,origName=jQuery.camelCase(name),style=elem.style;
    name=jQuery.cssProps[origName]||(jQuery.cssProps[origName]=vendorPropName(style,origName));
    hooks=jQuery.cssHooks[name]||jQuery.cssHooks[origName];
    if(value!==undefined){
        type=typeof value;
        if(type==="string"&&(ret=rrelNum.exec(value))){
            value=(ret[1]+1)*ret[2]+parseFloat(jQuery.css(elem,name));
            type="number";
        }
        if(value==null||type==="number"&&isNaN(value)){
            return;
        }
        if(type==="number"&&!jQuery.cssNumber[origName]){
            value+="px";
        }
        if(!hooks||!("set"in hooks)||(value=hooks.set(elem,value,extra))!==undefined){
            try{
                style[name]=value;
            }catch(e){}
        }
    }else{
    if(hooks&&"get"in hooks&&(ret=hooks.get(elem,false,extra))!==undefined){
        return ret;
    }
    return style[name];
}
},
css:function(elem,name,numeric,extra){
    var val,num,hooks,origName=jQuery.camelCase(name);
    name=jQuery.cssProps[origName]||(jQuery.cssProps[origName]=vendorPropName(elem.style,origName));
    hooks=jQuery.cssHooks[name]||jQuery.cssHooks[origName];
    if(hooks&&"get"in hooks){
        val=hooks.get(elem,true,extra);
    }
    if(val===undefined){
        val=curCSS(elem,name);
    }
    if(val==="normal"&&name in cssNormalTransform){
        val=cssNormalTransform[name];
    }
    if(numeric||extra!==undefined){
        num=parseFloat(val);
        return numeric||jQuery.isNumeric(num)?num||0:val;
    }
    return val;
},
swap:function(elem,options,callback){
    var ret,name,old={};
    
    for(name in options){
        old[name]=elem.style[name];
        elem.style[name]=options[name];
    }
    ret=callback.call(elem);
    for(name in options){
        elem.style[name]=old[name];
    }
    return ret;
}
});
if(window.getComputedStyle){
    curCSS=function(elem,name){
        var ret,width,minWidth,maxWidth,computed=window.getComputedStyle(elem,null),style=elem.style;
        if(computed){
            ret=computed.getPropertyValue(name)||computed[name];
            if(ret===""&&!jQuery.contains(elem.ownerDocument,elem)){
                ret=jQuery.style(elem,name);
            }
            if(rnumnonpx.test(ret)&&rmargin.test(name)){
                width=style.width;
                minWidth=style.minWidth;
                maxWidth=style.maxWidth;
                style.minWidth=style.maxWidth=style.width=ret;
                ret=computed.width;
                style.width=width;
                style.minWidth=minWidth;
                style.maxWidth=maxWidth;
            }
        }
    return ret;
};

}else if(document.documentElement.currentStyle){
    curCSS=function(elem,name){
        var left,rsLeft,ret=elem.currentStyle&&elem.currentStyle[name],style=elem.style;
        if(ret==null&&style&&style[name]){
            ret=style[name];
        }
        if(rnumnonpx.test(ret)&&!rposition.test(name)){
            left=style.left;
            rsLeft=elem.runtimeStyle&&elem.runtimeStyle.left;
            if(rsLeft){
                elem.runtimeStyle.left=elem.currentStyle.left;
            }
            style.left=name==="fontSize"?"1em":ret;
            ret=style.pixelLeft+"px";
            style.left=left;
            if(rsLeft){
                elem.runtimeStyle.left=rsLeft;
            }
        }
    return ret===""?"auto":ret;
};

}
function setPositiveNumber(elem,value,subtract){
    var matches=rnumsplit.exec(value);
    return matches?Math.max(0,matches[1]-(subtract||0))+(matches[2]||"px"):value;
}
function augmentWidthOrHeight(elem,name,extra,isBorderBox){
    var i=extra===(isBorderBox?"border":"content")?4:name==="width"?1:0,val=0;
    for(;i<4;i+=2){
        if(extra==="margin"){
            val+=jQuery.css(elem,extra+cssExpand[i],true);
        }
        if(isBorderBox){
            if(extra==="content"){
                val-=parseFloat(curCSS(elem,"padding"+cssExpand[i]))||0;
            }
            if(extra!=="margin"){
                val-=parseFloat(curCSS(elem,"border"+cssExpand[i]+"Width"))||0;
            }
        }else{
        val+=parseFloat(curCSS(elem,"padding"+cssExpand[i]))||0;
        if(extra!=="padding"){
            val+=parseFloat(curCSS(elem,"border"+cssExpand[i]+"Width"))||0;
        }
    }
    }
return val;
}
function getWidthOrHeight(elem,name,extra){
    var val=name==="width"?elem.offsetWidth:elem.offsetHeight,valueIsBorderBox=true,isBorderBox=jQuery.support.boxSizing&&jQuery.css(elem,"boxSizing")==="border-box";
    if(val<=0||val==null){
        val=curCSS(elem,name);
        if(val<0||val==null){
            val=elem.style[name];
        }
        if(rnumnonpx.test(val)){
            return val;
        }
        valueIsBorderBox=isBorderBox&&(jQuery.support.boxSizingReliable||val===elem.style[name]);
        val=parseFloat(val)||0;
    }
    return(val+
        augmentWidthOrHeight(elem,name,extra||(isBorderBox?"border":"content"),valueIsBorderBox))+"px";
}
function css_defaultDisplay(nodeName){
    if(elemdisplay[nodeName]){
        return elemdisplay[nodeName];
    }
    var elem=jQuery("<"+nodeName+">").appendTo(document.body),display=elem.css("display");
    elem.remove();
    if(display==="none"||display===""){
        iframe=document.body.appendChild(iframe||jQuery.extend(document.createElement("iframe"),{
            frameBorder:0,
            width:0,
            height:0
        }));
        if(!iframeDoc||!iframe.createElement){
            iframeDoc=(iframe.contentWindow||iframe.contentDocument).document;
            iframeDoc.write("<!doctype html><html><body>");
            iframeDoc.close();
        }
        elem=iframeDoc.body.appendChild(iframeDoc.createElement(nodeName));
        display=curCSS(elem,"display");
        document.body.removeChild(iframe);
    }
    elemdisplay[nodeName]=display;
    return display;
}
jQuery.each(["height","width"],function(i,name){
    jQuery.cssHooks[name]={
        get:function(elem,computed,extra){
            if(computed){
                if(elem.offsetWidth===0&&rdisplayswap.test(curCSS(elem,"display"))){
                    return jQuery.swap(elem,cssShow,function(){
                        return getWidthOrHeight(elem,name,extra);
                    });
                }else{
                    return getWidthOrHeight(elem,name,extra);
                }
            }
        },
set:function(elem,value,extra){
    return setPositiveNumber(elem,value,extra?augmentWidthOrHeight(elem,name,extra,jQuery.support.boxSizing&&jQuery.css(elem,"boxSizing")==="border-box"):0);
}
};

});
if(!jQuery.support.opacity){
    jQuery.cssHooks.opacity={
        get:function(elem,computed){
            return ropacity.test((computed&&elem.currentStyle?elem.currentStyle.filter:elem.style.filter)||"")?(0.01*parseFloat(RegExp.$1))+"":computed?"1":"";
        },
        set:function(elem,value){
            var style=elem.style,currentStyle=elem.currentStyle,opacity=jQuery.isNumeric(value)?"alpha(opacity="+value*100+")":"",filter=currentStyle&&currentStyle.filter||style.filter||"";
            style.zoom=1;
            if(value>=1&&jQuery.trim(filter.replace(ralpha,""))===""&&style.removeAttribute){
                style.removeAttribute("filter");
                if(currentStyle&&!currentStyle.filter){
                    return;
                }
            }
        style.filter=ralpha.test(filter)?filter.replace(ralpha,opacity):filter+" "+opacity;
    }
};

}
jQuery(function(){
    if(!jQuery.support.reliableMarginRight){
        jQuery.cssHooks.marginRight={
            get:function(elem,computed){
                return jQuery.swap(elem,{
                    "display":"inline-block"
                },function(){
                    if(computed){
                        return curCSS(elem,"marginRight");
                    }
                });
        }
    };

}
if(!jQuery.support.pixelPosition&&jQuery.fn.position){
    jQuery.each(["top","left"],function(i,prop){
        jQuery.cssHooks[prop]={
            get:function(elem,computed){
                if(computed){
                    var ret=curCSS(elem,prop);
                    return rnumnonpx.test(ret)?jQuery(elem).position()[prop]+"px":ret;
                }
            }
        };
    
});
}
});
if(jQuery.expr&&jQuery.expr.filters){
    jQuery.expr.filters.hidden=function(elem){
        return(elem.offsetWidth===0&&elem.offsetHeight===0)||(!jQuery.support.reliableHiddenOffsets&&((elem.style&&elem.style.display)||curCSS(elem,"display"))==="none");
    };
    
    jQuery.expr.filters.visible=function(elem){
        return!jQuery.expr.filters.hidden(elem);
    };

}
jQuery.each({
    margin:"",
    padding:"",
    border:"Width"
},function(prefix,suffix){
    jQuery.cssHooks[prefix+suffix]={
        expand:function(value){
            var i,parts=typeof value==="string"?value.split(" "):[value],expanded={};
            
            for(i=0;i<4;i++){
                expanded[prefix+cssExpand[i]+suffix]=parts[i]||parts[i-2]||parts[0];
            }
            return expanded;
        }
    };
    
if(!rmargin.test(prefix)){
    jQuery.cssHooks[prefix+suffix].set=setPositiveNumber;
}
});
var r20=/%20/g,rbracket=/\[\]$/,rCRLF=/\r?\n/g,rinput=/^(?:color|date|datetime|datetime-local|email|hidden|month|number|password|range|search|tel|text|time|url|week)$/i,rselectTextarea=/^(?:select|textarea)/i;
jQuery.fn.extend({
    serialize:function(){
        return jQuery.param(this.serializeArray());
    },
    serializeArray:function(){
        return this.map(function(){
            return this.elements?jQuery.makeArray(this.elements):this;
        }).filter(function(){
            return this.name&&!this.disabled&&(this.checked||rselectTextarea.test(this.nodeName)||rinput.test(this.type));
        }).map(function(i,elem){
            var val=jQuery(this).val();
            return val==null?null:jQuery.isArray(val)?jQuery.map(val,function(val,i){
                return{
                    name:elem.name,
                    value:val.replace(rCRLF,"\r\n")
                    };
                
            }):{
            name:elem.name,
            value:val.replace(rCRLF,"\r\n")
            };
        
    }).get();
}
});
jQuery.param=function(a,traditional){
    var prefix,s=[],add=function(key,value){
        value=jQuery.isFunction(value)?value():(value==null?"":value);
        s[s.length]=encodeURIComponent(key)+"="+encodeURIComponent(value);
    };
    
    if(traditional===undefined){
        traditional=jQuery.ajaxSettings&&jQuery.ajaxSettings.traditional;
    }
    if(jQuery.isArray(a)||(a.jquery&&!jQuery.isPlainObject(a))){
        jQuery.each(a,function(){
            add(this.name,this.value);
        });
    }else{
        for(prefix in a){
            buildParams(prefix,a[prefix],traditional,add);
        }
        }
return s.join("&").replace(r20,"+");
};

function buildParams(prefix,obj,traditional,add){
    var name;
    if(jQuery.isArray(obj)){
        jQuery.each(obj,function(i,v){
            if(traditional||rbracket.test(prefix)){
                add(prefix,v);
            }else{
                buildParams(prefix+"["+(typeof v==="object"?i:"")+"]",v,traditional,add);
            }
        });
}else if(!traditional&&jQuery.type(obj)==="object"){
    for(name in obj){
        buildParams(prefix+"["+name+"]",obj[name],traditional,add);
    }
    }else{
    add(prefix,obj);
}
}
var
ajaxLocParts,ajaxLocation,rhash=/#.*$/,rheaders=/^(.*?):[ \t]*([^\r\n]*)\r?$/mg,rlocalProtocol=/^(?:about|app|app\-storage|.+\-extension|file|res|widget):$/,rnoContent=/^(?:GET|HEAD)$/,rprotocol=/^\/\//,rquery=/\?/,rscript=/<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi,rts=/([?&])_=[^&]*/,rurl=/^([\w\+\.\-]+:)(?:\/\/([^\/?#:]*)(?::(\d+)|)|)/,_load=jQuery.fn.load,prefilters={},transports={},allTypes=["*/"]+["*"];
try{
    ajaxLocation=location.href;
}catch(e){
    ajaxLocation=document.createElement("a");
    ajaxLocation.href="";
    ajaxLocation=ajaxLocation.href;
}
ajaxLocParts=rurl.exec(ajaxLocation.toLowerCase())||[];
function addToPrefiltersOrTransports(structure){
    return function(dataTypeExpression,func){
        if(typeof dataTypeExpression!=="string"){
            func=dataTypeExpression;
            dataTypeExpression="*";
        }
        var dataType,list,placeBefore,dataTypes=dataTypeExpression.toLowerCase().split(core_rspace),i=0,length=dataTypes.length;
        if(jQuery.isFunction(func)){
            for(;i<length;i++){
                dataType=dataTypes[i];
                placeBefore=/^\+/.test(dataType);
                if(placeBefore){
                    dataType=dataType.substr(1)||"*";
                }
                list=structure[dataType]=structure[dataType]||[];
                list[placeBefore?"unshift":"push"](func);
            }
            }
        };

}
function inspectPrefiltersOrTransports(structure,options,originalOptions,jqXHR,dataType,inspected){
    dataType=dataType||options.dataTypes[0];
    inspected=inspected||{};
    
    inspected[dataType]=true;
    var selection,list=structure[dataType],i=0,length=list?list.length:0,executeOnly=(structure===prefilters);
    for(;i<length&&(executeOnly||!selection);i++){
        selection=list[i](options,originalOptions,jqXHR);
        if(typeof selection==="string"){
            if(!executeOnly||inspected[selection]){
                selection=undefined;
            }else{
                options.dataTypes.unshift(selection);
                selection=inspectPrefiltersOrTransports(structure,options,originalOptions,jqXHR,selection,inspected);
            }
        }
    }
if((executeOnly||!selection)&&!inspected["*"]){
    selection=inspectPrefiltersOrTransports(structure,options,originalOptions,jqXHR,"*",inspected);
}
return selection;
}
function ajaxExtend(target,src){
    var key,deep,flatOptions=jQuery.ajaxSettings.flatOptions||{};
    
    for(key in src){
        if(src[key]!==undefined){
            (flatOptions[key]?target:(deep||(deep={})))[key]=src[key];
        }
    }
if(deep){
    jQuery.extend(true,target,deep);
}
}
jQuery.fn.load=function(url,params,callback){
    if(typeof url!=="string"&&_load){
        return _load.apply(this,arguments);
    }
    if(!this.length){
        return this;
    }
    var selector,type,response,self=this,off=url.indexOf(" ");
    if(off>=0){
        selector=url.slice(off,url.length);
        url=url.slice(0,off);
    }
    if(jQuery.isFunction(params)){
        callback=params;
        params=undefined;
    }else if(params&&typeof params==="object"){
        type="POST";
    }
    jQuery.ajax({
        url:url,
        type:type,
        dataType:"html",
        data:params,
        complete:function(jqXHR,status){
            if(callback){
                self.each(callback,response||[jqXHR.responseText,status,jqXHR]);
            }
        }
    }).done(function(responseText){
    response=arguments;
    self.html(selector?jQuery("<div>").append(responseText.replace(rscript,"")).find(selector):responseText);
});
return this;
};

jQuery.each("ajaxStart ajaxStop ajaxComplete ajaxError ajaxSuccess ajaxSend".split(" "),function(i,o){
    jQuery.fn[o]=function(f){
        return this.on(o,f);
    };

});
jQuery.each(["get","post"],function(i,method){
    jQuery[method]=function(url,data,callback,type){
        if(jQuery.isFunction(data)){
            type=type||callback;
            callback=data;
            data=undefined;
        }
        return jQuery.ajax({
            type:method,
            url:url,
            data:data,
            success:callback,
            dataType:type
        });
    };

});
jQuery.extend({
    getScript:function(url,callback){
        return jQuery.get(url,undefined,callback,"script");
    },
    getJSON:function(url,data,callback){
        return jQuery.get(url,data,callback,"json");
    },
    ajaxSetup:function(target,settings){
        if(settings){
            ajaxExtend(target,jQuery.ajaxSettings);
        }else{
            settings=target;
            target=jQuery.ajaxSettings;
        }
        ajaxExtend(target,settings);
        return target;
    },
    ajaxSettings:{
        url:ajaxLocation,
        isLocal:rlocalProtocol.test(ajaxLocParts[1]),
        global:true,
        type:"GET",
        contentType:"application/x-www-form-urlencoded; charset=UTF-8",
        processData:true,
        async:true,
        accepts:{
            xml:"application/xml, text/xml",
            html:"text/html",
            text:"text/plain",
            json:"application/json, text/javascript",
            "*":allTypes
        },
        contents:{
            xml:/xml/,
            html:/html/,
            json:/json/
        },
        responseFields:{
            xml:"responseXML",
            text:"responseText"
        },
        converters:{
            "* text":window.String,
            "text html":true,
            "text json":jQuery.parseJSON,
            "text xml":jQuery.parseXML
            },
        flatOptions:{
            context:true,
            url:true
        }
    },
ajaxPrefilter:addToPrefiltersOrTransports(prefilters),
    ajaxTransport:addToPrefiltersOrTransports(transports),
    ajax:function(url,options){
    if(typeof url==="object"){
        options=url;
        url=undefined;
    }
    options=options||{};
    
    var
    ifModifiedKey,responseHeadersString,responseHeaders,transport,timeoutTimer,parts,fireGlobals,i,s=jQuery.ajaxSetup({},options),callbackContext=s.context||s,globalEventContext=callbackContext!==s&&(callbackContext.nodeType||callbackContext instanceof jQuery)?jQuery(callbackContext):jQuery.event,deferred=jQuery.Deferred(),completeDeferred=jQuery.Callbacks("once memory"),statusCode=s.statusCode||{},requestHeaders={},requestHeadersNames={},state=0,strAbort="canceled",jqXHR={
        readyState:0,
        setRequestHeader:function(name,value){
            if(!state){
                var lname=name.toLowerCase();
                name=requestHeadersNames[lname]=requestHeadersNames[lname]||name;
                requestHeaders[name]=value;
            }
            return this;
        },
        getAllResponseHeaders:function(){
            return state===2?responseHeadersString:null;
        },
        getResponseHeader:function(key){
            var match;
            if(state===2){
                if(!responseHeaders){
                    responseHeaders={};
                    while((match=rheaders.exec(responseHeadersString))){
                        responseHeaders[match[1].toLowerCase()]=match[2];
                    }
                }
            match=responseHeaders[key.toLowerCase()];
        }
        return match===undefined?null:match;
    },
    overrideMimeType:function(type){
        if(!state){
            s.mimeType=type;
        }
        return this;
    },
    abort:function(statusText){
        statusText=statusText||strAbort;
        if(transport){
            transport.abort(statusText);
        }
        done(0,statusText);
        return this;
    }
};

function done(status,nativeStatusText,responses,headers){
    var isSuccess,success,error,response,modified,statusText=nativeStatusText;
    if(state===2){
        return;
    }
    state=2;
    if(timeoutTimer){
        clearTimeout(timeoutTimer);
    }
    transport=undefined;
    responseHeadersString=headers||"";
    jqXHR.readyState=status>0?4:0;
    if(responses){
        response=ajaxHandleResponses(s,jqXHR,responses);
    }
    if(status>=200&&status<300||status===304){
        if(s.ifModified){
            modified=jqXHR.getResponseHeader("Last-Modified");
            if(modified){
                jQuery.lastModified[ifModifiedKey]=modified;
            }
            modified=jqXHR.getResponseHeader("Etag");
            if(modified){
                jQuery.etag[ifModifiedKey]=modified;
            }
        }
    if(status===304){
        statusText="notmodified";
        isSuccess=true;
    }else{
        isSuccess=ajaxConvert(s,response);
        statusText=isSuccess.state;
        success=isSuccess.data;
        error=isSuccess.error;
        isSuccess=!error;
    }
}else{
    error=statusText;
    if(!statusText||status){
        statusText="error";
        if(status<0){
            status=0;
        }
    }
}
jqXHR.status=status;
jqXHR.statusText=(nativeStatusText||statusText)+"";
if(isSuccess){
    deferred.resolveWith(callbackContext,[success,statusText,jqXHR]);
}else{
    deferred.rejectWith(callbackContext,[jqXHR,statusText,error]);
}
jqXHR.statusCode(statusCode);
statusCode=undefined;
if(fireGlobals){
    globalEventContext.trigger("ajax"+(isSuccess?"Success":"Error"),[jqXHR,s,isSuccess?success:error]);
}
completeDeferred.fireWith(callbackContext,[jqXHR,statusText]);
if(fireGlobals){
    globalEventContext.trigger("ajaxComplete",[jqXHR,s]);
    if(!(--jQuery.active)){
        jQuery.event.trigger("ajaxStop");
    }
}
}
deferred.promise(jqXHR);
jqXHR.success=jqXHR.done;
jqXHR.error=jqXHR.fail;
jqXHR.complete=completeDeferred.add;
jqXHR.statusCode=function(map){
    if(map){
        var tmp;
        if(state<2){
            for(tmp in map){
                statusCode[tmp]=[statusCode[tmp],map[tmp]];
            }
            }else{
        tmp=map[jqXHR.status];
        jqXHR.always(tmp);
    }
}
return this;
};

s.url=((url||s.url)+"").replace(rhash,"").replace(rprotocol,ajaxLocParts[1]+"//");
s.dataTypes=jQuery.trim(s.dataType||"*").toLowerCase().split(core_rspace);
if(s.crossDomain==null){
    parts=rurl.exec(s.url.toLowerCase());
    s.crossDomain=!!(parts&&(parts[1]!==ajaxLocParts[1]||parts[2]!==ajaxLocParts[2]||(parts[3]||(parts[1]==="http:"?80:443))!=(ajaxLocParts[3]||(ajaxLocParts[1]==="http:"?80:443))));
}
if(s.data&&s.processData&&typeof s.data!=="string"){
    s.data=jQuery.param(s.data,s.traditional);
}
inspectPrefiltersOrTransports(prefilters,s,options,jqXHR);
if(state===2){
    return jqXHR;
}
fireGlobals=s.global;
s.type=s.type.toUpperCase();
s.hasContent=!rnoContent.test(s.type);
if(fireGlobals&&jQuery.active++===0){
    jQuery.event.trigger("ajaxStart");
}
if(!s.hasContent){
    if(s.data){
        s.url+=(rquery.test(s.url)?"&":"?")+s.data;
        delete s.data;
    }
    ifModifiedKey=s.url;
    if(s.cache===false){
        var ts=jQuery.now(),ret=s.url.replace(rts,"$1_="+ts);
        s.url=ret+((ret===s.url)?(rquery.test(s.url)?"&":"?")+"_="+ts:"");
    }
}
if(s.data&&s.hasContent&&s.contentType!==false||options.contentType){
    jqXHR.setRequestHeader("Content-Type",s.contentType);
}
if(s.ifModified){
    ifModifiedKey=ifModifiedKey||s.url;
    if(jQuery.lastModified[ifModifiedKey]){
        jqXHR.setRequestHeader("If-Modified-Since",jQuery.lastModified[ifModifiedKey]);
    }
    if(jQuery.etag[ifModifiedKey]){
        jqXHR.setRequestHeader("If-None-Match",jQuery.etag[ifModifiedKey]);
    }
}
jqXHR.setRequestHeader("Accept",s.dataTypes[0]&&s.accepts[s.dataTypes[0]]?s.accepts[s.dataTypes[0]]+(s.dataTypes[0]!=="*"?", "+allTypes+"; q=0.01":""):s.accepts["*"]);
for(i in s.headers){
    jqXHR.setRequestHeader(i,s.headers[i]);
}
if(s.beforeSend&&(s.beforeSend.call(callbackContext,jqXHR,s)===false||state===2)){
    return jqXHR.abort();
}
strAbort="abort";
for(i in{
    success:1,
    error:1,
    complete:1
}){
    jqXHR[i](s[i]);
}
transport=inspectPrefiltersOrTransports(transports,s,options,jqXHR);
if(!transport){
    done(-1,"No Transport");
}else{
    jqXHR.readyState=1;
    if(fireGlobals){
        globalEventContext.trigger("ajaxSend",[jqXHR,s]);
    }
    if(s.async&&s.timeout>0){
        timeoutTimer=setTimeout(function(){
            jqXHR.abort("timeout");
        },s.timeout);
    }
    try{
        state=1;
        transport.send(requestHeaders,done);
    }catch(e){
        if(state<2){
            done(-1,e);
        }else{
            throw e;
        }
    }
}
return jqXHR;
},
active:0,
lastModified:{},
etag:{}
});
function ajaxHandleResponses(s,jqXHR,responses){
    var ct,type,finalDataType,firstDataType,contents=s.contents,dataTypes=s.dataTypes,responseFields=s.responseFields;
    for(type in responseFields){
        if(type in responses){
            jqXHR[responseFields[type]]=responses[type];
        }
    }
while(dataTypes[0]==="*"){
    dataTypes.shift();
    if(ct===undefined){
        ct=s.mimeType||jqXHR.getResponseHeader("content-type");
    }
}
if(ct){
    for(type in contents){
        if(contents[type]&&contents[type].test(ct)){
            dataTypes.unshift(type);
            break;
        }
    }
    }
if(dataTypes[0]in responses){
    finalDataType=dataTypes[0];
}else{
    for(type in responses){
        if(!dataTypes[0]||s.converters[type+" "+dataTypes[0]]){
            finalDataType=type;
            break;
        }
        if(!firstDataType){
            firstDataType=type;
        }
    }
finalDataType=finalDataType||firstDataType;
}
if(finalDataType){
    if(finalDataType!==dataTypes[0]){
        dataTypes.unshift(finalDataType);
    }
    return responses[finalDataType];
}
}
function ajaxConvert(s,response){
    var conv,conv2,current,tmp,dataTypes=s.dataTypes.slice(),prev=dataTypes[0],converters={},i=0;
    if(s.dataFilter){
        response=s.dataFilter(response,s.dataType);
    }
    if(dataTypes[1]){
        for(conv in s.converters){
            converters[conv.toLowerCase()]=s.converters[conv];
        }
        }
for(;(current=dataTypes[++i]);){
    if(current!=="*"){
        if(prev!=="*"&&prev!==current){
            conv=converters[prev+" "+current]||converters["* "+current];
            if(!conv){
                for(conv2 in converters){
                    tmp=conv2.split(" ");
                    if(tmp[1]===current){
                        conv=converters[prev+" "+tmp[0]]||converters["* "+tmp[0]];
                        if(conv){
                            if(conv===true){
                                conv=converters[conv2];
                            }else if(converters[conv2]!==true){
                                current=tmp[0];
                                dataTypes.splice(i--,0,current);
                            }
                            break;
                        }
                    }
                }
                }
if(conv!==true){
    if(conv&&s["throws"]){
        response=conv(response);
    }else{
        try{
            response=conv(response);
        }catch(e){
            return{
                state:"parsererror",
                error:conv?e:"No conversion from "+prev+" to "+current
                };
            
    }
}
}
}
prev=current;
}
}
return{
    state:"success",
    data:response
};

}
var oldCallbacks=[],rquestion=/\?/,rjsonp=/(=)\?(?=&|$)|\?\?/,nonce=jQuery.now();
jQuery.ajaxSetup({
    jsonp:"callback",
    jsonpCallback:function(){
        var callback=oldCallbacks.pop()||(jQuery.expando+"_"+(nonce++));
        this[callback]=true;
        return callback;
    }
});
jQuery.ajaxPrefilter("json jsonp",function(s,originalSettings,jqXHR){
    var callbackName,overwritten,responseContainer,data=s.data,url=s.url,hasCallback=s.jsonp!==false,replaceInUrl=hasCallback&&rjsonp.test(url),replaceInData=hasCallback&&!replaceInUrl&&typeof data==="string"&&!(s.contentType||"").indexOf("application/x-www-form-urlencoded")&&rjsonp.test(data);
    if(s.dataTypes[0]==="jsonp"||replaceInUrl||replaceInData){
        callbackName=s.jsonpCallback=jQuery.isFunction(s.jsonpCallback)?s.jsonpCallback():s.jsonpCallback;
        overwritten=window[callbackName];
        if(replaceInUrl){
            s.url=url.replace(rjsonp,"$1"+callbackName);
        }else if(replaceInData){
            s.data=data.replace(rjsonp,"$1"+callbackName);
        }else if(hasCallback){
            s.url+=(rquestion.test(url)?"&":"?")+s.jsonp+"="+callbackName;
        }
        s.converters["script json"]=function(){
            if(!responseContainer){
                jQuery.error(callbackName+" was not called");
            }
            return responseContainer[0];
        };
        
        s.dataTypes[0]="json";
        window[callbackName]=function(){
            responseContainer=arguments;
        };
        
        jqXHR.always(function(){
            window[callbackName]=overwritten;
            if(s[callbackName]){
                s.jsonpCallback=originalSettings.jsonpCallback;
                oldCallbacks.push(callbackName);
            }
            if(responseContainer&&jQuery.isFunction(overwritten)){
                overwritten(responseContainer[0]);
            }
            responseContainer=overwritten=undefined;
        });
        return"script";
    }
});
jQuery.ajaxSetup({
    accepts:{
        script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
    },
    contents:{
        script:/javascript|ecmascript/
    },
    converters:{
        "text script":function(text){
            jQuery.globalEval(text);
            return text;
        }
    }
});
jQuery.ajaxPrefilter("script",function(s){
    if(s.cache===undefined){
        s.cache=false;
    }
    if(s.crossDomain){
        s.type="GET";
        s.global=false;
    }
});
jQuery.ajaxTransport("script",function(s){
    if(s.crossDomain){
        var script,head=document.head||document.getElementsByTagName("head")[0]||document.documentElement;
        return{
            send:function(_,callback){
                script=document.createElement("script");
                script.async="async";
                if(s.scriptCharset){
                    script.charset=s.scriptCharset;
                }
                script.src=s.url;
                script.onload=script.onreadystatechange=function(_,isAbort){
                    if(isAbort||!script.readyState||/loaded|complete/.test(script.readyState)){
                        script.onload=script.onreadystatechange=null;
                        if(head&&script.parentNode){
                            head.removeChild(script);
                        }
                        script=undefined;
                        if(!isAbort){
                            callback(200,"success");
                        }
                    }
                };
            
        head.insertBefore(script,head.firstChild);
    },
    abort:function(){
        if(script){
            script.onload(0,1);
        }
    }
};

}
});
var xhrCallbacks,xhrOnUnloadAbort=window.ActiveXObject?function(){
    for(var key in xhrCallbacks){
        xhrCallbacks[key](0,1);
    }
    }:false,xhrId=0;
function createStandardXHR(){
    try{
        return new window.XMLHttpRequest();
    }catch(e){}
}
function createActiveXHR(){
    try{
        return new window.ActiveXObject("Microsoft.XMLHTTP");
    }catch(e){}
}
jQuery.ajaxSettings.xhr=window.ActiveXObject?function(){
    return!this.isLocal&&createStandardXHR()||createActiveXHR();
}:createStandardXHR;
(function(xhr){
    jQuery.extend(jQuery.support,{
        ajax:!!xhr,
        cors:!!xhr&&("withCredentials"in xhr)
        });
})(jQuery.ajaxSettings.xhr());
if(jQuery.support.ajax){
    jQuery.ajaxTransport(function(s){
        if(!s.crossDomain||jQuery.support.cors){
            var callback;
            return{
                send:function(headers,complete){
                    var handle,i,xhr=s.xhr();
                    if(s.username){
                        xhr.open(s.type,s.url,s.async,s.username,s.password);
                    }else{
                        xhr.open(s.type,s.url,s.async);
                    }
                    if(s.xhrFields){
                        for(i in s.xhrFields){
                            xhr[i]=s.xhrFields[i];
                        }
                        }
                if(s.mimeType&&xhr.overrideMimeType){
                    xhr.overrideMimeType(s.mimeType);
                }
                if(!s.crossDomain&&!headers["X-Requested-With"]){
                    headers["X-Requested-With"]="XMLHttpRequest";
                }
                try{
                    for(i in headers){
                        xhr.setRequestHeader(i,headers[i]);
                    }
                    }catch(_){}
            xhr.send((s.hasContent&&s.data)||null);
            callback=function(_,isAbort){
                var status,statusText,responseHeaders,responses,xml;
                try{
                    if(callback&&(isAbort||xhr.readyState===4)){
                        callback=undefined;
                        if(handle){
                            xhr.onreadystatechange=jQuery.noop;
                            if(xhrOnUnloadAbort){
                                delete xhrCallbacks[handle];
                            }
                        }
                    if(isAbort){
                        if(xhr.readyState!==4){
                            xhr.abort();
                        }
                    }else{
                    status=xhr.status;
                    responseHeaders=xhr.getAllResponseHeaders();
                    responses={};
                    
                    xml=xhr.responseXML;
                    if(xml&&xml.documentElement){
                        responses.xml=xml;
                    }
                    try{
                        responses.text=xhr.responseText;
                    }catch(e){}
                    try{
                        statusText=xhr.statusText;
                    }catch(e){
                        statusText="";
                    }
                    if(!status&&s.isLocal&&!s.crossDomain){
                        status=responses.text?200:404;
                    }else if(status===1223){
                        status=204;
                    }
                }
            }
    }catch(firefoxAccessException){
    if(!isAbort){
        complete(-1,firefoxAccessException);
    }
}
if(responses){
    complete(status,statusText,responses,responseHeaders);
}
};

if(!s.async){
    callback();
}else if(xhr.readyState===4){
    setTimeout(callback,0);
}else{
    handle=++xhrId;
    if(xhrOnUnloadAbort){
        if(!xhrCallbacks){
            xhrCallbacks={};
            
            jQuery(window).unload(xhrOnUnloadAbort);
        }
        xhrCallbacks[handle]=callback;
    }
    xhr.onreadystatechange=callback;
}
},
abort:function(){
    if(callback){
        callback(0,1);
    }
}
};

}
});
}
var fxNow,timerId,rfxtypes=/^(?:toggle|show|hide)$/,rfxnum=new RegExp("^(?:([-+])=|)("+core_pnum+")([a-z%]*)$","i"),rrun=/queueHooks$/,animationPrefilters=[defaultPrefilter],tweeners={
    "*":[function(prop,value){
        var end,unit,tween=this.createTween(prop,value),parts=rfxnum.exec(value),target=tween.cur(),start=+target||0,scale=1,maxIterations=20;
        if(parts){
            end=+parts[2];
            unit=parts[3]||(jQuery.cssNumber[prop]?"":"px");
            if(unit!=="px"&&start){
                start=jQuery.css(tween.elem,prop,true)||end||1;
                do{
                    scale=scale||".5";
                    start=start/scale;
                    jQuery.style(tween.elem,prop,start+unit);
                }while(scale!==(scale=tween.cur()/target)&&scale!==1&&--maxIterations);
            }
            tween.unit=unit;
            tween.start=start;
            tween.end=parts[1]?start+(parts[1]+1)*end:end;
        }
        return tween;
    }]
    };
    
function createFxNow(){
    setTimeout(function(){
        fxNow=undefined;
    },0);
    return(fxNow=jQuery.now());
}
function createTweens(animation,props){
    jQuery.each(props,function(prop,value){
        var collection=(tweeners[prop]||[]).concat(tweeners["*"]),index=0,length=collection.length;
        for(;index<length;index++){
            if(collection[index].call(animation,prop,value)){
                return;
            }
        }
        });
}
function Animation(elem,properties,options){
    var result,index=0,tweenerIndex=0,length=animationPrefilters.length,deferred=jQuery.Deferred().always(function(){
        delete tick.elem;
    }),tick=function(){
        var currentTime=fxNow||createFxNow(),remaining=Math.max(0,animation.startTime+animation.duration-currentTime),temp=remaining/animation.duration||0,percent=1-temp,index=0,length=animation.tweens.length;
        for(;index<length;index++){
            animation.tweens[index].run(percent);
        }
        deferred.notifyWith(elem,[animation,percent,remaining]);
        if(percent<1&&length){
            return remaining;
        }else{
            deferred.resolveWith(elem,[animation]);
            return false;
        }
    },animation=deferred.promise({
    elem:elem,
    props:jQuery.extend({},properties),
    opts:jQuery.extend(true,{
        specialEasing:{}
    },options),
originalProperties:properties,
originalOptions:options,
startTime:fxNow||createFxNow(),
    duration:options.duration,
    tweens:[],
    createTween:function(prop,end,easing){
    var tween=jQuery.Tween(elem,animation.opts,prop,end,animation.opts.specialEasing[prop]||animation.opts.easing);
    animation.tweens.push(tween);
    return tween;
},
stop:function(gotoEnd){
    var index=0,length=gotoEnd?animation.tweens.length:0;
    for(;index<length;index++){
        animation.tweens[index].run(1);
    }
    if(gotoEnd){
        deferred.resolveWith(elem,[animation,gotoEnd]);
    }else{
        deferred.rejectWith(elem,[animation,gotoEnd]);
    }
    return this;
}
}),props=animation.props;
propFilter(props,animation.opts.specialEasing);
for(;index<length;index++){
    result=animationPrefilters[index].call(animation,elem,props,animation.opts);
    if(result){
        return result;
    }
}
createTweens(animation,props);
if(jQuery.isFunction(animation.opts.start)){
    animation.opts.start.call(elem,animation);
}
jQuery.fx.timer(jQuery.extend(tick,{
    anim:animation,
    queue:animation.opts.queue,
    elem:elem
}));
return animation.progress(animation.opts.progress).done(animation.opts.done,animation.opts.complete).fail(animation.opts.fail).always(animation.opts.always);
}
function propFilter(props,specialEasing){
    var index,name,easing,value,hooks;
    for(index in props){
        name=jQuery.camelCase(index);
        easing=specialEasing[name];
        value=props[index];
        if(jQuery.isArray(value)){
            easing=value[1];
            value=props[index]=value[0];
        }
        if(index!==name){
            props[name]=value;
            delete props[index];
        }
        hooks=jQuery.cssHooks[name];
        if(hooks&&"expand"in hooks){
            value=hooks.expand(value);
            delete props[name];
            for(index in value){
                if(!(index in props)){
                    props[index]=value[index];
                    specialEasing[index]=easing;
                }
            }
            }else{
        specialEasing[name]=easing;
    }
    }
}
jQuery.Animation=jQuery.extend(Animation,{
    tweener:function(props,callback){
        if(jQuery.isFunction(props)){
            callback=props;
            props=["*"];
        }else{
            props=props.split(" ");
        }
        var prop,index=0,length=props.length;
        for(;index<length;index++){
            prop=props[index];
            tweeners[prop]=tweeners[prop]||[];
            tweeners[prop].unshift(callback);
        }
        },
prefilter:function(callback,prepend){
    if(prepend){
        animationPrefilters.unshift(callback);
    }else{
        animationPrefilters.push(callback);
    }
}
});
function defaultPrefilter(elem,props,opts){
    var index,prop,value,length,dataShow,toggle,tween,hooks,oldfire,anim=this,style=elem.style,orig={},handled=[],hidden=elem.nodeType&&isHidden(elem);
    if(!opts.queue){
        hooks=jQuery._queueHooks(elem,"fx");
        if(hooks.unqueued==null){
            hooks.unqueued=0;
            oldfire=hooks.empty.fire;
            hooks.empty.fire=function(){
                if(!hooks.unqueued){
                    oldfire();
                }
            };
        
}
hooks.unqueued++;
anim.always(function(){
    anim.always(function(){
        hooks.unqueued--;
        if(!jQuery.queue(elem,"fx").length){
            hooks.empty.fire();
        }
    });
});
}
if(elem.nodeType===1&&("height"in props||"width"in props)){
    opts.overflow=[style.overflow,style.overflowX,style.overflowY];
    if(jQuery.css(elem,"display")==="inline"&&jQuery.css(elem,"float")==="none"){
        if(!jQuery.support.inlineBlockNeedsLayout||css_defaultDisplay(elem.nodeName)==="inline"){
            style.display="inline-block";
        }else{
            style.zoom=1;
        }
    }
}
if(opts.overflow){
    style.overflow="hidden";
    if(!jQuery.support.shrinkWrapBlocks){
        anim.done(function(){
            style.overflow=opts.overflow[0];
            style.overflowX=opts.overflow[1];
            style.overflowY=opts.overflow[2];
        });
    }
}
for(index in props){
    value=props[index];
    if(rfxtypes.exec(value)){
        delete props[index];
        toggle=toggle||value==="toggle";
        if(value===(hidden?"hide":"show")){
            continue;
        }
        handled.push(index);
    }
}
length=handled.length;
if(length){
    dataShow=jQuery._data(elem,"fxshow")||jQuery._data(elem,"fxshow",{});
    if("hidden"in dataShow){
        hidden=dataShow.hidden;
    }
    if(toggle){
        dataShow.hidden=!hidden;
    }
    if(hidden){
        jQuery(elem).show();
    }else{
        anim.done(function(){
            jQuery(elem).hide();
        });
    }
    anim.done(function(){
        var prop;
        jQuery.removeData(elem,"fxshow",true);
        for(prop in orig){
            jQuery.style(elem,prop,orig[prop]);
        }
        });
for(index=0;index<length;index++){
    prop=handled[index];
    tween=anim.createTween(prop,hidden?dataShow[prop]:0);
    orig[prop]=dataShow[prop]||jQuery.style(elem,prop);
    if(!(prop in dataShow)){
        dataShow[prop]=tween.start;
        if(hidden){
            tween.end=tween.start;
            tween.start=prop==="width"||prop==="height"?1:0;
        }
    }
}
}
}
function Tween(elem,options,prop,end,easing){
    return new Tween.prototype.init(elem,options,prop,end,easing);
}
jQuery.Tween=Tween;
Tween.prototype={
    constructor:Tween,
    init:function(elem,options,prop,end,easing,unit){
        this.elem=elem;
        this.prop=prop;
        this.easing=easing||"swing";
        this.options=options;
        this.start=this.now=this.cur();
        this.end=end;
        this.unit=unit||(jQuery.cssNumber[prop]?"":"px");
    },
    cur:function(){
        var hooks=Tween.propHooks[this.prop];
        return hooks&&hooks.get?hooks.get(this):Tween.propHooks._default.get(this);
    },
    run:function(percent){
        var eased,hooks=Tween.propHooks[this.prop];
        if(this.options.duration){
            this.pos=eased=jQuery.easing[this.easing](percent,this.options.duration*percent,0,1,this.options.duration);
        }else{
            this.pos=eased=percent;
        }
        this.now=(this.end-this.start)*eased+this.start;
        if(this.options.step){
            this.options.step.call(this.elem,this.now,this);
        }
        if(hooks&&hooks.set){
            hooks.set(this);
        }else{
            Tween.propHooks._default.set(this);
        }
        return this;
    }
};

Tween.prototype.init.prototype=Tween.prototype;
Tween.propHooks={
    _default:{
        get:function(tween){
            var result;
            if(tween.elem[tween.prop]!=null&&(!tween.elem.style||tween.elem.style[tween.prop]==null)){
                return tween.elem[tween.prop];
            }
            result=jQuery.css(tween.elem,tween.prop,false,"");
            return!result||result==="auto"?0:result;
        },
        set:function(tween){
            if(jQuery.fx.step[tween.prop]){
                jQuery.fx.step[tween.prop](tween);
            }else if(tween.elem.style&&(tween.elem.style[jQuery.cssProps[tween.prop]]!=null||jQuery.cssHooks[tween.prop])){
                jQuery.style(tween.elem,tween.prop,tween.now+tween.unit);
            }else{
                tween.elem[tween.prop]=tween.now;
            }
        }
    }
};

Tween.propHooks.scrollTop=Tween.propHooks.scrollLeft={
    set:function(tween){
        if(tween.elem.nodeType&&tween.elem.parentNode){
            tween.elem[tween.prop]=tween.now;
        }
    }
};

jQuery.each(["toggle","show","hide"],function(i,name){
    var cssFn=jQuery.fn[name];
    jQuery.fn[name]=function(speed,easing,callback){
        return speed==null||typeof speed==="boolean"||(!i&&jQuery.isFunction(speed)&&jQuery.isFunction(easing))?cssFn.apply(this,arguments):this.animate(genFx(name,true),speed,easing,callback);
    };

});
jQuery.fn.extend({
    fadeTo:function(speed,to,easing,callback){
        return this.filter(isHidden).css("opacity",0).show().end().animate({
            opacity:to
        },speed,easing,callback);
    },
    animate:function(prop,speed,easing,callback){
        var empty=jQuery.isEmptyObject(prop),optall=jQuery.speed(speed,easing,callback),doAnimation=function(){
            var anim=Animation(this,jQuery.extend({},prop),optall);
            if(empty){
                anim.stop(true);
            }
        };
        
    return empty||optall.queue===false?this.each(doAnimation):this.queue(optall.queue,doAnimation);
},
stop:function(type,clearQueue,gotoEnd){
    var stopQueue=function(hooks){
        var stop=hooks.stop;
        delete hooks.stop;
        stop(gotoEnd);
    };
    
    if(typeof type!=="string"){
        gotoEnd=clearQueue;
        clearQueue=type;
        type=undefined;
    }
    if(clearQueue&&type!==false){
        this.queue(type||"fx",[]);
    }
    return this.each(function(){
        var dequeue=true,index=type!=null&&type+"queueHooks",timers=jQuery.timers,data=jQuery._data(this);
        if(index){
            if(data[index]&&data[index].stop){
                stopQueue(data[index]);
            }
        }else{
        for(index in data){
            if(data[index]&&data[index].stop&&rrun.test(index)){
                stopQueue(data[index]);
            }
        }
        }
for(index=timers.length;index--;){
    if(timers[index].elem===this&&(type==null||timers[index].queue===type)){
        timers[index].anim.stop(gotoEnd);
        dequeue=false;
        timers.splice(index,1);
    }
}
if(dequeue||!gotoEnd){
    jQuery.dequeue(this,type);
}
});
}
});
function genFx(type,includeWidth){
    var which,attrs={
        height:type
    },i=0;
    includeWidth=includeWidth?1:0;
    for(;i<4;i+=2-includeWidth){
        which=cssExpand[i];
        attrs["margin"+which]=attrs["padding"+which]=type;
    }
    if(includeWidth){
        attrs.opacity=attrs.width=type;
    }
    return attrs;
}
jQuery.each({
    slideDown:genFx("show"),
    slideUp:genFx("hide"),
    slideToggle:genFx("toggle"),
    fadeIn:{
        opacity:"show"
    },
    fadeOut:{
        opacity:"hide"
    },
    fadeToggle:{
        opacity:"toggle"
    }
},function(name,props){
    jQuery.fn[name]=function(speed,easing,callback){
        return this.animate(props,speed,easing,callback);
    };

});
jQuery.speed=function(speed,easing,fn){
    var opt=speed&&typeof speed==="object"?jQuery.extend({},speed):{
        complete:fn||!fn&&easing||jQuery.isFunction(speed)&&speed,
        duration:speed,
        easing:fn&&easing||easing&&!jQuery.isFunction(easing)&&easing
        };
        
    opt.duration=jQuery.fx.off?0:typeof opt.duration==="number"?opt.duration:opt.duration in jQuery.fx.speeds?jQuery.fx.speeds[opt.duration]:jQuery.fx.speeds._default;
    if(opt.queue==null||opt.queue===true){
        opt.queue="fx";
    }
    opt.old=opt.complete;
    opt.complete=function(){
        if(jQuery.isFunction(opt.old)){
            opt.old.call(this);
        }
        if(opt.queue){
            jQuery.dequeue(this,opt.queue);
        }
    };
    
return opt;
};

jQuery.easing={
    linear:function(p){
        return p;
    },
    swing:function(p){
        return 0.5-Math.cos(p*Math.PI)/2;
    }
};

jQuery.timers=[];
jQuery.fx=Tween.prototype.init;
jQuery.fx.tick=function(){
    var timer,timers=jQuery.timers,i=0;
    fxNow=jQuery.now();
    for(;i<timers.length;i++){
        timer=timers[i];
        if(!timer()&&timers[i]===timer){
            timers.splice(i--,1);
        }
    }
if(!timers.length){
    jQuery.fx.stop();
}
fxNow=undefined;
};

jQuery.fx.timer=function(timer){
    if(timer()&&jQuery.timers.push(timer)&&!timerId){
        timerId=setInterval(jQuery.fx.tick,jQuery.fx.interval);
    }
};

jQuery.fx.interval=13;
jQuery.fx.stop=function(){
    clearInterval(timerId);
    timerId=null;
};

jQuery.fx.speeds={
    slow:600,
    fast:200,
    _default:400
};

jQuery.fx.step={};

if(jQuery.expr&&jQuery.expr.filters){
    jQuery.expr.filters.animated=function(elem){
        return jQuery.grep(jQuery.timers,function(fn){
            return elem===fn.elem;
        }).length;
    };

}
var rroot=/^(?:body|html)$/i;
jQuery.fn.offset=function(options){
    if(arguments.length){
        return options===undefined?this:this.each(function(i){
            jQuery.offset.setOffset(this,options,i);
        });
    }
    var docElem,body,win,clientTop,clientLeft,scrollTop,scrollLeft,box={
        top:0,
        left:0
    },elem=this[0],doc=elem&&elem.ownerDocument;
    if(!doc){
        return;
    }
    if((body=doc.body)===elem){
        return jQuery.offset.bodyOffset(elem);
    }
    docElem=doc.documentElement;
    if(!jQuery.contains(docElem,elem)){
        return box;
    }
    if(typeof elem.getBoundingClientRect!=="undefined"){
        box=elem.getBoundingClientRect();
    }
    win=getWindow(doc);
    clientTop=docElem.clientTop||body.clientTop||0;
    clientLeft=docElem.clientLeft||body.clientLeft||0;
    scrollTop=win.pageYOffset||docElem.scrollTop;
    scrollLeft=win.pageXOffset||docElem.scrollLeft;
    return{
        top:box.top+scrollTop-clientTop,
        left:box.left+scrollLeft-clientLeft
        };
    
};

jQuery.offset={
    bodyOffset:function(body){
        var top=body.offsetTop,left=body.offsetLeft;
        if(jQuery.support.doesNotIncludeMarginInBodyOffset){
            top+=parseFloat(jQuery.css(body,"marginTop"))||0;
            left+=parseFloat(jQuery.css(body,"marginLeft"))||0;
        }
        return{
            top:top,
            left:left
        };
    
},
setOffset:function(elem,options,i){
    var position=jQuery.css(elem,"position");
    if(position==="static"){
        elem.style.position="relative";
    }
    var curElem=jQuery(elem),curOffset=curElem.offset(),curCSSTop=jQuery.css(elem,"top"),curCSSLeft=jQuery.css(elem,"left"),calculatePosition=(position==="absolute"||position==="fixed")&&jQuery.inArray("auto",[curCSSTop,curCSSLeft])>-1,props={},curPosition={},curTop,curLeft;
    if(calculatePosition){
        curPosition=curElem.position();
        curTop=curPosition.top;
        curLeft=curPosition.left;
    }else{
        curTop=parseFloat(curCSSTop)||0;
        curLeft=parseFloat(curCSSLeft)||0;
    }
    if(jQuery.isFunction(options)){
        options=options.call(elem,i,curOffset);
    }
    if(options.top!=null){
        props.top=(options.top-curOffset.top)+curTop;
    }
    if(options.left!=null){
        props.left=(options.left-curOffset.left)+curLeft;
    }
    if("using"in options){
        options.using.call(elem,props);
    }else{
        curElem.css(props);
    }
}
};

jQuery.fn.extend({
    position:function(){
        if(!this[0]){
            return;
        }
        var elem=this[0],offsetParent=this.offsetParent(),offset=this.offset(),parentOffset=rroot.test(offsetParent[0].nodeName)?{
            top:0,
            left:0
        }:offsetParent.offset();
        offset.top-=parseFloat(jQuery.css(elem,"marginTop"))||0;
        offset.left-=parseFloat(jQuery.css(elem,"marginLeft"))||0;
        parentOffset.top+=parseFloat(jQuery.css(offsetParent[0],"borderTopWidth"))||0;
        parentOffset.left+=parseFloat(jQuery.css(offsetParent[0],"borderLeftWidth"))||0;
        return{
            top:offset.top-parentOffset.top,
            left:offset.left-parentOffset.left
            };
        
},
offsetParent:function(){
    return this.map(function(){
        var offsetParent=this.offsetParent||document.body;
        while(offsetParent&&(!rroot.test(offsetParent.nodeName)&&jQuery.css(offsetParent,"position")==="static")){
            offsetParent=offsetParent.offsetParent;
        }
        return offsetParent||document.body;
    });
}
});
jQuery.each({
    scrollLeft:"pageXOffset",
    scrollTop:"pageYOffset"
},function(method,prop){
    var top=/Y/.test(prop);
    jQuery.fn[method]=function(val){
        return jQuery.access(this,function(elem,method,val){
            var win=getWindow(elem);
            if(val===undefined){
                return win?(prop in win)?win[prop]:win.document.documentElement[method]:elem[method];
            }
            if(win){
                win.scrollTo(!top?val:jQuery(win).scrollLeft(),top?val:jQuery(win).scrollTop());
            }else{
                elem[method]=val;
            }
        },method,val,arguments.length,null);
};

});
function getWindow(elem){
    return jQuery.isWindow(elem)?elem:elem.nodeType===9?elem.defaultView||elem.parentWindow:false;
}
jQuery.each({
    Height:"height",
    Width:"width"
},function(name,type){
    jQuery.each({
        padding:"inner"+name,
        content:type,
        "":"outer"+name
        },function(defaultExtra,funcName){
        jQuery.fn[funcName]=function(margin,value){
            var chainable=arguments.length&&(defaultExtra||typeof margin!=="boolean"),extra=defaultExtra||(margin===true||value===true?"margin":"border");
            return jQuery.access(this,function(elem,type,value){
                var doc;
                if(jQuery.isWindow(elem)){
                    return elem.document.documentElement["client"+name];
                }
                if(elem.nodeType===9){
                    doc=elem.documentElement;
                    return Math.max(elem.body["scroll"+name],doc["scroll"+name],elem.body["offset"+name],doc["offset"+name],doc["client"+name]);
                }
                return value===undefined?jQuery.css(elem,type,value,extra):jQuery.style(elem,type,value,extra);
            },type,chainable?margin:undefined,chainable,null);
        };
    
    });
});
window.jQuery=window.$=jQuery;
if(typeof define==="function"&&define.amd&&define.amd.jQuery){
    define("jquery",[],function(){
        return jQuery;
    });
}
})(window);
;
(function($){
    'use strict';
    function safe_add(x,y){
        var lsw=(x&0xFFFF)+(y&0xFFFF),msw=(x>>16)+(y>>16)+(lsw>>16);
        return(msw<<16)|(lsw&0xFFFF);
    }
    function bit_rol(num,cnt){
        return(num<<cnt)|(num>>>(32-cnt));
    }
    function md5_cmn(q,a,b,x,s,t){
        return safe_add(bit_rol(safe_add(safe_add(a,q),safe_add(x,t)),s),b);
    }
    function md5_ff(a,b,c,d,x,s,t){
        return md5_cmn((b&c)|((~b)&d),a,b,x,s,t);
    }
    function md5_gg(a,b,c,d,x,s,t){
        return md5_cmn((b&d)|(c&(~d)),a,b,x,s,t);
    }
    function md5_hh(a,b,c,d,x,s,t){
        return md5_cmn(b^c^d,a,b,x,s,t);
    }
    function md5_ii(a,b,c,d,x,s,t){
        return md5_cmn(c^(b|(~d)),a,b,x,s,t);
    }
    function binl_md5(x,len){
        x[len>>5]|=0x80<<((len)%32);
        x[(((len+64)>>>9)<<4)+14]=len;
        var i,olda,oldb,oldc,oldd,a=1732584193,b=-271733879,c=-1732584194,d=271733878;
        for(i=0;i<x.length;i+=16){
            olda=a;
            oldb=b;
            oldc=c;
            oldd=d;
            a=md5_ff(a,b,c,d,x[i],7,-680876936);
            d=md5_ff(d,a,b,c,x[i+1],12,-389564586);
            c=md5_ff(c,d,a,b,x[i+2],17,606105819);
            b=md5_ff(b,c,d,a,x[i+3],22,-1044525330);
            a=md5_ff(a,b,c,d,x[i+4],7,-176418897);
            d=md5_ff(d,a,b,c,x[i+5],12,1200080426);
            c=md5_ff(c,d,a,b,x[i+6],17,-1473231341);
            b=md5_ff(b,c,d,a,x[i+7],22,-45705983);
            a=md5_ff(a,b,c,d,x[i+8],7,1770035416);
            d=md5_ff(d,a,b,c,x[i+9],12,-1958414417);
            c=md5_ff(c,d,a,b,x[i+10],17,-42063);
            b=md5_ff(b,c,d,a,x[i+11],22,-1990404162);
            a=md5_ff(a,b,c,d,x[i+12],7,1804603682);
            d=md5_ff(d,a,b,c,x[i+13],12,-40341101);
            c=md5_ff(c,d,a,b,x[i+14],17,-1502002290);
            b=md5_ff(b,c,d,a,x[i+15],22,1236535329);
            a=md5_gg(a,b,c,d,x[i+1],5,-165796510);
            d=md5_gg(d,a,b,c,x[i+6],9,-1069501632);
            c=md5_gg(c,d,a,b,x[i+11],14,643717713);
            b=md5_gg(b,c,d,a,x[i],20,-373897302);
            a=md5_gg(a,b,c,d,x[i+5],5,-701558691);
            d=md5_gg(d,a,b,c,x[i+10],9,38016083);
            c=md5_gg(c,d,a,b,x[i+15],14,-660478335);
            b=md5_gg(b,c,d,a,x[i+4],20,-405537848);
            a=md5_gg(a,b,c,d,x[i+9],5,568446438);
            d=md5_gg(d,a,b,c,x[i+14],9,-1019803690);
            c=md5_gg(c,d,a,b,x[i+3],14,-187363961);
            b=md5_gg(b,c,d,a,x[i+8],20,1163531501);
            a=md5_gg(a,b,c,d,x[i+13],5,-1444681467);
            d=md5_gg(d,a,b,c,x[i+2],9,-51403784);
            c=md5_gg(c,d,a,b,x[i+7],14,1735328473);
            b=md5_gg(b,c,d,a,x[i+12],20,-1926607734);
            a=md5_hh(a,b,c,d,x[i+5],4,-378558);
            d=md5_hh(d,a,b,c,x[i+8],11,-2022574463);
            c=md5_hh(c,d,a,b,x[i+11],16,1839030562);
            b=md5_hh(b,c,d,a,x[i+14],23,-35309556);
            a=md5_hh(a,b,c,d,x[i+1],4,-1530992060);
            d=md5_hh(d,a,b,c,x[i+4],11,1272893353);
            c=md5_hh(c,d,a,b,x[i+7],16,-155497632);
            b=md5_hh(b,c,d,a,x[i+10],23,-1094730640);
            a=md5_hh(a,b,c,d,x[i+13],4,681279174);
            d=md5_hh(d,a,b,c,x[i],11,-358537222);
            c=md5_hh(c,d,a,b,x[i+3],16,-722521979);
            b=md5_hh(b,c,d,a,x[i+6],23,76029189);
            a=md5_hh(a,b,c,d,x[i+9],4,-640364487);
            d=md5_hh(d,a,b,c,x[i+12],11,-421815835);
            c=md5_hh(c,d,a,b,x[i+15],16,530742520);
            b=md5_hh(b,c,d,a,x[i+2],23,-995338651);
            a=md5_ii(a,b,c,d,x[i],6,-198630844);
            d=md5_ii(d,a,b,c,x[i+7],10,1126891415);
            c=md5_ii(c,d,a,b,x[i+14],15,-1416354905);
            b=md5_ii(b,c,d,a,x[i+5],21,-57434055);
            a=md5_ii(a,b,c,d,x[i+12],6,1700485571);
            d=md5_ii(d,a,b,c,x[i+3],10,-1894986606);
            c=md5_ii(c,d,a,b,x[i+10],15,-1051523);
            b=md5_ii(b,c,d,a,x[i+1],21,-2054922799);
            a=md5_ii(a,b,c,d,x[i+8],6,1873313359);
            d=md5_ii(d,a,b,c,x[i+15],10,-30611744);
            c=md5_ii(c,d,a,b,x[i+6],15,-1560198380);
            b=md5_ii(b,c,d,a,x[i+13],21,1309151649);
            a=md5_ii(a,b,c,d,x[i+4],6,-145523070);
            d=md5_ii(d,a,b,c,x[i+11],10,-1120210379);
            c=md5_ii(c,d,a,b,x[i+2],15,718787259);
            b=md5_ii(b,c,d,a,x[i+9],21,-343485551);
            a=safe_add(a,olda);
            b=safe_add(b,oldb);
            c=safe_add(c,oldc);
            d=safe_add(d,oldd);
        }
        return[a,b,c,d];
    }
    function binl2rstr(input){
        var i,output='';
        for(i=0;i<input.length*32;i+=8){
            output+=String.fromCharCode((input[i>>5]>>>(i%32))&0xFF);
        }
        return output;
    }
    function rstr2binl(input){
        var i,output=[];
        output[(input.length>>2)-1]=undefined;
        for(i=0;i<output.length;i+=1){
            output[i]=0;
        }
        for(i=0;i<input.length*8;i+=8){
            output[i>>5]|=(input.charCodeAt(i/8)&0xFF)<<(i%32);
        }
        return output;
    }
    function rstr_md5(s){
        return binl2rstr(binl_md5(rstr2binl(s),s.length*8));
    }
    function rstr_hmac_md5(key,data){
        var i,bkey=rstr2binl(key),ipad=[],opad=[],hash;
        ipad[15]=opad[15]=undefined;
        if(bkey.length>16){
            bkey=binl_md5(bkey,key.length*8);
        }
        for(i=0;i<16;i+=1){
            ipad[i]=bkey[i]^0x36363636;
            opad[i]=bkey[i]^0x5C5C5C5C;
        }
        hash=binl_md5(ipad.concat(rstr2binl(data)),512+data.length*8);
        return binl2rstr(binl_md5(opad.concat(hash),512+128));
    }
    function rstr2hex(input){
        var hex_tab='0123456789abcdef',output='',x,i;
        for(i=0;i<input.length;i+=1){
            x=input.charCodeAt(i);
            output+=hex_tab.charAt((x>>>4)&0x0F)+
            hex_tab.charAt(x&0x0F);
        }
        return output;
    }
    function str2rstr_utf8(input){
        return unescape(encodeURIComponent(input));
    }
    function raw_md5(s){
        return rstr_md5(str2rstr_utf8(s));
    }
    function hex_md5(s){
        return rstr2hex(raw_md5(s));
    }
    function raw_hmac_md5(k,d){
        return rstr_hmac_md5(str2rstr_utf8(k),str2rstr_utf8(d));
    }
    function hex_hmac_md5(k,d){
        return rstr2hex(raw_hmac_md5(k,d));
    }
    $.md5=function(string,key,raw){
        if(!key){
            if(!raw){
                return hex_md5(string);
            }else{
                return raw_md5(string);
            }
        }
    if(!raw){
        return hex_hmac_md5(key,string);
    }else{
        return raw_hmac_md5(key,string);
    }
};

}(typeof jQuery==='function'?jQuery:this));
;
;
(function($){
    $.fn.ajaxSubmit=function(options){
        if(!this.length){
            log('ajaxSubmit: skipping submit process - no element selected');
            return this;
        }
        var method,action,url,$form=this;
        if(typeof options=='function'){
            options={
                success:options
            };
        
    }
    method=this.attr('method');
    action=this.attr('action');
    url=(typeof action==='string')?$.trim(action):'';
    url=url||window.location.href||'';
    if(url){
        url=(url.match(/^([^#]+)/)||[])[1];
    }
    options=$.extend(true,{
        url:url,
        success:$.ajaxSettings.success,
        type:method||'GET',
        iframeSrc:/^https/i.test(window.location.href||'')?'javascript:false':'about:blank'
        },options);
    var veto={};
    
    this.trigger('form-pre-serialize',[this,options,veto]);
    if(veto.veto){
        log('ajaxSubmit: submit vetoed via form-pre-serialize trigger');
        return this;
    }
    if(options.beforeSerialize&&options.beforeSerialize(this,options)===false){
        log('ajaxSubmit: submit aborted via beforeSerialize callback');
        return this;
    }
    var n,v,a=this.formToArray(options.semantic);
    if(options.data){
        options.extraData=options.data;
        for(n in options.data){
            if(options.data[n]instanceof Array){
                for(var k in options.data[n]){
                    a.push({
                        name:n,
                        value:options.data[n][k]
                        });
                }
                }
        else{
            v=options.data[n];
            v=$.isFunction(v)?v():v;
            a.push({
                name:n,
                value:v
            });
        }
        }
        }
if(options.beforeSubmit&&options.beforeSubmit(a,this,options)===false){
    log('ajaxSubmit: submit aborted via beforeSubmit callback');
    return this;
}
this.trigger('form-submit-validate',[a,this,options,veto]);
if(veto.veto){
    log('ajaxSubmit: submit vetoed via form-submit-validate trigger');
    return this;
}
var q=$.param(a);
if(options.type.toUpperCase()=='GET'){
    options.url+=(options.url.indexOf('?')>=0?'&':'?')+q;
    options.data=null;
}
else{
    options.data=q;
}
var callbacks=[];
if(options.resetForm){
    callbacks.push(function(){
        $form.resetForm();
    });
}
if(options.clearForm){
    callbacks.push(function(){
        $form.clearForm();
    });
}
if(!options.dataType&&options.target){
    var oldSuccess=options.success||function(){};
    
    callbacks.push(function(data){
        var fn=options.replaceTarget?'replaceWith':'html';
        $(options.target)[fn](data).each(oldSuccess,arguments);
    });
}
else if(options.success){
    callbacks.push(options.success);
}
options.success=function(data,status,xhr){
    var context=options.context||options;
    for(var i=0,max=callbacks.length;i<max;i++){
        callbacks[i].apply(context,[data,status,xhr||$form,$form]);
    }
    };
    
var fileInputs=$('input:file',this).length>0;
var mp='multipart/form-data';
var multipart=($form.attr('enctype')==mp||$form.attr('encoding')==mp);
if(options.iframe!==false&&(fileInputs||options.iframe||multipart)){
    if(options.closeKeepAlive){
        $.get(options.closeKeepAlive,function(){
            fileUpload(a);
        });
    }
    else{
        fileUpload(a);
    }
}
else{
    if($.browser.msie&&method=='get'){
        var ieMeth=$form[0].getAttribute('method');
        if(typeof ieMeth==='string')
            options.type=ieMeth;
    }
    $.ajax(options);
}
this.trigger('form-submit-notify',[this,options]);
return this;
function fileUpload(a){
    var form=$form[0],el,i,s,g,id,$io,io,xhr,sub,n,timedOut,timeoutHandle;
    var useProp=!!$.fn.prop;
    if(a){
        for(i=0;i<a.length;i++){
            el=$(form[a[i].name]);
            el[useProp?'prop':'attr']('disabled',false);
        }
        }
if($(':input[name=submit],:input[id=submit]',form).length){
    alert('Error: Form elements must not have name or id of "submit".');
    return;
}
s=$.extend(true,{},$.ajaxSettings,options);
s.context=s.context||s;
id='jqFormIO'+(new Date().getTime());
if(s.iframeTarget){
    $io=$(s.iframeTarget);
    n=$io.attr('name');
    if(n==null)
        $io.attr('name',id);else
        id=n;
}
else{
    $io=$('<iframe name="'+id+'" src="'+s.iframeSrc+'" />');
    $io.css({
        position:'absolute',
        top:'-1000px',
        left:'-1000px'
    });
}
io=$io[0];
xhr={
    aborted:0,
    responseText:null,
    responseXML:null,
    status:0,
    statusText:'n/a',
    getAllResponseHeaders:function(){},
    getResponseHeader:function(){},
    setRequestHeader:function(){},
    abort:function(status){
        var e=(status==='timeout'?'timeout':'aborted');
        log('aborting upload... '+e);
        this.aborted=1;
        $io.attr('src',s.iframeSrc);
        xhr.error=e;
        s.error&&s.error.call(s.context,xhr,e,status);
        g&&$.event.trigger("ajaxError",[xhr,s,e]);
        s.complete&&s.complete.call(s.context,xhr,e);
    }
};

g=s.global;
if(g&&!$.active++){
    $.event.trigger("ajaxStart");
}
if(g){
    $.event.trigger("ajaxSend",[xhr,s]);
}
if(s.beforeSend&&s.beforeSend.call(s.context,xhr,s)===false){
    if(s.global){
        $.active--;
    }
    return;
}
if(xhr.aborted){
    return;
}
sub=form.clk;
if(sub){
    n=sub.name;
    if(n&&!sub.disabled){
        s.extraData=s.extraData||{};
        
        s.extraData[n]=sub.value;
        if(sub.type=="image"){
            s.extraData[n+'.x']=form.clk_x;
            s.extraData[n+'.y']=form.clk_y;
        }
    }
}
var CLIENT_TIMEOUT_ABORT=1;
var SERVER_ABORT=2;
function getDoc(frame){
    var doc=frame.contentWindow?frame.contentWindow.document:frame.contentDocument?frame.contentDocument:frame.document;
    return doc;
}
function doSubmit(){
    var t=$form.attr('target'),a=$form.attr('action');
    form.setAttribute('target',id);
    if(!method){
        form.setAttribute('method','POST');
    }
    if(a!=s.url){
        form.setAttribute('action',s.url);
    }
    if(!s.skipEncodingOverride&&(!method||/post/i.test(method))){
        $form.attr({
            encoding:'multipart/form-data',
            enctype:'multipart/form-data'
        });
    }
    if(s.timeout){
        timeoutHandle=setTimeout(function(){
            timedOut=true;
            cb(CLIENT_TIMEOUT_ABORT);
        },s.timeout);
    }
    function checkState(){
        try{
            var state=getDoc(io).readyState;
            log('state = '+state);
            if(state.toLowerCase()=='uninitialized')
                setTimeout(checkState,50);
        }
        catch(e){
            log('Server abort: ',e,' (',e.name,')');
            cb(SERVER_ABORT);
            timeoutHandle&&clearTimeout(timeoutHandle);
            timeoutHandle=undefined;
        }
    }
var extraInputs=[];
try{
    if(s.extraData){
        for(var n in s.extraData){
            extraInputs.push($('<input type="hidden" name="'+n+'" />').attr('value',s.extraData[n]).appendTo(form)[0]);
        }
        }
if(!s.iframeTarget){
    $io.appendTo('body');
    io.attachEvent?io.attachEvent('onload',cb):io.addEventListener('load',cb,false);
}
setTimeout(checkState,15);
form.submit();
}
finally{
    form.setAttribute('action',a);
    if(t){
        form.setAttribute('target',t);
    }else{
        $form.removeAttr('target');
    }
    $(extraInputs).remove();
}
}
if(s.forceSync){
    doSubmit();
}
else{
    setTimeout(doSubmit,10);
}
var data,doc,domCheckCount=50,callbackProcessed;
function cb(e){
    if(xhr.aborted||callbackProcessed){
        return;
    }
    try{
        doc=getDoc(io);
    }
    catch(ex){
        log('cannot access response document: ',ex);
        e=SERVER_ABORT;
    }
    if(e===CLIENT_TIMEOUT_ABORT&&xhr){
        xhr.abort('timeout');
        return;
    }
    else if(e==SERVER_ABORT&&xhr){
        xhr.abort('server abort');
        return;
    }
    if(!doc||doc.location.href==s.iframeSrc){
        if(!timedOut)
            return;
    }
    io.detachEvent?io.detachEvent('onload',cb):io.removeEventListener('load',cb,false);
    var status='success',errMsg;
    try{
        if(timedOut){
            throw'timeout';
        }
        var isXml=s.dataType=='xml'||doc.XMLDocument||$.isXMLDoc(doc);
        log('isXml='+isXml);
        if(!isXml&&window.opera&&(doc.body==null||doc.body.innerHTML=='')){
            if(--domCheckCount){
                log('requeing onLoad callback, DOM not available');
                setTimeout(cb,250);
                return;
            }
        }
    var docRoot=doc.body?doc.body:doc.documentElement;
    xhr.responseText=docRoot?docRoot.innerHTML:null;
    xhr.responseXML=doc.XMLDocument?doc.XMLDocument:doc;
    if(isXml)
        s.dataType='xml';
    xhr.getResponseHeader=function(header){
        var headers={
            'content-type':s.dataType
            };
            
        return headers[header];
    };
    
    if(docRoot){
        xhr.status=Number(docRoot.getAttribute('status'))||xhr.status;
        xhr.statusText=docRoot.getAttribute('statusText')||xhr.statusText;
    }
    var dt=s.dataType||'';
    var scr=/(json|script|text)/.test(dt.toLowerCase());
    if(scr||s.textarea){
        var ta=doc.getElementsByTagName('textarea')[0];
        if(ta){
            xhr.responseText=ta.value;
            xhr.status=Number(ta.getAttribute('status'))||xhr.status;
            xhr.statusText=ta.getAttribute('statusText')||xhr.statusText;
        }
        else if(scr){
            var pre=doc.getElementsByTagName('pre')[0];
            var b=doc.getElementsByTagName('body')[0];
            if(pre){
                xhr.responseText=pre.textContent?pre.textContent:pre.innerHTML;
            }
            else if(b){
                xhr.responseText=b.innerHTML;
            }
        }
    }
else if(s.dataType=='xml'&&!xhr.responseXML&&xhr.responseText!=null){
    xhr.responseXML=toXml(xhr.responseText);
}
try{
    data=httpData(xhr,s.dataType,s);
}
catch(e){
    status='parsererror';
    xhr.error=errMsg=(e||status);
}
}
catch(e){
    log('error caught: ',e);
    status='error';
    xhr.error=errMsg=(e||status);
}
if(xhr.aborted){
    log('upload aborted');
    status=null;
}
if(xhr.status){
    status=(xhr.status>=200&&xhr.status<300||xhr.status===304)?'success':'error';
}
if(status==='success'){
    s.success&&s.success.call(s.context,data,'success',xhr);
    g&&$.event.trigger("ajaxSuccess",[xhr,s]);
}
else if(status){
    if(errMsg==undefined)
        errMsg=xhr.statusText;
    s.error&&s.error.call(s.context,xhr,status,errMsg);
    g&&$.event.trigger("ajaxError",[xhr,s,errMsg]);
}
g&&$.event.trigger("ajaxComplete",[xhr,s]);
if(g&&!--$.active){
    $.event.trigger("ajaxStop");
}
s.complete&&s.complete.call(s.context,xhr,status);
callbackProcessed=true;
if(s.timeout)
    clearTimeout(timeoutHandle);
setTimeout(function(){
    if(!s.iframeTarget)
        $io.remove();
    xhr.responseXML=null;
},100);
}
var toXml=$.parseXML||function(s,doc){
    if(window.ActiveXObject){
        doc=new ActiveXObject('Microsoft.XMLDOM');
        doc.async='false';
        doc.loadXML(s);
    }
    else{
        doc=(new DOMParser()).parseFromString(s,'text/xml');
    }
    return(doc&&doc.documentElement&&doc.documentElement.nodeName!='parsererror')?doc:null;
};

var parseJSON=$.parseJSON||function(s){
    return window['eval']('('+s+')');
};

var httpData=function(xhr,type,s){
    var ct=xhr.getResponseHeader('content-type')||'',xml=type==='xml'||!type&&ct.indexOf('xml')>=0,data=xml?xhr.responseXML:xhr.responseText;
    if(xml&&data.documentElement.nodeName==='parsererror'){
        $.error&&$.error('parsererror');
    }
    if(s&&s.dataFilter){
        data=s.dataFilter(data,type);
    }
    if(typeof data==='string'){
        if(type==='json'||!type&&ct.indexOf('json')>=0){
            data=parseJSON(data);
        }else if(type==="script"||!type&&ct.indexOf("javascript")>=0){
            $.globalEval(data);
        }
    }
return data;
};

}
};

$.fn.ajaxForm=function(options){
    if(this.length===0){
        var o={
            s:this.selector,
            c:this.context
            };
            
        if(!$.isReady&&o.s){
            log('DOM not ready, queuing ajaxForm');
            $(function(){
                $(o.s,o.c).ajaxForm(options);
            });
            return this;
        }
        log('terminating; zero elements found by selector'+($.isReady?'':' (DOM not ready)'));
        return this;
    }
    return this.ajaxFormUnbind().bind('submit.form-plugin',function(e){
        if(!e.isDefaultPrevented()){
            e.preventDefault();
            $(this).ajaxSubmit(options);
        }
    }).bind('click.form-plugin',function(e){
    var target=e.target;
    var $el=$(target);
    if(!($el.is(":submit,input:image"))){
        var t=$el.closest(':submit');
        if(t.length==0){
            return;
        }
        target=t[0];
    }
    var form=this;
    form.clk=target;
    if(target.type=='image'){
        if(e.offsetX!=undefined){
            form.clk_x=e.offsetX;
            form.clk_y=e.offsetY;
        }else if(typeof $.fn.offset=='function'){
            var offset=$el.offset();
            form.clk_x=e.pageX-offset.left;
            form.clk_y=e.pageY-offset.top;
        }else{
            form.clk_x=e.pageX-target.offsetLeft;
            form.clk_y=e.pageY-target.offsetTop;
        }
    }
setTimeout(function(){
    form.clk=form.clk_x=form.clk_y=null;
},100);
});
};

$.fn.ajaxFormUnbind=function(){
    return this.unbind('submit.form-plugin click.form-plugin');
};

$.fn.formToArray=function(semantic){
    var a=[];
    if(this.length===0){
        return a;
    }
    var form=this[0];
    var els=semantic?form.getElementsByTagName('*'):form.elements;
    if(!els){
        return a;
    }
    var i,j,n,v,el,max,jmax;
    for(i=0,max=els.length;i<max;i++){
        el=els[i];
        n=el.name;
        if(!n){
            continue;
        }
        if(semantic&&form.clk&&el.type=="image"){
            if(!el.disabled&&form.clk==el){
                a.push({
                    name:n,
                    value:$(el).val()
                    });
                a.push({
                    name:n+'.x',
                    value:form.clk_x
                    },{
                    name:n+'.y',
                    value:form.clk_y
                    });
            }
            continue;
        }
        v=$.fieldValue(el,true);
        if(v&&v.constructor==Array){
            for(j=0,jmax=v.length;j<jmax;j++){
                a.push({
                    name:n,
                    value:v[j]
                    });
            }
            }
    else if(v!==null&&typeof v!='undefined'){
        a.push({
            name:n,
            value:v
        });
    }
    }
if(!semantic&&form.clk){
    var $input=$(form.clk),input=$input[0];
    n=input.name;
    if(n&&!input.disabled&&input.type=='image'){
        a.push({
            name:n,
            value:$input.val()
            });
        a.push({
            name:n+'.x',
            value:form.clk_x
            },{
            name:n+'.y',
            value:form.clk_y
            });
    }
}
return a;
};

$.fn.formSerialize=function(semantic){
    return $.param(this.formToArray(semantic));
};

$.fn.fieldSerialize=function(successful){
    var a=[];
    this.each(function(){
        var n=this.name;
        if(!n){
            return;
        }
        var v=$.fieldValue(this,successful);
        if(v&&v.constructor==Array){
            for(var i=0,max=v.length;i<max;i++){
                a.push({
                    name:n,
                    value:v[i]
                    });
            }
            }
    else if(v!==null&&typeof v!='undefined'){
        a.push({
            name:this.name,
            value:v
        });
    }
    });
return $.param(a);
};

$.fn.fieldValue=function(successful){
    for(var val=[],i=0,max=this.length;i<max;i++){
        var el=this[i];
        var v=$.fieldValue(el,successful);
        if(v===null||typeof v=='undefined'||(v.constructor==Array&&!v.length)){
            continue;
        }
        v.constructor==Array?$.merge(val,v):val.push(v);
    }
    return val;
};

$.fieldValue=function(el,successful){
    var n=el.name,t=el.type,tag=el.tagName.toLowerCase();
    if(successful===undefined){
        successful=true;
    }
    if(successful&&(!n||el.disabled||t=='reset'||t=='button'||(t=='checkbox'||t=='radio')&&!el.checked||(t=='submit'||t=='image')&&el.form&&el.form.clk!=el||tag=='select'&&el.selectedIndex==-1)){
        return null;
    }
    if(tag=='select'){
        var index=el.selectedIndex;
        if(index<0){
            return null;
        }
        var a=[],ops=el.options;
        var one=(t=='select-one');
        var max=(one?index+1:ops.length);
        for(var i=(one?index:0);i<max;i++){
            var op=ops[i];
            if(op.selected){
                var v=op.value;
                if(!v){
                    v=(op.attributes&&op.attributes['value']&&!(op.attributes['value'].specified))?op.text:op.value;
                }
                if(one){
                    return v;
                }
                a.push(v);
            }
        }
    return a;
}
return $(el).val();
};

$.fn.clearForm=function(){
    return this.each(function(){
        $('input,select,textarea',this).clearFields();
    });
};

$.fn.clearFields=$.fn.clearInputs=function(){
    var re=/^(?:color|date|datetime|email|month|number|password|range|search|tel|text|time|url|week)$/i;
    return this.each(function(){
        var t=this.type,tag=this.tagName.toLowerCase();
        if(re.test(t)||tag=='textarea'){
            this.value='';
        }
        else if(t=='checkbox'||t=='radio'){
            this.checked=false;
        }
        else if(tag=='select'){
            this.selectedIndex=-1;
        }
    });
};

$.fn.resetForm=function(){
    return this.each(function(){
        if(typeof this.reset=='function'||(typeof this.reset=='object'&&!this.reset.nodeType)){
            this.reset();
        }
    });
};

$.fn.enable=function(b){
    if(b===undefined){
        b=true;
    }
    return this.each(function(){
        this.disabled=!b;
    });
};

$.fn.selected=function(select){
    if(select===undefined){
        select=true;
    }
    return this.each(function(){
        var t=this.type;
        if(t=='checkbox'||t=='radio'){
            this.checked=select;
        }
        else if(this.tagName.toLowerCase()=='option'){
            var $sel=$(this).parent('select');
            if(select&&$sel[0]&&$sel[0].type=='select-one'){
                $sel.find('option').selected(false);
            }
            this.selected=select;
        }
    });
};

function log(){
    var msg='[jquery.form] '+Array.prototype.join.call(arguments,'');
    if(window.console&&window.console.log){
        window.console.log(msg);
    }
    else if(window.opera&&window.opera.postError){
        window.opera.postError(msg);
    }
};

})(jQuery);
;
(function($){
    $.extend($.fn,{
        validate:function(options){
            if(!this.length){
                options&&options.debug&&window.console&&console.warn("nothing selected, can't validate, returning nothing");
                return;
            }
            var validator=$.data(this[0],'validator');
            if(validator){
                return validator;
            }
            validator=new $.validator(options,this[0]);
            $.data(this[0],'validator',validator);
            if(validator.settings.onsubmit){
                this.find("input, button").filter(".cancel").click(function(){
                    validator.cancelSubmit=true;
                });
                if(validator.settings.submitHandler){
                    this.find("input, button").filter(":submit").click(function(){
                        validator.submitButton=this;
                    });
                }
                this.submit(function(event){
                    if(validator.settings.debug)
                        event.preventDefault();
                    function handle(){
                        if(validator.settings.submitHandler){
                            if(validator.submitButton){
                                var hidden=$("<input type='hidden'/>").attr("name",validator.submitButton.name).val(validator.submitButton.value).appendTo(validator.currentForm);
                            }
                            validator.settings.submitHandler.call(validator,validator.currentForm);
                            if(validator.submitButton){
                                hidden.remove();
                            }
                            return false;
                        }
                        return true;
                    }
                    if(validator.cancelSubmit){
                        validator.cancelSubmit=false;
                        return handle();
                    }
                    if(validator.form()){
                        if(validator.pendingRequest){
                            validator.formSubmitted=true;
                            return false;
                        }
                        return handle();
                    }else{
                        validator.focusInvalid();
                        return false;
                    }
                });
        }
        return validator;
    },
    valid:function(){
        if($(this[0]).is('form')){
            return this.validate().form();
        }else{
            var valid=true;
            var validator=$(this[0].form).validate();
            this.each(function(){
                valid&=validator.element(this);
            });
            return valid;
        }
    },
    removeAttrs:function(attributes){
        var result={},$element=this;
        $.each(attributes.split(/\s/),function(index,value){
            result[value]=$element.attr(value);
            $element.removeAttr(value);
        });
        return result;
    },
    rules:function(command,argument){
        var element=this[0];
        if(command){
            var settings=$.data(element.form,'validator').settings;
            var staticRules=settings.rules;
            var existingRules=$.validator.staticRules(element);
            switch(command){
                case"add":
                    $.extend(existingRules,$.validator.normalizeRule(argument));
                    staticRules[element.name]=existingRules;
                    if(argument.messages)
                    settings.messages[element.name]=$.extend(settings.messages[element.name],argument.messages);
                break;
                case"remove":
                    if(!argument){
                    delete staticRules[element.name];
                    return existingRules;
                }
                var filtered={};
                
                $.each(argument.split(/\s/),function(index,method){
                    filtered[method]=existingRules[method];
                    delete existingRules[method];
                });
                return filtered;
            }
        }
    var data=$.validator.normalizeRules($.extend({},$.validator.metadataRules(element),$.validator.classRules(element),$.validator.attributeRules(element),$.validator.staticRules(element)),element);
    if(data.required){
        var param=data.required;
        delete data.required;
        data=$.extend({
            required:param
        },data);
    }
    return data;
}
});
$.extend($.expr[":"],{
    blank:function(a){
        return!$.trim(""+a.value);
    },
    filled:function(a){
        return!!$.trim(""+a.value);
    },
    unchecked:function(a){
        return!a.checked;
    }
});
$.validator=function(options,form){
    this.settings=$.extend(true,{},$.validator.defaults,options);
    this.currentForm=form;
    this.init();
};

$.validator.format=function(source,params){
    if(arguments.length==1)
        return function(){
            var args=$.makeArray(arguments);
            args.unshift(source);
            return $.validator.format.apply(this,args);
        };
        
    if(arguments.length>2&&params.constructor!=Array){
        params=$.makeArray(arguments).slice(1);
    }
    if(params.constructor!=Array){
        params=[params];
    }
    $.each(params,function(i,n){
        source=source.replace(new RegExp("\\{"+i+"\\}","g"),n);
    });
    return source;
};

$.extend($.validator,{
    defaults:{
        messages:{},
        groups:{},
        rules:{},
        errorClass:"error",
        validClass:"valid",
        errorElement:"label",
        focusInvalid:true,
        errorContainer:$([]),
        errorLabelContainer:$([]),
        onsubmit:true,
        ignore:[],
        ignoreTitle:false,
        onfocusin:function(element){
            this.lastActive=element;
            if(this.settings.focusCleanup&&!this.blockFocusCleanup){
                this.settings.unhighlight&&this.settings.unhighlight.call(this,element,this.settings.errorClass,this.settings.validClass);
                this.addWrapper(this.errorsFor(element)).hide();
            }
        },
    onfocusout:function(element){
        if(!this.checkable(element)&&(element.name in this.submitted||!this.optional(element))){
            this.element(element);
        }
    },
onkeyup:function(element){
    if(element.name in this.submitted||element==this.lastElement){
        this.element(element);
    }
},
onclick:function(element){
    if(element.name in this.submitted)
        this.element(element);
    else if(element.parentNode.name in this.submitted)
        this.element(element.parentNode);
},
highlight:function(element,errorClass,validClass){
    if(element.type==='radio'){
        this.findByName(element.name).addClass(errorClass).removeClass(validClass);
    }else{
        $(element).addClass(errorClass).removeClass(validClass);
    }
},
unhighlight:function(element,errorClass,validClass){
    if(element.type==='radio'){
        this.findByName(element.name).removeClass(errorClass).addClass(validClass);
    }else{
        $(element).removeClass(errorClass).addClass(validClass);
    }
}
},
setDefaults:function(settings){
    $.extend($.validator.defaults,settings);
},
messages:{
    required:"This field is required.",
    remote:"Please fix this field.",
    email:"Please enter a valid email address.",
    url:"Please enter a valid URL.",
    date:"Please enter a valid date.",
    dateISO:"Please enter a valid date (ISO).",
    number:"Please enter a valid number.",
    digits:"Please enter only digits.",
    creditcard:"Please enter a valid credit card number.",
    equalTo:"Please enter the same value again.",
    accept:"Please enter a value with a valid extension.",
    maxlength:$.validator.format("Please enter no more than {0} characters."),
    minlength:$.validator.format("Please enter at least {0} characters."),
    rangelength:$.validator.format("Please enter a value between {0} and {1} characters long."),
    range:$.validator.format("Please enter a value between {0} and {1}."),
    max:$.validator.format("Please enter a value less than or equal to {0}."),
    min:$.validator.format("Please enter a value greater than or equal to {0}.")
    },
autoCreateRanges:false,
prototype:{
    init:function(){
        this.labelContainer=$(this.settings.errorLabelContainer);
        this.errorContext=this.labelContainer.length&&this.labelContainer||$(this.currentForm);
        this.containers=$(this.settings.errorContainer).add(this.settings.errorLabelContainer);
        this.submitted={};
        
        this.valueCache={};
        
        this.pendingRequest=0;
        this.pending={};
        
        this.invalid={};
        
        this.reset();
        var groups=(this.groups={});
        $.each(this.settings.groups,function(key,value){
            $.each(value.split(/\s/),function(index,name){
                groups[name]=key;
            });
        });
        var rules=this.settings.rules;
        $.each(rules,function(key,value){
            rules[key]=$.validator.normalizeRule(value);
        });
        function delegate(event){
            var validator=$.data(this[0].form,"validator"),eventType="on"+event.type.replace(/^validate/,"");
            validator.settings[eventType]&&validator.settings[eventType].call(validator,this[0]);
        }
        $(this.currentForm).validateDelegate(":text, :password, :file, select, textarea","focusin focusout keyup",delegate).validateDelegate(":radio, :checkbox, select, option","click",delegate);
        if(this.settings.invalidHandler)
            $(this.currentForm).bind("invalid-form.validate",this.settings.invalidHandler);
    },
    form:function(){
        this.checkForm();
        $.extend(this.submitted,this.errorMap);
        this.invalid=$.extend({},this.errorMap);
        if(!this.valid())
            $(this.currentForm).triggerHandler("invalid-form",[this]);
        this.showErrors();
        return this.valid();
    },
    checkForm:function(){
        this.prepareForm();
        for(var i=0,elements=(this.currentElements=this.elements());elements[i];i++){
            this.check(elements[i]);
        }
        return this.valid();
    },
    element:function(element){
        element=this.clean(element);
        this.lastElement=element;
        this.prepareElement(element);
        this.currentElements=$(element);
        var result=this.check(element);
        if(result){
            delete this.invalid[element.name];
        }else{
            this.invalid[element.name]=true;
        }
        if(!this.numberOfInvalids()){
            this.toHide=this.toHide.add(this.containers);
        }
        this.showErrors();
        return result;
    },
    showErrors:function(errors){
        if(errors){
            $.extend(this.errorMap,errors);
            this.errorList=[];
            for(var name in errors){
                this.errorList.push({
                    message:errors[name],
                    element:this.findByName(name)[0]
                    });
            }
            this.successList=$.grep(this.successList,function(element){
                return!(element.name in errors);
            });
        }
        this.settings.showErrors?this.settings.showErrors.call(this,this.errorMap,this.errorList):this.defaultShowErrors();
    },
    resetForm:function(){
        if($.fn.resetForm)
            $(this.currentForm).resetForm();
        this.submitted={};
        
        this.prepareForm();
        this.hideErrors();
        this.elements().removeClass(this.settings.errorClass);
    },
    numberOfInvalids:function(){
        return this.objectLength(this.invalid);
    },
    objectLength:function(obj){
        var count=0;
        for(var i in obj)
            count++;return count;
    },
    hideErrors:function(){
        this.addWrapper(this.toHide).hide();
    },
    valid:function(){
        return this.size()==0;
    },
    size:function(){
        return this.errorList.length;
    },
    focusInvalid:function(){
        if(this.settings.focusInvalid){
            try{
                $(this.findLastActive()||this.errorList.length&&this.errorList[0].element||[]).filter(":visible").focus().trigger("focusin");
            }catch(e){}
        }
    },
findLastActive:function(){
    var lastActive=this.lastActive;
    return lastActive&&$.grep(this.errorList,function(n){
        return n.element.name==lastActive.name;
    }).length==1&&lastActive;
},
elements:function(){
    var validator=this,rulesCache={};
    
    return $(this.currentForm).find("input, select, textarea").not(":submit, :reset, :image, [disabled]").not(this.settings.ignore).filter(function(){
        !this.name&&validator.settings.debug&&window.console&&console.error("%o has no name assigned",this);
        if(this.name in rulesCache||!validator.objectLength($(this).rules()))
            return false;
        rulesCache[this.name]=true;
        return true;
    });
},
clean:function(selector){
    return $(selector)[0];
},
errors:function(){
    return $(this.settings.errorElement+"."+this.settings.errorClass,this.errorContext);
},
reset:function(){
    this.successList=[];
    this.errorList=[];
    this.errorMap={};
    
    this.toShow=$([]);
    this.toHide=$([]);
    this.currentElements=$([]);
},
prepareForm:function(){
    this.reset();
    this.toHide=this.errors().add(this.containers);
},
prepareElement:function(element){
    this.reset();
    this.toHide=this.errorsFor(element);
},
check:function(element){
    element=this.clean(element);
    if(this.checkable(element)){
        element=this.findByName(element.name).not(this.settings.ignore)[0];
    }
    var rules=$(element).rules();
    var dependencyMismatch=false;
    for(var method in rules){
        var rule={
            method:method,
            parameters:rules[method]
            };
            
        try{
            var result=$.validator.methods[method].call(this,element.value.replace(/\r/g,""),element,rule.parameters);
            if(result=="dependency-mismatch"){
                dependencyMismatch=true;
                continue;
            }
            dependencyMismatch=false;
            if(result=="pending"){
                this.toHide=this.toHide.not(this.errorsFor(element));
                return;
            }
            if(!result){
                this.formatAndAdd(element,rule);
                return false;
            }
        }catch(e){
        this.settings.debug&&window.console&&console.log("exception occured when checking element "+element.id
            +", check the '"+rule.method+"' method",e);
        throw e;
    }
    }
if(dependencyMismatch)
    return;
if(this.objectLength(rules))
    this.successList.push(element);
return true;
},
customMetaMessage:function(element,method){
    if(!$.metadata)
        return;
    var meta=this.settings.meta?$(element).metadata()[this.settings.meta]:$(element).metadata();
    return meta&&meta.messages&&meta.messages[method];
},
customMessage:function(name,method){
    var m=this.settings.messages[name];
    return m&&(m.constructor==String?m:m[method]);
},
findDefined:function(){
    for(var i=0;i<arguments.length;i++){
        if(arguments[i]!==undefined)
            return arguments[i];
    }
    return undefined;
},
defaultMessage:function(element,method){
    return this.findDefined(this.customMessage(element.name,method),this.customMetaMessage(element,method),!this.settings.ignoreTitle&&element.title||undefined,$.validator.messages[method],"<strong>Warning: No message defined for "+element.name+"</strong>");
},
formatAndAdd:function(element,rule){
    var message=this.defaultMessage(element,rule.method),theregex=/\$?\{(\d+)\}/g;
    if(typeof message=="function"){
        message=message.call(this,rule.parameters,element);
    }else if(theregex.test(message)){
        message=jQuery.format(message.replace(theregex,'{$1}'),rule.parameters);
    }
    this.errorList.push({
        message:message,
        element:element
    });
    this.errorMap[element.name]=message;
    this.submitted[element.name]=message;
},
addWrapper:function(toToggle){
    if(this.settings.wrapper)
        toToggle=toToggle.add(toToggle.parent(this.settings.wrapper));
    return toToggle;
},
defaultShowErrors:function(){
    for(var i=0;this.errorList[i];i++){
        var error=this.errorList[i];
        this.settings.highlight&&this.settings.highlight.call(this,error.element,this.settings.errorClass,this.settings.validClass);
        this.showLabel(error.element,error.message);
    }
    if(this.errorList.length){
        this.toShow=this.toShow.add(this.containers);
    }
    if(this.settings.success){
        for(var i=0;this.successList[i];i++){
            this.showLabel(this.successList[i]);
        }
        }
if(this.settings.unhighlight){
    for(var i=0,elements=this.validElements();elements[i];i++){
        this.settings.unhighlight.call(this,elements[i],this.settings.errorClass,this.settings.validClass);
    }
    }
this.toHide=this.toHide.not(this.toShow);
this.hideErrors();
this.addWrapper(this.toShow).show();
},
validElements:function(){
    return this.currentElements.not(this.invalidElements());
},
invalidElements:function(){
    return $(this.errorList).map(function(){
        return this.element;
    });
},
showLabel:function(element,message){
    var label=this.errorsFor(element);
    if(label.length){
        label.removeClass().addClass(this.settings.errorClass);
        label.attr("generated")&&label.html(message);
    }else{
        label=$("<"+this.settings.errorElement+"/>").attr({
            "for":this.idOrName(element),
            generated:true
        }).addClass(this.settings.errorClass).html(message||"");
        if(this.settings.wrapper){
            label=label.hide().show().wrap("<"+this.settings.wrapper+"/>").parent();
        }
        if(!this.labelContainer.append(label).length)
            this.settings.errorPlacement?this.settings.errorPlacement(label,$(element)):label.insertAfter(element);
    }
    if(!message&&this.settings.success){
        label.text("");
        typeof this.settings.success=="string"?label.addClass(this.settings.success):this.settings.success(label);
    }
    this.toShow=this.toShow.add(label);
},
errorsFor:function(element){
    var name=this.idOrName(element);
    return this.errors().filter(function(){
        return $(this).attr('for')==name;
    });
},
idOrName:function(element){
    return this.groups[element.name]||(this.checkable(element)?element.name:element.id||element.name);
},
checkable:function(element){
    return/radio|checkbox/i.test(element.type);
},
findByName:function(name){
    var form=this.currentForm;
    return $(document.getElementsByName(name)).map(function(index,element){
        return element.form==form&&element.name==name&&element||null;
    });
},
getLength:function(value,element){
    switch(element.nodeName.toLowerCase()){
        case'select':
            return $("option:selected",element).length;
        case'input':
            if(this.checkable(element))
            return this.findByName(element.name).filter(':checked').length;
        }
    return value.length;
},
depend:function(param,element){
    return this.dependTypes[typeof param]?this.dependTypes[typeof param](param,element):true;
},
dependTypes:{
    "boolean":function(param,element){
        return param;
    },
    "string":function(param,element){
        return!!$(param,element.form).length;
    },
    "function":function(param,element){
        return param(element);
    }
},
optional:function(element){
    return!$.validator.methods.required.call(this,$.trim(element.value),element)&&"dependency-mismatch";
},
startRequest:function(element){
    if(!this.pending[element.name]){
        this.pendingRequest++;
        this.pending[element.name]=true;
    }
},
stopRequest:function(element,valid){
    this.pendingRequest--;
    if(this.pendingRequest<0)
        this.pendingRequest=0;
    delete this.pending[element.name];
    if(valid&&this.pendingRequest==0&&this.formSubmitted&&this.form()){
        $(this.currentForm).submit();
        this.formSubmitted=false;
    }else if(!valid&&this.pendingRequest==0&&this.formSubmitted){
        $(this.currentForm).triggerHandler("invalid-form",[this]);
        this.formSubmitted=false;
    }
},
previousValue:function(element){
    return $.data(element,"previousValue")||$.data(element,"previousValue",{
        old:null,
        valid:true,
        message:this.defaultMessage(element,"remote")
        });
}
},
classRuleSettings:{
    required:{
        required:true
    },
    email:{
        email:true
    },
    url:{
        url:true
    },
    date:{
        date:true
    },
    dateISO:{
        dateISO:true
    },
    dateDE:{
        dateDE:true
    },
    number:{
        number:true
    },
    numberDE:{
        numberDE:true
    },
    digits:{
        digits:true
    },
    creditcard:{
        creditcard:true
    }
},
addClassRules:function(className,rules){
    className.constructor==String?this.classRuleSettings[className]=rules:$.extend(this.classRuleSettings,className);
},
classRules:function(element){
    var rules={};
    
    var classes=$(element).attr('class');
    classes&&$.each(classes.split(' '),function(){
        if(this in $.validator.classRuleSettings){
            $.extend(rules,$.validator.classRuleSettings[this]);
        }
    });
return rules;
},
attributeRules:function(element){
    var rules={};
    
    var $element=$(element);
    for(var method in $.validator.methods){
        var value=$element.attr(method);
        if(value){
            rules[method]=value;
        }
    }
if(rules.maxlength&&/-1|2147483647|524288/.test(rules.maxlength)){
    delete rules.maxlength;
}
return rules;
},
metadataRules:function(element){
    if(!$.metadata)return{};
        
    var meta=$.data(element.form,'validator').settings.meta;
    return meta?$(element).metadata()[meta]:$(element).metadata();
},
staticRules:function(element){
    var rules={};
    
    var validator=$.data(element.form,'validator');
    if(validator.settings.rules){
        rules=$.validator.normalizeRule(validator.settings.rules[element.name])||{};
    
}
return rules;
},
normalizeRules:function(rules,element){
    $.each(rules,function(prop,val){
        if(val===false){
            delete rules[prop];
            return;
        }
        if(val.param||val.depends){
            var keepRule=true;
            switch(typeof val.depends){
                case"string":
                    keepRule=!!$(val.depends,element.form).length;
                    break;
                case"function":
                    keepRule=val.depends.call(element,element);
                    break;
            }
            if(keepRule){
                rules[prop]=val.param!==undefined?val.param:true;
            }else{
                delete rules[prop];
            }
        }
    });
$.each(rules,function(rule,parameter){
    rules[rule]=$.isFunction(parameter)?parameter(element):parameter;
});
$.each(['minlength','maxlength','min','max'],function(){
    if(rules[this]){
        rules[this]=Number(rules[this]);
    }
});
$.each(['rangelength','range'],function(){
    if(rules[this]){
        rules[this]=[Number(rules[this][0]),Number(rules[this][1])];
    }
});
if($.validator.autoCreateRanges){
    if(rules.min&&rules.max){
        rules.range=[rules.min,rules.max];
        delete rules.min;
        delete rules.max;
    }
    if(rules.minlength&&rules.maxlength){
        rules.rangelength=[rules.minlength,rules.maxlength];
        delete rules.minlength;
        delete rules.maxlength;
    }
}
if(rules.messages){
    delete rules.messages;
}
return rules;
},
normalizeRule:function(data){
    if(typeof data=="string"){
        var transformed={};
        
        $.each(data.split(/\s/),function(){
            transformed[this]=true;
        });
        data=transformed;
    }
    return data;
},
addMethod:function(name,method,message){
    $.validator.methods[name]=method;
    $.validator.messages[name]=message!=undefined?message:$.validator.messages[name];
    if(method.length<3){
        $.validator.addClassRules(name,$.validator.normalizeRule(name));
    }
},
methods:{
    required:function(value,element,param){
        if(!this.depend(param,element))
            return"dependency-mismatch";
        switch(element.nodeName.toLowerCase()){
            case'select':
                var val=$(element).val();
                return val&&val.length>0;
            case'input':
                if(this.checkable(element))
                return this.getLength(value,element)>0;default:
                return $.trim(value).length>0;
        }
    },
remote:function(value,element,param){
    if(this.optional(element))
        return"dependency-mismatch";
    var previous=this.previousValue(element);
    if(!this.settings.messages[element.name])
        this.settings.messages[element.name]={};
        
    previous.originalMessage=this.settings.messages[element.name].remote;
    this.settings.messages[element.name].remote=previous.message;
    param=typeof param=="string"&&{
        url:param
    }||param;
    if(this.pending[element.name]){
        return"pending";
    }
    if(previous.old===value){
        return previous.valid;
    }
    previous.old=value;
    var validator=this;
    this.startRequest(element);
    var data={};
    
    data[element.name]=value;
    $.ajax($.extend(true,{
        url:param,
        mode:"abort",
        port:"validate"+element.name,
        dataType:"json",
        data:data,
        success:function(response){
            validator.settings.messages[element.name].remote=previous.originalMessage;
            var valid=response===true;
            if(valid){
                var submitted=validator.formSubmitted;
                validator.prepareElement(element);
                validator.formSubmitted=submitted;
                validator.successList.push(element);
                validator.showErrors();
            }else{
                var errors={};
                
                var message=response||validator.defaultMessage(element,"remote");
                errors[element.name]=previous.message=$.isFunction(message)?message(value):message;
                validator.showErrors(errors);
            }
            previous.valid=valid;
            validator.stopRequest(element,valid);
        }
    },param));
return"pending";
},
minlength:function(value,element,param){
    return this.optional(element)||this.getLength($.trim(value),element)>=param;
},
maxlength:function(value,element,param){
    return this.optional(element)||this.getLength($.trim(value),element)<=param;
},
rangelength:function(value,element,param){
    var length=this.getLength($.trim(value),element);
    return this.optional(element)||(length>=param[0]&&length<=param[1]);
},
min:function(value,element,param){
    return this.optional(element)||value>=param;
},
max:function(value,element,param){
    return this.optional(element)||value<=param;
},
range:function(value,element,param){
    return this.optional(element)||(value>=param[0]&&value<=param[1]);
},
email:function(value,element){
    return this.optional(element)||/^((([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*)|((\x22)((((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(([\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x21|[\x23-\x5b]|[\x5d-\x7e]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(\\([\x01-\x09\x0b\x0c\x0d-\x7f]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))))*(((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(\x22)))@((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?$/i.test(value);
},
url:function(value,element){
    return this.optional(element)||/^(https?|ftp):\/\/(((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:)*@)?(((\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5]))|((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?)(:\d*)?)(\/((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)+(\/(([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)*)*)?)?(\?((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|[\uE000-\uF8FF]|\/|\?)*)?(\#((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|\/|\?)*)?$/i.test(value);}
,date:function(value,element){return this.optional(element)||!/Invalid|NaN/.test(new Date(value));}
,dateISO:function(value,element){return this.optional(element)||/^\d{4}[\/-]\d{1,2}[\/-]\d{1,2}$/.test(value);}
,number:function(value,element){return this.optional(element)||/^-?(?:\d+|\d{1,3}(?:,\d{3})+)(?:\.\d+)?$/.test(value);}
,digits:function(value,element){return this.optional(element)||/^\d+$/.test(value);}
,creditcard:function(value,element){if(this.optional(element))
    return"dependency-mismatch";
if(/[^0-9-]+/.test(value))
    return false;
var nCheck=0,nDigit=0,bEven=false;
value=value.replace(/\D/g,"");
    for(var n=value.length-1;n>=0;n--){
    var cDigit=value.charAt(n);
    var nDigit=parseInt(cDigit,10);
    if(bEven){
        if((nDigit*=2)>9)
            nDigit-=9;
    }
    nCheck+=nDigit;
    bEven=!bEven;
}
return(nCheck%10)==0;
},
accept:function(value,element,param){
    param=typeof param=="string"?param.replace(/,/g,'|'):"png|jpe?g|gif";
    return this.optional(element)||value.match(new RegExp(".("+param+")$","i"));
},
equalTo:function(value,element,param){
    var target=$(param).unbind(".validate-equalTo").bind("blur.validate-equalTo",function(){
        $(element).valid();
    });
    return value==target.val();
}
}
});
$.format=$.validator.format;
})(jQuery);
;
(function($){
    var pendingRequests={};
    
    if($.ajaxPrefilter){
        $.ajaxPrefilter(function(settings,_,xhr){
            var port=settings.port;
            if(settings.mode=="abort"){
                if(pendingRequests[port]){
                    pendingRequests[port].abort();
                }
                pendingRequests[port]=xhr;
            }
        });
}else{
    var ajax=$.ajax;
    $.ajax=function(settings){
        var mode=("mode"in settings?settings:$.ajaxSettings).mode,port=("port"in settings?settings:$.ajaxSettings).port;
        if(mode=="abort"){
            if(pendingRequests[port]){
                pendingRequests[port].abort();
            }
            return(pendingRequests[port]=ajax.apply(this,arguments));
        }
        return ajax.apply(this,arguments);
    };

}
})(jQuery);
;
(function($){
    if(!jQuery.event.special.focusin&&!jQuery.event.special.focusout&&document.addEventListener){
        $.each({
            focus:'focusin',
            blur:'focusout'
        },function(original,fix){
            $.event.special[fix]={
                setup:function(){
                    this.addEventListener(original,handler,true);
                },
                teardown:function(){
                    this.removeEventListener(original,handler,true);
                },
                handler:function(e){
                    arguments[0]=$.event.fix(e);
                    arguments[0].type=fix;
                    return $.event.handle.apply(this,arguments);
                }
            };
            
        function handler(e){
            e=$.event.fix(e);
            e.type=fix;
            return $.event.handle.call(this,e);
        }
        });
};

$.extend($.fn,{
    validateDelegate:function(delegate,type,handler){
        return this.bind(type,function(event){
            var target=$(event.target);
            if(target.is(delegate)){
                return handler.apply(target,arguments);
            }
        });
}
});
})(jQuery);
;
(function($,window){
    '$:nomunge';
    var undefined,aps=Array.prototype.slice,decode=decodeURIComponent,jq_param=$.param,jq_param_fragment,jq_deparam,jq_deparam_fragment,jq_bbq=$.bbq=$.bbq||{},jq_bbq_pushState,jq_bbq_getState,jq_elemUrlAttr,jq_event_special=$.event.special,str_hashchange='hashchange',str_querystring='querystring',str_fragment='fragment',str_elemUrlAttr='elemUrlAttr',str_location='location',str_href='href',str_src='src',re_trim_querystring=/^.*\?|#.*$/g,re_trim_fragment=/^.*\#/,re_no_escape,elemUrlAttr_cache={};
    
    function is_string(arg){
        return typeof arg==='string';
    };
    
    function curry(func){
        var args=aps.call(arguments,1);
        return function(){
            return func.apply(this,args.concat(aps.call(arguments)));
        };
    
};

function get_fragment(url){
    return url.replace(/^[^#]*#?(.*)$/,'$1');
};

function get_querystring(url){
    return url.replace(/(?:^[^?#]*\?([^#]*).*$)?.*/,'$1');
};

function jq_param_sub(is_fragment,get_func,url,params,merge_mode){
    var result,qs,matches,url_params,hash;
    if(params!==undefined){
        matches=url.match(is_fragment?/^([^#]*)\#?(.*)$/:/^([^#?]*)\??([^#]*)(#?.*)/);
        hash=matches[3]||'';
        if(merge_mode===2&&is_string(params)){
            qs=params.replace(is_fragment?re_trim_fragment:re_trim_querystring,'');
        }else{
            url_params=jq_deparam(matches[2]);
            params=is_string(params)?jq_deparam[is_fragment?str_fragment:str_querystring](params):params;
            qs=merge_mode===2?params:merge_mode===1?$.extend({},params,url_params):$.extend({},url_params,params);
            qs=jq_param(qs);
            if(is_fragment){
                qs=qs.replace(re_no_escape,decode);
            }
        }
    result=matches[1]+(is_fragment?'#':qs||!matches[1]?'?':'')+qs+hash;
}else{
    result=get_func(url!==undefined?url:window[str_location][str_href]);
}
return result;
};

jq_param[str_querystring]=curry(jq_param_sub,0,get_querystring);
    jq_param[str_fragment]=jq_param_fragment=curry(jq_param_sub,1,get_fragment);
    jq_param_fragment.noEscape=function(chars){
    chars=chars||'';
    var arr=$.map(chars.split(''),encodeURIComponent);
    re_no_escape=new RegExp(arr.join('|'),'g');
};

jq_param_fragment.noEscape(',/');
    $.deparam=jq_deparam=function(params,coerce){
    var obj={},coerce_types={
        'true':!0,
        'false':!1,
        'null':null
    };
    
    $.each(params.replace(/\+/g,' ').split('&'),function(j,v){
        var param=v.split('='),key=decode(param[0]),val,cur=obj,i=0,keys=key.split(']['),keys_last=keys.length-1;
        if(/\[/.test(keys[0])&&/\]$/.test(keys[keys_last])){
            keys[keys_last]=keys[keys_last].replace(/\]$/,'');
            keys=keys.shift().split('[').concat(keys);
            keys_last=keys.length-1;
        }else{
            keys_last=0;
        }
        if(param.length===2){
            val=decode(param[1]);
            if(coerce){
                val=val&&!isNaN(val)?+val:val==='undefined'?undefined:coerce_types[val]!==undefined?coerce_types[val]:val;
            }
            if(keys_last){
                for(;i<=keys_last;i++){
                    key=keys[i]===''?cur.length:keys[i];
                    cur=cur[key]=i<keys_last?cur[key]||(keys[i+1]&&isNaN(keys[i+1])?{}:[]):val;
                }
                }else{
            if($.isArray(obj[key])){
                obj[key].push(val);
            }else if(obj[key]!==undefined){
                obj[key]=[obj[key],val];
            }else{
                obj[key]=val;
            }
        }
    }else if(key){
    obj[key]=coerce?undefined:'';
}
});
return obj;
};

function jq_deparam_sub(is_fragment,url_or_params,coerce){
    if(url_or_params===undefined||typeof url_or_params==='boolean'){
        coerce=url_or_params;
        url_or_params=jq_param[is_fragment?str_fragment:str_querystring]();
    }else{
        url_or_params=is_string(url_or_params)?url_or_params.replace(is_fragment?re_trim_fragment:re_trim_querystring,''):url_or_params;
    }
    return jq_deparam(url_or_params,coerce);
};

jq_deparam[str_querystring]=curry(jq_deparam_sub,0);
jq_deparam[str_fragment]=jq_deparam_fragment=curry(jq_deparam_sub,1);
$[str_elemUrlAttr]||($[str_elemUrlAttr]=function(obj){
    return $.extend(elemUrlAttr_cache,obj);
})({
    a:str_href,
    base:str_href,
    iframe:str_src,
    img:str_src,
    input:str_src,
    form:'action',
    link:str_href,
    script:str_src
});
jq_elemUrlAttr=$[str_elemUrlAttr];
function jq_fn_sub(mode,force_attr,params,merge_mode){
    if(!is_string(params)&&typeof params!=='object'){
        merge_mode=params;
        params=force_attr;
        force_attr=undefined;
    }
    return this.each(function(){
        var that=$(this),attr=force_attr||jq_elemUrlAttr()[(this.nodeName||'').toLowerCase()]||'',url=attr&&that.attr(attr)||'';
        that.attr(attr,jq_param[mode](url,params,merge_mode));
    });
};

$.fn[str_querystring]=curry(jq_fn_sub,str_querystring);
$.fn[str_fragment]=curry(jq_fn_sub,str_fragment);
jq_bbq.pushState=jq_bbq_pushState=function(params,merge_mode){
    if(is_string(params)&&/^#/.test(params)&&merge_mode===undefined){
        merge_mode=2;
    }
    var has_args=params!==undefined,url=jq_param_fragment(window[str_location][str_href],has_args?params:{},has_args?merge_mode:2);
    window[str_location][str_href]=url+(/#/.test(url)?'':'#');
};

jq_bbq.getState=jq_bbq_getState=function(key,coerce){
    return key===undefined||typeof key==='boolean'?jq_deparam_fragment(key):jq_deparam_fragment(coerce)[key];
};

jq_bbq.removeState=function(arr){
    var state={};
    
    if(arr!==undefined){
        state=jq_bbq_getState();
        $.each($.isArray(arr)?arr:arguments,function(i,v){
            delete state[v];
        });
    }
    jq_bbq_pushState(state,2);
};

jq_event_special[str_hashchange]=$.extend(jq_event_special[str_hashchange],{
    add:function(handleObj){
        var old_handler;
        function new_handler(e){
            var hash=e[str_fragment]=jq_param_fragment();
            e.getState=function(key,coerce){
                return key===undefined||typeof key==='boolean'?jq_deparam(hash,key):jq_deparam(hash,coerce)[key];
            };
            
            old_handler.apply(this,arguments);
        };
        
        if($.isFunction(handleObj)){
            old_handler=handleObj;
            return new_handler;
        }else{
            old_handler=handleObj.handler;
            handleObj.handler=new_handler;
        }
    }
});
})(jQuery,this);
(function($,window,undefined){
    '$:nomunge';
    var fake_onhashchange,jq_event_special=$.event.special,str_location='location',str_hashchange='hashchange',str_href='href',browser=$.browser,mode=document.documentMode,is_old_ie=browser.msie&&(mode===undefined||mode<8),supports_onhashchange='on'+str_hashchange in window&&!is_old_ie;
    function get_fragment(url){
        url=url||window[str_location][str_href];
        return url.replace(/^[^#]*#?(.*)$/,'$1');
    };
    
    $[str_hashchange+'Delay']=100;
    jq_event_special[str_hashchange]=$.extend(jq_event_special[str_hashchange],{
        setup:function(){
            if(supports_onhashchange){
                return false;
            }
            $(fake_onhashchange.start);
        },
        teardown:function(){
            if(supports_onhashchange){
                return false;
            }
            $(fake_onhashchange.stop);
        }
    });
fake_onhashchange=(function(){
    var self={},timeout_id,iframe,set_history,get_history;
    function init(){
        set_history=get_history=function(val){
            return val;
        };
        
        if(is_old_ie){
            iframe=$('<iframe src="javascript:0"/>').hide().insertAfter('body')[0].contentWindow;
            get_history=function(){
                return get_fragment(iframe.document[str_location][str_href]);
            };
            
            set_history=function(hash,history_hash){
                if(hash!==history_hash){
                    var doc=iframe.document;
                    doc.open().close();
                    doc[str_location].hash='#'+hash;
                }
            };
            
        set_history(get_fragment());
    }
};

self.start=function(){
    if(timeout_id){
        return;
    }
    var last_hash=get_fragment();
    set_history||init();
    (function loopy(){
        var hash=get_fragment(),history_hash=get_history(last_hash);
        if(hash!==last_hash){
            set_history(last_hash=hash,history_hash);
            $(window).trigger(str_hashchange);
        }else if(history_hash!==last_hash){
            window[str_location][str_href]=window[str_location][str_href].replace(/#.*/,'')+'#'+history_hash;
        }
        timeout_id=setTimeout(loopy,$[str_hashchange+'Delay']);
    })();
};

self.stop=function(){
    if(!iframe){
        timeout_id&&clearTimeout(timeout_id);
        timeout_id=0;
    }
};

return self;
})();
})(jQuery,this);
;
!function(window,document,undefined){
    var prefixes=['webkit','Moz','ms','O'],animations={},useCssAnimations
    function createEl(tag,prop){
        var el=document.createElement(tag||'div'),n
        for(n in prop)el[n]=prop[n]
        return el
        }
    function ins(parent){
        for(var i=1,n=arguments.length;i<n;i++)
            parent.appendChild(arguments[i])
        return parent
        }
    var sheet=function(){
        var el=createEl('style',{
            type:'text/css'
        })
        ins(document.getElementsByTagName('head')[0],el)
        return el.sheet||el.styleSheet
        }()
    function addAnimation(alpha,trail,i,lines){
        var name=['opacity',trail,~~(alpha*100),i,lines].join('-'),start=0.01+i/lines*100,z=Math.max(1-(1-alpha)/trail*(100-start),alpha),prefix=useCssAnimations.substring(0,useCssAnimations.indexOf('Animation')).toLowerCase(),pre=prefix&&'-'+prefix+'-'||''
        if(!animations[name]){
            sheet.insertRule('@'+pre+'keyframes '+name+'{'+'0%{opacity:'+z+'}'+
                start+'%{opacity:'+alpha+'}'+
                (start+0.01)+'%{opacity:1}'+
                (start+trail)%100+'%{opacity:'+alpha+'}'+'100%{opacity:'+z+'}'+'}',sheet.cssRules.length)
            animations[name]=1
            }
        return name
        }
    function vendor(el,prop){
        var s=el.style,pp,i
        if(s[prop]!==undefined)return prop
        prop=prop.charAt(0).toUpperCase()+prop.slice(1)
        for(i=0;i<prefixes.length;i++){
            pp=prefixes[i]+prop
            if(s[pp]!==undefined)return pp
                }
            }
function css(el,prop){
    for(var n in prop)
        el.style[vendor(el,n)||n]=prop[n]
    return el
    }
function merge(obj){
    for(var i=1;i<arguments.length;i++){
        var def=arguments[i]
        for(var n in def)
            if(obj[n]===undefined)obj[n]=def[n]
                }
    return obj
    }
function pos(el){
    var o={
        x:el.offsetLeft,
        y:el.offsetTop
        }
    while((el=el.offsetParent))
        o.x+=el.offsetLeft,o.y+=el.offsetTop
    return o
    }
var defaults={
    lines:12,
    length:7,
    width:5,
    radius:10,
    rotate:0,
    corners:1,
    color:'#000',
    speed:1,
    trail:100,
    opacity:1/4,
    fps:20,
    zIndex:2e9,
    className:'spinner',
    top:'auto',
    left:'auto',
    position:'relative'
}
var Spinner=function Spinner(o){
    if(!this.spin)return new Spinner(o)
    this.opts=merge(o||{},Spinner.defaults,defaults)
    }
Spinner.defaults={}
merge(Spinner.prototype,{
    spin:function(target){
        this.stop()
        var self=this,o=self.opts,el=self.el=css(createEl(0,{
            className:o.className
            }),{
            position:o.position,
            width:0,
            zIndex:o.zIndex
            }),mid=o.radius+o.length+o.width,ep,tp
        if(target){
            target.insertBefore(el,target.firstChild||null)
            tp=pos(target)
            ep=pos(el)
            css(el,{
                left:(o.left=='auto'?tp.x-ep.x+(target.offsetWidth>>1):parseInt(o.left,10)+mid)+'px',
                top:(o.top=='auto'?tp.y-ep.y+(target.offsetHeight>>1):parseInt(o.top,10)+mid)+'px'
                })
            }
        el.setAttribute('aria-role','progressbar')
        self.lines(el,self.opts)
        if(!useCssAnimations){
            var i=0,fps=o.fps,f=fps/o.speed,ostep=(1-o.opacity)/(f*o.trail/100),astep=f/o.lines;
            (function anim(){
                i++;
                for(var s=o.lines;s;s--){
                    var alpha=Math.max(1-(i+s*astep)%f*ostep,o.opacity)
                    self.opacity(el,o.lines-s,alpha,o)
                    }
                self.timeout=self.el&&setTimeout(anim,~~(1000/fps))
                })()
            }
        return self
        },
    stop:function(){
        var el=this.el
        if(el){
            clearTimeout(this.timeout)
            if(el.parentNode)el.parentNode.removeChild(el)
            this.el=undefined
            }
        return this
        },
    lines:function(el,o){
        var i=0,seg
        function fill(color,shadow){
            return css(createEl(),{
                position:'absolute',
                width:(o.length+o.width)+'px',
                height:o.width+'px',
                background:color,
                boxShadow:shadow,
                transformOrigin:'left',
                transform:'rotate('+~~(360/o.lines*i+o.rotate)+'deg) translate('+o.radius+'px'+',0)',
                borderRadius:(o.corners*o.width>>1)+'px'
                })
            }
        for(;i<o.lines;i++){
            seg=css(createEl(),{
                position:'absolute',
                top:1+~(o.width/2)+'px',
                transform:o.hwaccel?'translate3d(0,0,0)':'',
                opacity:o.opacity,
                animation:useCssAnimations&&addAnimation(o.opacity,o.trail,i,o.lines)+' '+1/o.speed+'s linear infinite'
                })
            if(o.shadow)ins(seg,css(fill('#000','0 0 4px '+'#000'),{
                top:2+'px'
            }))
            ins(el,ins(seg,fill(o.color,'0 0 1px rgba(0,0,0,.1)')))
            }
        return el
        },
    opacity:function(el,i,val){
        if(i<el.childNodes.length)el.childNodes[i].style.opacity=val
            }
        });
(function(){
    function vml(tag,attr){
        return createEl('<'+tag+' xmlns="urn:schemas-microsoft.com:vml" class="spin-vml">',attr)
        }
    var s=css(createEl('group'),{
        behavior:'url(#default#VML)'
    })
    if(!vendor(s,'transform')&&s.adj){
        sheet.addRule('.spin-vml','behavior:url(#default#VML)')
        Spinner.prototype.lines=function(el,o){
            var r=o.length+o.width,s=2*r
            function grp(){
                return css(vml('group',{
                    coordsize:s+' '+s,
                    coordorigin:-r+' '+-r
                    }),{
                    width:s,
                    height:s
                })
                }
            var margin=-(o.width+o.length)*2+'px',g=css(grp(),{
                position:'absolute',
                top:margin,
                left:margin
            }),i
            function seg(i,dx,filter){
                ins(g,ins(css(grp(),{
                    rotation:360/o.lines*i+'deg',
                    left:~~dx
                    }),ins(css(vml('roundrect',{
                    arcsize:o.corners
                    }),{
                    width:r,
                    height:o.width,
                    left:o.radius,
                    top:-o.width>>1,
                    filter:filter
                }),vml('fill',{
                    color:o.color,
                    opacity:o.opacity
                    }),vml('stroke',{
                    opacity:0
                }))))
                }
            if(o.shadow)
                for(i=1;i<=o.lines;i++)
                    seg(i,-2,'progid:DXImageTransform.Microsoft.Blur(pixelradius=2,makeshadow=1,shadowopacity=.3)')
            for(i=1;i<=o.lines;i++)seg(i)
            return ins(el,g)
            }
        Spinner.prototype.opacity=function(el,i,val,o){
            var c=el.firstChild
            o=o.shadow&&o.lines||0
            if(c&&i+o<c.childNodes.length){
                c=c.childNodes[i+o];
                c=c&&c.firstChild;
                c=c&&c.firstChild
                if(c)c.opacity=val
                    }
                }
    }
else
    useCssAnimations=vendor(s,'animation')
    })()
if(typeof define=='function'&&define.amd)
    define(function(){
        return Spinner
        })
else
    window.Spinner=Spinner
    }(window,document);
;
(function($){
    var
    hidden='hidden',borderBox='border-box',lineHeight='lineHeight',copy='<textarea tabindex="-1" style="position:absolute; top:-9999px; left:-9999px; right:auto; bottom:auto; -moz-box-sizing:content-box; -webkit-box-sizing:content-box; box-sizing:content-box; word-wrap:break-word; height:0 !important; min-height:0 !important; overflow:hidden">',copyStyle=['fontFamily','fontSize','fontWeight','fontStyle','letterSpacing','textTransform','wordSpacing','textIndent'],oninput='oninput',onpropertychange='onpropertychange',test=$(copy)[0];
    test.setAttribute(oninput,"return");
    if($.isFunction(test[oninput])||onpropertychange in test){
        $(test).css(lineHeight,'99px');
        if($(test).css(lineHeight)==='99px'){
            copyStyle.push(lineHeight);
        }
        $.fn.autosize=function(className){
            return this.each(function(){
                var
                ta=this,$ta=$(ta),mirror,minHeight=$ta.height(),maxHeight=parseInt($ta.css('maxHeight'),10),active,i=copyStyle.length,resize,boxOffset=0;
                if($ta.css('box-sizing')===borderBox||$ta.css('-moz-box-sizing')===borderBox||$ta.css('-webkit-box-sizing')===borderBox){
                    boxOffset=$ta.outerHeight()-$ta.height();
                }
                if($ta.data('mirror')||$ta.data('ismirror')){
                    return;
                }else{
                    mirror=$(copy).data('ismirror',true).addClass(className||'autosizejs')[0];
                    if($ta.attr('disabled')){
                        $ta.css('resize','none');
                    }
                    resize=$ta.css('resize')==='none'?'none':'vertical';
                    $ta.data('mirror',$(mirror)).css({
                        overflow:hidden,
                        overflowY:hidden,
                        wordWrap:'break-word',
                        resize:resize
                    });
                }
                maxHeight=maxHeight&&maxHeight>0?maxHeight:9e4;
                function adjust(){
                    var height,overflow;
                    if(!active){
                        active=true;
                        mirror.value=ta.value;
                        mirror.style.overflowY=ta.style.overflowY;
                        mirror.style.width=$ta.css('width');
                        mirror.scrollTop=0;
                        mirror.scrollTop=9e4;
                        height=mirror.scrollTop;
                        overflow=hidden;
                        if(height>maxHeight){
                            height=maxHeight;
                            overflow='scroll';
                        }else if(height<minHeight){
                            height=minHeight;
                        }
                        ta.style.overflowY=overflow;
                        ta.style.height=height+boxOffset+'px';
                        setTimeout(function(){
                            active=false;
                        },1);
                    }
                }
            while(i--){
                mirror.style[copyStyle[i]]=$ta.css(copyStyle[i]);
            }
            $('body').append(mirror);
                if(onpropertychange in ta){
                if(oninput in ta){
                    ta[oninput]=ta.onkeyup=adjust;
                }else{
                    ta[onpropertychange]=adjust;
                }
            }else{
                ta[oninput]=adjust;
            }
            $(window).resize(adjust);
            $ta.bind('autosize',adjust);
            adjust();
        });
};

}else{
    $.fn.autosize=function(){
        return this;
    };

}
}(jQuery));
;
;
(function($){
    if(/1\.(0|1|2)\.(0|1|2)/.test($.fn.jquery)||/^1.1/.test($.fn.jquery)){
        alert('blockUI requires jQuery v1.2.3 or later!  You are using v'+$.fn.jquery);
        return;
    }
    $.fn._fadeIn=$.fn.fadeIn;
    var noOp=function(){};
    
    var mode=document.documentMode||0;
    var setExpr=$.browser.msie&&(($.browser.version<8&&!mode)||mode<8);
    var ie6=$.browser.msie&&/MSIE 6.0/.test(navigator.userAgent)&&!mode;
    $.blockUI=function(opts){
        install(window,opts);
    };
    
    $.unblockUI=function(opts){
        remove(window,opts);
    };
    
    $.growlUI=function(title,message,timeout,onClose){
        var $m=$('<div class="growlUI"></div>');
        if(title)$m.append('<h1>'+title+'</h1>');
        if(message)$m.append('<h2>'+message+'</h2>');
        if(timeout==undefined)timeout=3000;
        $.blockUI({
            message:$m,
            fadeIn:700,
            fadeOut:1000,
            centerY:false,
            timeout:timeout,
            showOverlay:false,
            onUnblock:onClose,
            css:$.blockUI.defaults.growlCSS
            });
    };
    
    $.fn.block=function(opts){
        return this.unblock({
            fadeOut:0
        }).each(function(){
            if($.css(this,'position')=='static')
                this.style.position='relative';
            if($.browser.msie)
                this.style.zoom=1;
            install(this,opts);
        });
    };
    
    $.fn.unblock=function(opts){
        return this.each(function(){
            remove(this,opts);
        });
    };
    
    $.blockUI.version=2.39;
    $.blockUI.defaults={
        message:'<h1>Please wait...</h1>',
        title:null,
        draggable:true,
        theme:false,
        css:{
            padding:0,
            margin:0,
            width:'30%',
            top:'40%',
            left:'35%',
            textAlign:'center',
            color:'#000',
            border:'3px solid #aaa',
            backgroundColor:'#fff',
            cursor:'wait'
        },
        themedCSS:{
            width:'30%',
            top:'40%',
            left:'35%'
        },
        overlayCSS:{
            backgroundColor:'#000',
            opacity:0.6,
            cursor:'wait'
        },
        growlCSS:{
            width:'350px',
            top:'10px',
            left:'',
            right:'10px',
            border:'none',
            padding:'5px',
            opacity:0.6,
            cursor:'default',
            color:'#fff',
            backgroundColor:'#000',
            '-webkit-border-radius':'10px',
            '-moz-border-radius':'10px',
            'border-radius':'10px'
        },
        iframeSrc:/^https/i.test(window.location.href||'')?'javascript:false':'about:blank',
        forceIframe:false,
        baseZ:1000,
        centerX:true,
        centerY:true,
        allowBodyStretch:true,
        bindEvents:true,
        constrainTabKey:true,
        fadeIn:200,
        fadeOut:400,
        timeout:0,
        showOverlay:true,
        focusInput:true,
        applyPlatformOpacityRules:true,
        onBlock:null,
        onUnblock:null,
        quirksmodeOffsetHack:4,
        blockMsgClass:'blockMsg'
    };
    
    var pageBlock=null;
    var pageBlockEls=[];
    function install(el,opts){
        var full=(el==window);
        var msg=opts&&opts.message!==undefined?opts.message:undefined;
        opts=$.extend({},$.blockUI.defaults,opts||{});
        opts.overlayCSS=$.extend({},$.blockUI.defaults.overlayCSS,opts.overlayCSS||{});
        var css=$.extend({},$.blockUI.defaults.css,opts.css||{});
        var themedCSS=$.extend({},$.blockUI.defaults.themedCSS,opts.themedCSS||{});
        msg=msg===undefined?opts.message:msg;
        if(full&&pageBlock)
            remove(window,{
                fadeOut:0
            });
        if(msg&&typeof msg!='string'&&(msg.parentNode||msg.jquery)){
            var node=msg.jquery?msg[0]:msg;
            var data={};
            
            $(el).data('blockUI.history',data);
            data.el=node;
            data.parent=node.parentNode;
            data.display=node.style.display;
            data.position=node.style.position;
            if(data.parent)
                data.parent.removeChild(node);
        }
        $(el).data('blockUI.onUnblock',opts.onUnblock);
        var z=opts.baseZ;
        var lyr1=($.browser.msie||opts.forceIframe)?$('<iframe class="blockUI" style="z-index:'+(z++)+';display:none;border:none;margin:0;padding:0;position:absolute;width:100%;height:100%;top:0;left:0" src="'+opts.iframeSrc+'"></iframe>'):$('<div class="blockUI" style="display:none"></div>');
        var lyr2=opts.theme?$('<div class="blockUI blockOverlay ui-widget-overlay" style="z-index:'+(z++)+';display:none"></div>'):$('<div class="blockUI blockOverlay" style="z-index:'+(z++)+';display:none;border:none;margin:0;padding:0;width:100%;height:100%;top:0;left:0"></div>');
        var lyr3,s;
        if(opts.theme&&full){
            s='<div class="blockUI '+opts.blockMsgClass+' blockPage ui-dialog ui-widget ui-corner-all" style="z-index:'+(z+10)+';display:none;position:fixed">'+'<div class="ui-widget-header ui-dialog-titlebar ui-corner-all blockTitle">'+(opts.title||'&nbsp;')+'</div>'+'<div class="ui-widget-content ui-dialog-content"></div>'+'</div>';
        }
        else if(opts.theme){
            s='<div class="blockUI '+opts.blockMsgClass+' blockElement ui-dialog ui-widget ui-corner-all" style="z-index:'+(z+10)+';display:none;position:absolute">'+'<div class="ui-widget-header ui-dialog-titlebar ui-corner-all blockTitle">'+(opts.title||'&nbsp;')+'</div>'+'<div class="ui-widget-content ui-dialog-content"></div>'+'</div>';
        }
        else if(full){
            s='<div class="blockUI '+opts.blockMsgClass+' blockPage" style="z-index:'+(z+10)+';display:none;position:fixed"></div>';
        }
        else{
            s='<div class="blockUI '+opts.blockMsgClass+' blockElement" style="z-index:'+(z+10)+';display:none;position:absolute"></div>';
        }
        lyr3=$(s);
        if(msg){
            if(opts.theme){
                lyr3.css(themedCSS);
                lyr3.addClass('ui-widget-content');
            }
            else
                lyr3.css(css);
        }
        if(!opts.theme&&(!opts.applyPlatformOpacityRules||!($.browser.mozilla&&/Linux/.test(navigator.platform))))
            lyr2.css(opts.overlayCSS);
        lyr2.css('position',full?'fixed':'absolute');
        if($.browser.msie||opts.forceIframe)
            lyr1.css('opacity',0.0);
        var layers=[lyr1,lyr2,lyr3],$par=full?$('body'):$(el);
        $.each(layers,function(){
            this.appendTo($par);
        });
        if(opts.theme&&opts.draggable&&$.fn.draggable){
            lyr3.draggable({
                handle:'.ui-dialog-titlebar',
                cancel:'li'
            });
        }
        var expr=setExpr&&(!$.boxModel||$('object,embed',full?null:el).length>0);
        if(ie6||expr){
            if(full&&opts.allowBodyStretch&&$.boxModel)
                $('html,body').css('height','100%');
            if((ie6||!$.boxModel)&&!full){
                var t=sz(el,'borderTopWidth'),l=sz(el,'borderLeftWidth');
                var fixT=t?'(0 - '+t+')':0;
                var fixL=l?'(0 - '+l+')':0;
            }
            $.each([lyr1,lyr2,lyr3],function(i,o){
                var s=o[0].style;
                s.position='absolute';
                if(i<2){
                    full?s.setExpression('height','Math.max(document.body.scrollHeight, document.body.offsetHeight) - (jQuery.boxModel?0:'+opts.quirksmodeOffsetHack+') + "px"'):s.setExpression('height','this.parentNode.offsetHeight + "px"');
                    full?s.setExpression('width','jQuery.boxModel && document.documentElement.clientWidth || document.body.clientWidth + "px"'):s.setExpression('width','this.parentNode.offsetWidth + "px"');
                    if(fixL)s.setExpression('left',fixL);
                    if(fixT)s.setExpression('top',fixT);
                }
                else if(opts.centerY){
                    if(full)s.setExpression('top','(document.documentElement.clientHeight || document.body.clientHeight) / 2 - (this.offsetHeight / 2) + (blah = document.documentElement.scrollTop ? document.documentElement.scrollTop : document.body.scrollTop) + "px"');
                    s.marginTop=0;
                }
                else if(!opts.centerY&&full){
                    var top=(opts.css&&opts.css.top)?parseInt(opts.css.top):0;
                    var expression='((document.documentElement.scrollTop ? document.documentElement.scrollTop : document.body.scrollTop) + '+top+') + "px"';
                    s.setExpression('top',expression);
                }
            });
    }
    if(msg){
        if(opts.theme)
            lyr3.find('.ui-widget-content').append(msg);else
            lyr3.append(msg);
        if(msg.jquery||msg.nodeType)
            $(msg).show();
    }
    if(($.browser.msie||opts.forceIframe)&&opts.showOverlay)
        lyr1.show();
    if(opts.fadeIn){
        var cb=opts.onBlock?opts.onBlock:noOp;
        var cb1=(opts.showOverlay&&!msg)?cb:noOp;
        var cb2=msg?cb:noOp;
        if(opts.showOverlay)
            lyr2._fadeIn(opts.fadeIn,cb1);
        if(msg)
            lyr3._fadeIn(opts.fadeIn,cb2);
    }
    else{
        if(opts.showOverlay)
            lyr2.show();
        if(msg)
            lyr3.show();
        if(opts.onBlock)
            opts.onBlock();
    }
    bind(1,el,opts);
    if(full){
        pageBlock=lyr3[0];
        pageBlockEls=$(':input:enabled:visible',pageBlock);
        if(opts.focusInput)
            setTimeout(focus,20);
    }
    else
        center(lyr3[0],opts.centerX,opts.centerY);
    if(opts.timeout){
        var to=setTimeout(function(){
            full?$.unblockUI(opts):$(el).unblock(opts);
        },opts.timeout);
        $(el).data('blockUI.timeout',to);
    }
};

function remove(el,opts){
    var full=(el==window);
    var $el=$(el);
    var data=$el.data('blockUI.history');
    var to=$el.data('blockUI.timeout');
    if(to){
        clearTimeout(to);
        $el.removeData('blockUI.timeout');
    }
    opts=$.extend({},$.blockUI.defaults,opts||{});
    bind(0,el,opts);
    if(opts.onUnblock===null){
        opts.onUnblock=$el.data('blockUI.onUnblock');
        $el.removeData('blockUI.onUnblock');
    }
    var els;
    if(full)
        els=$('body').children().filter('.blockUI').add('body > .blockUI');else
        els=$('.blockUI',el);
    if(full)
        pageBlock=pageBlockEls=null;
    if(opts.fadeOut){
        els.fadeOut(opts.fadeOut);
        setTimeout(function(){
            reset(els,data,opts,el);
        },opts.fadeOut);
    }
    else
        reset(els,data,opts,el);
};

function reset(els,data,opts,el){
    els.each(function(i,o){
        if(this.parentNode)
            this.parentNode.removeChild(this);
    });
    if(data&&data.el){
        data.el.style.display=data.display;
        data.el.style.position=data.position;
        if(data.parent)
            data.parent.appendChild(data.el);
        $(el).removeData('blockUI.history');
    }
    if(typeof opts.onUnblock=='function')
        opts.onUnblock(el,opts);
};

function bind(b,el,opts){
    var full=el==window,$el=$(el);
    if(!b&&(full&&!pageBlock||!full&&!$el.data('blockUI.isBlocked')))
        return;
    if(!full)
        $el.data('blockUI.isBlocked',b);
    if(!opts.bindEvents||(b&&!opts.showOverlay))
        return;
    var events='mousedown mouseup keydown keypress';
    b?$(document).bind(events,opts,handler):$(document).unbind(events,handler);
};

function handler(e){
    if(e.keyCode&&e.keyCode==9){
        if(pageBlock&&e.data.constrainTabKey){
            var els=pageBlockEls;
            var fwd=!e.shiftKey&&e.target===els[els.length-1];
            var back=e.shiftKey&&e.target===els[0];
            if(fwd||back){
                setTimeout(function(){
                    focus(back)
                    },10);
                return false;
            }
        }
    }
var opts=e.data;
if($(e.target).parents('div.'+opts.blockMsgClass).length>0)
    return true;
return $(e.target).parents().children().filter('div.blockUI').length==0;
};

function focus(back){
    if(!pageBlockEls)
        return;
    var e=pageBlockEls[back===true?pageBlockEls.length-1:0];
    if(e)
        e.focus();
};

function center(el,x,y){
    var p=el.parentNode,s=el.style;
    var l=((p.offsetWidth-el.offsetWidth)/2)-sz(p,'borderLeftWidth');
    var t=((p.offsetHeight-el.offsetHeight)/2)-sz(p,'borderTopWidth');
    if(x)s.left=l>0?(l+'px'):'0';
    if(y)s.top=t>0?(t+'px'):'0';
};

function sz(el,p){
    return parseInt($.css(el,p))||0;
};

})(jQuery);
;
;
(function(window,document,$){
    var isInputSupported='placeholder'in document.createElement('input'),isTextareaSupported='placeholder'in document.createElement('textarea'),prototype=$.fn,valHooks=$.valHooks,hooks,placeholder;
    if(isInputSupported&&isTextareaSupported){
        placeholder=prototype.placeholder=function(){
            return this;
        };
        
        placeholder.input=placeholder.textarea=true;
    }else{
        placeholder=prototype.placeholder=function(){
            var $this=this;
            $this.filter((isInputSupported?'textarea':':input')+'[placeholder]').not('.placeholder').bind({
                'focus.placeholder':clearPlaceholder,
                'blur.placeholder':setPlaceholder
            }).data('placeholder-enabled',true).trigger('blur.placeholder');
            return $this;
        };
        
        placeholder.input=isInputSupported;
        placeholder.textarea=isTextareaSupported;
        hooks={
            'get':function(element){
                var $element=$(element);
                return $element.data('placeholder-enabled')&&$element.hasClass('placeholder')?'':element.value;
            },
            'set':function(element,value){
                var $element=$(element);
                if(!$element.data('placeholder-enabled')){
                    return element.value=value;
                }
                if(value==''){
                    element.value=value;
                    if(element!=document.activeElement){
                        setPlaceholder.call(element);
                    }
                }else if($element.hasClass('placeholder')){
                clearPlaceholder.call(element,true,value)||(element.value=value);
            }else{
                element.value=value;
            }
            return $element;
        }
    };
    
isInputSupported||(valHooks.input=hooks);
    isTextareaSupported||(valHooks.textarea=hooks);
    $(function(){
    $(document).delegate('form','submit.placeholder',function(){
        var $inputs=$('.placeholder',this).each(clearPlaceholder);
        setTimeout(function(){
            $inputs.each(setPlaceholder);
        },10);
    });
});
$(window).bind('beforeunload.placeholder',function(){
    $('.placeholder').each(function(){
        this.value='';
    });
});
}
function args(elem){
    var newAttrs={},rinlinejQuery=/^jQuery\d+$/;
    $.each(elem.attributes,function(i,attr){
        if(attr.specified&&!rinlinejQuery.test(attr.name)){
            newAttrs[attr.name]=attr.value;
        }
    });
return newAttrs;
}
function clearPlaceholder(event,value){
    var input=this,$input=$(input);
    if(input.value==$input.attr('placeholder')&&$input.hasClass('placeholder')){
        if($input.data('placeholder-password')){
            $input=$input.hide().next().show().attr('id',$input.removeAttr('id').data('placeholder-id'));
            if(event===true){
                return $input[0].value=value;
            }
            $input.focus();
        }else{
            input.value='';
            $input.removeClass('placeholder');
            input==document.activeElement&&input.select();
        }
    }
}
function setPlaceholder(){
    var $replacement,input=this,$input=$(input),$origInput=$input,id=this.id;
    if(input.value==''){
        if(input.type=='password'){
            if(!$input.data('placeholder-textinput')){
                try{
                    $replacement=$input.clone().attr({
                        'type':'text'
                    });
                }catch(e){
                    $replacement=$('<input>').attr($.extend(args(this),{
                        'type':'text'
                    }));
                }
                $replacement.removeAttr('name').data({
                    'placeholder-password':true,
                    'placeholder-id':id
                }).bind('focus.placeholder',clearPlaceholder);
                $input.data({
                    'placeholder-textinput':$replacement,
                    'placeholder-id':id
                }).before($replacement);
            }
            $input=$input.removeAttr('id').hide().prev().attr('id',id).show();
        }
        $input.addClass('placeholder');
        $input[0].value=$input.attr('placeholder');
    }else{
        $input.removeClass('placeholder');
    }
}
}(this,document,jQuery));
;
(function($,undefined){
    var uuid=0,runiqueId=/^ui-id-\d+$/;
    $.ui=$.ui||{};
    
    if($.ui.version){
        return;
    }
    $.extend($.ui,{
        version:"1.9.1",
        keyCode:{
            BACKSPACE:8,
            COMMA:188,
            DELETE:46,
            DOWN:40,
            END:35,
            ENTER:13,
            ESCAPE:27,
            HOME:36,
            LEFT:37,
            NUMPAD_ADD:107,
            NUMPAD_DECIMAL:110,
            NUMPAD_DIVIDE:111,
            NUMPAD_ENTER:108,
            NUMPAD_MULTIPLY:106,
            NUMPAD_SUBTRACT:109,
            PAGE_DOWN:34,
            PAGE_UP:33,
            PERIOD:190,
            RIGHT:39,
            SPACE:32,
            TAB:9,
            UP:38
        }
    });
$.fn.extend({
    _focus:$.fn.focus,
    focus:function(delay,fn){
        return typeof delay==="number"?this.each(function(){
            var elem=this;
            setTimeout(function(){
                $(elem).focus();
                if(fn){
                    fn.call(elem);
                }
            },delay);
        }):this._focus.apply(this,arguments);
},
scrollParent:function(){
    var scrollParent;
    if(($.ui.ie&&(/(static|relative)/).test(this.css('position')))||(/absolute/).test(this.css('position'))){
        scrollParent=this.parents().filter(function(){
            return(/(relative|absolute|fixed)/).test($.css(this,'position'))&&(/(auto|scroll)/).test($.css(this,'overflow')+$.css(this,'overflow-y')+$.css(this,'overflow-x'));
        }).eq(0);
    }else{
        scrollParent=this.parents().filter(function(){
            return(/(auto|scroll)/).test($.css(this,'overflow')+$.css(this,'overflow-y')+$.css(this,'overflow-x'));
        }).eq(0);
    }
    return(/fixed/).test(this.css('position'))||!scrollParent.length?$(document):scrollParent;
},
zIndex:function(zIndex){
    if(zIndex!==undefined){
        return this.css("zIndex",zIndex);
    }
    if(this.length){
        var elem=$(this[0]),position,value;
        while(elem.length&&elem[0]!==document){
            position=elem.css("position");
            if(position==="absolute"||position==="relative"||position==="fixed"){
                value=parseInt(elem.css("zIndex"),10);
                if(!isNaN(value)&&value!==0){
                    return value;
                }
            }
        elem=elem.parent();
    }
}
return 0;
},
uniqueId:function(){
    return this.each(function(){
        if(!this.id){
            this.id="ui-id-"+(++uuid);
        }
    });
},
removeUniqueId:function(){
    return this.each(function(){
        if(runiqueId.test(this.id)){
            $(this).removeAttr("id");
        }
    });
}
});
if(!$("<a>").outerWidth(1).jquery){
    $.each(["Width","Height"],function(i,name){
        var side=name==="Width"?["Left","Right"]:["Top","Bottom"],type=name.toLowerCase(),orig={
            innerWidth:$.fn.innerWidth,
            innerHeight:$.fn.innerHeight,
            outerWidth:$.fn.outerWidth,
            outerHeight:$.fn.outerHeight
            };
            
        function reduce(elem,size,border,margin){
            $.each(side,function(){
                size-=parseFloat($.css(elem,"padding"+this))||0;
                if(border){
                    size-=parseFloat($.css(elem,"border"+this+"Width"))||0;
                }
                if(margin){
                    size-=parseFloat($.css(elem,"margin"+this))||0;
                }
            });
        return size;
    }
    $.fn["inner"+name]=function(size){
        if(size===undefined){
            return orig["inner"+name].call(this);
        }
        return this.each(function(){
            $(this).css(type,reduce(this,size)+"px");
        });
    };
    
    $.fn["outer"+name]=function(size,margin){
        if(typeof size!=="number"){
            return orig["outer"+name].call(this,size);
        }
        return this.each(function(){
            $(this).css(type,reduce(this,size,true,margin)+"px");
        });
    };
    
});
}
function focusable(element,isTabIndexNotNaN){
    var map,mapName,img,nodeName=element.nodeName.toLowerCase();
    if("area"===nodeName){
        map=element.parentNode;
        mapName=map.name;
        if(!element.href||!mapName||map.nodeName.toLowerCase()!=="map"){
            return false;
        }
        img=$("img[usemap=#"+mapName+"]")[0];
        return!!img&&visible(img);
    }
    return(/input|select|textarea|button|object/.test(nodeName)?!element.disabled:"a"===nodeName?element.href||isTabIndexNotNaN:isTabIndexNotNaN)&&visible(element);
}
function visible(element){
    return $.expr.filters.visible(element)&&!$(element).parents().andSelf().filter(function(){
        return $.css(this,"visibility")==="hidden";
    }).length;
}
$.extend($.expr[":"],{
    data:$.expr.createPseudo?$.expr.createPseudo(function(dataName){
        return function(elem){
            return!!$.data(elem,dataName);
        };
    
    }):function(elem,i,match){
    return!!$.data(elem,match[3]);
},
focusable:function(element){
    return focusable(element,!isNaN($.attr(element,"tabindex")));
},
tabbable:function(element){
    var tabIndex=$.attr(element,"tabindex"),isTabIndexNaN=isNaN(tabIndex);
    return(isTabIndexNaN||tabIndex>=0)&&focusable(element,!isTabIndexNaN);
}
});
$(function(){
    var body=document.body,div=body.appendChild(div=document.createElement("div"));
    div.offsetHeight;
    $.extend(div.style,{
        minHeight:"100px",
        height:"auto",
        padding:0,
        borderWidth:0
    });
    $.support.minHeight=div.offsetHeight===100;
    $.support.selectstart="onselectstart"in div;
    body.removeChild(div).style.display="none";
});
(function(){
    var uaMatch=/msie ([\w.]+)/.exec(navigator.userAgent.toLowerCase())||[];
    $.ui.ie=uaMatch.length?true:false;
    $.ui.ie6=parseFloat(uaMatch[1],10)===6;
})();
$.fn.extend({
    disableSelection:function(){
        return this.bind(($.support.selectstart?"selectstart":"mousedown")+".ui-disableSelection",function(event){
            event.preventDefault();
        });
    },
    enableSelection:function(){
        return this.unbind(".ui-disableSelection");
    }
});
$.extend($.ui,{
    plugin:{
        add:function(module,option,set){
            var i,proto=$.ui[module].prototype;
            for(i in set){
                proto.plugins[i]=proto.plugins[i]||[];
                proto.plugins[i].push([option,set[i]]);
            }
            },
    call:function(instance,name,args){
        var i,set=instance.plugins[name];
        if(!set||!instance.element[0].parentNode||instance.element[0].parentNode.nodeType===11){
            return;
        }
        for(i=0;i<set.length;i++){
            if(instance.options[set[i][0]]){
                set[i][1].apply(instance.element,args);
            }
        }
        }
},
contains:$.contains,
hasScroll:function(el,a){
    if($(el).css("overflow")==="hidden"){
        return false;
    }
    var scroll=(a&&a==="left")?"scrollLeft":"scrollTop",has=false;
    if(el[scroll]>0){
        return true;
    }
    el[scroll]=1;
    has=(el[scroll]>0);
    el[scroll]=0;
    return has;
},
isOverAxis:function(x,reference,size){
    return(x>reference)&&(x<(reference+size));
},
isOver:function(y,x,top,left,height,width){
    return $.ui.isOverAxis(y,top,height)&&$.ui.isOverAxis(x,left,width);
}
});
})(jQuery);
(function($,undefined){
    var uuid=0,slice=Array.prototype.slice,_cleanData=$.cleanData;
    $.cleanData=function(elems){
        for(var i=0,elem;(elem=elems[i])!=null;i++){
            try{
                $(elem).triggerHandler("remove");
            }catch(e){}
        }
    _cleanData(elems);
};

$.widget=function(name,base,prototype){
    var fullName,existingConstructor,constructor,basePrototype,namespace=name.split(".")[0];
    name=name.split(".")[1];
    fullName=namespace+"-"+name;
    if(!prototype){
        prototype=base;
        base=$.Widget;
    }
    $.expr[":"][fullName.toLowerCase()]=function(elem){
        return!!$.data(elem,fullName);
    };
    
    $[namespace]=$[namespace]||{};
    
    existingConstructor=$[namespace][name];
    constructor=$[namespace][name]=function(options,element){
        if(!this._createWidget){
            return new constructor(options,element);
        }
        if(arguments.length){
            this._createWidget(options,element);
        }
    };
    
$.extend(constructor,existingConstructor,{
    version:prototype.version,
    _proto:$.extend({},prototype),
    _childConstructors:[]
});
basePrototype=new base();
    basePrototype.options=$.widget.extend({},basePrototype.options);
    $.each(prototype,function(prop,value){
    if($.isFunction(value)){
        prototype[prop]=(function(){
            var _super=function(){
                return base.prototype[prop].apply(this,arguments);
            },_superApply=function(args){
                return base.prototype[prop].apply(this,args);
            };
            
            return function(){
                var __super=this._super,__superApply=this._superApply,returnValue;
                this._super=_super;
                this._superApply=_superApply;
                returnValue=value.apply(this,arguments);
                this._super=__super;
                this._superApply=__superApply;
                return returnValue;
            };
        
        })();
}
});
constructor.prototype=$.widget.extend(basePrototype,{
    widgetEventPrefix:basePrototype.widgetEventPrefix||name
    },prototype,{
    constructor:constructor,
    namespace:namespace,
    widgetName:name,
    widgetBaseClass:fullName,
    widgetFullName:fullName
});
if(existingConstructor){
    $.each(existingConstructor._childConstructors,function(i,child){
        var childPrototype=child.prototype;
        $.widget(childPrototype.namespace+"."+childPrototype.widgetName,constructor,child._proto);
    });
    delete existingConstructor._childConstructors;
}else{
    base._childConstructors.push(constructor);
}
$.widget.bridge(name,constructor);
};

$.widget.extend=function(target){
    var input=slice.call(arguments,1),inputIndex=0,inputLength=input.length,key,value;
    for(;inputIndex<inputLength;inputIndex++){
        for(key in input[inputIndex]){
            value=input[inputIndex][key];
            if(input[inputIndex].hasOwnProperty(key)&&value!==undefined){
                if($.isPlainObject(value)){
                    target[key]=$.isPlainObject(target[key])?$.widget.extend({},target[key],value):$.widget.extend({},value);
                }else{
                    target[key]=value;
                }
            }
        }
        }
return target;
};

$.widget.bridge=function(name,object){
    var fullName=object.prototype.widgetFullName;
    $.fn[name]=function(options){
        var isMethodCall=typeof options==="string",args=slice.call(arguments,1),returnValue=this;
        options=!isMethodCall&&args.length?$.widget.extend.apply(null,[options].concat(args)):options;
        if(isMethodCall){
            this.each(function(){
                var methodValue,instance=$.data(this,fullName);
                if(!instance){
                    return $.error("cannot call methods on "+name+" prior to initialization; "+"attempted to call method '"+options+"'");
                }
                if(!$.isFunction(instance[options])||options.charAt(0)==="_"){
                    return $.error("no such method '"+options+"' for "+name+" widget instance");
                }
                methodValue=instance[options].apply(instance,args);
                if(methodValue!==instance&&methodValue!==undefined){
                    returnValue=methodValue&&methodValue.jquery?returnValue.pushStack(methodValue.get()):methodValue;
                    return false;
                }
            });
    }else{
        this.each(function(){
            var instance=$.data(this,fullName);
            if(instance){
                instance.option(options||{})._init();
            }else{
                new object(options,this);
            }
        });
}
return returnValue;
};

};

$.Widget=function(){};

$.Widget._childConstructors=[];
$.Widget.prototype={
    widgetName:"widget",
    widgetEventPrefix:"",
    defaultElement:"<div>",
    options:{
        disabled:false,
        create:null
    },
    _createWidget:function(options,element){
        element=$(element||this.defaultElement||this)[0];
        this.element=$(element);
        this.uuid=uuid++;
        this.eventNamespace="."+this.widgetName+this.uuid;
        this.options=$.widget.extend({},this.options,this._getCreateOptions(),options);
        this.bindings=$();
        this.hoverable=$();
        this.focusable=$();
        if(element!==this){
            $.data(element,this.widgetName,this);
            $.data(element,this.widgetFullName,this);
            this._on(this.element,{
                remove:function(event){
                    if(event.target===element){
                        this.destroy();
                    }
                }
            });
    this.document=$(element.style?element.ownerDocument:element.document||element);
    this.window=$(this.document[0].defaultView||this.document[0].parentWindow);
}
this._create();
this._trigger("create",null,this._getCreateEventData());
this._init();
},
_getCreateOptions:$.noop,
_getCreateEventData:$.noop,
_create:$.noop,
_init:$.noop,
destroy:function(){
    this._destroy();
    this.element.unbind(this.eventNamespace).removeData(this.widgetName).removeData(this.widgetFullName).removeData($.camelCase(this.widgetFullName));
    this.widget().unbind(this.eventNamespace).removeAttr("aria-disabled").removeClass(this.widgetFullName+"-disabled "+"ui-state-disabled");
    this.bindings.unbind(this.eventNamespace);
    this.hoverable.removeClass("ui-state-hover");
    this.focusable.removeClass("ui-state-focus");
},
_destroy:$.noop,
widget:function(){
    return this.element;
},
option:function(key,value){
    var options=key,parts,curOption,i;
    if(arguments.length===0){
        return $.widget.extend({},this.options);
    }
    if(typeof key==="string"){
        options={};
        
        parts=key.split(".");
        key=parts.shift();
        if(parts.length){
            curOption=options[key]=$.widget.extend({},this.options[key]);
            for(i=0;i<parts.length-1;i++){
                curOption[parts[i]]=curOption[parts[i]]||{};
                
                curOption=curOption[parts[i]];
            }
            key=parts.pop();
            if(value===undefined){
                return curOption[key]===undefined?null:curOption[key];
            }
            curOption[key]=value;
        }else{
            if(value===undefined){
                return this.options[key]===undefined?null:this.options[key];
            }
            options[key]=value;
        }
    }
this._setOptions(options);
return this;
},
_setOptions:function(options){
    var key;
    for(key in options){
        this._setOption(key,options[key]);
    }
    return this;
},
_setOption:function(key,value){
    this.options[key]=value;
    if(key==="disabled"){
        this.widget().toggleClass(this.widgetFullName+"-disabled ui-state-disabled",!!value).attr("aria-disabled",value);
        this.hoverable.removeClass("ui-state-hover");
        this.focusable.removeClass("ui-state-focus");
    }
    return this;
},
enable:function(){
    return this._setOption("disabled",false);
},
disable:function(){
    return this._setOption("disabled",true);
},
_on:function(element,handlers){
    var delegateElement,instance=this;
    if(!handlers){
        handlers=element;
        element=this.element;
        delegateElement=this.widget();
    }else{
        element=delegateElement=$(element);
        this.bindings=this.bindings.add(element);
    }
    $.each(handlers,function(event,handler){
        function handlerProxy(){
            if(instance.options.disabled===true||$(this).hasClass("ui-state-disabled")){
                return;
            }
            return(typeof handler==="string"?instance[handler]:handler).apply(instance,arguments);
        }
        if(typeof handler!=="string"){
            handlerProxy.guid=handler.guid=handler.guid||handlerProxy.guid||$.guid++;
        }
        var match=event.match(/^(\w+)\s*(.*)$/),eventName=match[1]+instance.eventNamespace,selector=match[2];
        if(selector){
            delegateElement.delegate(selector,eventName,handlerProxy);
        }else{
            element.bind(eventName,handlerProxy);
        }
    });
},
_off:function(element,eventName){
    eventName=(eventName||"").split(" ").join(this.eventNamespace+" ")+this.eventNamespace;
    element.unbind(eventName).undelegate(eventName);
},
_delay:function(handler,delay){
    function handlerProxy(){
        return(typeof handler==="string"?instance[handler]:handler).apply(instance,arguments);
    }
    var instance=this;
    return setTimeout(handlerProxy,delay||0);
},
_hoverable:function(element){
    this.hoverable=this.hoverable.add(element);
    this._on(element,{
        mouseenter:function(event){
            $(event.currentTarget).addClass("ui-state-hover");
        },
        mouseleave:function(event){
            $(event.currentTarget).removeClass("ui-state-hover");
        }
    });
},
_focusable:function(element){
    this.focusable=this.focusable.add(element);
    this._on(element,{
        focusin:function(event){
            $(event.currentTarget).addClass("ui-state-focus");
        },
        focusout:function(event){
            $(event.currentTarget).removeClass("ui-state-focus");
        }
    });
},
_trigger:function(type,event,data){
    var prop,orig,callback=this.options[type];
    data=data||{};
    
    event=$.Event(event);
    event.type=(type===this.widgetEventPrefix?type:this.widgetEventPrefix+type).toLowerCase();
    event.target=this.element[0];
    orig=event.originalEvent;
    if(orig){
        for(prop in orig){
            if(!(prop in event)){
                event[prop]=orig[prop];
            }
        }
        }
this.element.trigger(event,data);
return!($.isFunction(callback)&&callback.apply(this.element[0],[event].concat(data))===false||event.isDefaultPrevented());
}
};

$.each({
    show:"fadeIn",
    hide:"fadeOut"
},function(method,defaultEffect){
    $.Widget.prototype["_"+method]=function(element,options,callback){
        if(typeof options==="string"){
            options={
                effect:options
            };
        
    }
    var hasOptions,effectName=!options?method:options===true||typeof options==="number"?defaultEffect:options.effect||defaultEffect;
    options=options||{};
    
    if(typeof options==="number"){
        options={
            duration:options
        };
    
}
hasOptions=!$.isEmptyObject(options);
    options.complete=callback;
    if(options.delay){
    element.delay(options.delay);
}
if(hasOptions&&$.effects&&($.effects.effect[effectName]||$.uiBackCompat!==false&&$.effects[effectName])){
    element[method](options);
}else if(effectName!==method&&element[effectName]){
    element[effectName](options.duration,options.easing,callback);
}else{
    element.queue(function(next){
        $(this)[method]();
        if(callback){
            callback.call(element[0]);
        }
        next();
    });
}
};

});
if($.uiBackCompat!==false){
    $.Widget.prototype._getCreateOptions=function(){
        return $.metadata&&$.metadata.get(this.element[0])[this.widgetName];
    };

}
})(jQuery);
(function($,undefined){
    var mouseHandled=false;
    $(document).mouseup(function(e){
        mouseHandled=false;
    });
    $.widget("ui.mouse",{
        version:"1.9.1",
        options:{
            cancel:'input,textarea,button,select,option',
            distance:1,
            delay:0
        },
        _mouseInit:function(){
            var that=this;
            this.element.bind('mousedown.'+this.widgetName,function(event){
                return that._mouseDown(event);
            }).bind('click.'+this.widgetName,function(event){
                if(true===$.data(event.target,that.widgetName+'.preventClickEvent')){
                    $.removeData(event.target,that.widgetName+'.preventClickEvent');
                    event.stopImmediatePropagation();
                    return false;
                }
            });
        this.started=false;
    },
    _mouseDestroy:function(){
        this.element.unbind('.'+this.widgetName);
        if(this._mouseMoveDelegate){
            $(document).unbind('mousemove.'+this.widgetName,this._mouseMoveDelegate).unbind('mouseup.'+this.widgetName,this._mouseUpDelegate);
        }
    },
    _mouseDown:function(event){
        if(mouseHandled){
            return;
        }
        (this._mouseStarted&&this._mouseUp(event));
        this._mouseDownEvent=event;
        var that=this,btnIsLeft=(event.which===1),elIsCancel=(typeof this.options.cancel==="string"&&event.target.nodeName?$(event.target).closest(this.options.cancel).length:false);
        if(!btnIsLeft||elIsCancel||!this._mouseCapture(event)){
            return true;
        }
        this.mouseDelayMet=!this.options.delay;
        if(!this.mouseDelayMet){
            this._mouseDelayTimer=setTimeout(function(){
                that.mouseDelayMet=true;
            },this.options.delay);
        }
        if(this._mouseDistanceMet(event)&&this._mouseDelayMet(event)){
            this._mouseStarted=(this._mouseStart(event)!==false);
            if(!this._mouseStarted){
                event.preventDefault();
                return true;
            }
        }
    if(true===$.data(event.target,this.widgetName+'.preventClickEvent')){
        $.removeData(event.target,this.widgetName+'.preventClickEvent');
    }
    this._mouseMoveDelegate=function(event){
        return that._mouseMove(event);
    };
    
    this._mouseUpDelegate=function(event){
        return that._mouseUp(event);
    };
    
    $(document).bind('mousemove.'+this.widgetName,this._mouseMoveDelegate).bind('mouseup.'+this.widgetName,this._mouseUpDelegate);
    event.preventDefault();
    mouseHandled=true;
    return true;
},
_mouseMove:function(event){
    if($.ui.ie&&!(document.documentMode>=9)&&!event.button){
        return this._mouseUp(event);
    }
    if(this._mouseStarted){
        this._mouseDrag(event);
        return event.preventDefault();
    }
    if(this._mouseDistanceMet(event)&&this._mouseDelayMet(event)){
        this._mouseStarted=(this._mouseStart(this._mouseDownEvent,event)!==false);
        (this._mouseStarted?this._mouseDrag(event):this._mouseUp(event));
    }
    return!this._mouseStarted;
},
_mouseUp:function(event){
    $(document).unbind('mousemove.'+this.widgetName,this._mouseMoveDelegate).unbind('mouseup.'+this.widgetName,this._mouseUpDelegate);
    if(this._mouseStarted){
        this._mouseStarted=false;
        if(event.target===this._mouseDownEvent.target){
            $.data(event.target,this.widgetName+'.preventClickEvent',true);
        }
        this._mouseStop(event);
    }
    return false;
},
_mouseDistanceMet:function(event){
    return(Math.max(Math.abs(this._mouseDownEvent.pageX-event.pageX),Math.abs(this._mouseDownEvent.pageY-event.pageY))>=this.options.distance);
},
_mouseDelayMet:function(event){
    return this.mouseDelayMet;
},
_mouseStart:function(event){},
    _mouseDrag:function(event){},
    _mouseStop:function(event){},
    _mouseCapture:function(event){
    return true;
}
});
})(jQuery);
(function($,undefined){
    $.ui=$.ui||{};
    
    var cachedScrollbarWidth,max=Math.max,abs=Math.abs,round=Math.round,rhorizontal=/left|center|right/,rvertical=/top|center|bottom/,roffset=/[\+\-]\d+%?/,rposition=/^\w+/,rpercent=/%$/,_position=$.fn.position;
    function getOffsets(offsets,width,height){
        return[parseInt(offsets[0],10)*(rpercent.test(offsets[0])?width/100:1),parseInt(offsets[1],10)*(rpercent.test(offsets[1])?height/100:1)];
    }
    function parseCss(element,property){
        return parseInt($.css(element,property),10)||0;
    }
    $.position={
        scrollbarWidth:function(){
            if(cachedScrollbarWidth!==undefined){
                return cachedScrollbarWidth;
            }
            var w1,w2,div=$("<div style='display:block;width:50px;height:50px;overflow:hidden;'><div style='height:100px;width:auto;'></div></div>"),innerDiv=div.children()[0];
            $("body").append(div);
            w1=innerDiv.offsetWidth;
            div.css("overflow","scroll");
            w2=innerDiv.offsetWidth;
            if(w1===w2){
                w2=div[0].clientWidth;
            }
            div.remove();
            return(cachedScrollbarWidth=w1-w2);
        },
        getScrollInfo:function(within){
            var overflowX=within.isWindow?"":within.element.css("overflow-x"),overflowY=within.isWindow?"":within.element.css("overflow-y"),hasOverflowX=overflowX==="scroll"||(overflowX==="auto"&&within.width<within.element[0].scrollWidth),hasOverflowY=overflowY==="scroll"||(overflowY==="auto"&&within.height<within.element[0].scrollHeight);
            return{
                width:hasOverflowX?$.position.scrollbarWidth():0,
                height:hasOverflowY?$.position.scrollbarWidth():0
                };
            
    },
    getWithinInfo:function(element){
        var withinElement=$(element||window),isWindow=$.isWindow(withinElement[0]);
        return{
            element:withinElement,
            isWindow:isWindow,
            offset:withinElement.offset()||{
                left:0,
                top:0
            },
            scrollLeft:withinElement.scrollLeft(),
            scrollTop:withinElement.scrollTop(),
            width:isWindow?withinElement.width():withinElement.outerWidth(),
            height:isWindow?withinElement.height():withinElement.outerHeight()
            };
        
}
};

$.fn.position=function(options){
    if(!options||!options.of){
        return _position.apply(this,arguments);
    }
    options=$.extend({},options);
    var atOffset,targetWidth,targetHeight,targetOffset,basePosition,target=$(options.of),within=$.position.getWithinInfo(options.within),scrollInfo=$.position.getScrollInfo(within),targetElem=target[0],collision=(options.collision||"flip").split(" "),offsets={};
    
    if(targetElem.nodeType===9){
        targetWidth=target.width();
        targetHeight=target.height();
        targetOffset={
            top:0,
            left:0
        };
    
}else if($.isWindow(targetElem)){
    targetWidth=target.width();
    targetHeight=target.height();
    targetOffset={
        top:target.scrollTop(),
        left:target.scrollLeft()
        };
    
}else if(targetElem.preventDefault){
    options.at="left top";
    targetWidth=targetHeight=0;
    targetOffset={
        top:targetElem.pageY,
        left:targetElem.pageX
        };
    
}else{
    targetWidth=target.outerWidth();
    targetHeight=target.outerHeight();
    targetOffset=target.offset();
}
basePosition=$.extend({},targetOffset);
$.each(["my","at"],function(){
    var pos=(options[this]||"").split(" "),horizontalOffset,verticalOffset;
    if(pos.length===1){
        pos=rhorizontal.test(pos[0])?pos.concat(["center"]):rvertical.test(pos[0])?["center"].concat(pos):["center","center"];
    }
    pos[0]=rhorizontal.test(pos[0])?pos[0]:"center";
    pos[1]=rvertical.test(pos[1])?pos[1]:"center";
    horizontalOffset=roffset.exec(pos[0]);
    verticalOffset=roffset.exec(pos[1]);
    offsets[this]=[horizontalOffset?horizontalOffset[0]:0,verticalOffset?verticalOffset[0]:0];
    options[this]=[rposition.exec(pos[0])[0],rposition.exec(pos[1])[0]];
});
if(collision.length===1){
    collision[1]=collision[0];
}
if(options.at[0]==="right"){
    basePosition.left+=targetWidth;
}else if(options.at[0]==="center"){
    basePosition.left+=targetWidth/2;
}
if(options.at[1]==="bottom"){
    basePosition.top+=targetHeight;
}else if(options.at[1]==="center"){
    basePosition.top+=targetHeight/2;
}
atOffset=getOffsets(offsets.at,targetWidth,targetHeight);
basePosition.left+=atOffset[0];
basePosition.top+=atOffset[1];
return this.each(function(){
    var collisionPosition,using,elem=$(this),elemWidth=elem.outerWidth(),elemHeight=elem.outerHeight(),marginLeft=parseCss(this,"marginLeft"),marginTop=parseCss(this,"marginTop"),collisionWidth=elemWidth+marginLeft+parseCss(this,"marginRight")+scrollInfo.width,collisionHeight=elemHeight+marginTop+parseCss(this,"marginBottom")+scrollInfo.height,position=$.extend({},basePosition),myOffset=getOffsets(offsets.my,elem.outerWidth(),elem.outerHeight());
    if(options.my[0]==="right"){
        position.left-=elemWidth;
    }else if(options.my[0]==="center"){
        position.left-=elemWidth/2;
    }
    if(options.my[1]==="bottom"){
        position.top-=elemHeight;
    }else if(options.my[1]==="center"){
        position.top-=elemHeight/2;
    }
    position.left+=myOffset[0];
    position.top+=myOffset[1];
    if(!$.support.offsetFractions){
        position.left=round(position.left);
        position.top=round(position.top);
    }
    collisionPosition={
        marginLeft:marginLeft,
        marginTop:marginTop
    };
    
    $.each(["left","top"],function(i,dir){
        if($.ui.position[collision[i]]){
            $.ui.position[collision[i]][dir](position,{
                targetWidth:targetWidth,
                targetHeight:targetHeight,
                elemWidth:elemWidth,
                elemHeight:elemHeight,
                collisionPosition:collisionPosition,
                collisionWidth:collisionWidth,
                collisionHeight:collisionHeight,
                offset:[atOffset[0]+myOffset[0],atOffset[1]+myOffset[1]],
                my:options.my,
                at:options.at,
                within:within,
                elem:elem
            });
        }
    });
if($.fn.bgiframe){
    elem.bgiframe();
}
if(options.using){
    using=function(props){
        var left=targetOffset.left-position.left,right=left+targetWidth-elemWidth,top=targetOffset.top-position.top,bottom=top+targetHeight-elemHeight,feedback={
            target:{
                element:target,
                left:targetOffset.left,
                top:targetOffset.top,
                width:targetWidth,
                height:targetHeight
            },
            element:{
                element:elem,
                left:position.left,
                top:position.top,
                width:elemWidth,
                height:elemHeight
            },
            horizontal:right<0?"left":left>0?"right":"center",
            vertical:bottom<0?"top":top>0?"bottom":"middle"
            };
            
        if(targetWidth<elemWidth&&abs(left+right)<targetWidth){
            feedback.horizontal="center";
        }
        if(targetHeight<elemHeight&&abs(top+bottom)<targetHeight){
            feedback.vertical="middle";
        }
        if(max(abs(left),abs(right))>max(abs(top),abs(bottom))){
            feedback.important="horizontal";
        }else{
            feedback.important="vertical";
        }
        options.using.call(this,props,feedback);
    };

}
elem.offset($.extend(position,{
    using:using
}));
});
};

$.ui.position={
    fit:{
        left:function(position,data){
            var within=data.within,withinOffset=within.isWindow?within.scrollLeft:within.offset.left,outerWidth=within.width,collisionPosLeft=position.left-data.collisionPosition.marginLeft,overLeft=withinOffset-collisionPosLeft,overRight=collisionPosLeft+data.collisionWidth-outerWidth-withinOffset,newOverRight;
            if(data.collisionWidth>outerWidth){
                if(overLeft>0&&overRight<=0){
                    newOverRight=position.left+overLeft+data.collisionWidth-outerWidth-withinOffset;
                    position.left+=overLeft-newOverRight;
                }else if(overRight>0&&overLeft<=0){
                    position.left=withinOffset;
                }else{
                    if(overLeft>overRight){
                        position.left=withinOffset+outerWidth-data.collisionWidth;
                    }else{
                        position.left=withinOffset;
                    }
                }
            }else if(overLeft>0){
        position.left+=overLeft;
    }else if(overRight>0){
        position.left-=overRight;
    }else{
        position.left=max(position.left-collisionPosLeft,position.left);
    }
},
top:function(position,data){
    var within=data.within,withinOffset=within.isWindow?within.scrollTop:within.offset.top,outerHeight=data.within.height,collisionPosTop=position.top-data.collisionPosition.marginTop,overTop=withinOffset-collisionPosTop,overBottom=collisionPosTop+data.collisionHeight-outerHeight-withinOffset,newOverBottom;
    if(data.collisionHeight>outerHeight){
        if(overTop>0&&overBottom<=0){
            newOverBottom=position.top+overTop+data.collisionHeight-outerHeight-withinOffset;
            position.top+=overTop-newOverBottom;
        }else if(overBottom>0&&overTop<=0){
            position.top=withinOffset;
        }else{
            if(overTop>overBottom){
                position.top=withinOffset+outerHeight-data.collisionHeight;
            }else{
                position.top=withinOffset;
            }
        }
    }else if(overTop>0){
    position.top+=overTop;
}else if(overBottom>0){
    position.top-=overBottom;
}else{
    position.top=max(position.top-collisionPosTop,position.top);
}
}
},
flip:{
    left:function(position,data){
        var within=data.within,withinOffset=within.offset.left+within.scrollLeft,outerWidth=within.width,offsetLeft=within.isWindow?within.scrollLeft:within.offset.left,collisionPosLeft=position.left-data.collisionPosition.marginLeft,overLeft=collisionPosLeft-offsetLeft,overRight=collisionPosLeft+data.collisionWidth-outerWidth-offsetLeft,myOffset=data.my[0]==="left"?-data.elemWidth:data.my[0]==="right"?data.elemWidth:0,atOffset=data.at[0]==="left"?data.targetWidth:data.at[0]==="right"?-data.targetWidth:0,offset=-2*data.offset[0],newOverRight,newOverLeft;
        if(overLeft<0){
            newOverRight=position.left+myOffset+atOffset+offset+data.collisionWidth-outerWidth-withinOffset;
            if(newOverRight<0||newOverRight<abs(overLeft)){
                position.left+=myOffset+atOffset+offset;
            }
        }
    else if(overRight>0){
        newOverLeft=position.left-data.collisionPosition.marginLeft+myOffset+atOffset+offset-offsetLeft;
        if(newOverLeft>0||abs(newOverLeft)<overRight){
            position.left+=myOffset+atOffset+offset;
        }
    }
},
top:function(position,data){
    var within=data.within,withinOffset=within.offset.top+within.scrollTop,outerHeight=within.height,offsetTop=within.isWindow?within.scrollTop:within.offset.top,collisionPosTop=position.top-data.collisionPosition.marginTop,overTop=collisionPosTop-offsetTop,overBottom=collisionPosTop+data.collisionHeight-outerHeight-offsetTop,top=data.my[1]==="top",myOffset=top?-data.elemHeight:data.my[1]==="bottom"?data.elemHeight:0,atOffset=data.at[1]==="top"?data.targetHeight:data.at[1]==="bottom"?-data.targetHeight:0,offset=-2*data.offset[1],newOverTop,newOverBottom;
    if(overTop<0){
        newOverBottom=position.top+myOffset+atOffset+offset+data.collisionHeight-outerHeight-withinOffset;
        if((position.top+myOffset+atOffset+offset)>overTop&&(newOverBottom<0||newOverBottom<abs(overTop))){
            position.top+=myOffset+atOffset+offset;
        }
    }
else if(overBottom>0){
    newOverTop=position.top-data.collisionPosition.marginTop+myOffset+atOffset+offset-offsetTop;
    if((position.top+myOffset+atOffset+offset)>overBottom&&(newOverTop>0||abs(newOverTop)<overBottom)){
        position.top+=myOffset+atOffset+offset;
    }
}
}
},
flipfit:{
    left:function(){
        $.ui.position.flip.left.apply(this,arguments);
        $.ui.position.fit.left.apply(this,arguments);
    },
    top:function(){
        $.ui.position.flip.top.apply(this,arguments);
        $.ui.position.fit.top.apply(this,arguments);
    }
}
};
(function(){
    var testElement,testElementParent,testElementStyle,offsetLeft,i,body=document.getElementsByTagName("body")[0],div=document.createElement("div");
    testElement=document.createElement(body?"div":"body");
    testElementStyle={
        visibility:"hidden",
        width:0,
        height:0,
        border:0,
        margin:0,
        background:"none"
    };
    
    if(body){
        $.extend(testElementStyle,{
            position:"absolute",
            left:"-1000px",
            top:"-1000px"
        });
    }
    for(i in testElementStyle){
        testElement.style[i]=testElementStyle[i];
    }
    testElement.appendChild(div);
    testElementParent=body||document.documentElement;
    testElementParent.insertBefore(testElement,testElementParent.firstChild);
    div.style.cssText="position: absolute; left: 10.7432222px;";
    offsetLeft=$(div).offset().left;
    $.support.offsetFractions=offsetLeft>10&&offsetLeft<11;
    testElement.innerHTML="";
    testElementParent.removeChild(testElement);
})();
if($.uiBackCompat!==false){
    (function($){
        var _position=$.fn.position;
        $.fn.position=function(options){
            if(!options||!options.offset){
                return _position.call(this,options);
            }
            var offset=options.offset.split(" "),at=options.at.split(" ");
            if(offset.length===1){
                offset[1]=offset[0];
            }
            if(/^\d/.test(offset[0])){
                offset[0]="+"+offset[0];
            }
            if(/^\d/.test(offset[1])){
                offset[1]="+"+offset[1];
            }
            if(at.length===1){
                if(/left|center|right/.test(at[0])){
                    at[1]="center";
                }else{
                    at[1]=at[0];
                    at[0]="center";
                }
            }
        return _position.call(this,$.extend(options,{
            at:at[0]+offset[0]+" "+at[1]+offset[1],
            offset:undefined
        }));
    };
    
}(jQuery));
}
}(jQuery));
(function($,undefined){
    $.widget("ui.draggable",$.ui.mouse,{
        version:"1.9.1",
        widgetEventPrefix:"drag",
        options:{
            addClasses:true,
            appendTo:"parent",
            axis:false,
            connectToSortable:false,
            containment:false,
            cursor:"auto",
            cursorAt:false,
            grid:false,
            handle:false,
            helper:"original",
            iframeFix:false,
            opacity:false,
            refreshPositions:false,
            revert:false,
            revertDuration:500,
            scope:"default",
            scroll:true,
            scrollSensitivity:20,
            scrollSpeed:20,
            snap:false,
            snapMode:"both",
            snapTolerance:20,
            stack:false,
            zIndex:false
        },
        _create:function(){
            if(this.options.helper=='original'&&!(/^(?:r|a|f)/).test(this.element.css("position")))
                this.element[0].style.position='relative';
            (this.options.addClasses&&this.element.addClass("ui-draggable"));
            (this.options.disabled&&this.element.addClass("ui-draggable-disabled"));
            this._mouseInit();
        },
        _destroy:function(){
            this.element.removeClass("ui-draggable ui-draggable-dragging ui-draggable-disabled");
            this._mouseDestroy();
        },
        _mouseCapture:function(event){
            var o=this.options;
            if(this.helper||o.disabled||$(event.target).is('.ui-resizable-handle'))
                return false;
            this.handle=this._getHandle(event);
            if(!this.handle)
                return false;
            $(o.iframeFix===true?"iframe":o.iframeFix).each(function(){
                $('<div class="ui-draggable-iframeFix" style="background: #fff;"></div>').css({
                    width:this.offsetWidth+"px",
                    height:this.offsetHeight+"px",
                    position:"absolute",
                    opacity:"0.001",
                    zIndex:1000
                }).css($(this).offset()).appendTo("body");
            });
            return true;
        },
        _mouseStart:function(event){
            var o=this.options;
            this.helper=this._createHelper(event);
            this.helper.addClass("ui-draggable-dragging");
            this._cacheHelperProportions();
            if($.ui.ddmanager)
                $.ui.ddmanager.current=this;
            this._cacheMargins();
            this.cssPosition=this.helper.css("position");
            this.scrollParent=this.helper.scrollParent();
            this.offset=this.positionAbs=this.element.offset();
            this.offset={
                top:this.offset.top-this.margins.top,
                left:this.offset.left-this.margins.left
                };
                
            $.extend(this.offset,{
                click:{
                    left:event.pageX-this.offset.left,
                    top:event.pageY-this.offset.top
                    },
                parent:this._getParentOffset(),
                relative:this._getRelativeOffset()
                });
            this.originalPosition=this.position=this._generatePosition(event);
            this.originalPageX=event.pageX;
            this.originalPageY=event.pageY;
            (o.cursorAt&&this._adjustOffsetFromHelper(o.cursorAt));
            if(o.containment)
                this._setContainment();
            if(this._trigger("start",event)===false){
                this._clear();
                return false;
            }
            this._cacheHelperProportions();
            if($.ui.ddmanager&&!o.dropBehaviour)
                $.ui.ddmanager.prepareOffsets(this,event);
            this._mouseDrag(event,true);
            if($.ui.ddmanager)$.ui.ddmanager.dragStart(this,event);
            return true;
        },
        _mouseDrag:function(event,noPropagation){
            this.position=this._generatePosition(event);
            this.positionAbs=this._convertPositionTo("absolute");
            if(!noPropagation){
                var ui=this._uiHash();
                if(this._trigger('drag',event,ui)===false){
                    this._mouseUp({});
                    return false;
                }
                this.position=ui.position;
            }
            if(!this.options.axis||this.options.axis!="y")this.helper[0].style.left=this.position.left+'px';
            if(!this.options.axis||this.options.axis!="x")this.helper[0].style.top=this.position.top+'px';
            if($.ui.ddmanager)$.ui.ddmanager.drag(this,event);
            return false;
        },
        _mouseStop:function(event){
            var dropped=false;
            if($.ui.ddmanager&&!this.options.dropBehaviour)
                dropped=$.ui.ddmanager.drop(this,event);
            if(this.dropped){
                dropped=this.dropped;
                this.dropped=false;
            }
            var element=this.element[0],elementInDom=false;
            while(element&&(element=element.parentNode)){
                if(element==document){
                    elementInDom=true;
                }
            }
        if(!elementInDom&&this.options.helper==="original")
            return false;
        if((this.options.revert=="invalid"&&!dropped)||(this.options.revert=="valid"&&dropped)||this.options.revert===true||($.isFunction(this.options.revert)&&this.options.revert.call(this.element,dropped))){
            var that=this;
            $(this.helper).animate(this.originalPosition,parseInt(this.options.revertDuration,10),function(){
                if(that._trigger("stop",event)!==false){
                    that._clear();
                }
            });
    }else{
        if(this._trigger("stop",event)!==false){
            this._clear();
        }
    }
    return false;
},
_mouseUp:function(event){
    $("div.ui-draggable-iframeFix").each(function(){
        this.parentNode.removeChild(this);
    });
    if($.ui.ddmanager)$.ui.ddmanager.dragStop(this,event);
    return $.ui.mouse.prototype._mouseUp.call(this,event);
},
cancel:function(){
    if(this.helper.is(".ui-draggable-dragging")){
        this._mouseUp({});
    }else{
        this._clear();
    }
    return this;
},
_getHandle:function(event){
    var handle=!this.options.handle||!$(this.options.handle,this.element).length?true:false;
    $(this.options.handle,this.element).find("*").andSelf().each(function(){
        if(this==event.target)handle=true;
    });
    return handle;
},
_createHelper:function(event){
    var o=this.options;
    var helper=$.isFunction(o.helper)?$(o.helper.apply(this.element[0],[event])):(o.helper=='clone'?this.element.clone().removeAttr('id'):this.element);
    if(!helper.parents('body').length)
        helper.appendTo((o.appendTo=='parent'?this.element[0].parentNode:o.appendTo));
    if(helper[0]!=this.element[0]&&!(/(fixed|absolute)/).test(helper.css("position")))
        helper.css("position","absolute");
    return helper;
},
_adjustOffsetFromHelper:function(obj){
    if(typeof obj=='string'){
        obj=obj.split(' ');
    }
    if($.isArray(obj)){
        obj={
            left:+obj[0],
            top:+obj[1]||0
            };
        
}
if('left'in obj){
    this.offset.click.left=obj.left+this.margins.left;
}
if('right'in obj){
    this.offset.click.left=this.helperProportions.width-obj.right+this.margins.left;
}
if('top'in obj){
    this.offset.click.top=obj.top+this.margins.top;
}
if('bottom'in obj){
    this.offset.click.top=this.helperProportions.height-obj.bottom+this.margins.top;
}
},
_getParentOffset:function(){
    this.offsetParent=this.helper.offsetParent();
    var po=this.offsetParent.offset();
    if(this.cssPosition=='absolute'&&this.scrollParent[0]!=document&&$.contains(this.scrollParent[0],this.offsetParent[0])){
        po.left+=this.scrollParent.scrollLeft();
        po.top+=this.scrollParent.scrollTop();
    }
    if((this.offsetParent[0]==document.body)||(this.offsetParent[0].tagName&&this.offsetParent[0].tagName.toLowerCase()=='html'&&$.ui.ie))
        po={
            top:0,
            left:0
        };
        
    return{
        top:po.top+(parseInt(this.offsetParent.css("borderTopWidth"),10)||0),
        left:po.left+(parseInt(this.offsetParent.css("borderLeftWidth"),10)||0)
        };
    
},
_getRelativeOffset:function(){
    if(this.cssPosition=="relative"){
        var p=this.element.position();
        return{
            top:p.top-(parseInt(this.helper.css("top"),10)||0)+this.scrollParent.scrollTop(),
            left:p.left-(parseInt(this.helper.css("left"),10)||0)+this.scrollParent.scrollLeft()
            };
        
}else{
    return{
        top:0,
        left:0
    };

}
},
_cacheMargins:function(){
    this.margins={
        left:(parseInt(this.element.css("marginLeft"),10)||0),
        top:(parseInt(this.element.css("marginTop"),10)||0),
        right:(parseInt(this.element.css("marginRight"),10)||0),
        bottom:(parseInt(this.element.css("marginBottom"),10)||0)
        };
    
},
_cacheHelperProportions:function(){
    this.helperProportions={
        width:this.helper.outerWidth(),
        height:this.helper.outerHeight()
        };
    
},
_setContainment:function(){
    var o=this.options;
    if(o.containment=='parent')o.containment=this.helper[0].parentNode;
    if(o.containment=='document'||o.containment=='window')this.containment=[o.containment=='document'?0:$(window).scrollLeft()-this.offset.relative.left-this.offset.parent.left,o.containment=='document'?0:$(window).scrollTop()-this.offset.relative.top-this.offset.parent.top,(o.containment=='document'?0:$(window).scrollLeft())+$(o.containment=='document'?document:window).width()-this.helperProportions.width-this.margins.left,(o.containment=='document'?0:$(window).scrollTop())+($(o.containment=='document'?document:window).height()||document.body.parentNode.scrollHeight)-this.helperProportions.height-this.margins.top];
    if(!(/^(document|window|parent)$/).test(o.containment)&&o.containment.constructor!=Array){
        var c=$(o.containment);
        var ce=c[0];
        if(!ce)return;
        var co=c.offset();
        var over=($(ce).css("overflow")!='hidden');
        this.containment=[(parseInt($(ce).css("borderLeftWidth"),10)||0)+(parseInt($(ce).css("paddingLeft"),10)||0),(parseInt($(ce).css("borderTopWidth"),10)||0)+(parseInt($(ce).css("paddingTop"),10)||0),(over?Math.max(ce.scrollWidth,ce.offsetWidth):ce.offsetWidth)-(parseInt($(ce).css("borderLeftWidth"),10)||0)-(parseInt($(ce).css("paddingRight"),10)||0)-this.helperProportions.width-this.margins.left-this.margins.right,(over?Math.max(ce.scrollHeight,ce.offsetHeight):ce.offsetHeight)-(parseInt($(ce).css("borderTopWidth"),10)||0)-(parseInt($(ce).css("paddingBottom"),10)||0)-this.helperProportions.height-this.margins.top-this.margins.bottom];
        this.relative_container=c;
    }else if(o.containment.constructor==Array){
        this.containment=o.containment;
    }
},
_convertPositionTo:function(d,pos){
    if(!pos)pos=this.position;
    var mod=d=="absolute"?1:-1;
    var o=this.options,scroll=this.cssPosition=='absolute'&&!(this.scrollParent[0]!=document&&$.contains(this.scrollParent[0],this.offsetParent[0]))?this.offsetParent:this.scrollParent,scrollIsRootNode=(/(html|body)/i).test(scroll[0].tagName);
    return{
        top:(pos.top
            +this.offset.relative.top*mod
            +this.offset.parent.top*mod
            -((this.cssPosition=='fixed'?-this.scrollParent.scrollTop():(scrollIsRootNode?0:scroll.scrollTop()))*mod)),
        left:(pos.left
            +this.offset.relative.left*mod
            +this.offset.parent.left*mod
            -((this.cssPosition=='fixed'?-this.scrollParent.scrollLeft():scrollIsRootNode?0:scroll.scrollLeft())*mod))
        };
    
},
_generatePosition:function(event){
    var o=this.options,scroll=this.cssPosition=='absolute'&&!(this.scrollParent[0]!=document&&$.contains(this.scrollParent[0],this.offsetParent[0]))?this.offsetParent:this.scrollParent,scrollIsRootNode=(/(html|body)/i).test(scroll[0].tagName);
    var pageX=event.pageX;
    var pageY=event.pageY;
    if(this.originalPosition){
        var containment;
        if(this.containment){
            if(this.relative_container){
                var co=this.relative_container.offset();
                containment=[this.containment[0]+co.left,this.containment[1]+co.top,this.containment[2]+co.left,this.containment[3]+co.top];
            }
            else{
                containment=this.containment;
            }
            if(event.pageX-this.offset.click.left<containment[0])pageX=containment[0]+this.offset.click.left;
            if(event.pageY-this.offset.click.top<containment[1])pageY=containment[1]+this.offset.click.top;
            if(event.pageX-this.offset.click.left>containment[2])pageX=containment[2]+this.offset.click.left;
            if(event.pageY-this.offset.click.top>containment[3])pageY=containment[3]+this.offset.click.top;
        }
        if(o.grid){
            var top=o.grid[1]?this.originalPageY+Math.round((pageY-this.originalPageY)/o.grid[1])*o.grid[1]:this.originalPageY;
            pageY=containment?(!(top-this.offset.click.top<containment[1]||top-this.offset.click.top>containment[3])?top:(!(top-this.offset.click.top<containment[1])?top-o.grid[1]:top+o.grid[1])):top;
            var left=o.grid[0]?this.originalPageX+Math.round((pageX-this.originalPageX)/o.grid[0])*o.grid[0]:this.originalPageX;
            pageX=containment?(!(left-this.offset.click.left<containment[0]||left-this.offset.click.left>containment[2])?left:(!(left-this.offset.click.left<containment[0])?left-o.grid[0]:left+o.grid[0])):left;
        }
    }
return{
    top:(pageY
        -this.offset.click.top
        -this.offset.relative.top
        -this.offset.parent.top
        +((this.cssPosition=='fixed'?-this.scrollParent.scrollTop():(scrollIsRootNode?0:scroll.scrollTop())))),
    left:(pageX
        -this.offset.click.left
        -this.offset.relative.left
        -this.offset.parent.left
        +((this.cssPosition=='fixed'?-this.scrollParent.scrollLeft():scrollIsRootNode?0:scroll.scrollLeft())))
    };

},
_clear:function(){
    this.helper.removeClass("ui-draggable-dragging");
    if(this.helper[0]!=this.element[0]&&!this.cancelHelperRemoval)this.helper.remove();
    this.helper=null;
    this.cancelHelperRemoval=false;
},
_trigger:function(type,event,ui){
    ui=ui||this._uiHash();
    $.ui.plugin.call(this,type,[event,ui]);
    if(type=="drag")this.positionAbs=this._convertPositionTo("absolute");
    return $.Widget.prototype._trigger.call(this,type,event,ui);
},
plugins:{},
_uiHash:function(event){
    return{
        helper:this.helper,
        position:this.position,
        originalPosition:this.originalPosition,
        offset:this.positionAbs
        };
    
}
});
$.ui.plugin.add("draggable","connectToSortable",{
    start:function(event,ui){
        var inst=$(this).data("draggable"),o=inst.options,uiSortable=$.extend({},ui,{
            item:inst.element
            });
        inst.sortables=[];
        $(o.connectToSortable).each(function(){
            var sortable=$.data(this,'sortable');
            if(sortable&&!sortable.options.disabled){
                inst.sortables.push({
                    instance:sortable,
                    shouldRevert:sortable.options.revert
                    });
                sortable.refreshPositions();
                sortable._trigger("activate",event,uiSortable);
            }
        });
},
stop:function(event,ui){
    var inst=$(this).data("draggable"),uiSortable=$.extend({},ui,{
        item:inst.element
        });
    $.each(inst.sortables,function(){
        if(this.instance.isOver){
            this.instance.isOver=0;
            inst.cancelHelperRemoval=true;
            this.instance.cancelHelperRemoval=false;
            if(this.shouldRevert)this.instance.options.revert=true;
            this.instance._mouseStop(event);
            this.instance.options.helper=this.instance.options._helper;
            if(inst.options.helper=='original')
                this.instance.currentItem.css({
                    top:'auto',
                    left:'auto'
                });
        }else{
            this.instance.cancelHelperRemoval=false;
            this.instance._trigger("deactivate",event,uiSortable);
        }
    });
},
drag:function(event,ui){
    var inst=$(this).data("draggable"),that=this;
    var checkPos=function(o){
        var dyClick=this.offset.click.top,dxClick=this.offset.click.left;
        var helperTop=this.positionAbs.top,helperLeft=this.positionAbs.left;
        var itemHeight=o.height,itemWidth=o.width;
        var itemTop=o.top,itemLeft=o.left;
        return $.ui.isOver(helperTop+dyClick,helperLeft+dxClick,itemTop,itemLeft,itemHeight,itemWidth);
    };
    
    $.each(inst.sortables,function(i){
        var innermostIntersecting=false;
        var thisSortable=this;
        this.instance.positionAbs=inst.positionAbs;
        this.instance.helperProportions=inst.helperProportions;
        this.instance.offset.click=inst.offset.click;
        if(this.instance._intersectsWith(this.instance.containerCache)){
            innermostIntersecting=true;
            $.each(inst.sortables,function(){
                this.instance.positionAbs=inst.positionAbs;
                this.instance.helperProportions=inst.helperProportions;
                this.instance.offset.click=inst.offset.click;
                if(this!=thisSortable&&this.instance._intersectsWith(this.instance.containerCache)&&$.ui.contains(thisSortable.instance.element[0],this.instance.element[0]))
                    innermostIntersecting=false;
                return innermostIntersecting;
            });
        }
        if(innermostIntersecting){
            if(!this.instance.isOver){
                this.instance.isOver=1;
                this.instance.currentItem=$(that).clone().removeAttr('id').appendTo(this.instance.element).data("sortable-item",true);
                this.instance.options._helper=this.instance.options.helper;
                this.instance.options.helper=function(){
                    return ui.helper[0];
                };
                
                event.target=this.instance.currentItem[0];
                this.instance._mouseCapture(event,true);
                this.instance._mouseStart(event,true,true);
                this.instance.offset.click.top=inst.offset.click.top;
                this.instance.offset.click.left=inst.offset.click.left;
                this.instance.offset.parent.left-=inst.offset.parent.left-this.instance.offset.parent.left;
                this.instance.offset.parent.top-=inst.offset.parent.top-this.instance.offset.parent.top;
                inst._trigger("toSortable",event);
                inst.dropped=this.instance.element;
                inst.currentItem=inst.element;
                this.instance.fromOutside=inst;
            }
            if(this.instance.currentItem)this.instance._mouseDrag(event);
        }else{
            if(this.instance.isOver){
                this.instance.isOver=0;
                this.instance.cancelHelperRemoval=true;
                this.instance.options.revert=false;
                this.instance._trigger('out',event,this.instance._uiHash(this.instance));
                this.instance._mouseStop(event,true);
                this.instance.options.helper=this.instance.options._helper;
                this.instance.currentItem.remove();
                if(this.instance.placeholder)this.instance.placeholder.remove();
                inst._trigger("fromSortable",event);
                inst.dropped=false;
            }
        };
    
});
}
});
$.ui.plugin.add("draggable","cursor",{
    start:function(event,ui){
        var t=$('body'),o=$(this).data('draggable').options;
        if(t.css("cursor"))o._cursor=t.css("cursor");
        t.css("cursor",o.cursor);
    },
    stop:function(event,ui){
        var o=$(this).data('draggable').options;
        if(o._cursor)$('body').css("cursor",o._cursor);
    }
});
$.ui.plugin.add("draggable","opacity",{
    start:function(event,ui){
        var t=$(ui.helper),o=$(this).data('draggable').options;
        if(t.css("opacity"))o._opacity=t.css("opacity");
        t.css('opacity',o.opacity);
    },
    stop:function(event,ui){
        var o=$(this).data('draggable').options;
        if(o._opacity)$(ui.helper).css('opacity',o._opacity);
    }
});
$.ui.plugin.add("draggable","scroll",{
    start:function(event,ui){
        var i=$(this).data("draggable");
        if(i.scrollParent[0]!=document&&i.scrollParent[0].tagName!='HTML')i.overflowOffset=i.scrollParent.offset();
    },
    drag:function(event,ui){
        var i=$(this).data("draggable"),o=i.options,scrolled=false;
        if(i.scrollParent[0]!=document&&i.scrollParent[0].tagName!='HTML'){
            if(!o.axis||o.axis!='x'){
                if((i.overflowOffset.top+i.scrollParent[0].offsetHeight)-event.pageY<o.scrollSensitivity)
                    i.scrollParent[0].scrollTop=scrolled=i.scrollParent[0].scrollTop+o.scrollSpeed;
                else if(event.pageY-i.overflowOffset.top<o.scrollSensitivity)
                    i.scrollParent[0].scrollTop=scrolled=i.scrollParent[0].scrollTop-o.scrollSpeed;
            }
            if(!o.axis||o.axis!='y'){
                if((i.overflowOffset.left+i.scrollParent[0].offsetWidth)-event.pageX<o.scrollSensitivity)
                    i.scrollParent[0].scrollLeft=scrolled=i.scrollParent[0].scrollLeft+o.scrollSpeed;
                else if(event.pageX-i.overflowOffset.left<o.scrollSensitivity)
                    i.scrollParent[0].scrollLeft=scrolled=i.scrollParent[0].scrollLeft-o.scrollSpeed;
            }
        }else{
        if(!o.axis||o.axis!='x'){
            if(event.pageY-$(document).scrollTop()<o.scrollSensitivity)
                scrolled=$(document).scrollTop($(document).scrollTop()-o.scrollSpeed);
            else if($(window).height()-(event.pageY-$(document).scrollTop())<o.scrollSensitivity)
                scrolled=$(document).scrollTop($(document).scrollTop()+o.scrollSpeed);
        }
        if(!o.axis||o.axis!='y'){
            if(event.pageX-$(document).scrollLeft()<o.scrollSensitivity)
                scrolled=$(document).scrollLeft($(document).scrollLeft()-o.scrollSpeed);
            else if($(window).width()-(event.pageX-$(document).scrollLeft())<o.scrollSensitivity)
                scrolled=$(document).scrollLeft($(document).scrollLeft()+o.scrollSpeed);
        }
    }
if(scrolled!==false&&$.ui.ddmanager&&!o.dropBehaviour)
    $.ui.ddmanager.prepareOffsets(i,event);
}
});
$.ui.plugin.add("draggable","snap",{
    start:function(event,ui){
        var i=$(this).data("draggable"),o=i.options;
        i.snapElements=[];
        $(o.snap.constructor!=String?(o.snap.items||':data(draggable)'):o.snap).each(function(){
            var $t=$(this);
            var $o=$t.offset();
            if(this!=i.element[0])i.snapElements.push({
                item:this,
                width:$t.outerWidth(),
                height:$t.outerHeight(),
                top:$o.top,
                left:$o.left
                });
        });
    },
    drag:function(event,ui){
        var inst=$(this).data("draggable"),o=inst.options;
        var d=o.snapTolerance;
        var x1=ui.offset.left,x2=x1+inst.helperProportions.width,y1=ui.offset.top,y2=y1+inst.helperProportions.height;
        for(var i=inst.snapElements.length-1;i>=0;i--){
            var l=inst.snapElements[i].left,r=l+inst.snapElements[i].width,t=inst.snapElements[i].top,b=t+inst.snapElements[i].height;
            if(!((l-d<x1&&x1<r+d&&t-d<y1&&y1<b+d)||(l-d<x1&&x1<r+d&&t-d<y2&&y2<b+d)||(l-d<x2&&x2<r+d&&t-d<y1&&y1<b+d)||(l-d<x2&&x2<r+d&&t-d<y2&&y2<b+d))){
                if(inst.snapElements[i].snapping)(inst.options.snap.release&&inst.options.snap.release.call(inst.element,event,$.extend(inst._uiHash(),{
                    snapItem:inst.snapElements[i].item
                    })));
                inst.snapElements[i].snapping=false;
                continue;
            }
            if(o.snapMode!='inner'){
                var ts=Math.abs(t-y2)<=d;
                var bs=Math.abs(b-y1)<=d;
                var ls=Math.abs(l-x2)<=d;
                var rs=Math.abs(r-x1)<=d;
                if(ts)ui.position.top=inst._convertPositionTo("relative",{
                    top:t-inst.helperProportions.height,
                    left:0
                }).top-inst.margins.top;
                if(bs)ui.position.top=inst._convertPositionTo("relative",{
                    top:b,
                    left:0
                }).top-inst.margins.top;
                if(ls)ui.position.left=inst._convertPositionTo("relative",{
                    top:0,
                    left:l-inst.helperProportions.width
                    }).left-inst.margins.left;
                if(rs)ui.position.left=inst._convertPositionTo("relative",{
                    top:0,
                    left:r
                }).left-inst.margins.left;
            }
            var first=(ts||bs||ls||rs);
            if(o.snapMode!='outer'){
                var ts=Math.abs(t-y1)<=d;
                var bs=Math.abs(b-y2)<=d;
                var ls=Math.abs(l-x1)<=d;
                var rs=Math.abs(r-x2)<=d;
                if(ts)ui.position.top=inst._convertPositionTo("relative",{
                    top:t,
                    left:0
                }).top-inst.margins.top;
                if(bs)ui.position.top=inst._convertPositionTo("relative",{
                    top:b-inst.helperProportions.height,
                    left:0
                }).top-inst.margins.top;
                if(ls)ui.position.left=inst._convertPositionTo("relative",{
                    top:0,
                    left:l
                }).left-inst.margins.left;
                if(rs)ui.position.left=inst._convertPositionTo("relative",{
                    top:0,
                    left:r-inst.helperProportions.width
                    }).left-inst.margins.left;
            }
            if(!inst.snapElements[i].snapping&&(ts||bs||ls||rs||first))
                (inst.options.snap.snap&&inst.options.snap.snap.call(inst.element,event,$.extend(inst._uiHash(),{
                    snapItem:inst.snapElements[i].item
                    })));
            inst.snapElements[i].snapping=(ts||bs||ls||rs||first);
        };
        
}
});
$.ui.plugin.add("draggable","stack",{
    start:function(event,ui){
        var o=$(this).data("draggable").options;
        var group=$.makeArray($(o.stack)).sort(function(a,b){
            return(parseInt($(a).css("zIndex"),10)||0)-(parseInt($(b).css("zIndex"),10)||0);
        });
        if(!group.length){
            return;
        }
        var min=parseInt(group[0].style.zIndex)||0;
        $(group).each(function(i){
            this.style.zIndex=min+i;
        });
        this[0].style.zIndex=min+group.length;
    }
});
$.ui.plugin.add("draggable","zIndex",{
    start:function(event,ui){
        var t=$(ui.helper),o=$(this).data("draggable").options;
        if(t.css("zIndex"))o._zIndex=t.css("zIndex");
        t.css('zIndex',o.zIndex);
    },
    stop:function(event,ui){
        var o=$(this).data("draggable").options;
        if(o._zIndex)$(ui.helper).css('zIndex',o._zIndex);
    }
});
})(jQuery);
(function($,undefined){
    $.widget("ui.droppable",{
        version:"1.9.1",
        widgetEventPrefix:"drop",
        options:{
            accept:'*',
            activeClass:false,
            addClasses:true,
            greedy:false,
            hoverClass:false,
            scope:'default',
            tolerance:'intersect'
        },
        _create:function(){
            var o=this.options,accept=o.accept;
            this.isover=0;
            this.isout=1;
            this.accept=$.isFunction(accept)?accept:function(d){
                return d.is(accept);
            };
            
            this.proportions={
                width:this.element[0].offsetWidth,
                height:this.element[0].offsetHeight
                };
                
            $.ui.ddmanager.droppables[o.scope]=$.ui.ddmanager.droppables[o.scope]||[];
            $.ui.ddmanager.droppables[o.scope].push(this);
            (o.addClasses&&this.element.addClass("ui-droppable"));
        },
        _destroy:function(){
            var drop=$.ui.ddmanager.droppables[this.options.scope];
            for(var i=0;i<drop.length;i++)
                if(drop[i]==this)
                    drop.splice(i,1);this.element.removeClass("ui-droppable ui-droppable-disabled");
        },
        _setOption:function(key,value){
            if(key=='accept'){
                this.accept=$.isFunction(value)?value:function(d){
                    return d.is(value);
                };
            
        }
        $.Widget.prototype._setOption.apply(this,arguments);
    },
    _activate:function(event){
        var draggable=$.ui.ddmanager.current;
        if(this.options.activeClass)this.element.addClass(this.options.activeClass);
        (draggable&&this._trigger('activate',event,this.ui(draggable)));
    },
    _deactivate:function(event){
        var draggable=$.ui.ddmanager.current;
        if(this.options.activeClass)this.element.removeClass(this.options.activeClass);
        (draggable&&this._trigger('deactivate',event,this.ui(draggable)));
    },
    _over:function(event){
        var draggable=$.ui.ddmanager.current;
        if(!draggable||(draggable.currentItem||draggable.element)[0]==this.element[0])return;
        if(this.accept.call(this.element[0],(draggable.currentItem||draggable.element))){
            if(this.options.hoverClass)this.element.addClass(this.options.hoverClass);
            this._trigger('over',event,this.ui(draggable));
        }
    },
    _out:function(event){
        var draggable=$.ui.ddmanager.current;
        if(!draggable||(draggable.currentItem||draggable.element)[0]==this.element[0])return;
        if(this.accept.call(this.element[0],(draggable.currentItem||draggable.element))){
            if(this.options.hoverClass)this.element.removeClass(this.options.hoverClass);
            this._trigger('out',event,this.ui(draggable));
        }
    },
_drop:function(event,custom){
    var draggable=custom||$.ui.ddmanager.current;
    if(!draggable||(draggable.currentItem||draggable.element)[0]==this.element[0])return false;
    var childrenIntersection=false;
    this.element.find(":data(droppable)").not(".ui-draggable-dragging").each(function(){
        var inst=$.data(this,'droppable');
        if(inst.options.greedy&&!inst.options.disabled&&inst.options.scope==draggable.options.scope&&inst.accept.call(inst.element[0],(draggable.currentItem||draggable.element))&&$.ui.intersect(draggable,$.extend(inst,{
            offset:inst.element.offset()
            }),inst.options.tolerance)){
            childrenIntersection=true;
            return false;
        }
    });
if(childrenIntersection)return false;
    if(this.accept.call(this.element[0],(draggable.currentItem||draggable.element))){
    if(this.options.activeClass)this.element.removeClass(this.options.activeClass);
    if(this.options.hoverClass)this.element.removeClass(this.options.hoverClass);
    this._trigger('drop',event,this.ui(draggable));
    return this.element;
}
return false;
},
ui:function(c){
    return{
        draggable:(c.currentItem||c.element),
        helper:c.helper,
        position:c.position,
        offset:c.positionAbs
        };
    
}
});
$.ui.intersect=function(draggable,droppable,toleranceMode){
    if(!droppable.offset)return false;
    var x1=(draggable.positionAbs||draggable.position.absolute).left,x2=x1+draggable.helperProportions.width,y1=(draggable.positionAbs||draggable.position.absolute).top,y2=y1+draggable.helperProportions.height;
    var l=droppable.offset.left,r=l+droppable.proportions.width,t=droppable.offset.top,b=t+droppable.proportions.height;
    switch(toleranceMode){
        case'fit':
            return(l<=x1&&x2<=r&&t<=y1&&y2<=b);
            break;
        case'intersect':
            return(l<x1+(draggable.helperProportions.width/2)&&x2-(draggable.helperProportions.width/2)<r&&t<y1+(draggable.helperProportions.height/2)&&y2-(draggable.helperProportions.height/2)<b);
            break;
        case'pointer':
            var draggableLeft=((draggable.positionAbs||draggable.position.absolute).left+(draggable.clickOffset||draggable.offset.click).left),draggableTop=((draggable.positionAbs||draggable.position.absolute).top+(draggable.clickOffset||draggable.offset.click).top),isOver=$.ui.isOver(draggableTop,draggableLeft,t,l,droppable.proportions.height,droppable.proportions.width);
            return isOver;
            break;
        case'touch':
            return((y1>=t&&y1<=b)||(y2>=t&&y2<=b)||(y1<t&&y2>b))&&((x1>=l&&x1<=r)||(x2>=l&&x2<=r)||(x1<l&&x2>r));
            break;
        default:
            return false;
            break;
    }
};

$.ui.ddmanager={
    current:null,
    droppables:{
        'default':[]
    },
    prepareOffsets:function(t,event){
        var m=$.ui.ddmanager.droppables[t.options.scope]||[];
        var type=event?event.type:null;
        var list=(t.currentItem||t.element).find(":data(droppable)").andSelf();
            droppablesLoop:for(var i=0;i<m.length;i++){
            if(m[i].options.disabled||(t&&!m[i].accept.call(m[i].element[0],(t.currentItem||t.element))))continue;
            for(var j=0;j<list.length;j++){
                if(list[j]==m[i].element[0]){
                    m[i].proportions.height=0;
                    continue droppablesLoop;
                }
            };
            
        m[i].visible=m[i].element.css("display")!="none";
            if(!m[i].visible)continue;
            if(type=="mousedown")m[i]._activate.call(m[i],event);
            m[i].offset=m[i].element.offset();
            m[i].proportions={
            width:m[i].element[0].offsetWidth,
            height:m[i].element[0].offsetHeight
            };
        
        }
    },
drop:function(draggable,event){
    var dropped=false;
    $.each($.ui.ddmanager.droppables[draggable.options.scope]||[],function(){
        if(!this.options)return;
        if(!this.options.disabled&&this.visible&&$.ui.intersect(draggable,this,this.options.tolerance))
            dropped=this._drop.call(this,event)||dropped;
        if(!this.options.disabled&&this.visible&&this.accept.call(this.element[0],(draggable.currentItem||draggable.element))){
            this.isout=1;
            this.isover=0;
            this._deactivate.call(this,event);
        }
    });
return dropped;
},
dragStart:function(draggable,event){
    draggable.element.parentsUntil("body").bind("scroll.droppable",function(){
        if(!draggable.options.refreshPositions)$.ui.ddmanager.prepareOffsets(draggable,event);
    });
},
drag:function(draggable,event){
    if(draggable.options.refreshPositions)$.ui.ddmanager.prepareOffsets(draggable,event);
    $.each($.ui.ddmanager.droppables[draggable.options.scope]||[],function(){
        if(this.options.disabled||this.greedyChild||!this.visible)return;
        var intersects=$.ui.intersect(draggable,this,this.options.tolerance);
        var c=!intersects&&this.isover==1?'isout':(intersects&&this.isover==0?'isover':null);
        if(!c)return;
        var parentInstance;
        if(this.options.greedy){
            var scope=this.options.scope;
            var parent=this.element.parents(':data(droppable)').filter(function(){
                return $.data(this,'droppable').options.scope===scope;
            });
            if(parent.length){
                parentInstance=$.data(parent[0],'droppable');
                parentInstance.greedyChild=(c=='isover'?1:0);
            }
        }
    if(parentInstance&&c=='isover'){
        parentInstance['isover']=0;
        parentInstance['isout']=1;
        parentInstance._out.call(parentInstance,event);
    }
    this[c]=1;
    this[c=='isout'?'isover':'isout']=0;
    this[c=="isover"?"_over":"_out"].call(this,event);
        if(parentInstance&&c=='isout'){
        parentInstance['isout']=0;
        parentInstance['isover']=1;
        parentInstance._over.call(parentInstance,event);
    }
    });
},
dragStop:function(draggable,event){
    draggable.element.parentsUntil("body").unbind("scroll.droppable");
    if(!draggable.options.refreshPositions)$.ui.ddmanager.prepareOffsets(draggable,event);
}
};

})(jQuery);
(function($,undefined){
    $.widget("ui.resizable",$.ui.mouse,{
        version:"1.9.1",
        widgetEventPrefix:"resize",
        options:{
            alsoResize:false,
            animate:false,
            animateDuration:"slow",
            animateEasing:"swing",
            aspectRatio:false,
            autoHide:false,
            containment:false,
            ghost:false,
            grid:false,
            handles:"e,s,se",
            helper:false,
            maxHeight:null,
            maxWidth:null,
            minHeight:10,
            minWidth:10,
            zIndex:1000
        },
        _create:function(){
            var that=this,o=this.options;
            this.element.addClass("ui-resizable");
            $.extend(this,{
                _aspectRatio:!!(o.aspectRatio),
                aspectRatio:o.aspectRatio,
                originalElement:this.element,
                _proportionallyResizeElements:[],
                _helper:o.helper||o.ghost||o.animate?o.helper||'ui-resizable-helper':null
                });
            if(this.element[0].nodeName.match(/canvas|textarea|input|select|button|img/i)){
                this.element.wrap($('<div class="ui-wrapper" style="overflow: hidden;"></div>').css({
                    position:this.element.css('position'),
                    width:this.element.outerWidth(),
                    height:this.element.outerHeight(),
                    top:this.element.css('top'),
                    left:this.element.css('left')
                    }));
                this.element=this.element.parent().data("resizable",this.element.data('resizable'));
                this.elementIsWrapper=true;
                this.element.css({
                    marginLeft:this.originalElement.css("marginLeft"),
                    marginTop:this.originalElement.css("marginTop"),
                    marginRight:this.originalElement.css("marginRight"),
                    marginBottom:this.originalElement.css("marginBottom")
                    });
                this.originalElement.css({
                    marginLeft:0,
                    marginTop:0,
                    marginRight:0,
                    marginBottom:0
                });
                this.originalResizeStyle=this.originalElement.css('resize');
                this.originalElement.css('resize','none');
                this._proportionallyResizeElements.push(this.originalElement.css({
                    position:'static',
                    zoom:1,
                    display:'block'
                }));
                this.originalElement.css({
                    margin:this.originalElement.css('margin')
                    });
                this._proportionallyResize();
            }
            this.handles=o.handles||(!$('.ui-resizable-handle',this.element).length?"e,s,se":{
                n:'.ui-resizable-n',
                e:'.ui-resizable-e',
                s:'.ui-resizable-s',
                w:'.ui-resizable-w',
                se:'.ui-resizable-se',
                sw:'.ui-resizable-sw',
                ne:'.ui-resizable-ne',
                nw:'.ui-resizable-nw'
            });
            if(this.handles.constructor==String){
                if(this.handles=='all')this.handles='n,e,s,w,se,sw,ne,nw';
                var n=this.handles.split(",");
                this.handles={};
                
                for(var i=0;i<n.length;i++){
                    var handle=$.trim(n[i]),hname='ui-resizable-'+handle;
                    var axis=$('<div class="ui-resizable-handle '+hname+'"></div>');
                    axis.css({
                        zIndex:o.zIndex
                        });
                    if('se'==handle){
                        axis.addClass('ui-icon ui-icon-gripsmall-diagonal-se');
                    };
                    
                    this.handles[handle]='.ui-resizable-'+handle;
                    this.element.append(axis);
                }
                }
        this._renderAxis=function(target){
            target=target||this.element;
            for(var i in this.handles){
                if(this.handles[i].constructor==String)
                    this.handles[i]=$(this.handles[i],this.element).show();
                if(this.elementIsWrapper&&this.originalElement[0].nodeName.match(/textarea|input|select|button/i)){
                    var axis=$(this.handles[i],this.element),padWrapper=0;
                    padWrapper=/sw|ne|nw|se|n|s/.test(i)?axis.outerHeight():axis.outerWidth();
                    var padPos=['padding',/ne|nw|n/.test(i)?'Top':/se|sw|s/.test(i)?'Bottom':/^e$/.test(i)?'Right':'Left'].join("");
                    target.css(padPos,padWrapper);
                    this._proportionallyResize();
                }
                if(!$(this.handles[i]).length)
                    continue;
            }
            };
            
    this._renderAxis(this.element);
        this._handles=$('.ui-resizable-handle',this.element).disableSelection();
        this._handles.mouseover(function(){
        if(!that.resizing){
            if(this.className)
                var axis=this.className.match(/ui-resizable-(se|sw|ne|nw|n|e|s|w)/i);
            that.axis=axis&&axis[1]?axis[1]:'se';
        }
    });
    if(o.autoHide){
        this._handles.hide();
        $(this.element).addClass("ui-resizable-autohide").mouseenter(function(){
            if(o.disabled)return;
            $(this).removeClass("ui-resizable-autohide");
            that._handles.show();
        }).mouseleave(function(){
            if(o.disabled)return;
            if(!that.resizing){
                $(this).addClass("ui-resizable-autohide");
                that._handles.hide();
            }
        });
}
this._mouseInit();
    },
    _destroy:function(){
        this._mouseDestroy();
        var _destroy=function(exp){
            $(exp).removeClass("ui-resizable ui-resizable-disabled ui-resizable-resizing").removeData("resizable").removeData("ui-resizable").unbind(".resizable").find('.ui-resizable-handle').remove();
        };
        
        if(this.elementIsWrapper){
            _destroy(this.element);
            var wrapper=this.element;
            this.originalElement.css({
                position:wrapper.css('position'),
                width:wrapper.outerWidth(),
                height:wrapper.outerHeight(),
                top:wrapper.css('top'),
                left:wrapper.css('left')
                }).insertAfter(wrapper);
            wrapper.remove();
        }
        this.originalElement.css('resize',this.originalResizeStyle);
        _destroy(this.originalElement);
        return this;
    },
    _mouseCapture:function(event){
        var handle=false;
        for(var i in this.handles){
            if($(this.handles[i])[0]==event.target){
                handle=true;
            }
        }
    return!this.options.disabled&&handle;
},
_mouseStart:function(event){
    var o=this.options,iniPos=this.element.position(),el=this.element;
    this.resizing=true;
    this.documentScroll={
        top:$(document).scrollTop(),
        left:$(document).scrollLeft()
        };
        
    if(el.is('.ui-draggable')||(/absolute/).test(el.css('position'))){
        el.css({
            position:'absolute',
            top:iniPos.top,
            left:iniPos.left
            });
    }
    this._renderProxy();
    var curleft=num(this.helper.css('left')),curtop=num(this.helper.css('top'));
    if(o.containment){
        curleft+=$(o.containment).scrollLeft()||0;
        curtop+=$(o.containment).scrollTop()||0;
    }
    this.offset=this.helper.offset();
    this.position={
        left:curleft,
        top:curtop
    };
    
    this.size=this._helper?{
        width:el.outerWidth(),
        height:el.outerHeight()
        }:{
        width:el.width(),
        height:el.height()
        };
        
    this.originalSize=this._helper?{
        width:el.outerWidth(),
        height:el.outerHeight()
        }:{
        width:el.width(),
        height:el.height()
        };
        
    this.originalPosition={
        left:curleft,
        top:curtop
    };
    
    this.sizeDiff={
        width:el.outerWidth()-el.width(),
        height:el.outerHeight()-el.height()
        };
        
    this.originalMousePosition={
        left:event.pageX,
        top:event.pageY
        };
        
    this.aspectRatio=(typeof o.aspectRatio=='number')?o.aspectRatio:((this.originalSize.width/this.originalSize.height)||1);
    var cursor=$('.ui-resizable-'+this.axis).css('cursor');
    $('body').css('cursor',cursor=='auto'?this.axis+'-resize':cursor);
    el.addClass("ui-resizable-resizing");
    this._propagate("start",event);
    return true;
},
_mouseDrag:function(event){
    var el=this.helper,o=this.options,props={},that=this,smp=this.originalMousePosition,a=this.axis;
    var dx=(event.pageX-smp.left)||0,dy=(event.pageY-smp.top)||0;
    var trigger=this._change[a];
    if(!trigger)return false;
    var data=trigger.apply(this,[event,dx,dy]);
    this._updateVirtualBoundaries(event.shiftKey);
    if(this._aspectRatio||event.shiftKey)
        data=this._updateRatio(data,event);
    data=this._respectSize(data,event);
    this._propagate("resize",event);
    el.css({
        top:this.position.top+"px",
        left:this.position.left+"px",
        width:this.size.width+"px",
        height:this.size.height+"px"
        });
    if(!this._helper&&this._proportionallyResizeElements.length)
        this._proportionallyResize();
    this._updateCache(data);
    this._trigger('resize',event,this.ui());
    return false;
},
_mouseStop:function(event){
    this.resizing=false;
    var o=this.options,that=this;
    if(this._helper){
        var pr=this._proportionallyResizeElements,ista=pr.length&&(/textarea/i).test(pr[0].nodeName),soffseth=ista&&$.ui.hasScroll(pr[0],'left')?0:that.sizeDiff.height,soffsetw=ista?0:that.sizeDiff.width;
        var s={
            width:(that.helper.width()-soffsetw),
            height:(that.helper.height()-soffseth)
            },left=(parseInt(that.element.css('left'),10)+(that.position.left-that.originalPosition.left))||null,top=(parseInt(that.element.css('top'),10)+(that.position.top-that.originalPosition.top))||null;
        if(!o.animate)
            this.element.css($.extend(s,{
                top:top,
                left:left
            }));
        that.helper.height(that.size.height);
        that.helper.width(that.size.width);
        if(this._helper&&!o.animate)this._proportionallyResize();
    }
    $('body').css('cursor','auto');
    this.element.removeClass("ui-resizable-resizing");
    this._propagate("stop",event);
    if(this._helper)this.helper.remove();
    return false;
},
_updateVirtualBoundaries:function(forceAspectRatio){
    var o=this.options,pMinWidth,pMaxWidth,pMinHeight,pMaxHeight,b;
    b={
        minWidth:isNumber(o.minWidth)?o.minWidth:0,
        maxWidth:isNumber(o.maxWidth)?o.maxWidth:Infinity,
        minHeight:isNumber(o.minHeight)?o.minHeight:0,
        maxHeight:isNumber(o.maxHeight)?o.maxHeight:Infinity
        };
        
    if(this._aspectRatio||forceAspectRatio){
        pMinWidth=b.minHeight*this.aspectRatio;
        pMinHeight=b.minWidth/this.aspectRatio;
        pMaxWidth=b.maxHeight*this.aspectRatio;
        pMaxHeight=b.maxWidth/this.aspectRatio;
        if(pMinWidth>b.minWidth)b.minWidth=pMinWidth;
        if(pMinHeight>b.minHeight)b.minHeight=pMinHeight;
        if(pMaxWidth<b.maxWidth)b.maxWidth=pMaxWidth;
        if(pMaxHeight<b.maxHeight)b.maxHeight=pMaxHeight;
    }
    this._vBoundaries=b;
},
_updateCache:function(data){
    var o=this.options;
    this.offset=this.helper.offset();
    if(isNumber(data.left))this.position.left=data.left;
    if(isNumber(data.top))this.position.top=data.top;
    if(isNumber(data.height))this.size.height=data.height;
    if(isNumber(data.width))this.size.width=data.width;
},
_updateRatio:function(data,event){
    var o=this.options,cpos=this.position,csize=this.size,a=this.axis;
    if(isNumber(data.height))data.width=(data.height*this.aspectRatio);
    else if(isNumber(data.width))data.height=(data.width/this.aspectRatio);
    if(a=='sw'){
        data.left=cpos.left+(csize.width-data.width);
        data.top=null;
    }
    if(a=='nw'){
        data.top=cpos.top+(csize.height-data.height);
        data.left=cpos.left+(csize.width-data.width);
    }
    return data;
},
_respectSize:function(data,event){
    var el=this.helper,o=this._vBoundaries,pRatio=this._aspectRatio||event.shiftKey,a=this.axis,ismaxw=isNumber(data.width)&&o.maxWidth&&(o.maxWidth<data.width),ismaxh=isNumber(data.height)&&o.maxHeight&&(o.maxHeight<data.height),isminw=isNumber(data.width)&&o.minWidth&&(o.minWidth>data.width),isminh=isNumber(data.height)&&o.minHeight&&(o.minHeight>data.height);
    if(isminw)data.width=o.minWidth;
    if(isminh)data.height=o.minHeight;
    if(ismaxw)data.width=o.maxWidth;
    if(ismaxh)data.height=o.maxHeight;
    var dw=this.originalPosition.left+this.originalSize.width,dh=this.position.top+this.size.height;
    var cw=/sw|nw|w/.test(a),ch=/nw|ne|n/.test(a);
    if(isminw&&cw)data.left=dw-o.minWidth;
    if(ismaxw&&cw)data.left=dw-o.maxWidth;
    if(isminh&&ch)data.top=dh-o.minHeight;
    if(ismaxh&&ch)data.top=dh-o.maxHeight;
    var isNotwh=!data.width&&!data.height;
    if(isNotwh&&!data.left&&data.top)data.top=null;
    else if(isNotwh&&!data.top&&data.left)data.left=null;
    return data;
},
_proportionallyResize:function(){
    var o=this.options;
    if(!this._proportionallyResizeElements.length)return;
    var element=this.helper||this.element;
    for(var i=0;i<this._proportionallyResizeElements.length;i++){
        var prel=this._proportionallyResizeElements[i];
        if(!this.borderDif){
            var b=[prel.css('borderTopWidth'),prel.css('borderRightWidth'),prel.css('borderBottomWidth'),prel.css('borderLeftWidth')],p=[prel.css('paddingTop'),prel.css('paddingRight'),prel.css('paddingBottom'),prel.css('paddingLeft')];
            this.borderDif=$.map(b,function(v,i){
                var border=parseInt(v,10)||0,padding=parseInt(p[i],10)||0;
                return border+padding;
            });
        }
        prel.css({
            height:(element.height()-this.borderDif[0]-this.borderDif[2])||0,
            width:(element.width()-this.borderDif[1]-this.borderDif[3])||0
            });
    };
    
},
_renderProxy:function(){
    var el=this.element,o=this.options;
    this.elementOffset=el.offset();
    if(this._helper){
        this.helper=this.helper||$('<div style="overflow:hidden;"></div>');
        var ie6offset=($.ui.ie6?1:0),pxyoffset=($.ui.ie6?2:-1);
        this.helper.addClass(this._helper).css({
            width:this.element.outerWidth()+pxyoffset,
            height:this.element.outerHeight()+pxyoffset,
            position:'absolute',
            left:this.elementOffset.left-ie6offset+'px',
            top:this.elementOffset.top-ie6offset+'px',
            zIndex:++o.zIndex
            });
        this.helper.appendTo("body").disableSelection();
    }else{
        this.helper=this.element;
    }
},
_change:{
    e:function(event,dx,dy){
        return{
            width:this.originalSize.width+dx
            };
        
},
w:function(event,dx,dy){
    var o=this.options,cs=this.originalSize,sp=this.originalPosition;
    return{
        left:sp.left+dx,
        width:cs.width-dx
        };
    
},
n:function(event,dx,dy){
    var o=this.options,cs=this.originalSize,sp=this.originalPosition;
    return{
        top:sp.top+dy,
        height:cs.height-dy
        };
    
},
s:function(event,dx,dy){
    return{
        height:this.originalSize.height+dy
        };
    
},
se:function(event,dx,dy){
    return $.extend(this._change.s.apply(this,arguments),this._change.e.apply(this,[event,dx,dy]));
},
sw:function(event,dx,dy){
    return $.extend(this._change.s.apply(this,arguments),this._change.w.apply(this,[event,dx,dy]));
},
ne:function(event,dx,dy){
    return $.extend(this._change.n.apply(this,arguments),this._change.e.apply(this,[event,dx,dy]));
},
nw:function(event,dx,dy){
    return $.extend(this._change.n.apply(this,arguments),this._change.w.apply(this,[event,dx,dy]));
}
},
_propagate:function(n,event){
    $.ui.plugin.call(this,n,[event,this.ui()]);
    (n!="resize"&&this._trigger(n,event,this.ui()));
},
plugins:{},
ui:function(){
    return{
        originalElement:this.originalElement,
        element:this.element,
        helper:this.helper,
        position:this.position,
        size:this.size,
        originalSize:this.originalSize,
        originalPosition:this.originalPosition
        };
    
}
});
$.ui.plugin.add("resizable","alsoResize",{
    start:function(event,ui){
        var that=$(this).data("resizable"),o=that.options;
        var _store=function(exp){
            $(exp).each(function(){
                var el=$(this);
                el.data("resizable-alsoresize",{
                    width:parseInt(el.width(),10),
                    height:parseInt(el.height(),10),
                    left:parseInt(el.css('left'),10),
                    top:parseInt(el.css('top'),10)
                    });
            });
        };
        
        if(typeof(o.alsoResize)=='object'&&!o.alsoResize.parentNode){
            if(o.alsoResize.length){
                o.alsoResize=o.alsoResize[0];
                _store(o.alsoResize);
            }
            else{
                $.each(o.alsoResize,function(exp){
                    _store(exp);
                });
            }
        }else{
        _store(o.alsoResize);
    }
},
resize:function(event,ui){
    var that=$(this).data("resizable"),o=that.options,os=that.originalSize,op=that.originalPosition;
    var delta={
        height:(that.size.height-os.height)||0,
        width:(that.size.width-os.width)||0,
        top:(that.position.top-op.top)||0,
        left:(that.position.left-op.left)||0
        },_alsoResize=function(exp,c){
        $(exp).each(function(){
            var el=$(this),start=$(this).data("resizable-alsoresize"),style={},css=c&&c.length?c:el.parents(ui.originalElement[0]).length?['width','height']:['width','height','top','left'];
            $.each(css,function(i,prop){
                var sum=(start[prop]||0)+(delta[prop]||0);
                if(sum&&sum>=0)
                    style[prop]=sum||null;
            });
            el.css(style);
        });
    };
    
    if(typeof(o.alsoResize)=='object'&&!o.alsoResize.nodeType){
        $.each(o.alsoResize,function(exp,c){
            _alsoResize(exp,c);
        });
    }else{
        _alsoResize(o.alsoResize);
    }
},
stop:function(event,ui){
    $(this).removeData("resizable-alsoresize");
}
});
$.ui.plugin.add("resizable","animate",{
    stop:function(event,ui){
        var that=$(this).data("resizable"),o=that.options;
        var pr=that._proportionallyResizeElements,ista=pr.length&&(/textarea/i).test(pr[0].nodeName),soffseth=ista&&$.ui.hasScroll(pr[0],'left')?0:that.sizeDiff.height,soffsetw=ista?0:that.sizeDiff.width;
        var style={
            width:(that.size.width-soffsetw),
            height:(that.size.height-soffseth)
            },left=(parseInt(that.element.css('left'),10)+(that.position.left-that.originalPosition.left))||null,top=(parseInt(that.element.css('top'),10)+(that.position.top-that.originalPosition.top))||null;
        that.element.animate($.extend(style,top&&left?{
            top:top,
            left:left
        }:{}),{
            duration:o.animateDuration,
            easing:o.animateEasing,
            step:function(){
                var data={
                    width:parseInt(that.element.css('width'),10),
                    height:parseInt(that.element.css('height'),10),
                    top:parseInt(that.element.css('top'),10),
                    left:parseInt(that.element.css('left'),10)
                    };
                    
                if(pr&&pr.length)$(pr[0]).css({
                    width:data.width,
                    height:data.height
                    });
                that._updateCache(data);
                that._propagate("resize",event);
            }
        });
}
});
$.ui.plugin.add("resizable","containment",{
    start:function(event,ui){
        var that=$(this).data("resizable"),o=that.options,el=that.element;
        var oc=o.containment,ce=(oc instanceof $)?oc.get(0):(/parent/.test(oc))?el.parent().get(0):oc;
        if(!ce)return;
        that.containerElement=$(ce);
        if(/document/.test(oc)||oc==document){
            that.containerOffset={
                left:0,
                top:0
            };
            
            that.containerPosition={
                left:0,
                top:0
            };
            
            that.parentData={
                element:$(document),
                left:0,
                top:0,
                width:$(document).width(),
                height:$(document).height()||document.body.parentNode.scrollHeight
                };
            
    }
    else{
        var element=$(ce),p=[];
        $(["Top","Right","Left","Bottom"]).each(function(i,name){
            p[i]=num(element.css("padding"+name));
        });
        that.containerOffset=element.offset();
        that.containerPosition=element.position();
        that.containerSize={
            height:(element.innerHeight()-p[3]),
            width:(element.innerWidth()-p[1])
            };
            
        var co=that.containerOffset,ch=that.containerSize.height,cw=that.containerSize.width,width=($.ui.hasScroll(ce,"left")?ce.scrollWidth:cw),height=($.ui.hasScroll(ce)?ce.scrollHeight:ch);
        that.parentData={
            element:ce,
            left:co.left,
            top:co.top,
            width:width,
            height:height
        };
    
}
},
resize:function(event,ui){
    var that=$(this).data("resizable"),o=that.options,ps=that.containerSize,co=that.containerOffset,cs=that.size,cp=that.position,pRatio=that._aspectRatio||event.shiftKey,cop={
        top:0,
        left:0
    },ce=that.containerElement;
    if(ce[0]!=document&&(/static/).test(ce.css('position')))cop=co;
    if(cp.left<(that._helper?co.left:0)){
        that.size.width=that.size.width+(that._helper?(that.position.left-co.left):(that.position.left-cop.left));
        if(pRatio)that.size.height=that.size.width/that.aspectRatio;
        that.position.left=o.helper?co.left:0;
    }
    if(cp.top<(that._helper?co.top:0)){
        that.size.height=that.size.height+(that._helper?(that.position.top-co.top):that.position.top);
        if(pRatio)that.size.width=that.size.height*that.aspectRatio;
        that.position.top=that._helper?co.top:0;
    }
    that.offset.left=that.parentData.left+that.position.left;
    that.offset.top=that.parentData.top+that.position.top;
    var woset=Math.abs((that._helper?that.offset.left-cop.left:(that.offset.left-cop.left))+that.sizeDiff.width),hoset=Math.abs((that._helper?that.offset.top-cop.top:(that.offset.top-co.top))+that.sizeDiff.height);
    var isParent=that.containerElement.get(0)==that.element.parent().get(0),isOffsetRelative=/relative|absolute/.test(that.containerElement.css('position'));
    if(isParent&&isOffsetRelative)woset-=that.parentData.left;
    if(woset+that.size.width>=that.parentData.width){
        that.size.width=that.parentData.width-woset;
        if(pRatio)that.size.height=that.size.width/that.aspectRatio;
    }
    if(hoset+that.size.height>=that.parentData.height){
        that.size.height=that.parentData.height-hoset;
        if(pRatio)that.size.width=that.size.height*that.aspectRatio;
    }
},
stop:function(event,ui){
    var that=$(this).data("resizable"),o=that.options,cp=that.position,co=that.containerOffset,cop=that.containerPosition,ce=that.containerElement;
    var helper=$(that.helper),ho=helper.offset(),w=helper.outerWidth()-that.sizeDiff.width,h=helper.outerHeight()-that.sizeDiff.height;
    if(that._helper&&!o.animate&&(/relative/).test(ce.css('position')))
        $(this).css({
            left:ho.left-cop.left-co.left,
            width:w,
            height:h
        });
    if(that._helper&&!o.animate&&(/static/).test(ce.css('position')))
        $(this).css({
            left:ho.left-cop.left-co.left,
            width:w,
            height:h
        });
}
});
$.ui.plugin.add("resizable","ghost",{
    start:function(event,ui){
        var that=$(this).data("resizable"),o=that.options,cs=that.size;
        that.ghost=that.originalElement.clone();
        that.ghost.css({
            opacity:.25,
            display:'block',
            position:'relative',
            height:cs.height,
            width:cs.width,
            margin:0,
            left:0,
            top:0
        }).addClass('ui-resizable-ghost').addClass(typeof o.ghost=='string'?o.ghost:'');
        that.ghost.appendTo(that.helper);
    },
    resize:function(event,ui){
        var that=$(this).data("resizable"),o=that.options;
        if(that.ghost)that.ghost.css({
            position:'relative',
            height:that.size.height,
            width:that.size.width
            });
    },
    stop:function(event,ui){
        var that=$(this).data("resizable"),o=that.options;
        if(that.ghost&&that.helper)that.helper.get(0).removeChild(that.ghost.get(0));
    }
});
$.ui.plugin.add("resizable","grid",{
    resize:function(event,ui){
        var that=$(this).data("resizable"),o=that.options,cs=that.size,os=that.originalSize,op=that.originalPosition,a=that.axis,ratio=o._aspectRatio||event.shiftKey;
        o.grid=typeof o.grid=="number"?[o.grid,o.grid]:o.grid;
        var ox=Math.round((cs.width-os.width)/(o.grid[0]||1))*(o.grid[0]||1),oy=Math.round((cs.height-os.height)/(o.grid[1]||1))*(o.grid[1]||1);
        if(/^(se|s|e)$/.test(a)){
            that.size.width=os.width+ox;
            that.size.height=os.height+oy;
        }
        else if(/^(ne)$/.test(a)){
            that.size.width=os.width+ox;
            that.size.height=os.height+oy;
            that.position.top=op.top-oy;
        }
        else if(/^(sw)$/.test(a)){
            that.size.width=os.width+ox;
            that.size.height=os.height+oy;
            that.position.left=op.left-ox;
        }
        else{
            that.size.width=os.width+ox;
            that.size.height=os.height+oy;
            that.position.top=op.top-oy;
            that.position.left=op.left-ox;
        }
    }
});
var num=function(v){
    return parseInt(v,10)||0;
};

var isNumber=function(value){
    return!isNaN(parseInt(value,10));
};

})(jQuery);
(function($,undefined){
    $.widget("ui.selectable",$.ui.mouse,{
        version:"1.9.1",
        options:{
            appendTo:'body',
            autoRefresh:true,
            distance:0,
            filter:'*',
            tolerance:'touch'
        },
        _create:function(){
            var that=this;
            this.element.addClass("ui-selectable");
            this.dragged=false;
            var selectees;
            this.refresh=function(){
                selectees=$(that.options.filter,that.element[0]);
                selectees.addClass("ui-selectee");
                selectees.each(function(){
                    var $this=$(this);
                    var pos=$this.offset();
                    $.data(this,"selectable-item",{
                        element:this,
                        $element:$this,
                        left:pos.left,
                        top:pos.top,
                        right:pos.left+$this.outerWidth(),
                        bottom:pos.top+$this.outerHeight(),
                        startselected:false,
                        selected:$this.hasClass('ui-selected'),
                        selecting:$this.hasClass('ui-selecting'),
                        unselecting:$this.hasClass('ui-unselecting')
                        });
                });
            };
            
            this.refresh();
            this.selectees=selectees.addClass("ui-selectee");
            this._mouseInit();
            this.helper=$("<div class='ui-selectable-helper'></div>");
        },
        _destroy:function(){
            this.selectees.removeClass("ui-selectee").removeData("selectable-item");
            this.element.removeClass("ui-selectable ui-selectable-disabled");
            this._mouseDestroy();
        },
        _mouseStart:function(event){
            var that=this;
            this.opos=[event.pageX,event.pageY];
            if(this.options.disabled)
                return;
            var options=this.options;
            this.selectees=$(options.filter,this.element[0]);
            this._trigger("start",event);
            $(options.appendTo).append(this.helper);
            this.helper.css({
                "left":event.clientX,
                "top":event.clientY,
                "width":0,
                "height":0
            });
            if(options.autoRefresh){
                this.refresh();
            }
            this.selectees.filter('.ui-selected').each(function(){
                var selectee=$.data(this,"selectable-item");
                selectee.startselected=true;
                if(!event.metaKey&&!event.ctrlKey){
                    selectee.$element.removeClass('ui-selected');
                    selectee.selected=false;
                    selectee.$element.addClass('ui-unselecting');
                    selectee.unselecting=true;
                    that._trigger("unselecting",event,{
                        unselecting:selectee.element
                        });
                }
            });
        $(event.target).parents().andSelf().each(function(){
            var selectee=$.data(this,"selectable-item");
            if(selectee){
                var doSelect=(!event.metaKey&&!event.ctrlKey)||!selectee.$element.hasClass('ui-selected');
                selectee.$element.removeClass(doSelect?"ui-unselecting":"ui-selected").addClass(doSelect?"ui-selecting":"ui-unselecting");
                selectee.unselecting=!doSelect;
                selectee.selecting=doSelect;
                selectee.selected=doSelect;
                if(doSelect){
                    that._trigger("selecting",event,{
                        selecting:selectee.element
                        });
                }else{
                    that._trigger("unselecting",event,{
                        unselecting:selectee.element
                        });
                }
                return false;
            }
        });
    },
    _mouseDrag:function(event){
        var that=this;
        this.dragged=true;
        if(this.options.disabled)
            return;
        var options=this.options;
        var x1=this.opos[0],y1=this.opos[1],x2=event.pageX,y2=event.pageY;
        if(x1>x2){
            var tmp=x2;
            x2=x1;
            x1=tmp;
        }
        if(y1>y2){
            var tmp=y2;
            y2=y1;
            y1=tmp;
        }
        this.helper.css({
            left:x1,
            top:y1,
            width:x2-x1,
            height:y2-y1
            });
        this.selectees.each(function(){
            var selectee=$.data(this,"selectable-item");
            if(!selectee||selectee.element==that.element[0])
                return;
            var hit=false;
            if(options.tolerance=='touch'){
                hit=(!(selectee.left>x2||selectee.right<x1||selectee.top>y2||selectee.bottom<y1));
            }else if(options.tolerance=='fit'){
                hit=(selectee.left>x1&&selectee.right<x2&&selectee.top>y1&&selectee.bottom<y2);
            }
            if(hit){
                if(selectee.selected){
                    selectee.$element.removeClass('ui-selected');
                    selectee.selected=false;
                }
                if(selectee.unselecting){
                    selectee.$element.removeClass('ui-unselecting');
                    selectee.unselecting=false;
                }
                if(!selectee.selecting){
                    selectee.$element.addClass('ui-selecting');
                    selectee.selecting=true;
                    that._trigger("selecting",event,{
                        selecting:selectee.element
                        });
                }
            }else{
            if(selectee.selecting){
                if((event.metaKey||event.ctrlKey)&&selectee.startselected){
                    selectee.$element.removeClass('ui-selecting');
                    selectee.selecting=false;
                    selectee.$element.addClass('ui-selected');
                    selectee.selected=true;
                }else{
                    selectee.$element.removeClass('ui-selecting');
                    selectee.selecting=false;
                    if(selectee.startselected){
                        selectee.$element.addClass('ui-unselecting');
                        selectee.unselecting=true;
                    }
                    that._trigger("unselecting",event,{
                        unselecting:selectee.element
                        });
                }
            }
        if(selectee.selected){
            if(!event.metaKey&&!event.ctrlKey&&!selectee.startselected){
                selectee.$element.removeClass('ui-selected');
                selectee.selected=false;
                selectee.$element.addClass('ui-unselecting');
                selectee.unselecting=true;
                that._trigger("unselecting",event,{
                    unselecting:selectee.element
                    });
            }
        }
        }
});
return false;
},
_mouseStop:function(event){
    var that=this;
    this.dragged=false;
    var options=this.options;
    $('.ui-unselecting',this.element[0]).each(function(){
        var selectee=$.data(this,"selectable-item");
        selectee.$element.removeClass('ui-unselecting');
        selectee.unselecting=false;
        selectee.startselected=false;
        that._trigger("unselected",event,{
            unselected:selectee.element
            });
    });
    $('.ui-selecting',this.element[0]).each(function(){
        var selectee=$.data(this,"selectable-item");
        selectee.$element.removeClass('ui-selecting').addClass('ui-selected');
        selectee.selecting=false;
        selectee.selected=true;
        selectee.startselected=true;
        that._trigger("selected",event,{
            selected:selectee.element
            });
    });
    this._trigger("stop",event);
    this.helper.remove();
    return false;
}
});
})(jQuery);
(function($,undefined){
    $.widget("ui.sortable",$.ui.mouse,{
        version:"1.9.1",
        widgetEventPrefix:"sort",
        ready:false,
        options:{
            appendTo:"parent",
            axis:false,
            connectWith:false,
            containment:false,
            cursor:'auto',
            cursorAt:false,
            dropOnEmpty:true,
            forcePlaceholderSize:false,
            forceHelperSize:false,
            grid:false,
            handle:false,
            helper:"original",
            items:'> *',
            opacity:false,
            placeholder:false,
            revert:false,
            scroll:true,
            scrollSensitivity:20,
            scrollSpeed:20,
            scope:"default",
            tolerance:"intersect",
            zIndex:1000
        },
        _create:function(){
            var o=this.options;
            this.containerCache={};
            
            this.element.addClass("ui-sortable");
            this.refresh();
            this.floating=this.items.length?o.axis==='x'||(/left|right/).test(this.items[0].item.css('float'))||(/inline|table-cell/).test(this.items[0].item.css('display')):false;
            this.offset=this.element.offset();
            this._mouseInit();
            this.ready=true
            },
        _destroy:function(){
            this.element.removeClass("ui-sortable ui-sortable-disabled");
            this._mouseDestroy();
            for(var i=this.items.length-1;i>=0;i--)
                this.items[i].item.removeData(this.widgetName+"-item");
            return this;
        },
        _setOption:function(key,value){
            if(key==="disabled"){
                this.options[key]=value;
                this.widget().toggleClass("ui-sortable-disabled",!!value);
            }else{
                $.Widget.prototype._setOption.apply(this,arguments);
            }
        },
    _mouseCapture:function(event,overrideHandle){
        var that=this;
        if(this.reverting){
            return false;
        }
        if(this.options.disabled||this.options.type=='static')return false;
        this._refreshItems(event);
        var currentItem=null,nodes=$(event.target).parents().each(function(){
            if($.data(this,that.widgetName+'-item')==that){
                currentItem=$(this);
                return false;
            }
        });
    if($.data(event.target,that.widgetName+'-item')==that)currentItem=$(event.target);
        if(!currentItem)return false;
        if(this.options.handle&&!overrideHandle){
        var validHandle=false;
        $(this.options.handle,currentItem).find("*").andSelf().each(function(){
            if(this==event.target)validHandle=true;
        });
        if(!validHandle)return false;
    }
    this.currentItem=currentItem;
    this._removeCurrentsFromItems();
        return true;
    },
    _mouseStart:function(event,overrideHandle,noActivation){
        var o=this.options;
        this.currentContainer=this;
        this.refreshPositions();
        this.helper=this._createHelper(event);
        this._cacheHelperProportions();
        this._cacheMargins();
        this.scrollParent=this.helper.scrollParent();
        this.offset=this.currentItem.offset();
        this.offset={
            top:this.offset.top-this.margins.top,
            left:this.offset.left-this.margins.left
            };
            
        $.extend(this.offset,{
            click:{
                left:event.pageX-this.offset.left,
                top:event.pageY-this.offset.top
                },
            parent:this._getParentOffset(),
            relative:this._getRelativeOffset()
            });
        this.helper.css("position","absolute");
        this.cssPosition=this.helper.css("position");
        this.originalPosition=this._generatePosition(event);
        this.originalPageX=event.pageX;
        this.originalPageY=event.pageY;
        (o.cursorAt&&this._adjustOffsetFromHelper(o.cursorAt));
        this.domPosition={
            prev:this.currentItem.prev()[0],
            parent:this.currentItem.parent()[0]
            };
            
        if(this.helper[0]!=this.currentItem[0]){
            this.currentItem.hide();
        }
        this._createPlaceholder();
        if(o.containment)
            this._setContainment();
        if(o.cursor){
            if($('body').css("cursor"))this._storedCursor=$('body').css("cursor");
            $('body').css("cursor",o.cursor);
        }
        if(o.opacity){
            if(this.helper.css("opacity"))this._storedOpacity=this.helper.css("opacity");
            this.helper.css("opacity",o.opacity);
        }
        if(o.zIndex){
            if(this.helper.css("zIndex"))this._storedZIndex=this.helper.css("zIndex");
            this.helper.css("zIndex",o.zIndex);
        }
        if(this.scrollParent[0]!=document&&this.scrollParent[0].tagName!='HTML')
            this.overflowOffset=this.scrollParent.offset();
        this._trigger("start",event,this._uiHash());
        if(!this._preserveHelperProportions)
            this._cacheHelperProportions();
        if(!noActivation){
            for(var i=this.containers.length-1;i>=0;i--){
                this.containers[i]._trigger("activate",event,this._uiHash(this));
            }
            }
    if($.ui.ddmanager)
        $.ui.ddmanager.current=this;
    if($.ui.ddmanager&&!o.dropBehaviour)
        $.ui.ddmanager.prepareOffsets(this,event);
    this.dragging=true;
    this.helper.addClass("ui-sortable-helper");
    this._mouseDrag(event);
    return true;
},
_mouseDrag:function(event){
    this.position=this._generatePosition(event);
    this.positionAbs=this._convertPositionTo("absolute");
    if(!this.lastPositionAbs){
        this.lastPositionAbs=this.positionAbs;
    }
    if(this.options.scroll){
        var o=this.options,scrolled=false;
        if(this.scrollParent[0]!=document&&this.scrollParent[0].tagName!='HTML'){
            if((this.overflowOffset.top+this.scrollParent[0].offsetHeight)-event.pageY<o.scrollSensitivity)
                this.scrollParent[0].scrollTop=scrolled=this.scrollParent[0].scrollTop+o.scrollSpeed;
            else if(event.pageY-this.overflowOffset.top<o.scrollSensitivity)
                this.scrollParent[0].scrollTop=scrolled=this.scrollParent[0].scrollTop-o.scrollSpeed;
            if((this.overflowOffset.left+this.scrollParent[0].offsetWidth)-event.pageX<o.scrollSensitivity)
                this.scrollParent[0].scrollLeft=scrolled=this.scrollParent[0].scrollLeft+o.scrollSpeed;
            else if(event.pageX-this.overflowOffset.left<o.scrollSensitivity)
                this.scrollParent[0].scrollLeft=scrolled=this.scrollParent[0].scrollLeft-o.scrollSpeed;
        }else{
            if(event.pageY-$(document).scrollTop()<o.scrollSensitivity)
                scrolled=$(document).scrollTop($(document).scrollTop()-o.scrollSpeed);
            else if($(window).height()-(event.pageY-$(document).scrollTop())<o.scrollSensitivity)
                scrolled=$(document).scrollTop($(document).scrollTop()+o.scrollSpeed);
            if(event.pageX-$(document).scrollLeft()<o.scrollSensitivity)
                scrolled=$(document).scrollLeft($(document).scrollLeft()-o.scrollSpeed);
            else if($(window).width()-(event.pageX-$(document).scrollLeft())<o.scrollSensitivity)
                scrolled=$(document).scrollLeft($(document).scrollLeft()+o.scrollSpeed);
        }
        if(scrolled!==false&&$.ui.ddmanager&&!o.dropBehaviour)
            $.ui.ddmanager.prepareOffsets(this,event);
    }
    this.positionAbs=this._convertPositionTo("absolute");
    if(!this.options.axis||this.options.axis!="y")this.helper[0].style.left=this.position.left+'px';
    if(!this.options.axis||this.options.axis!="x")this.helper[0].style.top=this.position.top+'px';
    for(var i=this.items.length-1;i>=0;i--){
        var item=this.items[i],itemElement=item.item[0],intersection=this._intersectsWithPointer(item);
        if(!intersection)continue;
        if(item.instance!==this.currentContainer)continue;
        if(itemElement!=this.currentItem[0]&&this.placeholder[intersection==1?"next":"prev"]()[0]!=itemElement&&!$.contains(this.placeholder[0],itemElement)&&(this.options.type=='semi-dynamic'?!$.contains(this.element[0],itemElement):true)){
            this.direction=intersection==1?"down":"up";
            if(this.options.tolerance=="pointer"||this._intersectsWithSides(item)){
                this._rearrange(event,item);
            }else{
                break;
            }
            this._trigger("change",event,this._uiHash());
            break;
        }
    }
this._contactContainers(event);
    if($.ui.ddmanager)$.ui.ddmanager.drag(this,event);
    this._trigger('sort',event,this._uiHash());
    this.lastPositionAbs=this.positionAbs;
    return false;
    },
    _mouseStop:function(event,noPropagation){
        if(!event)return;
        if($.ui.ddmanager&&!this.options.dropBehaviour)
            $.ui.ddmanager.drop(this,event);
        if(this.options.revert){
            var that=this;
            var cur=this.placeholder.offset();
            this.reverting=true;
            $(this.helper).animate({
                left:cur.left-this.offset.parent.left-this.margins.left+(this.offsetParent[0]==document.body?0:this.offsetParent[0].scrollLeft),
                top:cur.top-this.offset.parent.top-this.margins.top+(this.offsetParent[0]==document.body?0:this.offsetParent[0].scrollTop)
                },parseInt(this.options.revert,10)||500,function(){
                that._clear(event);
            });
        }else{
            this._clear(event,noPropagation);
        }
        return false;
    },
    cancel:function(){
        if(this.dragging){
            this._mouseUp({
                target:null
            });
            if(this.options.helper=="original")
                this.currentItem.css(this._storedCSS).removeClass("ui-sortable-helper");else
                this.currentItem.show();
            for(var i=this.containers.length-1;i>=0;i--){
                this.containers[i]._trigger("deactivate",null,this._uiHash(this));
                if(this.containers[i].containerCache.over){
                    this.containers[i]._trigger("out",null,this._uiHash(this));
                    this.containers[i].containerCache.over=0;
                }
            }
            }
if(this.placeholder){
    if(this.placeholder[0].parentNode)this.placeholder[0].parentNode.removeChild(this.placeholder[0]);
    if(this.options.helper!="original"&&this.helper&&this.helper[0].parentNode)this.helper.remove();
    $.extend(this,{
        helper:null,
        dragging:false,
        reverting:false,
        _noFinalSort:null
    });
    if(this.domPosition.prev){
        $(this.domPosition.prev).after(this.currentItem);
    }else{
        $(this.domPosition.parent).prepend(this.currentItem);
    }
}
return this;
},
serialize:function(o){
    var items=this._getItemsAsjQuery(o&&o.connected);
    var str=[];
    o=o||{};
    
    $(items).each(function(){
        var res=($(o.item||this).attr(o.attribute||'id')||'').match(o.expression||(/(.+)[-=_](.+)/));
            if(res)str.push((o.key||res[1]+'[]')+'='+(o.key&&o.expression?res[1]:res[2]));
        });
    if(!str.length&&o.key){
        str.push(o.key+'=');
    }
    return str.join('&');
    },
    toArray:function(o){
        var items=this._getItemsAsjQuery(o&&o.connected);
        var ret=[];
        o=o||{};
        
        items.each(function(){
            ret.push($(o.item||this).attr(o.attribute||'id')||'');
        });
        return ret;
    },
    _intersectsWith:function(item){
        var x1=this.positionAbs.left,x2=x1+this.helperProportions.width,y1=this.positionAbs.top,y2=y1+this.helperProportions.height;
        var l=item.left,r=l+item.width,t=item.top,b=t+item.height;
        var dyClick=this.offset.click.top,dxClick=this.offset.click.left;
        var isOverElement=(y1+dyClick)>t&&(y1+dyClick)<b&&(x1+dxClick)>l&&(x1+dxClick)<r;
        if(this.options.tolerance=="pointer"||this.options.forcePointerForContainers||(this.options.tolerance!="pointer"&&this.helperProportions[this.floating?'width':'height']>item[this.floating?'width':'height'])){
            return isOverElement;
        }else{
            return(l<x1+(this.helperProportions.width/2)&&x2-(this.helperProportions.width/2)<r&&t<y1+(this.helperProportions.height/2)&&y2-(this.helperProportions.height/2)<b);
        }
    },
_intersectsWithPointer:function(item){
    var isOverElementHeight=(this.options.axis==='x')||$.ui.isOverAxis(this.positionAbs.top+this.offset.click.top,item.top,item.height),isOverElementWidth=(this.options.axis==='y')||$.ui.isOverAxis(this.positionAbs.left+this.offset.click.left,item.left,item.width),isOverElement=isOverElementHeight&&isOverElementWidth,verticalDirection=this._getDragVerticalDirection(),horizontalDirection=this._getDragHorizontalDirection();
    if(!isOverElement)
        return false;
    return this.floating?(((horizontalDirection&&horizontalDirection=="right")||verticalDirection=="down")?2:1):(verticalDirection&&(verticalDirection=="down"?2:1));
},
_intersectsWithSides:function(item){
    var isOverBottomHalf=$.ui.isOverAxis(this.positionAbs.top+this.offset.click.top,item.top+(item.height/2),item.height),isOverRightHalf=$.ui.isOverAxis(this.positionAbs.left+this.offset.click.left,item.left+(item.width/2),item.width),verticalDirection=this._getDragVerticalDirection(),horizontalDirection=this._getDragHorizontalDirection();
    if(this.floating&&horizontalDirection){
        return((horizontalDirection=="right"&&isOverRightHalf)||(horizontalDirection=="left"&&!isOverRightHalf));
    }else{
        return verticalDirection&&((verticalDirection=="down"&&isOverBottomHalf)||(verticalDirection=="up"&&!isOverBottomHalf));
    }
},
_getDragVerticalDirection:function(){
    var delta=this.positionAbs.top-this.lastPositionAbs.top;
    return delta!=0&&(delta>0?"down":"up");
},
_getDragHorizontalDirection:function(){
    var delta=this.positionAbs.left-this.lastPositionAbs.left;
    return delta!=0&&(delta>0?"right":"left");
},
refresh:function(event){
    this._refreshItems(event);
    this.refreshPositions();
    return this;
},
_connectWith:function(){
    var options=this.options;
    return options.connectWith.constructor==String?[options.connectWith]:options.connectWith;
},
_getItemsAsjQuery:function(connected){
    var items=[];
    var queries=[];
    var connectWith=this._connectWith();
    if(connectWith&&connected){
        for(var i=connectWith.length-1;i>=0;i--){
            var cur=$(connectWith[i]);
            for(var j=cur.length-1;j>=0;j--){
                var inst=$.data(cur[j],this.widgetName);
                if(inst&&inst!=this&&!inst.options.disabled){
                    queries.push([$.isFunction(inst.options.items)?inst.options.items.call(inst.element):$(inst.options.items,inst.element).not(".ui-sortable-helper").not('.ui-sortable-placeholder'),inst]);
                }
            };
            
    };

}
queries.push([$.isFunction(this.options.items)?this.options.items.call(this.element,null,{
    options:this.options,
    item:this.currentItem
    }):$(this.options.items,this.element).not(".ui-sortable-helper").not('.ui-sortable-placeholder'),this]);
for(var i=queries.length-1;i>=0;i--){
    queries[i][0].each(function(){
        items.push(this);
    });
};

return $(items);
},
_removeCurrentsFromItems:function(){
    var list=this.currentItem.find(":data("+this.widgetName+"-item)");
    this.items=$.grep(this.items,function(item){
        for(var j=0;j<list.length;j++){
            if(list[j]==item.item[0])
                return false;
        };
        
        return true;
    });
},
_refreshItems:function(event){
    this.items=[];
    this.containers=[this];
    var items=this.items;
    var queries=[[$.isFunction(this.options.items)?this.options.items.call(this.element[0],event,{
        item:this.currentItem
        }):$(this.options.items,this.element),this]];
    var connectWith=this._connectWith();
    if(connectWith&&this.ready){
        for(var i=connectWith.length-1;i>=0;i--){
            var cur=$(connectWith[i]);
            for(var j=cur.length-1;j>=0;j--){
                var inst=$.data(cur[j],this.widgetName);
                if(inst&&inst!=this&&!inst.options.disabled){
                    queries.push([$.isFunction(inst.options.items)?inst.options.items.call(inst.element[0],event,{
                        item:this.currentItem
                        }):$(inst.options.items,inst.element),inst]);
                    this.containers.push(inst);
                }
            };
            
    };

}
for(var i=queries.length-1;i>=0;i--){
    var targetData=queries[i][1];
    var _queries=queries[i][0];
    for(var j=0,queriesLength=_queries.length;j<queriesLength;j++){
        var item=$(_queries[j]);
        item.data(this.widgetName+'-item',targetData);
        items.push({
            item:item,
            instance:targetData,
            width:0,
            height:0,
            left:0,
            top:0
        });
    };
    
};

},
refreshPositions:function(fast){
    if(this.offsetParent&&this.helper){
        this.offset.parent=this._getParentOffset();
    }
    for(var i=this.items.length-1;i>=0;i--){
        var item=this.items[i];
        if(item.instance!=this.currentContainer&&this.currentContainer&&item.item[0]!=this.currentItem[0])
            continue;
        var t=this.options.toleranceElement?$(this.options.toleranceElement,item.item):item.item;
        if(!fast){
            item.width=t.outerWidth();
            item.height=t.outerHeight();
        }
        var p=t.offset();
        item.left=p.left;
        item.top=p.top;
    };
    
    if(this.options.custom&&this.options.custom.refreshContainers){
        this.options.custom.refreshContainers.call(this);
    }else{
        for(var i=this.containers.length-1;i>=0;i--){
            var p=this.containers[i].element.offset();
            this.containers[i].containerCache.left=p.left;
            this.containers[i].containerCache.top=p.top;
            this.containers[i].containerCache.width=this.containers[i].element.outerWidth();
            this.containers[i].containerCache.height=this.containers[i].element.outerHeight();
        };
        
}
return this;
},
_createPlaceholder:function(that){
    that=that||this;
    var o=that.options;
    if(!o.placeholder||o.placeholder.constructor==String){
        var className=o.placeholder;
        o.placeholder={
            element:function(){
                var el=$(document.createElement(that.currentItem[0].nodeName)).addClass(className||that.currentItem[0].className+" ui-sortable-placeholder").removeClass("ui-sortable-helper")[0];
                if(!className)
                    el.style.visibility="hidden";
                return el;
            },
            update:function(container,p){
                if(className&&!o.forcePlaceholderSize)return;
                if(!p.height()){
                    p.height(that.currentItem.innerHeight()-parseInt(that.currentItem.css('paddingTop')||0,10)-parseInt(that.currentItem.css('paddingBottom')||0,10));
                };
                
                if(!p.width()){
                    p.width(that.currentItem.innerWidth()-parseInt(that.currentItem.css('paddingLeft')||0,10)-parseInt(that.currentItem.css('paddingRight')||0,10));
                };
            
        }
    };

}
that.placeholder=$(o.placeholder.element.call(that.element,that.currentItem));
that.currentItem.after(that.placeholder);
o.placeholder.update(that,that.placeholder);
},
_contactContainers:function(event){
    var innermostContainer=null,innermostIndex=null;
    for(var i=this.containers.length-1;i>=0;i--){
        if($.contains(this.currentItem[0],this.containers[i].element[0]))
            continue;
        if(this._intersectsWith(this.containers[i].containerCache)){
            if(innermostContainer&&$.contains(this.containers[i].element[0],innermostContainer.element[0]))
                continue;
            innermostContainer=this.containers[i];
            innermostIndex=i;
        }else{
            if(this.containers[i].containerCache.over){
                this.containers[i]._trigger("out",event,this._uiHash(this));
                this.containers[i].containerCache.over=0;
            }
        }
    }
if(!innermostContainer)return;
if(this.containers.length===1){
    this.containers[innermostIndex]._trigger("over",event,this._uiHash(this));
    this.containers[innermostIndex].containerCache.over=1;
}else{
    var dist=10000;
    var itemWithLeastDistance=null;
    var posProperty=this.containers[innermostIndex].floating?'left':'top';
    var sizeProperty=this.containers[innermostIndex].floating?'width':'height';
    var base=this.positionAbs[posProperty]+this.offset.click[posProperty];
    for(var j=this.items.length-1;j>=0;j--){
        if(!$.contains(this.containers[innermostIndex].element[0],this.items[j].item[0]))continue;
        if(this.items[j].item[0]==this.currentItem[0])continue;
        var cur=this.items[j].item.offset()[posProperty];
        var nearBottom=false;
        if(Math.abs(cur-base)>Math.abs(cur+this.items[j][sizeProperty]-base)){
            nearBottom=true;
            cur+=this.items[j][sizeProperty];
        }
        if(Math.abs(cur-base)<dist){
            dist=Math.abs(cur-base);
            itemWithLeastDistance=this.items[j];
            this.direction=nearBottom?"up":"down";
        }
    }
if(!itemWithLeastDistance&&!this.options.dropOnEmpty)
    return;
this.currentContainer=this.containers[innermostIndex];
itemWithLeastDistance?this._rearrange(event,itemWithLeastDistance,null,true):this._rearrange(event,null,this.containers[innermostIndex].element,true);
this._trigger("change",event,this._uiHash());
this.containers[innermostIndex]._trigger("change",event,this._uiHash(this));
this.options.placeholder.update(this.currentContainer,this.placeholder);
this.containers[innermostIndex]._trigger("over",event,this._uiHash(this));
this.containers[innermostIndex].containerCache.over=1;
}
},
_createHelper:function(event){
    var o=this.options;
    var helper=$.isFunction(o.helper)?$(o.helper.apply(this.element[0],[event,this.currentItem])):(o.helper=='clone'?this.currentItem.clone():this.currentItem);
    if(!helper.parents('body').length)
        $(o.appendTo!='parent'?o.appendTo:this.currentItem[0].parentNode)[0].appendChild(helper[0]);
    if(helper[0]==this.currentItem[0])
        this._storedCSS={
            width:this.currentItem[0].style.width,
            height:this.currentItem[0].style.height,
            position:this.currentItem.css("position"),
            top:this.currentItem.css("top"),
            left:this.currentItem.css("left")
            };
            
    if(helper[0].style.width==''||o.forceHelperSize)helper.width(this.currentItem.width());
    if(helper[0].style.height==''||o.forceHelperSize)helper.height(this.currentItem.height());
    return helper;
},
_adjustOffsetFromHelper:function(obj){
    if(typeof obj=='string'){
        obj=obj.split(' ');
    }
    if($.isArray(obj)){
        obj={
            left:+obj[0],
            top:+obj[1]||0
            };
        
}
if('left'in obj){
    this.offset.click.left=obj.left+this.margins.left;
}
if('right'in obj){
    this.offset.click.left=this.helperProportions.width-obj.right+this.margins.left;
}
if('top'in obj){
    this.offset.click.top=obj.top+this.margins.top;
}
if('bottom'in obj){
    this.offset.click.top=this.helperProportions.height-obj.bottom+this.margins.top;
}
},
_getParentOffset:function(){
    this.offsetParent=this.helper.offsetParent();
    var po=this.offsetParent.offset();
    if(this.cssPosition=='absolute'&&this.scrollParent[0]!=document&&$.contains(this.scrollParent[0],this.offsetParent[0])){
        po.left+=this.scrollParent.scrollLeft();
        po.top+=this.scrollParent.scrollTop();
    }
    if((this.offsetParent[0]==document.body)||(this.offsetParent[0].tagName&&this.offsetParent[0].tagName.toLowerCase()=='html'&&$.ui.ie))
        po={
            top:0,
            left:0
        };
        
    return{
        top:po.top+(parseInt(this.offsetParent.css("borderTopWidth"),10)||0),
        left:po.left+(parseInt(this.offsetParent.css("borderLeftWidth"),10)||0)
        };
    
},
_getRelativeOffset:function(){
    if(this.cssPosition=="relative"){
        var p=this.currentItem.position();
        return{
            top:p.top-(parseInt(this.helper.css("top"),10)||0)+this.scrollParent.scrollTop(),
            left:p.left-(parseInt(this.helper.css("left"),10)||0)+this.scrollParent.scrollLeft()
            };
        
}else{
    return{
        top:0,
        left:0
    };

}
},
_cacheMargins:function(){
    this.margins={
        left:(parseInt(this.currentItem.css("marginLeft"),10)||0),
        top:(parseInt(this.currentItem.css("marginTop"),10)||0)
        };
    
},
_cacheHelperProportions:function(){
    this.helperProportions={
        width:this.helper.outerWidth(),
        height:this.helper.outerHeight()
        };
    
},
_setContainment:function(){
    var o=this.options;
    if(o.containment=='parent')o.containment=this.helper[0].parentNode;
    if(o.containment=='document'||o.containment=='window')this.containment=[0-this.offset.relative.left-this.offset.parent.left,0-this.offset.relative.top-this.offset.parent.top,$(o.containment=='document'?document:window).width()-this.helperProportions.width-this.margins.left,($(o.containment=='document'?document:window).height()||document.body.parentNode.scrollHeight)-this.helperProportions.height-this.margins.top];
    if(!(/^(document|window|parent)$/).test(o.containment)){
        var ce=$(o.containment)[0];
        var co=$(o.containment).offset();
        var over=($(ce).css("overflow")!='hidden');
        this.containment=[co.left+(parseInt($(ce).css("borderLeftWidth"),10)||0)+(parseInt($(ce).css("paddingLeft"),10)||0)-this.margins.left,co.top+(parseInt($(ce).css("borderTopWidth"),10)||0)+(parseInt($(ce).css("paddingTop"),10)||0)-this.margins.top,co.left+(over?Math.max(ce.scrollWidth,ce.offsetWidth):ce.offsetWidth)-(parseInt($(ce).css("borderLeftWidth"),10)||0)-(parseInt($(ce).css("paddingRight"),10)||0)-this.helperProportions.width-this.margins.left,co.top+(over?Math.max(ce.scrollHeight,ce.offsetHeight):ce.offsetHeight)-(parseInt($(ce).css("borderTopWidth"),10)||0)-(parseInt($(ce).css("paddingBottom"),10)||0)-this.helperProportions.height-this.margins.top];
    }
},
_convertPositionTo:function(d,pos){
    if(!pos)pos=this.position;
    var mod=d=="absolute"?1:-1;
    var o=this.options,scroll=this.cssPosition=='absolute'&&!(this.scrollParent[0]!=document&&$.contains(this.scrollParent[0],this.offsetParent[0]))?this.offsetParent:this.scrollParent,scrollIsRootNode=(/(html|body)/i).test(scroll[0].tagName);
    return{
        top:(pos.top
            +this.offset.relative.top*mod
            +this.offset.parent.top*mod
            -((this.cssPosition=='fixed'?-this.scrollParent.scrollTop():(scrollIsRootNode?0:scroll.scrollTop()))*mod)),
        left:(pos.left
            +this.offset.relative.left*mod
            +this.offset.parent.left*mod
            -((this.cssPosition=='fixed'?-this.scrollParent.scrollLeft():scrollIsRootNode?0:scroll.scrollLeft())*mod))
        };
    
},
_generatePosition:function(event){
    var o=this.options,scroll=this.cssPosition=='absolute'&&!(this.scrollParent[0]!=document&&$.contains(this.scrollParent[0],this.offsetParent[0]))?this.offsetParent:this.scrollParent,scrollIsRootNode=(/(html|body)/i).test(scroll[0].tagName);
    if(this.cssPosition=='relative'&&!(this.scrollParent[0]!=document&&this.scrollParent[0]!=this.offsetParent[0])){
        this.offset.relative=this._getRelativeOffset();
    }
    var pageX=event.pageX;
    var pageY=event.pageY;
    if(this.originalPosition){
        if(this.containment){
            if(event.pageX-this.offset.click.left<this.containment[0])pageX=this.containment[0]+this.offset.click.left;
            if(event.pageY-this.offset.click.top<this.containment[1])pageY=this.containment[1]+this.offset.click.top;
            if(event.pageX-this.offset.click.left>this.containment[2])pageX=this.containment[2]+this.offset.click.left;
            if(event.pageY-this.offset.click.top>this.containment[3])pageY=this.containment[3]+this.offset.click.top;
        }
        if(o.grid){
            var top=this.originalPageY+Math.round((pageY-this.originalPageY)/o.grid[1])*o.grid[1];
            pageY=this.containment?(!(top-this.offset.click.top<this.containment[1]||top-this.offset.click.top>this.containment[3])?top:(!(top-this.offset.click.top<this.containment[1])?top-o.grid[1]:top+o.grid[1])):top;
            var left=this.originalPageX+Math.round((pageX-this.originalPageX)/o.grid[0])*o.grid[0];
            pageX=this.containment?(!(left-this.offset.click.left<this.containment[0]||left-this.offset.click.left>this.containment[2])?left:(!(left-this.offset.click.left<this.containment[0])?left-o.grid[0]:left+o.grid[0])):left;
        }
    }
return{
    top:(pageY
        -this.offset.click.top
        -this.offset.relative.top
        -this.offset.parent.top
        +((this.cssPosition=='fixed'?-this.scrollParent.scrollTop():(scrollIsRootNode?0:scroll.scrollTop())))),
    left:(pageX
        -this.offset.click.left
        -this.offset.relative.left
        -this.offset.parent.left
        +((this.cssPosition=='fixed'?-this.scrollParent.scrollLeft():scrollIsRootNode?0:scroll.scrollLeft())))
    };

},
_rearrange:function(event,i,a,hardRefresh){
    a?a[0].appendChild(this.placeholder[0]):i.item[0].parentNode.insertBefore(this.placeholder[0],(this.direction=='down'?i.item[0]:i.item[0].nextSibling));
    this.counter=this.counter?++this.counter:1;
    var counter=this.counter;
    this._delay(function(){
        if(counter==this.counter)this.refreshPositions(!hardRefresh);
    });
},
_clear:function(event,noPropagation){
    this.reverting=false;
    var delayedTriggers=[];
    if(!this._noFinalSort&&this.currentItem.parent().length)this.placeholder.before(this.currentItem);
    this._noFinalSort=null;
    if(this.helper[0]==this.currentItem[0]){
        for(var i in this._storedCSS){
            if(this._storedCSS[i]=='auto'||this._storedCSS[i]=='static')this._storedCSS[i]='';
        }
        this.currentItem.css(this._storedCSS).removeClass("ui-sortable-helper");
    }else{
        this.currentItem.show();
    }
    if(this.fromOutside&&!noPropagation)delayedTriggers.push(function(event){
        this._trigger("receive",event,this._uiHash(this.fromOutside));
    });
    if((this.fromOutside||this.domPosition.prev!=this.currentItem.prev().not(".ui-sortable-helper")[0]||this.domPosition.parent!=this.currentItem.parent()[0])&&!noPropagation)delayedTriggers.push(function(event){
        this._trigger("update",event,this._uiHash());
    });
    if(this!==this.currentContainer){
        if(!noPropagation){
            delayedTriggers.push(function(event){
                this._trigger("remove",event,this._uiHash());
            });
            delayedTriggers.push((function(c){
                return function(event){
                    c._trigger("receive",event,this._uiHash(this));
                };
            
            }).call(this,this.currentContainer));
        delayedTriggers.push((function(c){
            return function(event){
                c._trigger("update",event,this._uiHash(this));
            };
        
        }).call(this,this.currentContainer));
}
}
for(var i=this.containers.length-1;i>=0;i--){
    if(!noPropagation)delayedTriggers.push((function(c){
        return function(event){
            c._trigger("deactivate",event,this._uiHash(this));
        };
    
    }).call(this,this.containers[i]));
if(this.containers[i].containerCache.over){
    delayedTriggers.push((function(c){
        return function(event){
            c._trigger("out",event,this._uiHash(this));
        };
    
    }).call(this,this.containers[i]));
this.containers[i].containerCache.over=0;
}
}
if(this._storedCursor)$('body').css("cursor",this._storedCursor);
if(this._storedOpacity)this.helper.css("opacity",this._storedOpacity);
if(this._storedZIndex)this.helper.css("zIndex",this._storedZIndex=='auto'?'':this._storedZIndex);
this.dragging=false;
if(this.cancelHelperRemoval){
    if(!noPropagation){
        this._trigger("beforeStop",event,this._uiHash());
        for(var i=0;i<delayedTriggers.length;i++){
            delayedTriggers[i].call(this,event);
        };
        
        this._trigger("stop",event,this._uiHash());
    }
    this.fromOutside=false;
    return false;
}
if(!noPropagation)this._trigger("beforeStop",event,this._uiHash());
this.placeholder[0].parentNode.removeChild(this.placeholder[0]);
if(this.helper[0]!=this.currentItem[0])this.helper.remove();
this.helper=null;
if(!noPropagation){
    for(var i=0;i<delayedTriggers.length;i++){
        delayedTriggers[i].call(this,event);
    };
    
    this._trigger("stop",event,this._uiHash());
}
this.fromOutside=false;
return true;
},
_trigger:function(){
    if($.Widget.prototype._trigger.apply(this,arguments)===false){
        this.cancel();
    }
},
_uiHash:function(_inst){
    var inst=_inst||this;
    return{
        helper:inst.helper,
        placeholder:inst.placeholder||$([]),
        position:inst.position,
        originalPosition:inst.originalPosition,
        offset:inst.positionAbs,
        item:inst.currentItem,
        sender:_inst?_inst.element:null
        };
    
}
});
})(jQuery);
(function($,undefined){
    var uid=0,hideProps={},showProps={};
    
    hideProps.height=hideProps.paddingTop=hideProps.paddingBottom=hideProps.borderTopWidth=hideProps.borderBottomWidth="hide";
    showProps.height=showProps.paddingTop=showProps.paddingBottom=showProps.borderTopWidth=showProps.borderBottomWidth="show";
    $.widget("ui.accordion",{
        version:"1.9.1",
        options:{
            active:0,
            animate:{},
            collapsible:false,
            event:"click",
            header:"> li > :first-child,> :not(li):even",
            heightStyle:"auto",
            icons:{
                activeHeader:"ui-icon-triangle-1-s",
                header:"ui-icon-triangle-1-e"
            },
            activate:null,
            beforeActivate:null
        },
        _create:function(){
            var accordionId=this.accordionId="ui-accordion-"+
            (this.element.attr("id")||++uid),options=this.options;
            this.prevShow=this.prevHide=$();
            this.element.addClass("ui-accordion ui-widget ui-helper-reset");
            this.headers=this.element.find(options.header).addClass("ui-accordion-header ui-helper-reset ui-state-default ui-corner-all");
            this._hoverable(this.headers);
            this._focusable(this.headers);
            this.headers.next().addClass("ui-accordion-content ui-helper-reset ui-widget-content ui-corner-bottom").hide();
            if(!options.collapsible&&(options.active===false||options.active==null)){
                options.active=0;
            }
            if(options.active<0){
                options.active+=this.headers.length;
            }
            this.active=this._findActive(options.active).addClass("ui-accordion-header-active ui-state-active").toggleClass("ui-corner-all ui-corner-top");
            this.active.next().addClass("ui-accordion-content-active").show();
            this._createIcons();
            this.refresh();
            this.element.attr("role","tablist");
            this.headers.attr("role","tab").each(function(i){
                var header=$(this),headerId=header.attr("id"),panel=header.next(),panelId=panel.attr("id");
                if(!headerId){
                    headerId=accordionId+"-header-"+i;
                    header.attr("id",headerId);
                }
                if(!panelId){
                    panelId=accordionId+"-panel-"+i;
                    panel.attr("id",panelId);
                }
                header.attr("aria-controls",panelId);
                panel.attr("aria-labelledby",headerId);
            }).next().attr("role","tabpanel");
            this.headers.not(this.active).attr({
                "aria-selected":"false",
                tabIndex:-1
            }).next().attr({
                "aria-expanded":"false",
                "aria-hidden":"true"
            }).hide();
            if(!this.active.length){
                this.headers.eq(0).attr("tabIndex",0);
            }else{
                this.active.attr({
                    "aria-selected":"true",
                    tabIndex:0
                }).next().attr({
                    "aria-expanded":"true",
                    "aria-hidden":"false"
                });
            }
            this._on(this.headers,{
                keydown:"_keydown"
            });
            this._on(this.headers.next(),{
                keydown:"_panelKeyDown"
            });
            this._setupEvents(options.event);
        },
        _getCreateEventData:function(){
            return{
                header:this.active,
                content:!this.active.length?$():this.active.next()
                };
            
    },
    _createIcons:function(){
        var icons=this.options.icons;
        if(icons){
            $("<span>").addClass("ui-accordion-header-icon ui-icon "+icons.header).prependTo(this.headers);
            this.active.children(".ui-accordion-header-icon").removeClass(icons.header).addClass(icons.activeHeader);
            this.headers.addClass("ui-accordion-icons");
        }
    },
    _destroyIcons:function(){
        this.headers.removeClass("ui-accordion-icons").children(".ui-accordion-header-icon").remove();
    },
    _destroy:function(){
        var contents;
        this.element.removeClass("ui-accordion ui-widget ui-helper-reset").removeAttr("role");
        this.headers.removeClass("ui-accordion-header ui-accordion-header-active ui-helper-reset ui-state-default ui-corner-all ui-state-active ui-state-disabled ui-corner-top").removeAttr("role").removeAttr("aria-selected").removeAttr("aria-controls").removeAttr("tabIndex").each(function(){
            if(/^ui-accordion/.test(this.id)){
                this.removeAttribute("id");
            }
        });
    this._destroyIcons();
    contents=this.headers.next().css("display","").removeAttr("role").removeAttr("aria-expanded").removeAttr("aria-hidden").removeAttr("aria-labelledby").removeClass("ui-helper-reset ui-widget-content ui-corner-bottom ui-accordion-content ui-accordion-content-active ui-state-disabled").each(function(){
        if(/^ui-accordion/.test(this.id)){
            this.removeAttribute("id");
        }
    });
if(this.options.heightStyle!=="content"){
    contents.css("height","");
}
},
_setOption:function(key,value){
    if(key==="active"){
        this._activate(value);
        return;
    }
    if(key==="event"){
        if(this.options.event){
            this._off(this.headers,this.options.event);
        }
        this._setupEvents(value);
    }
    this._super(key,value);
    if(key==="collapsible"&&!value&&this.options.active===false){
        this._activate(0);
    }
    if(key==="icons"){
        this._destroyIcons();
        if(value){
            this._createIcons();
        }
    }
if(key==="disabled"){
    this.headers.add(this.headers.next()).toggleClass("ui-state-disabled",!!value);
}
},
_keydown:function(event){
    if(event.altKey||event.ctrlKey){
        return;
    }
    var keyCode=$.ui.keyCode,length=this.headers.length,currentIndex=this.headers.index(event.target),toFocus=false;
    switch(event.keyCode){
        case keyCode.RIGHT:case keyCode.DOWN:
            toFocus=this.headers[(currentIndex+1)%length];
            break;
        case keyCode.LEFT:case keyCode.UP:
            toFocus=this.headers[(currentIndex-1+length)%length];
            break;
        case keyCode.SPACE:case keyCode.ENTER:
            this._eventHandler(event);
            break;
        case keyCode.HOME:
            toFocus=this.headers[0];
            break;
        case keyCode.END:
            toFocus=this.headers[length-1];
            break;
    }
    if(toFocus){
        $(event.target).attr("tabIndex",-1);
        $(toFocus).attr("tabIndex",0);
        toFocus.focus();
        event.preventDefault();
    }
},
_panelKeyDown:function(event){
    if(event.keyCode===$.ui.keyCode.UP&&event.ctrlKey){
        $(event.currentTarget).prev().focus();
    }
},
refresh:function(){
    var maxHeight,overflow,heightStyle=this.options.heightStyle,parent=this.element.parent();
    if(heightStyle==="fill"){
        if(!$.support.minHeight){
            overflow=parent.css("overflow");
            parent.css("overflow","hidden");
        }
        maxHeight=parent.height();
        this.element.siblings(":visible").each(function(){
            var elem=$(this),position=elem.css("position");
            if(position==="absolute"||position==="fixed"){
                return;
            }
            maxHeight-=elem.outerHeight(true);
        });
        if(overflow){
            parent.css("overflow",overflow);
        }
        this.headers.each(function(){
            maxHeight-=$(this).outerHeight(true);
        });
        this.headers.next().each(function(){
            $(this).height(Math.max(0,maxHeight-
                $(this).innerHeight()+$(this).height()));
        }).css("overflow","auto");
    }else if(heightStyle==="auto"){
        maxHeight=0;
        this.headers.next().each(function(){
            maxHeight=Math.max(maxHeight,$(this).height("").height());
        }).height(maxHeight);
    }
},
_activate:function(index){
    var active=this._findActive(index)[0];
    if(active===this.active[0]){
        return;
    }
    active=active||this.active[0];
    this._eventHandler({
        target:active,
        currentTarget:active,
        preventDefault:$.noop
        });
},
_findActive:function(selector){
    return typeof selector==="number"?this.headers.eq(selector):$();
},
_setupEvents:function(event){
    var events={};
    
    if(!event){
        return;
    }
    $.each(event.split(" "),function(index,eventName){
        events[eventName]="_eventHandler";
    });
    this._on(this.headers,events);
},
_eventHandler:function(event){
    var options=this.options,active=this.active,clicked=$(event.currentTarget),clickedIsActive=clicked[0]===active[0],collapsing=clickedIsActive&&options.collapsible,toShow=collapsing?$():clicked.next(),toHide=active.next(),eventData={
        oldHeader:active,
        oldPanel:toHide,
        newHeader:collapsing?$():clicked,
        newPanel:toShow
    };
    
    event.preventDefault();
    if((clickedIsActive&&!options.collapsible)||(this._trigger("beforeActivate",event,eventData)===false)){
        return;
    }
    options.active=collapsing?false:this.headers.index(clicked);
    this.active=clickedIsActive?$():clicked;
    this._toggle(eventData);
    active.removeClass("ui-accordion-header-active ui-state-active");
    if(options.icons){
        active.children(".ui-accordion-header-icon").removeClass(options.icons.activeHeader).addClass(options.icons.header);
    }
    if(!clickedIsActive){
        clicked.removeClass("ui-corner-all").addClass("ui-accordion-header-active ui-state-active ui-corner-top");
        if(options.icons){
            clicked.children(".ui-accordion-header-icon").removeClass(options.icons.header).addClass(options.icons.activeHeader);
        }
        clicked.next().addClass("ui-accordion-content-active");
    }
},
_toggle:function(data){
    var toShow=data.newPanel,toHide=this.prevShow.length?this.prevShow:data.oldPanel;
    this.prevShow.add(this.prevHide).stop(true,true);
    this.prevShow=toShow;
    this.prevHide=toHide;
    if(this.options.animate){
        this._animate(toShow,toHide,data);
    }else{
        toHide.hide();
        toShow.show();
        this._toggleComplete(data);
    }
    toHide.attr({
        "aria-expanded":"false",
        "aria-hidden":"true"
    });
    toHide.prev().attr("aria-selected","false");
    if(toShow.length&&toHide.length){
        toHide.prev().attr("tabIndex",-1);
    }else if(toShow.length){
        this.headers.filter(function(){
            return $(this).attr("tabIndex")===0;
        }).attr("tabIndex",-1);
    }
    toShow.attr({
        "aria-expanded":"true",
        "aria-hidden":"false"
    }).prev().attr({
        "aria-selected":"true",
        tabIndex:0
    });
},
_animate:function(toShow,toHide,data){
    var total,easing,duration,that=this,adjust=0,down=toShow.length&&(!toHide.length||(toShow.index()<toHide.index())),animate=this.options.animate||{},options=down&&animate.down||animate,complete=function(){
        that._toggleComplete(data);
    };
    
    if(typeof options==="number"){
        duration=options;
    }
    if(typeof options==="string"){
        easing=options;
    }
    easing=easing||options.easing||animate.easing;
    duration=duration||options.duration||animate.duration;
    if(!toHide.length){
        return toShow.animate(showProps,duration,easing,complete);
    }
    if(!toShow.length){
        return toHide.animate(hideProps,duration,easing,complete);
    }
    total=toShow.show().outerHeight();
    toHide.animate(hideProps,{
        duration:duration,
        easing:easing,
        step:function(now,fx){
            fx.now=Math.round(now);
        }
    });
toShow.hide().animate(showProps,{
    duration:duration,
    easing:easing,
    complete:complete,
    step:function(now,fx){
        fx.now=Math.round(now);
        if(fx.prop!=="height"){
            adjust+=fx.now;
        }else if(that.options.heightStyle!=="content"){
            fx.now=Math.round(total-toHide.outerHeight()-adjust);
            adjust=0;
        }
    }
});
},
_toggleComplete:function(data){
    var toHide=data.oldPanel;
    toHide.removeClass("ui-accordion-content-active").prev().removeClass("ui-corner-top").addClass("ui-corner-all");
    if(toHide.length){
        toHide.parent()[0].className=toHide.parent()[0].className;
    }
    this._trigger("activate",null,data);
}
});
if($.uiBackCompat!==false){
    (function($,prototype){
        $.extend(prototype.options,{
            navigation:false,
            navigationFilter:function(){
                return this.href.toLowerCase()===location.href.toLowerCase();
            }
        });
    var _create=prototype._create;
    prototype._create=function(){
        if(this.options.navigation){
            var that=this,headers=this.element.find(this.options.header),content=headers.next(),current=headers.add(content).find("a").filter(this.options.navigationFilter)
            [0];
            if(current){
                headers.add(content).each(function(index){
                    if($.contains(this,current)){
                        that.options.active=Math.floor(index/2);
                        return false;
                    }
                });
        }
    }
    _create.call(this);
};

}(jQuery,jQuery.ui.accordion.prototype));
(function($,prototype){
    $.extend(prototype.options,{
        heightStyle:null,
        autoHeight:true,
        clearStyle:false,
        fillSpace:false
    });
    var _create=prototype._create,_setOption=prototype._setOption;
    $.extend(prototype,{
        _create:function(){
            this.options.heightStyle=this.options.heightStyle||this._mergeHeightStyle();
            _create.call(this);
        },
        _setOption:function(key){
            if(key==="autoHeight"||key==="clearStyle"||key==="fillSpace"){
                this.options.heightStyle=this._mergeHeightStyle();
            }
            _setOption.apply(this,arguments);
        },
        _mergeHeightStyle:function(){
            var options=this.options;
            if(options.fillSpace){
                return"fill";
            }
            if(options.clearStyle){
                return"content";
            }
            if(options.autoHeight){
                return"auto";
            }
        }
    });
}(jQuery,jQuery.ui.accordion.prototype));
(function($,prototype){
    $.extend(prototype.options.icons,{
        activeHeader:null,
        headerSelected:"ui-icon-triangle-1-s"
    });
    var _createIcons=prototype._createIcons;
    prototype._createIcons=function(){
        if(this.options.icons){
            this.options.icons.activeHeader=this.options.icons.activeHeader||this.options.icons.headerSelected;
        }
        _createIcons.call(this);
    };

}(jQuery,jQuery.ui.accordion.prototype));
(function($,prototype){
    prototype.activate=prototype._activate;
    var _findActive=prototype._findActive;
    prototype._findActive=function(index){
        if(index===-1){
            index=false;
        }
        if(index&&typeof index!=="number"){
            index=this.headers.index(this.headers.filter(index));
            if(index===-1){
                index=false;
            }
        }
    return _findActive.call(this,index);
};

}(jQuery,jQuery.ui.accordion.prototype));
jQuery.ui.accordion.prototype.resize=jQuery.ui.accordion.prototype.refresh;
(function($,prototype){
    $.extend(prototype.options,{
        change:null,
        changestart:null
    });
    var _trigger=prototype._trigger;
    prototype._trigger=function(type,event,data){
        var ret=_trigger.apply(this,arguments);
        if(!ret){
            return false;
        }
        if(type==="beforeActivate"){
            ret=_trigger.call(this,"changestart",event,{
                oldHeader:data.oldHeader,
                oldContent:data.oldPanel,
                newHeader:data.newHeader,
                newContent:data.newPanel
                });
        }else if(type==="activate"){
            ret=_trigger.call(this,"change",event,{
                oldHeader:data.oldHeader,
                oldContent:data.oldPanel,
                newHeader:data.newHeader,
                newContent:data.newPanel
                });
        }
        return ret;
    };

}(jQuery,jQuery.ui.accordion.prototype));
(function($,prototype){
    $.extend(prototype.options,{
        animate:null,
        animated:"slide"
    });
    var _create=prototype._create;
    prototype._create=function(){
        var options=this.options;
        if(options.animate===null){
            if(!options.animated){
                options.animate=false;
            }else if(options.animated==="slide"){
                options.animate=300;
            }else if(options.animated==="bounceslide"){
                options.animate={
                    duration:200,
                    down:{
                        easing:"easeOutBounce",
                        duration:1000
                    }
                };
            
    }else{
        options.animate=options.animated;
    }
}
_create.call(this);
};

}(jQuery,jQuery.ui.accordion.prototype));
}
})(jQuery);
(function($,undefined){
    var requestIndex=0;
    $.widget("ui.autocomplete",{
        version:"1.9.1",
        defaultElement:"<input>",
        options:{
            appendTo:"body",
            autoFocus:false,
            delay:300,
            minLength:1,
            position:{
                my:"left top",
                at:"left bottom",
                collision:"none"
            },
            source:null,
            change:null,
            close:null,
            focus:null,
            open:null,
            response:null,
            search:null,
            select:null
        },
        pending:0,
        _create:function(){
            var suppressKeyPress,suppressKeyPressRepeat,suppressInput;
            this.isMultiLine=this._isMultiLine();
            this.valueMethod=this.element[this.element.is("input,textarea")?"val":"text"];
            this.isNewMenu=true;
            this.element.addClass("ui-autocomplete-input").attr("autocomplete","off");
            this._on(this.element,{
                keydown:function(event){
                    if(this.element.prop("readOnly")){
                        suppressKeyPress=true;
                        suppressInput=true;
                        suppressKeyPressRepeat=true;
                        return;
                    }
                    suppressKeyPress=false;
                    suppressInput=false;
                    suppressKeyPressRepeat=false;
                    var keyCode=$.ui.keyCode;
                    switch(event.keyCode){
                        case keyCode.PAGE_UP:
                            suppressKeyPress=true;
                            this._move("previousPage",event);
                            break;
                        case keyCode.PAGE_DOWN:
                            suppressKeyPress=true;
                            this._move("nextPage",event);
                            break;
                        case keyCode.UP:
                            suppressKeyPress=true;
                            this._keyEvent("previous",event);
                            break;
                        case keyCode.DOWN:
                            suppressKeyPress=true;
                            this._keyEvent("next",event);
                            break;
                        case keyCode.ENTER:case keyCode.NUMPAD_ENTER:
                            if(this.menu.active){
                            suppressKeyPress=true;
                            event.preventDefault();
                            this.menu.select(event);
                        }
                        break;
                        case keyCode.TAB:
                            if(this.menu.active){
                            this.menu.select(event);
                        }
                        break;
                        case keyCode.ESCAPE:
                            if(this.menu.element.is(":visible")){
                            this._value(this.term);
                            this.close(event);
                            event.preventDefault();
                        }
                        break;
                        default:
                            suppressKeyPressRepeat=true;
                            this._searchTimeout(event);
                            break;
                    }
                },
            keypress:function(event){
                if(suppressKeyPress){
                    suppressKeyPress=false;
                    event.preventDefault();
                    return;
                }
                if(suppressKeyPressRepeat){
                    return;
                }
                var keyCode=$.ui.keyCode;
                switch(event.keyCode){
                    case keyCode.PAGE_UP:
                        this._move("previousPage",event);
                        break;
                    case keyCode.PAGE_DOWN:
                        this._move("nextPage",event);
                        break;
                    case keyCode.UP:
                        this._keyEvent("previous",event);
                        break;
                    case keyCode.DOWN:
                        this._keyEvent("next",event);
                        break;
                }
            },
            input:function(event){
                if(suppressInput){
                    suppressInput=false;
                    event.preventDefault();
                    return;
                }
                this._searchTimeout(event);
            },
            focus:function(){
                this.selectedItem=null;
                this.previous=this._value();
            },
            blur:function(event){
                if(this.cancelBlur){
                    delete this.cancelBlur;
                    return;
                }
                clearTimeout(this.searching);
                this.close(event);
                this._change(event);
            }
        });
    this._initSource();
    this.menu=$("<ul>").addClass("ui-autocomplete").appendTo(this.document.find(this.options.appendTo||"body")[0]).menu({
        input:$(),
        role:null
    }).zIndex(this.element.zIndex()+1).hide().data("menu");
    this._on(this.menu.element,{
        mousedown:function(event){
            event.preventDefault();
            this.cancelBlur=true;
            this._delay(function(){
                delete this.cancelBlur;
            });
            var menuElement=this.menu.element[0];
            if(!$(event.target).closest(".ui-menu-item").length){
                this._delay(function(){
                    var that=this;
                    this.document.one("mousedown",function(event){
                        if(event.target!==that.element[0]&&event.target!==menuElement&&!$.contains(menuElement,event.target)){
                            that.close();
                        }
                    });
                });
        }
    },
    menufocus:function(event,ui){
        if(this.isNewMenu){
            this.isNewMenu=false;
            if(event.originalEvent&&/^mouse/.test(event.originalEvent.type)){
                this.menu.blur();
                this.document.one("mousemove",function(){
                    $(event.target).trigger(event.originalEvent);
                });
                return;
            }
        }
    var item=ui.item.data("ui-autocomplete-item")||ui.item.data("item.autocomplete");
    if(false!==this._trigger("focus",event,{
        item:item
    })){
        if(event.originalEvent&&/^key/.test(event.originalEvent.type)){
            this._value(item.value);
        }
    }else{
    this.liveRegion.text(item.value);
}
},
menuselect:function(event,ui){
    var item=ui.item.data("ui-autocomplete-item")||ui.item.data("item.autocomplete"),previous=this.previous;
    if(this.element[0]!==this.document[0].activeElement){
        this.element.focus();
        this.previous=previous;
        this._delay(function(){
            this.previous=previous;
            this.selectedItem=item;
        });
    }
    if(false!==this._trigger("select",event,{
        item:item
    })){
        this._value(item.value);
    }
    this.term=this._value();
    this.close(event);
    this.selectedItem=item;
}
});
this.liveRegion=$("<span>",{
    role:"status",
    "aria-live":"polite"
}).addClass("ui-helper-hidden-accessible").insertAfter(this.element);
if($.fn.bgiframe){
    this.menu.element.bgiframe();
}
this._on(this.window,{
    beforeunload:function(){
        this.element.removeAttr("autocomplete");
    }
});
},
_destroy:function(){
    clearTimeout(this.searching);
    this.element.removeClass("ui-autocomplete-input").removeAttr("autocomplete");
    this.menu.element.remove();
    this.liveRegion.remove();
},
_setOption:function(key,value){
    this._super(key,value);
    if(key==="source"){
        this._initSource();
    }
    if(key==="appendTo"){
        this.menu.element.appendTo(this.document.find(value||"body")[0]);
    }
    if(key==="disabled"&&value&&this.xhr){
        this.xhr.abort();
    }
},
_isMultiLine:function(){
    if(this.element.is("textarea")){
        return true;
    }
    if(this.element.is("input")){
        return false;
    }
    return this.element.prop("isContentEditable");
},
_initSource:function(){
    var array,url,that=this;
    if($.isArray(this.options.source)){
        array=this.options.source;
        this.source=function(request,response){
            response($.ui.autocomplete.filter(array,request.term));
        };
    
}else if(typeof this.options.source==="string"){
    url=this.options.source;
    this.source=function(request,response){
        if(that.xhr){
            that.xhr.abort();
        }
        that.xhr=$.ajax({
            url:url,
            data:request,
            dataType:"json",
            success:function(data){
                response(data);
            },
            error:function(){
                response([]);
            }
        });
};

}else{
    this.source=this.options.source;
}
},
_searchTimeout:function(event){
    clearTimeout(this.searching);
    this.searching=this._delay(function(){
        if(this.term!==this._value()){
            this.selectedItem=null;
            this.search(null,event);
        }
    },this.options.delay);
},
search:function(value,event){
    value=value!=null?value:this._value();
    this.term=this._value();
    if(value.length<this.options.minLength){
        return this.close(event);
    }
    if(this._trigger("search",event)===false){
        return;
    }
    return this._search(value);
},
_search:function(value){
    this.pending++;
    this.element.addClass("ui-autocomplete-loading");
    this.cancelSearch=false;
    this.source({
        term:value
    },this._response());
},
_response:function(){
    var that=this,index=++requestIndex;
    return function(content){
        if(index===requestIndex){
            that.__response(content);
        }
        that.pending--;
        if(!that.pending){
            that.element.removeClass("ui-autocomplete-loading");
        }
    };

},
__response:function(content){
    if(content){
        content=this._normalize(content);
    }
    this._trigger("response",null,{
        content:content
    });
    if(!this.options.disabled&&content&&content.length&&!this.cancelSearch){
        this._suggest(content);
        this._trigger("open");
    }else{
        this._close();
    }
},
close:function(event){
    this.cancelSearch=true;
    this._close(event);
},
_close:function(event){
    if(this.menu.element.is(":visible")){
        this.menu.element.hide();
        this.menu.blur();
        this.isNewMenu=true;
        this._trigger("close",event);
    }
},
_change:function(event){
    if(this.previous!==this._value()){
        this._trigger("change",event,{
            item:this.selectedItem
            });
    }
},
_normalize:function(items){
    if(items.length&&items[0].label&&items[0].value){
        return items;
    }
    return $.map(items,function(item){
        if(typeof item==="string"){
            return{
                label:item,
                value:item
            };
        
    }
    return $.extend({
        label:item.label||item.value,
        value:item.value||item.label
        },item);
    });
},
_suggest:function(items){
    var ul=this.menu.element.empty().zIndex(this.element.zIndex()+1);
    this._renderMenu(ul,items);
    this.menu.refresh();
    ul.show();
    this._resizeMenu();
    ul.position($.extend({
        of:this.element
        },this.options.position));
    if(this.options.autoFocus){
        this.menu.next();
    }
},
_resizeMenu:function(){
    var ul=this.menu.element;
    ul.outerWidth(Math.max(ul.width("").outerWidth()+1,this.element.outerWidth()));
},
_renderMenu:function(ul,items){
    var that=this;
    $.each(items,function(index,item){
        that._renderItemData(ul,item);
    });
},
_renderItemData:function(ul,item){
    return this._renderItem(ul,item).data("ui-autocomplete-item",item);
},
_renderItem:function(ul,item){
    return $("<li>").append($("<a>").text(item.label)).appendTo(ul);
},
_move:function(direction,event){
    if(!this.menu.element.is(":visible")){
        this.search(null,event);
        return;
    }
    if(this.menu.isFirstItem()&&/^previous/.test(direction)||this.menu.isLastItem()&&/^next/.test(direction)){
        this._value(this.term);
        this.menu.blur();
        return;
    }
    this.menu[direction](event);
},
widget:function(){
    return this.menu.element;
},
_value:function(){
    return this.valueMethod.apply(this.element,arguments);
},
_keyEvent:function(keyEvent,event){
    if(!this.isMultiLine||this.menu.element.is(":visible")){
        this._move(keyEvent,event);
        event.preventDefault();
    }
}
});
$.extend($.ui.autocomplete,{
    escapeRegex:function(value){
        return value.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g,"\\$&");
    },
    filter:function(array,term){
        var matcher=new RegExp($.ui.autocomplete.escapeRegex(term),"i");
        return $.grep(array,function(value){
            return matcher.test(value.label||value.value||value);
        });
    }
});
$.widget("ui.autocomplete",$.ui.autocomplete,{
    options:{
        messages:{
            noResults:"No search results.",
            results:function(amount){
                return amount+(amount>1?" results are":" result is")+" available, use up and down arrow keys to navigate.";
            }
        }
    },
__response:function(content){
    var message;
    this._superApply(arguments);
    if(this.options.disabled||this.cancelSearch){
        return;
    }
    if(content&&content.length){
        message=this.options.messages.results(content.length);
    }else{
        message=this.options.messages.noResults;
    }
    this.liveRegion.text(message);
}
});
}(jQuery));
(function($,undefined){
    var lastActive,startXPos,startYPos,clickDragged,baseClasses="ui-button ui-widget ui-state-default ui-corner-all",stateClasses="ui-state-hover ui-state-active ",typeClasses="ui-button-icons-only ui-button-icon-only ui-button-text-icons ui-button-text-icon-primary ui-button-text-icon-secondary ui-button-text-only",formResetHandler=function(){
        var buttons=$(this).find(":ui-button");
        setTimeout(function(){
            buttons.button("refresh");
        },1);
    },radioGroup=function(radio){
        var name=radio.name,form=radio.form,radios=$([]);
        if(name){
            if(form){
                radios=$(form).find("[name='"+name+"']");
            }else{
                radios=$("[name='"+name+"']",radio.ownerDocument).filter(function(){
                    return!this.form;
                });
            }
        }
    return radios;
};

$.widget("ui.button",{
    version:"1.9.1",
    defaultElement:"<button>",
    options:{
        disabled:null,
        text:true,
        label:null,
        icons:{
            primary:null,
            secondary:null
        }
    },
_create:function(){
    this.element.closest("form").unbind("reset"+this.eventNamespace).bind("reset"+this.eventNamespace,formResetHandler);
    if(typeof this.options.disabled!=="boolean"){
        this.options.disabled=!!this.element.prop("disabled");
    }else{
        this.element.prop("disabled",this.options.disabled);
    }
    this._determineButtonType();
    this.hasTitle=!!this.buttonElement.attr("title");
    var that=this,options=this.options,toggleButton=this.type==="checkbox"||this.type==="radio",hoverClass="ui-state-hover"+(!toggleButton?" ui-state-active":""),focusClass="ui-state-focus";
    if(options.label===null){
        options.label=(this.type==="input"?this.buttonElement.val():this.buttonElement.html());
    }
    this.buttonElement.addClass(baseClasses).attr("role","button").bind("mouseenter"+this.eventNamespace,function(){
        if(options.disabled){
            return;
        }
        $(this).addClass("ui-state-hover");
        if(this===lastActive){
            $(this).addClass("ui-state-active");
        }
    }).bind("mouseleave"+this.eventNamespace,function(){
    if(options.disabled){
        return;
    }
    $(this).removeClass(hoverClass);
}).bind("click"+this.eventNamespace,function(event){
    if(options.disabled){
        event.preventDefault();
        event.stopImmediatePropagation();
    }
});
this.element.bind("focus"+this.eventNamespace,function(){
    that.buttonElement.addClass(focusClass);
}).bind("blur"+this.eventNamespace,function(){
    that.buttonElement.removeClass(focusClass);
});
if(toggleButton){
    this.element.bind("change"+this.eventNamespace,function(){
        if(clickDragged){
            return;
        }
        that.refresh();
    });
    this.buttonElement.bind("mousedown"+this.eventNamespace,function(event){
        if(options.disabled){
            return;
        }
        clickDragged=false;
        startXPos=event.pageX;
        startYPos=event.pageY;
    }).bind("mouseup"+this.eventNamespace,function(event){
        if(options.disabled){
            return;
        }
        if(startXPos!==event.pageX||startYPos!==event.pageY){
            clickDragged=true;
        }
    });
}
if(this.type==="checkbox"){
    this.buttonElement.bind("click"+this.eventNamespace,function(){
        if(options.disabled||clickDragged){
            return false;
        }
        $(this).toggleClass("ui-state-active");
        that.buttonElement.attr("aria-pressed",that.element[0].checked);
    });
}else if(this.type==="radio"){
    this.buttonElement.bind("click"+this.eventNamespace,function(){
        if(options.disabled||clickDragged){
            return false;
        }
        $(this).addClass("ui-state-active");
        that.buttonElement.attr("aria-pressed","true");
        var radio=that.element[0];
        radioGroup(radio).not(radio).map(function(){
            return $(this).button("widget")[0];
        }).removeClass("ui-state-active").attr("aria-pressed","false");
    });
}else{
    this.buttonElement.bind("mousedown"+this.eventNamespace,function(){
        if(options.disabled){
            return false;
        }
        $(this).addClass("ui-state-active");
        lastActive=this;
        that.document.one("mouseup",function(){
            lastActive=null;
        });
    }).bind("mouseup"+this.eventNamespace,function(){
        if(options.disabled){
            return false;
        }
        $(this).removeClass("ui-state-active");
    }).bind("keydown"+this.eventNamespace,function(event){
        if(options.disabled){
            return false;
        }
        if(event.keyCode===$.ui.keyCode.SPACE||event.keyCode===$.ui.keyCode.ENTER){
            $(this).addClass("ui-state-active");
        }
    }).bind("keyup"+this.eventNamespace,function(){
    $(this).removeClass("ui-state-active");
});
if(this.buttonElement.is("a")){
    this.buttonElement.keyup(function(event){
        if(event.keyCode===$.ui.keyCode.SPACE){
            $(this).click();
        }
    });
}
}
this._setOption("disabled",options.disabled);
this._resetButton();
},
_determineButtonType:function(){
    var ancestor,labelSelector,checked;
    if(this.element.is("[type=checkbox]")){
        this.type="checkbox";
    }else if(this.element.is("[type=radio]")){
        this.type="radio";
    }else if(this.element.is("input")){
        this.type="input";
    }else{
        this.type="button";
    }
    if(this.type==="checkbox"||this.type==="radio"){
        ancestor=this.element.parents().last();
        labelSelector="label[for='"+this.element.attr("id")+"']";
        this.buttonElement=ancestor.find(labelSelector);
        if(!this.buttonElement.length){
            ancestor=ancestor.length?ancestor.siblings():this.element.siblings();
            this.buttonElement=ancestor.filter(labelSelector);
            if(!this.buttonElement.length){
                this.buttonElement=ancestor.find(labelSelector);
            }
        }
    this.element.addClass("ui-helper-hidden-accessible");
    checked=this.element.is(":checked");
    if(checked){
        this.buttonElement.addClass("ui-state-active");
    }
    this.buttonElement.prop("aria-pressed",checked);
}else{
    this.buttonElement=this.element;
}
},
widget:function(){
    return this.buttonElement;
},
_destroy:function(){
    this.element.removeClass("ui-helper-hidden-accessible");
    this.buttonElement.removeClass(baseClasses+" "+stateClasses+" "+typeClasses).removeAttr("role").removeAttr("aria-pressed").html(this.buttonElement.find(".ui-button-text").html());
    if(!this.hasTitle){
        this.buttonElement.removeAttr("title");
    }
},
_setOption:function(key,value){
    this._super(key,value);
    if(key==="disabled"){
        if(value){
            this.element.prop("disabled",true);
        }else{
            this.element.prop("disabled",false);
        }
        return;
    }
    this._resetButton();
},
refresh:function(){
    var isDisabled=this.element.is(":disabled")||this.element.hasClass("ui-button-disabled");
    if(isDisabled!==this.options.disabled){
        this._setOption("disabled",isDisabled);
    }
    if(this.type==="radio"){
        radioGroup(this.element[0]).each(function(){
            if($(this).is(":checked")){
                $(this).button("widget").addClass("ui-state-active").attr("aria-pressed","true");
            }else{
                $(this).button("widget").removeClass("ui-state-active").attr("aria-pressed","false");
            }
        });
}else if(this.type==="checkbox"){
    if(this.element.is(":checked")){
        this.buttonElement.addClass("ui-state-active").attr("aria-pressed","true");
    }else{
        this.buttonElement.removeClass("ui-state-active").attr("aria-pressed","false");
    }
}
},
_resetButton:function(){
    if(this.type==="input"){
        if(this.options.label){
            this.element.val(this.options.label);
        }
        return;
    }
    var buttonElement=this.buttonElement.removeClass(typeClasses),buttonText=$("<span></span>",this.document[0]).addClass("ui-button-text").html(this.options.label).appendTo(buttonElement.empty()).text(),icons=this.options.icons,multipleIcons=icons.primary&&icons.secondary,buttonClasses=[];
    if(icons.primary||icons.secondary){
        if(this.options.text){
            buttonClasses.push("ui-button-text-icon"+(multipleIcons?"s":(icons.primary?"-primary":"-secondary")));
        }
        if(icons.primary){
            buttonElement.prepend("<span class='ui-button-icon-primary ui-icon "+icons.primary+"'></span>");
        }
        if(icons.secondary){
            buttonElement.append("<span class='ui-button-icon-secondary ui-icon "+icons.secondary+"'></span>");
        }
        if(!this.options.text){
            buttonClasses.push(multipleIcons?"ui-button-icons-only":"ui-button-icon-only");
            if(!this.hasTitle){
                buttonElement.attr("title",$.trim(buttonText));
            }
        }
    }else{
    buttonClasses.push("ui-button-text-only");
}
buttonElement.addClass(buttonClasses.join(" "));
}
});
$.widget("ui.buttonset",{
    version:"1.9.1",
    options:{
        items:"button, input[type=button], input[type=submit], input[type=reset], input[type=checkbox], input[type=radio], a, :data(button)"
    },
    _create:function(){
        this.element.addClass("ui-buttonset");
    },
    _init:function(){
        this.refresh();
    },
    _setOption:function(key,value){
        if(key==="disabled"){
            this.buttons.button("option",key,value);
        }
        this._super(key,value);
    },
    refresh:function(){
        var rtl=this.element.css("direction")==="rtl";
        this.buttons=this.element.find(this.options.items).filter(":ui-button").button("refresh").end().not(":ui-button").button().end().map(function(){
            return $(this).button("widget")[0];
        }).removeClass("ui-corner-all ui-corner-left ui-corner-right").filter(":first").addClass(rtl?"ui-corner-right":"ui-corner-left").end().filter(":last").addClass(rtl?"ui-corner-left":"ui-corner-right").end().end();
    },
    _destroy:function(){
        this.element.removeClass("ui-buttonset");
        this.buttons.map(function(){
            return $(this).button("widget")[0];
        }).removeClass("ui-corner-left ui-corner-right").end().button("destroy");
    }
});
}(jQuery));
(function($,undefined){
    $.extend($.ui,{
        datepicker:{
            version:"1.9.1"
        }
    });
var PROP_NAME='datepicker';
var dpuuid=new Date().getTime();
    var instActive;
    function Datepicker(){
    this.debug=false;
    this._curInst=null;
    this._keyEvent=false;
    this._disabledInputs=[];
    this._datepickerShowing=false;
    this._inDialog=false;
    this._mainDivId='ui-datepicker-div';
    this._inlineClass='ui-datepicker-inline';
    this._appendClass='ui-datepicker-append';
    this._triggerClass='ui-datepicker-trigger';
    this._dialogClass='ui-datepicker-dialog';
    this._disableClass='ui-datepicker-disabled';
    this._unselectableClass='ui-datepicker-unselectable';
    this._currentClass='ui-datepicker-current-day';
    this._dayOverClass='ui-datepicker-days-cell-over';
    this.regional=[];
    this.regional['']={
        closeText:'Done',
        prevText:'Prev',
        nextText:'Next',
        currentText:'Today',
        monthNames:['January','February','March','April','May','June','July','August','September','October','November','December'],
        monthNamesShort:['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'],
        dayNames:['Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday'],
        dayNamesShort:['Sun','Mon','Tue','Wed','Thu','Fri','Sat'],
        dayNamesMin:['Su','Mo','Tu','We','Th','Fr','Sa'],
        weekHeader:'Wk',
        dateFormat:'mm/dd/yy',
        firstDay:0,
        isRTL:false,
        showMonthAfterYear:false,
        yearSuffix:''
    };
    
    this._defaults={
        showOn:'focus',
        showAnim:'fadeIn',
        showOptions:{},
        defaultDate:null,
        appendText:'',
        buttonText:'...',
        buttonImage:'',
        buttonImageOnly:false,
        hideIfNoPrevNext:false,
        navigationAsDateFormat:false,
        gotoCurrent:false,
        changeMonth:false,
        changeYear:false,
        yearRange:'c-10:c+10',
        showOtherMonths:false,
        selectOtherMonths:false,
        showWeek:false,
        calculateWeek:this.iso8601Week,
        shortYearCutoff:'+10',
        minDate:null,
        maxDate:null,
        duration:'fast',
        beforeShowDay:null,
        beforeShow:null,
        onSelect:null,
        onChangeMonthYear:null,
        onClose:null,
        numberOfMonths:1,
        showCurrentAtPos:0,
        stepMonths:1,
        stepBigMonths:12,
        altField:'',
        altFormat:'',
        constrainInput:true,
        showButtonPanel:false,
        autoSize:false,
        disabled:false
    };
    
    $.extend(this._defaults,this.regional['']);
    this.dpDiv=bindHover($('<div id="'+this._mainDivId+'" class="ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all"></div>'));
}
$.extend(Datepicker.prototype,{
    markerClassName:'hasDatepicker',
    maxRows:4,
    log:function(){
        if(this.debug)
            console.log.apply('',arguments);
    },
    _widgetDatepicker:function(){
        return this.dpDiv;
    },
    setDefaults:function(settings){
        extendRemove(this._defaults,settings||{});
        return this;
    },
    _attachDatepicker:function(target,settings){
        var inlineSettings=null;
        for(var attrName in this._defaults){
            var attrValue=target.getAttribute('date:'+attrName);
            if(attrValue){
                inlineSettings=inlineSettings||{};
                
                try{
                    inlineSettings[attrName]=eval(attrValue);
                }catch(err){
                    inlineSettings[attrName]=attrValue;
                }
            }
        }
var nodeName=target.nodeName.toLowerCase();
    var inline=(nodeName=='div'||nodeName=='span');
    if(!target.id){
    this.uuid+=1;
    target.id='dp'+this.uuid;
}
var inst=this._newInst($(target),inline);
    inst.settings=$.extend({},settings||{},inlineSettings||{});
    if(nodeName=='input'){
    this._connectDatepicker(target,inst);
}else if(inline){
    this._inlineDatepicker(target,inst);
}
},
_newInst:function(target,inline){
    var id=target[0].id.replace(/([^A-Za-z0-9_-])/g,'\\\\$1');
    return{
        id:id,
        input:target,
        selectedDay:0,
        selectedMonth:0,
        selectedYear:0,
        drawMonth:0,
        drawYear:0,
        inline:inline,
        dpDiv:(!inline?this.dpDiv:bindHover($('<div class="'+this._inlineClass+' ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all"></div>')))
        };
    
},
_connectDatepicker:function(target,inst){
    var input=$(target);
    inst.append=$([]);
    inst.trigger=$([]);
    if(input.hasClass(this.markerClassName))
        return;
    this._attachments(input,inst);
    input.addClass(this.markerClassName).keydown(this._doKeyDown).keypress(this._doKeyPress).keyup(this._doKeyUp).bind("setData.datepicker",function(event,key,value){
        inst.settings[key]=value;
    }).bind("getData.datepicker",function(event,key){
        return this._get(inst,key);
    });
    this._autoSize(inst);
    $.data(target,PROP_NAME,inst);
    if(inst.settings.disabled){
        this._disableDatepicker(target);
    }
},
_attachments:function(input,inst){
    var appendText=this._get(inst,'appendText');
    var isRTL=this._get(inst,'isRTL');
    if(inst.append)
        inst.append.remove();
    if(appendText){
        inst.append=$('<span class="'+this._appendClass+'">'+appendText+'</span>');
        input[isRTL?'before':'after'](inst.append);
    }
    input.unbind('focus',this._showDatepicker);
    if(inst.trigger)
        inst.trigger.remove();
    var showOn=this._get(inst,'showOn');
    if(showOn=='focus'||showOn=='both')
        input.focus(this._showDatepicker);
    if(showOn=='button'||showOn=='both'){
        var buttonText=this._get(inst,'buttonText');
        var buttonImage=this._get(inst,'buttonImage');
        inst.trigger=$(this._get(inst,'buttonImageOnly')?$('<img/>').addClass(this._triggerClass).attr({
            src:buttonImage,
            alt:buttonText,
            title:buttonText
        }):$('<button type="button"></button>').addClass(this._triggerClass).html(buttonImage==''?buttonText:$('<img/>').attr({
            src:buttonImage,
            alt:buttonText,
            title:buttonText
        })));
        input[isRTL?'before':'after'](inst.trigger);
        inst.trigger.click(function(){
            if($.datepicker._datepickerShowing&&$.datepicker._lastInput==input[0])
                $.datepicker._hideDatepicker();
            else if($.datepicker._datepickerShowing&&$.datepicker._lastInput!=input[0]){
                $.datepicker._hideDatepicker();
                $.datepicker._showDatepicker(input[0]);
            }else
                $.datepicker._showDatepicker(input[0]);
            return false;
        });
    }
},
_autoSize:function(inst){
    if(this._get(inst,'autoSize')&&!inst.inline){
        var date=new Date(2009,12-1,20);
        var dateFormat=this._get(inst,'dateFormat');
        if(dateFormat.match(/[DM]/)){
            var findMax=function(names){
                var max=0;
                var maxI=0;
                for(var i=0;i<names.length;i++){
                    if(names[i].length>max){
                        max=names[i].length;
                        maxI=i;
                    }
                }
            return maxI;
        };
        
        date.setMonth(findMax(this._get(inst,(dateFormat.match(/MM/)?'monthNames':'monthNamesShort'))));
        date.setDate(findMax(this._get(inst,(dateFormat.match(/DD/)?'dayNames':'dayNamesShort')))+20-date.getDay());
    }
    inst.input.attr('size',this._formatDate(inst,date).length);
}
},
_inlineDatepicker:function(target,inst){
    var divSpan=$(target);
    if(divSpan.hasClass(this.markerClassName))
        return;
    divSpan.addClass(this.markerClassName).append(inst.dpDiv).bind("setData.datepicker",function(event,key,value){
        inst.settings[key]=value;
    }).bind("getData.datepicker",function(event,key){
        return this._get(inst,key);
    });
    $.data(target,PROP_NAME,inst);
    this._setDate(inst,this._getDefaultDate(inst),true);
    this._updateDatepicker(inst);
    this._updateAlternate(inst);
    if(inst.settings.disabled){
        this._disableDatepicker(target);
    }
    inst.dpDiv.css("display","block");
},
_dialogDatepicker:function(input,date,onSelect,settings,pos){
    var inst=this._dialogInst;
    if(!inst){
        this.uuid+=1;
        var id='dp'+this.uuid;
        this._dialogInput=$('<input type="text" id="'+id+'" style="position: absolute; top: -100px; width: 0px;"/>');
        this._dialogInput.keydown(this._doKeyDown);
        $('body').append(this._dialogInput);
        inst=this._dialogInst=this._newInst(this._dialogInput,false);
        inst.settings={};
        
        $.data(this._dialogInput[0],PROP_NAME,inst);
    }
    extendRemove(inst.settings,settings||{});
    date=(date&&date.constructor==Date?this._formatDate(inst,date):date);
    this._dialogInput.val(date);
    this._pos=(pos?(pos.length?pos:[pos.pageX,pos.pageY]):null);
    if(!this._pos){
        var browserWidth=document.documentElement.clientWidth;
        var browserHeight=document.documentElement.clientHeight;
        var scrollX=document.documentElement.scrollLeft||document.body.scrollLeft;
        var scrollY=document.documentElement.scrollTop||document.body.scrollTop;
        this._pos=[(browserWidth/2)-100+scrollX,(browserHeight/2)-150+scrollY];
    }
    this._dialogInput.css('left',(this._pos[0]+20)+'px').css('top',this._pos[1]+'px');
    inst.settings.onSelect=onSelect;
    this._inDialog=true;
    this.dpDiv.addClass(this._dialogClass);
    this._showDatepicker(this._dialogInput[0]);
    if($.blockUI)
        $.blockUI(this.dpDiv);
    $.data(this._dialogInput[0],PROP_NAME,inst);
    return this;
},
_destroyDatepicker:function(target){
    var $target=$(target);
    var inst=$.data(target,PROP_NAME);
    if(!$target.hasClass(this.markerClassName)){
        return;
    }
    var nodeName=target.nodeName.toLowerCase();
    $.removeData(target,PROP_NAME);
    if(nodeName=='input'){
        inst.append.remove();
        inst.trigger.remove();
        $target.removeClass(this.markerClassName).unbind('focus',this._showDatepicker).unbind('keydown',this._doKeyDown).unbind('keypress',this._doKeyPress).unbind('keyup',this._doKeyUp);
    }else if(nodeName=='div'||nodeName=='span')
        $target.removeClass(this.markerClassName).empty();
},
_enableDatepicker:function(target){
    var $target=$(target);
    var inst=$.data(target,PROP_NAME);
    if(!$target.hasClass(this.markerClassName)){
        return;
    }
    var nodeName=target.nodeName.toLowerCase();
    if(nodeName=='input'){
        target.disabled=false;
        inst.trigger.filter('button').each(function(){
            this.disabled=false;
        }).end().filter('img').css({
            opacity:'1.0',
            cursor:''
        });
    }
    else if(nodeName=='div'||nodeName=='span'){
        var inline=$target.children('.'+this._inlineClass);
        inline.children().removeClass('ui-state-disabled');
        inline.find("select.ui-datepicker-month, select.ui-datepicker-year").prop("disabled",false);
    }
    this._disabledInputs=$.map(this._disabledInputs,function(value){
        return(value==target?null:value);
    });
},
_disableDatepicker:function(target){
    var $target=$(target);
    var inst=$.data(target,PROP_NAME);
    if(!$target.hasClass(this.markerClassName)){
        return;
    }
    var nodeName=target.nodeName.toLowerCase();
    if(nodeName=='input'){
        target.disabled=true;
        inst.trigger.filter('button').each(function(){
            this.disabled=true;
        }).end().filter('img').css({
            opacity:'0.5',
            cursor:'default'
        });
    }
    else if(nodeName=='div'||nodeName=='span'){
        var inline=$target.children('.'+this._inlineClass);
        inline.children().addClass('ui-state-disabled');
        inline.find("select.ui-datepicker-month, select.ui-datepicker-year").prop("disabled",true);
    }
    this._disabledInputs=$.map(this._disabledInputs,function(value){
        return(value==target?null:value);
    });
    this._disabledInputs[this._disabledInputs.length]=target;
},
_isDisabledDatepicker:function(target){
    if(!target){
        return false;
    }
    for(var i=0;i<this._disabledInputs.length;i++){
        if(this._disabledInputs[i]==target)
            return true;
    }
    return false;
},
_getInst:function(target){
    try{
        return $.data(target,PROP_NAME);
    }
    catch(err){
        throw'Missing instance data for this datepicker';
    }
},
_optionDatepicker:function(target,name,value){
    var inst=this._getInst(target);
    if(arguments.length==2&&typeof name=='string'){
        return(name=='defaults'?$.extend({},$.datepicker._defaults):(inst?(name=='all'?$.extend({},inst.settings):this._get(inst,name)):null));
    }
    var settings=name||{};
    
    if(typeof name=='string'){
        settings={};
        
        settings[name]=value;
    }
    if(inst){
        if(this._curInst==inst){
            this._hideDatepicker();
        }
        var date=this._getDateDatepicker(target,true);
        var minDate=this._getMinMaxDate(inst,'min');
        var maxDate=this._getMinMaxDate(inst,'max');
        extendRemove(inst.settings,settings);
        if(minDate!==null&&settings['dateFormat']!==undefined&&settings['minDate']===undefined)
            inst.settings.minDate=this._formatDate(inst,minDate);
        if(maxDate!==null&&settings['dateFormat']!==undefined&&settings['maxDate']===undefined)
            inst.settings.maxDate=this._formatDate(inst,maxDate);
        this._attachments($(target),inst);
        this._autoSize(inst);
        this._setDate(inst,date);
        this._updateAlternate(inst);
        this._updateDatepicker(inst);
    }
},
_changeDatepicker:function(target,name,value){
    this._optionDatepicker(target,name,value);
},
_refreshDatepicker:function(target){
    var inst=this._getInst(target);
    if(inst){
        this._updateDatepicker(inst);
    }
},
_setDateDatepicker:function(target,date){
    var inst=this._getInst(target);
    if(inst){
        this._setDate(inst,date);
        this._updateDatepicker(inst);
        this._updateAlternate(inst);
    }
},
_getDateDatepicker:function(target,noDefault){
    var inst=this._getInst(target);
    if(inst&&!inst.inline)
        this._setDateFromField(inst,noDefault);
    return(inst?this._getDate(inst):null);
},
_doKeyDown:function(event){
    var inst=$.datepicker._getInst(event.target);
    var handled=true;
    var isRTL=inst.dpDiv.is('.ui-datepicker-rtl');
    inst._keyEvent=true;
    if($.datepicker._datepickerShowing)
        switch(event.keyCode){
            case 9:
                $.datepicker._hideDatepicker();
                handled=false;
                break;
            case 13:
                var sel=$('td.'+$.datepicker._dayOverClass+':not(.'+
                $.datepicker._currentClass+')',inst.dpDiv);
            if(sel[0])
                $.datepicker._selectDay(event.target,inst.selectedMonth,inst.selectedYear,sel[0]);
            var onSelect=$.datepicker._get(inst,'onSelect');
                if(onSelect){
                var dateStr=$.datepicker._formatDate(inst);
                onSelect.apply((inst.input?inst.input[0]:null),[dateStr,inst]);
            }
            else
                $.datepicker._hideDatepicker();
            return false;
            break;
            case 27:
                $.datepicker._hideDatepicker();
                break;
            case 33:
                $.datepicker._adjustDate(event.target,(event.ctrlKey?-$.datepicker._get(inst,'stepBigMonths'):-$.datepicker._get(inst,'stepMonths')),'M');
                break;
            case 34:
                $.datepicker._adjustDate(event.target,(event.ctrlKey?+$.datepicker._get(inst,'stepBigMonths'):+$.datepicker._get(inst,'stepMonths')),'M');
                break;
            case 35:
                if(event.ctrlKey||event.metaKey)$.datepicker._clearDate(event.target);
                handled=event.ctrlKey||event.metaKey;
                break;
            case 36:
                if(event.ctrlKey||event.metaKey)$.datepicker._gotoToday(event.target);
                handled=event.ctrlKey||event.metaKey;
                break;
            case 37:
                if(event.ctrlKey||event.metaKey)$.datepicker._adjustDate(event.target,(isRTL?+1:-1),'D');
                handled=event.ctrlKey||event.metaKey;
                if(event.originalEvent.altKey)$.datepicker._adjustDate(event.target,(event.ctrlKey?-$.datepicker._get(inst,'stepBigMonths'):-$.datepicker._get(inst,'stepMonths')),'M');
                break;
            case 38:
                if(event.ctrlKey||event.metaKey)$.datepicker._adjustDate(event.target,-7,'D');
                handled=event.ctrlKey||event.metaKey;
                break;
            case 39:
                if(event.ctrlKey||event.metaKey)$.datepicker._adjustDate(event.target,(isRTL?-1:+1),'D');
                handled=event.ctrlKey||event.metaKey;
                if(event.originalEvent.altKey)$.datepicker._adjustDate(event.target,(event.ctrlKey?+$.datepicker._get(inst,'stepBigMonths'):+$.datepicker._get(inst,'stepMonths')),'M');
                break;
            case 40:
                if(event.ctrlKey||event.metaKey)$.datepicker._adjustDate(event.target,+7,'D');
                handled=event.ctrlKey||event.metaKey;
                break;
            default:
                handled=false;
        }
    else if(event.keyCode==36&&event.ctrlKey)
        $.datepicker._showDatepicker(this);
    else{
        handled=false;
    }
    if(handled){
        event.preventDefault();
        event.stopPropagation();
    }
},
_doKeyPress:function(event){
    var inst=$.datepicker._getInst(event.target);
    if($.datepicker._get(inst,'constrainInput')){
        var chars=$.datepicker._possibleChars($.datepicker._get(inst,'dateFormat'));
        var chr=String.fromCharCode(event.charCode==undefined?event.keyCode:event.charCode);
        return event.ctrlKey||event.metaKey||(chr<' '||!chars||chars.indexOf(chr)>-1);
    }
},
_doKeyUp:function(event){
    var inst=$.datepicker._getInst(event.target);
    if(inst.input.val()!=inst.lastVal){
        try{
            var date=$.datepicker.parseDate($.datepicker._get(inst,'dateFormat'),(inst.input?inst.input.val():null),$.datepicker._getFormatConfig(inst));
            if(date){
                $.datepicker._setDateFromField(inst);
                $.datepicker._updateAlternate(inst);
                $.datepicker._updateDatepicker(inst);
            }
        }
    catch(err){
        $.datepicker.log(err);
    }
}
return true;
},
_showDatepicker:function(input){
    input=input.target||input;
    if(input.nodeName.toLowerCase()!='input')
        input=$('input',input.parentNode)[0];
    if($.datepicker._isDisabledDatepicker(input)||$.datepicker._lastInput==input)
        return;
    var inst=$.datepicker._getInst(input);
    if($.datepicker._curInst&&$.datepicker._curInst!=inst){
        $.datepicker._curInst.dpDiv.stop(true,true);
        if(inst&&$.datepicker._datepickerShowing){
            $.datepicker._hideDatepicker($.datepicker._curInst.input[0]);
        }
    }
var beforeShow=$.datepicker._get(inst,'beforeShow');
var beforeShowSettings=beforeShow?beforeShow.apply(input,[input,inst]):{};

if(beforeShowSettings===false){
    return;
}
extendRemove(inst.settings,beforeShowSettings);
inst.lastVal=null;
$.datepicker._lastInput=input;
$.datepicker._setDateFromField(inst);
if($.datepicker._inDialog)
    input.value='';
if(!$.datepicker._pos){
    $.datepicker._pos=$.datepicker._findPos(input);
    $.datepicker._pos[1]+=input.offsetHeight;
}
var isFixed=false;
$(input).parents().each(function(){
    isFixed|=$(this).css('position')=='fixed';
    return!isFixed;
});
var offset={
    left:$.datepicker._pos[0],
    top:$.datepicker._pos[1]
    };
    
$.datepicker._pos=null;
inst.dpDiv.empty();
inst.dpDiv.css({
    position:'absolute',
    display:'block',
    top:'-1000px'
});
$.datepicker._updateDatepicker(inst);
offset=$.datepicker._checkOffset(inst,offset,isFixed);
inst.dpDiv.css({
    position:($.datepicker._inDialog&&$.blockUI?'static':(isFixed?'fixed':'absolute')),
    display:'none',
    left:offset.left+'px',
    top:offset.top+'px'
    });
if(!inst.inline){
    var showAnim=$.datepicker._get(inst,'showAnim');
    var duration=$.datepicker._get(inst,'duration');
    var postProcess=function(){
        var cover=inst.dpDiv.find('iframe.ui-datepicker-cover');
        if(!!cover.length){
            var borders=$.datepicker._getBorders(inst.dpDiv);
            cover.css({
                left:-borders[0],
                top:-borders[1],
                width:inst.dpDiv.outerWidth(),
                height:inst.dpDiv.outerHeight()
                });
        }
    };
    
inst.dpDiv.zIndex($(input).zIndex()+1);
$.datepicker._datepickerShowing=true;
if($.effects&&($.effects.effect[showAnim]||$.effects[showAnim]))
    inst.dpDiv.show(showAnim,$.datepicker._get(inst,'showOptions'),duration,postProcess);else
    inst.dpDiv[showAnim||'show']((showAnim?duration:null),postProcess);
if(!showAnim||!duration)
    postProcess();
if(inst.input.is(':visible')&&!inst.input.is(':disabled'))
    inst.input.focus();
$.datepicker._curInst=inst;
}
},
_updateDatepicker:function(inst){
    this.maxRows=4;
    var borders=$.datepicker._getBorders(inst.dpDiv);
    instActive=inst;
    inst.dpDiv.empty().append(this._generateHTML(inst));
    this._attachHandlers(inst);
    var cover=inst.dpDiv.find('iframe.ui-datepicker-cover');
    if(!!cover.length){
        cover.css({
            left:-borders[0],
            top:-borders[1],
            width:inst.dpDiv.outerWidth(),
            height:inst.dpDiv.outerHeight()
            })
        }
    inst.dpDiv.find('.'+this._dayOverClass+' a').mouseover();
    var numMonths=this._getNumberOfMonths(inst);
    var cols=numMonths[1];
    var width=17;
    inst.dpDiv.removeClass('ui-datepicker-multi-2 ui-datepicker-multi-3 ui-datepicker-multi-4').width('');
    if(cols>1)
        inst.dpDiv.addClass('ui-datepicker-multi-'+cols).css('width',(width*cols)+'em');
    inst.dpDiv[(numMonths[0]!=1||numMonths[1]!=1?'add':'remove')+'Class']('ui-datepicker-multi');
    inst.dpDiv[(this._get(inst,'isRTL')?'add':'remove')+'Class']('ui-datepicker-rtl');
    if(inst==$.datepicker._curInst&&$.datepicker._datepickerShowing&&inst.input&&inst.input.is(':visible')&&!inst.input.is(':disabled')&&inst.input[0]!=document.activeElement)
        inst.input.focus();
    if(inst.yearshtml){
        var origyearshtml=inst.yearshtml;
        setTimeout(function(){
            if(origyearshtml===inst.yearshtml&&inst.yearshtml){
                inst.dpDiv.find('select.ui-datepicker-year:first').replaceWith(inst.yearshtml);
            }
            origyearshtml=inst.yearshtml=null;
        },0);
    }
},
_getBorders:function(elem){
    var convert=function(value){
        return{
            thin:1,
            medium:2,
            thick:3
        }
        [value]||value;
    };
    
    return[parseFloat(convert(elem.css('border-left-width'))),parseFloat(convert(elem.css('border-top-width')))];
},
_checkOffset:function(inst,offset,isFixed){
    var dpWidth=inst.dpDiv.outerWidth();
    var dpHeight=inst.dpDiv.outerHeight();
    var inputWidth=inst.input?inst.input.outerWidth():0;
    var inputHeight=inst.input?inst.input.outerHeight():0;
    var viewWidth=document.documentElement.clientWidth+(isFixed?0:$(document).scrollLeft());
    var viewHeight=document.documentElement.clientHeight+(isFixed?0:$(document).scrollTop());
    offset.left-=(this._get(inst,'isRTL')?(dpWidth-inputWidth):0);
    offset.left-=(isFixed&&offset.left==inst.input.offset().left)?$(document).scrollLeft():0;
    offset.top-=(isFixed&&offset.top==(inst.input.offset().top+inputHeight))?$(document).scrollTop():0;
    offset.left-=Math.min(offset.left,(offset.left+dpWidth>viewWidth&&viewWidth>dpWidth)?Math.abs(offset.left+dpWidth-viewWidth):0);
    offset.top-=Math.min(offset.top,(offset.top+dpHeight>viewHeight&&viewHeight>dpHeight)?Math.abs(dpHeight+inputHeight):0);
    return offset;
},
_findPos:function(obj){
    var inst=this._getInst(obj);
    var isRTL=this._get(inst,'isRTL');
    while(obj&&(obj.type=='hidden'||obj.nodeType!=1||$.expr.filters.hidden(obj))){
        obj=obj[isRTL?'previousSibling':'nextSibling'];
    }
    var position=$(obj).offset();
    return[position.left,position.top];
},
_hideDatepicker:function(input){
    var inst=this._curInst;
    if(!inst||(input&&inst!=$.data(input,PROP_NAME)))
        return;
    if(this._datepickerShowing){
        var showAnim=this._get(inst,'showAnim');
        var duration=this._get(inst,'duration');
        var postProcess=function(){
            $.datepicker._tidyDialog(inst);
        };
        
        if($.effects&&($.effects.effect[showAnim]||$.effects[showAnim]))
            inst.dpDiv.hide(showAnim,$.datepicker._get(inst,'showOptions'),duration,postProcess);else
            inst.dpDiv[(showAnim=='slideDown'?'slideUp':(showAnim=='fadeIn'?'fadeOut':'hide'))]((showAnim?duration:null),postProcess);
        if(!showAnim)
            postProcess();
        this._datepickerShowing=false;
        var onClose=this._get(inst,'onClose');
        if(onClose)
            onClose.apply((inst.input?inst.input[0]:null),[(inst.input?inst.input.val():''),inst]);
        this._lastInput=null;
        if(this._inDialog){
            this._dialogInput.css({
                position:'absolute',
                left:'0',
                top:'-100px'
            });
            if($.blockUI){
                $.unblockUI();
                $('body').append(this.dpDiv);
            }
        }
    this._inDialog=false;
}
},
_tidyDialog:function(inst){
    inst.dpDiv.removeClass(this._dialogClass).unbind('.ui-datepicker-calendar');
},
_checkExternalClick:function(event){
    if(!$.datepicker._curInst)
        return;
    var $target=$(event.target),inst=$.datepicker._getInst($target[0]);
    if((($target[0].id!=$.datepicker._mainDivId&&$target.parents('#'+$.datepicker._mainDivId).length==0&&!$target.hasClass($.datepicker.markerClassName)&&!$target.closest("."+$.datepicker._triggerClass).length&&$.datepicker._datepickerShowing&&!($.datepicker._inDialog&&$.blockUI)))||($target.hasClass($.datepicker.markerClassName)&&$.datepicker._curInst!=inst))
        $.datepicker._hideDatepicker();
},
_adjustDate:function(id,offset,period){
    var target=$(id);
    var inst=this._getInst(target[0]);
    if(this._isDisabledDatepicker(target[0])){
        return;
    }
    this._adjustInstDate(inst,offset+
        (period=='M'?this._get(inst,'showCurrentAtPos'):0),period);
    this._updateDatepicker(inst);
},
_gotoToday:function(id){
    var target=$(id);
    var inst=this._getInst(target[0]);
    if(this._get(inst,'gotoCurrent')&&inst.currentDay){
        inst.selectedDay=inst.currentDay;
        inst.drawMonth=inst.selectedMonth=inst.currentMonth;
        inst.drawYear=inst.selectedYear=inst.currentYear;
    }
    else{
        var date=new Date();
        inst.selectedDay=date.getDate();
        inst.drawMonth=inst.selectedMonth=date.getMonth();
        inst.drawYear=inst.selectedYear=date.getFullYear();
    }
    this._notifyChange(inst);
    this._adjustDate(target);
},
_selectMonthYear:function(id,select,period){
    var target=$(id);
    var inst=this._getInst(target[0]);
    inst['selected'+(period=='M'?'Month':'Year')]=inst['draw'+(period=='M'?'Month':'Year')]=parseInt(select.options[select.selectedIndex].value,10);
    this._notifyChange(inst);
    this._adjustDate(target);
},
_selectDay:function(id,month,year,td){
    var target=$(id);
    if($(td).hasClass(this._unselectableClass)||this._isDisabledDatepicker(target[0])){
        return;
    }
    var inst=this._getInst(target[0]);
    inst.selectedDay=inst.currentDay=$('a',td).html();
    inst.selectedMonth=inst.currentMonth=month;
    inst.selectedYear=inst.currentYear=year;
    this._selectDate(id,this._formatDate(inst,inst.currentDay,inst.currentMonth,inst.currentYear));
},
_clearDate:function(id){
    var target=$(id);
    var inst=this._getInst(target[0]);
    this._selectDate(target,'');
},
_selectDate:function(id,dateStr){
    var target=$(id);
    var inst=this._getInst(target[0]);
    dateStr=(dateStr!=null?dateStr:this._formatDate(inst));
    if(inst.input)
        inst.input.val(dateStr);
    this._updateAlternate(inst);
    var onSelect=this._get(inst,'onSelect');
    if(onSelect)
        onSelect.apply((inst.input?inst.input[0]:null),[dateStr,inst]);
    else if(inst.input)
        inst.input.trigger('change');
    if(inst.inline)
        this._updateDatepicker(inst);
    else{
        this._hideDatepicker();
        this._lastInput=inst.input[0];
        if(typeof(inst.input[0])!='object')
            inst.input.focus();
        this._lastInput=null;
    }
},
_updateAlternate:function(inst){
    var altField=this._get(inst,'altField');
    if(altField){
        var altFormat=this._get(inst,'altFormat')||this._get(inst,'dateFormat');
        var date=this._getDate(inst);
        var dateStr=this.formatDate(altFormat,date,this._getFormatConfig(inst));
        $(altField).each(function(){
            $(this).val(dateStr);
        });
    }
},
noWeekends:function(date){
    var day=date.getDay();
    return[(day>0&&day<6),''];
},
iso8601Week:function(date){
    var checkDate=new Date(date.getTime());
    checkDate.setDate(checkDate.getDate()+4-(checkDate.getDay()||7));
    var time=checkDate.getTime();
    checkDate.setMonth(0);
    checkDate.setDate(1);
    return Math.floor(Math.round((time-checkDate)/86400000)/7)+1;
},
parseDate:function(format,value,settings){
    if(format==null||value==null)
        throw'Invalid arguments';
    value=(typeof value=='object'?value.toString():value+'');
    if(value=='')
        return null;
    var shortYearCutoff=(settings?settings.shortYearCutoff:null)||this._defaults.shortYearCutoff;
    shortYearCutoff=(typeof shortYearCutoff!='string'?shortYearCutoff:new Date().getFullYear()%100+parseInt(shortYearCutoff,10));
    var dayNamesShort=(settings?settings.dayNamesShort:null)||this._defaults.dayNamesShort;
    var dayNames=(settings?settings.dayNames:null)||this._defaults.dayNames;
    var monthNamesShort=(settings?settings.monthNamesShort:null)||this._defaults.monthNamesShort;
    var monthNames=(settings?settings.monthNames:null)||this._defaults.monthNames;
    var year=-1;
    var month=-1;
    var day=-1;
    var doy=-1;
    var literal=false;
    var lookAhead=function(match){
        var matches=(iFormat+1<format.length&&format.charAt(iFormat+1)==match);
        if(matches)
            iFormat++;
        return matches;
    };
    
    var getNumber=function(match){
        var isDoubled=lookAhead(match);
        var size=(match=='@'?14:(match=='!'?20:(match=='y'&&isDoubled?4:(match=='o'?3:2))));
        var digits=new RegExp('^\\d{1,'+size+'}');
        var num=value.substring(iValue).match(digits);
        if(!num)
            throw'Missing number at position '+iValue;
        iValue+=num[0].length;
        return parseInt(num[0],10);
    };
    
    var getName=function(match,shortNames,longNames){
        var names=$.map(lookAhead(match)?longNames:shortNames,function(v,k){
            return[[k,v]];
        }).sort(function(a,b){
            return-(a[1].length-b[1].length);
        });
        var index=-1;
        $.each(names,function(i,pair){
            var name=pair[1];
            if(value.substr(iValue,name.length).toLowerCase()==name.toLowerCase()){
                index=pair[0];
                iValue+=name.length;
                return false;
            }
        });
    if(index!=-1)
        return index+1;else
        throw'Unknown name at position '+iValue;
};

var checkLiteral=function(){
    if(value.charAt(iValue)!=format.charAt(iFormat))
        throw'Unexpected literal at position '+iValue;
    iValue++;
};

var iValue=0;
for(var iFormat=0;iFormat<format.length;iFormat++){
    if(literal)
        if(format.charAt(iFormat)=="'"&&!lookAhead("'"))
            literal=false;else
            checkLiteral();else
        switch(format.charAt(iFormat)){
            case'd':
                day=getNumber('d');
                break;
            case'D':
                getName('D',dayNamesShort,dayNames);
                break;
            case'o':
                doy=getNumber('o');
                break;
            case'm':
                month=getNumber('m');
                break;
            case'M':
                month=getName('M',monthNamesShort,monthNames);
                break;
            case'y':
                year=getNumber('y');
                break;
            case'@':
                var date=new Date(getNumber('@'));
                year=date.getFullYear();
                month=date.getMonth()+1;
                day=date.getDate();
                break;
            case'!':
                var date=new Date((getNumber('!')-this._ticksTo1970)/10000);
                year=date.getFullYear();
                month=date.getMonth()+1;
                day=date.getDate();
                break;
            case"'":
                if(lookAhead("'"))
                checkLiteral();else
                literal=true;
            break;
            default:
                checkLiteral();
        }
    }
if(iValue<value.length){
    var extra=value.substr(iValue);
    if(!/^\s+/.test(extra)){
        throw"Extra/unparsed characters found in date: "+extra;
    }
}
if(year==-1)
    year=new Date().getFullYear();
else if(year<100)
    year+=new Date().getFullYear()-new Date().getFullYear()%100+
    (year<=shortYearCutoff?0:-100);
if(doy>-1){
    month=1;
    day=doy;
    do{
        var dim=this._getDaysInMonth(year,month-1);
        if(day<=dim)
            break;
        month++;
        day-=dim;
    }while(true);
}
var date=this._daylightSavingAdjust(new Date(year,month-1,day));
if(date.getFullYear()!=year||date.getMonth()+1!=month||date.getDate()!=day)
    throw'Invalid date';
return date;
},
ATOM:'yy-mm-dd',
COOKIE:'D, dd M yy',
ISO_8601:'yy-mm-dd',
RFC_822:'D, d M y',
RFC_850:'DD, dd-M-y',
RFC_1036:'D, d M y',
RFC_1123:'D, d M yy',
RFC_2822:'D, d M yy',
RSS:'D, d M y',
TICKS:'!',
TIMESTAMP:'@',
W3C:'yy-mm-dd',
_ticksTo1970:(((1970-1)*365+Math.floor(1970/4)-Math.floor(1970/100)+
    Math.floor(1970/400))*24*60*60*10000000),
formatDate:function(format,date,settings){
    if(!date)
        return'';
    var dayNamesShort=(settings?settings.dayNamesShort:null)||this._defaults.dayNamesShort;
    var dayNames=(settings?settings.dayNames:null)||this._defaults.dayNames;
    var monthNamesShort=(settings?settings.monthNamesShort:null)||this._defaults.monthNamesShort;
    var monthNames=(settings?settings.monthNames:null)||this._defaults.monthNames;
    var lookAhead=function(match){
        var matches=(iFormat+1<format.length&&format.charAt(iFormat+1)==match);
        if(matches)
            iFormat++;
        return matches;
    };
    
    var formatNumber=function(match,value,len){
        var num=''+value;
        if(lookAhead(match))
            while(num.length<len)
                num='0'+num;
        return num;
    };
    
    var formatName=function(match,value,shortNames,longNames){
        return(lookAhead(match)?longNames[value]:shortNames[value]);
    };
    
    var output='';
    var literal=false;
    if(date)
        for(var iFormat=0;iFormat<format.length;iFormat++){
            if(literal)
                if(format.charAt(iFormat)=="'"&&!lookAhead("'"))
                    literal=false;else
                    output+=format.charAt(iFormat);else
                switch(format.charAt(iFormat)){
                    case'd':
                        output+=formatNumber('d',date.getDate(),2);
                        break;
                    case'D':
                        output+=formatName('D',date.getDay(),dayNamesShort,dayNames);
                        break;
                    case'o':
                        output+=formatNumber('o',Math.round((new Date(date.getFullYear(),date.getMonth(),date.getDate()).getTime()-new Date(date.getFullYear(),0,0).getTime())/86400000),3);
                        break;
                    case'm':
                        output+=formatNumber('m',date.getMonth()+1,2);
                        break;
                    case'M':
                        output+=formatName('M',date.getMonth(),monthNamesShort,monthNames);
                        break;
                    case'y':
                        output+=(lookAhead('y')?date.getFullYear():(date.getYear()%100<10?'0':'')+date.getYear()%100);
                        break;
                    case'@':
                        output+=date.getTime();
                        break;
                    case'!':
                        output+=date.getTime()*10000+this._ticksTo1970;
                        break;
                    case"'":
                        if(lookAhead("'"))
                        output+="'";else
                        literal=true;
                    break;
                    default:
                        output+=format.charAt(iFormat);
                }
            }
return output;
},
_possibleChars:function(format){
    var chars='';
    var literal=false;
    var lookAhead=function(match){
        var matches=(iFormat+1<format.length&&format.charAt(iFormat+1)==match);
        if(matches)
            iFormat++;
        return matches;
    };
    
    for(var iFormat=0;iFormat<format.length;iFormat++)
        if(literal)
            if(format.charAt(iFormat)=="'"&&!lookAhead("'"))
                literal=false;else
                chars+=format.charAt(iFormat);else
            switch(format.charAt(iFormat)){
                case'd':case'm':case'y':case'@':
                    chars+='0123456789';
                    break;
                case'D':case'M':
                    return null;
                case"'":
                    if(lookAhead("'"))
                    chars+="'";else
                    literal=true;
                break;
                default:
                    chars+=format.charAt(iFormat);
            }
    return chars;
},
_get:function(inst,name){
    return inst.settings[name]!==undefined?inst.settings[name]:this._defaults[name];
},
_setDateFromField:function(inst,noDefault){
    if(inst.input.val()==inst.lastVal){
        return;
    }
    var dateFormat=this._get(inst,'dateFormat');
    var dates=inst.lastVal=inst.input?inst.input.val():null;
    var date,defaultDate;
    date=defaultDate=this._getDefaultDate(inst);
    var settings=this._getFormatConfig(inst);
    try{
        date=this.parseDate(dateFormat,dates,settings)||defaultDate;
    }catch(event){
        this.log(event);
        dates=(noDefault?'':dates);
    }
    inst.selectedDay=date.getDate();
    inst.drawMonth=inst.selectedMonth=date.getMonth();
    inst.drawYear=inst.selectedYear=date.getFullYear();
    inst.currentDay=(dates?date.getDate():0);
    inst.currentMonth=(dates?date.getMonth():0);
    inst.currentYear=(dates?date.getFullYear():0);
    this._adjustInstDate(inst);
},
_getDefaultDate:function(inst){
    return this._restrictMinMax(inst,this._determineDate(inst,this._get(inst,'defaultDate'),new Date()));
},
_determineDate:function(inst,date,defaultDate){
    var offsetNumeric=function(offset){
        var date=new Date();
        date.setDate(date.getDate()+offset);
        return date;
    };
    
    var offsetString=function(offset){
        try{
            return $.datepicker.parseDate($.datepicker._get(inst,'dateFormat'),offset,$.datepicker._getFormatConfig(inst));
        }
        catch(e){}
        var date=(offset.toLowerCase().match(/^c/)?$.datepicker._getDate(inst):null)||new Date();
        var year=date.getFullYear();
        var month=date.getMonth();
        var day=date.getDate();
        var pattern=/([+-]?[0-9]+)\s*(d|D|w|W|m|M|y|Y)?/g;
        var matches=pattern.exec(offset);
        while(matches){
            switch(matches[2]||'d'){
                case'd':case'D':
                    day+=parseInt(matches[1],10);
                    break;
                case'w':case'W':
                    day+=parseInt(matches[1],10)*7;
                    break;
                case'm':case'M':
                    month+=parseInt(matches[1],10);
                    day=Math.min(day,$.datepicker._getDaysInMonth(year,month));
                    break;
                case'y':case'Y':
                    year+=parseInt(matches[1],10);
                    day=Math.min(day,$.datepicker._getDaysInMonth(year,month));
                    break;
            }
            matches=pattern.exec(offset);
        }
        return new Date(year,month,day);
    };
    
    var newDate=(date==null||date===''?defaultDate:(typeof date=='string'?offsetString(date):(typeof date=='number'?(isNaN(date)?defaultDate:offsetNumeric(date)):new Date(date.getTime()))));
    newDate=(newDate&&newDate.toString()=='Invalid Date'?defaultDate:newDate);
    if(newDate){
        newDate.setHours(0);
        newDate.setMinutes(0);
        newDate.setSeconds(0);
        newDate.setMilliseconds(0);
    }
    return this._daylightSavingAdjust(newDate);
},
_daylightSavingAdjust:function(date){
    if(!date)return null;
    date.setHours(date.getHours()>12?date.getHours()+2:0);
    return date;
},
_setDate:function(inst,date,noChange){
    var clear=!date;
    var origMonth=inst.selectedMonth;
    var origYear=inst.selectedYear;
    var newDate=this._restrictMinMax(inst,this._determineDate(inst,date,new Date()));
    inst.selectedDay=inst.currentDay=newDate.getDate();
    inst.drawMonth=inst.selectedMonth=inst.currentMonth=newDate.getMonth();
    inst.drawYear=inst.selectedYear=inst.currentYear=newDate.getFullYear();
    if((origMonth!=inst.selectedMonth||origYear!=inst.selectedYear)&&!noChange)
        this._notifyChange(inst);
    this._adjustInstDate(inst);
    if(inst.input){
        inst.input.val(clear?'':this._formatDate(inst));
    }
},
_getDate:function(inst){
    var startDate=(!inst.currentYear||(inst.input&&inst.input.val()=='')?null:this._daylightSavingAdjust(new Date(inst.currentYear,inst.currentMonth,inst.currentDay)));
    return startDate;
},
_attachHandlers:function(inst){
    var stepMonths=this._get(inst,'stepMonths');
    var id='#'+inst.id.replace(/\\\\/g,"\\");
    inst.dpDiv.find('[data-handler]').map(function(){
        var handler={
            prev:function(){
                window['DP_jQuery_'+dpuuid].datepicker._adjustDate(id,-stepMonths,'M');
            },
            next:function(){
                window['DP_jQuery_'+dpuuid].datepicker._adjustDate(id,+stepMonths,'M');
            },
            hide:function(){
                window['DP_jQuery_'+dpuuid].datepicker._hideDatepicker();
            },
            today:function(){
                window['DP_jQuery_'+dpuuid].datepicker._gotoToday(id);
            },
            selectDay:function(){
                window['DP_jQuery_'+dpuuid].datepicker._selectDay(id,+this.getAttribute('data-month'),+this.getAttribute('data-year'),this);
                return false;
            },
            selectMonth:function(){
                window['DP_jQuery_'+dpuuid].datepicker._selectMonthYear(id,this,'M');
                return false;
            },
            selectYear:function(){
                window['DP_jQuery_'+dpuuid].datepicker._selectMonthYear(id,this,'Y');
                return false;
            }
        };
        
    $(this).bind(this.getAttribute('data-event'),handler[this.getAttribute('data-handler')]);
    });
},
_generateHTML:function(inst){
    var today=new Date();
    today=this._daylightSavingAdjust(new Date(today.getFullYear(),today.getMonth(),today.getDate()));
    var isRTL=this._get(inst,'isRTL');
    var showButtonPanel=this._get(inst,'showButtonPanel');
    var hideIfNoPrevNext=this._get(inst,'hideIfNoPrevNext');
    var navigationAsDateFormat=this._get(inst,'navigationAsDateFormat');
    var numMonths=this._getNumberOfMonths(inst);
    var showCurrentAtPos=this._get(inst,'showCurrentAtPos');
    var stepMonths=this._get(inst,'stepMonths');
    var isMultiMonth=(numMonths[0]!=1||numMonths[1]!=1);
    var currentDate=this._daylightSavingAdjust((!inst.currentDay?new Date(9999,9,9):new Date(inst.currentYear,inst.currentMonth,inst.currentDay)));
    var minDate=this._getMinMaxDate(inst,'min');
    var maxDate=this._getMinMaxDate(inst,'max');
    var drawMonth=inst.drawMonth-showCurrentAtPos;
    var drawYear=inst.drawYear;
    if(drawMonth<0){
        drawMonth+=12;
        drawYear--;
    }
    if(maxDate){
        var maxDraw=this._daylightSavingAdjust(new Date(maxDate.getFullYear(),maxDate.getMonth()-(numMonths[0]*numMonths[1])+1,maxDate.getDate()));
        maxDraw=(minDate&&maxDraw<minDate?minDate:maxDraw);
        while(this._daylightSavingAdjust(new Date(drawYear,drawMonth,1))>maxDraw){
            drawMonth--;
            if(drawMonth<0){
                drawMonth=11;
                drawYear--;
            }
        }
    }
inst.drawMonth=drawMonth;
inst.drawYear=drawYear;
var prevText=this._get(inst,'prevText');
prevText=(!navigationAsDateFormat?prevText:this.formatDate(prevText,this._daylightSavingAdjust(new Date(drawYear,drawMonth-stepMonths,1)),this._getFormatConfig(inst)));
var prev=(this._canAdjustMonth(inst,-1,drawYear,drawMonth)?'<a class="ui-datepicker-prev ui-corner-all" data-handler="prev" data-event="click"'+' title="'+prevText+'"><span class="ui-icon ui-icon-circle-triangle-'+(isRTL?'e':'w')+'">'+prevText+'</span></a>':(hideIfNoPrevNext?'':'<a class="ui-datepicker-prev ui-corner-all ui-state-disabled" title="'+prevText+'"><span class="ui-icon ui-icon-circle-triangle-'+(isRTL?'e':'w')+'">'+prevText+'</span></a>'));
var nextText=this._get(inst,'nextText');
nextText=(!navigationAsDateFormat?nextText:this.formatDate(nextText,this._daylightSavingAdjust(new Date(drawYear,drawMonth+stepMonths,1)),this._getFormatConfig(inst)));
var next=(this._canAdjustMonth(inst,+1,drawYear,drawMonth)?'<a class="ui-datepicker-next ui-corner-all" data-handler="next" data-event="click"'+' title="'+nextText+'"><span class="ui-icon ui-icon-circle-triangle-'+(isRTL?'w':'e')+'">'+nextText+'</span></a>':(hideIfNoPrevNext?'':'<a class="ui-datepicker-next ui-corner-all ui-state-disabled" title="'+nextText+'"><span class="ui-icon ui-icon-circle-triangle-'+(isRTL?'w':'e')+'">'+nextText+'</span></a>'));
var currentText=this._get(inst,'currentText');
var gotoDate=(this._get(inst,'gotoCurrent')&&inst.currentDay?currentDate:today);
currentText=(!navigationAsDateFormat?currentText:this.formatDate(currentText,gotoDate,this._getFormatConfig(inst)));
var controls=(!inst.inline?'<button type="button" class="ui-datepicker-close ui-state-default ui-priority-primary ui-corner-all" data-handler="hide" data-event="click">'+
    this._get(inst,'closeText')+'</button>':'');
var buttonPanel=(showButtonPanel)?'<div class="ui-datepicker-buttonpane ui-widget-content">'+(isRTL?controls:'')+
(this._isInRange(inst,gotoDate)?'<button type="button" class="ui-datepicker-current ui-state-default ui-priority-secondary ui-corner-all" data-handler="today" data-event="click"'+'>'+currentText+'</button>':'')+(isRTL?'':controls)+'</div>':'';
var firstDay=parseInt(this._get(inst,'firstDay'),10);
firstDay=(isNaN(firstDay)?0:firstDay);
var showWeek=this._get(inst,'showWeek');
var dayNames=this._get(inst,'dayNames');
var dayNamesShort=this._get(inst,'dayNamesShort');
var dayNamesMin=this._get(inst,'dayNamesMin');
var monthNames=this._get(inst,'monthNames');
var monthNamesShort=this._get(inst,'monthNamesShort');
var beforeShowDay=this._get(inst,'beforeShowDay');
var showOtherMonths=this._get(inst,'showOtherMonths');
var selectOtherMonths=this._get(inst,'selectOtherMonths');
var calculateWeek=this._get(inst,'calculateWeek')||this.iso8601Week;
var defaultDate=this._getDefaultDate(inst);
var html='';
for(var row=0;row<numMonths[0];row++){
    var group='';
    this.maxRows=4;
    for(var col=0;col<numMonths[1];col++){
        var selectedDate=this._daylightSavingAdjust(new Date(drawYear,drawMonth,inst.selectedDay));
        var cornerClass=' ui-corner-all';
        var calender='';
        if(isMultiMonth){
            calender+='<div class="ui-datepicker-group';
            if(numMonths[1]>1)
                switch(col){
                    case 0:
                        calender+=' ui-datepicker-group-first';
                        cornerClass=' ui-corner-'+(isRTL?'right':'left');
                        break;
                    case numMonths[1]-1:
                        calender+=' ui-datepicker-group-last';
                        cornerClass=' ui-corner-'+(isRTL?'left':'right');
                        break;
                    default:
                        calender+=' ui-datepicker-group-middle';
                        cornerClass='';
                        break;
                }
            calender+='">';
        }
        calender+='<div class="ui-datepicker-header ui-widget-header ui-helper-clearfix'+cornerClass+'">'+
        (/all|left/.test(cornerClass)&&row==0?(isRTL?next:prev):'')+
        (/all|right/.test(cornerClass)&&row==0?(isRTL?prev:next):'')+
        this._generateMonthYearHeader(inst,drawMonth,drawYear,minDate,maxDate,row>0||col>0,monthNames,monthNamesShort)+'</div><table class="ui-datepicker-calendar"><thead>'+'<tr>';
        var thead=(showWeek?'<th class="ui-datepicker-week-col">'+this._get(inst,'weekHeader')+'</th>':'');
        for(var dow=0;dow<7;dow++){
            var day=(dow+firstDay)%7;
            thead+='<th'+((dow+firstDay+6)%7>=5?' class="ui-datepicker-week-end"':'')+'>'+'<span title="'+dayNames[day]+'">'+dayNamesMin[day]+'</span></th>';
        }
        calender+=thead+'</tr></thead><tbody>';
        var daysInMonth=this._getDaysInMonth(drawYear,drawMonth);
        if(drawYear==inst.selectedYear&&drawMonth==inst.selectedMonth)
            inst.selectedDay=Math.min(inst.selectedDay,daysInMonth);
        var leadDays=(this._getFirstDayOfMonth(drawYear,drawMonth)-firstDay+7)%7;
        var curRows=Math.ceil((leadDays+daysInMonth)/7);
        var numRows=(isMultiMonth?this.maxRows>curRows?this.maxRows:curRows:curRows);
        this.maxRows=numRows;
        var printDate=this._daylightSavingAdjust(new Date(drawYear,drawMonth,1-leadDays));
        for(var dRow=0;dRow<numRows;dRow++){
            calender+='<tr>';
            var tbody=(!showWeek?'':'<td class="ui-datepicker-week-col">'+
                this._get(inst,'calculateWeek')(printDate)+'</td>');
            for(var dow=0;dow<7;dow++){
                var daySettings=(beforeShowDay?beforeShowDay.apply((inst.input?inst.input[0]:null),[printDate]):[true,'']);
                var otherMonth=(printDate.getMonth()!=drawMonth);
                var unselectable=(otherMonth&&!selectOtherMonths)||!daySettings[0]||(minDate&&printDate<minDate)||(maxDate&&printDate>maxDate);
                tbody+='<td class="'+
                ((dow+firstDay+6)%7>=5?' ui-datepicker-week-end':'')+
                (otherMonth?' ui-datepicker-other-month':'')+
                ((printDate.getTime()==selectedDate.getTime()&&drawMonth==inst.selectedMonth&&inst._keyEvent)||(defaultDate.getTime()==printDate.getTime()&&defaultDate.getTime()==selectedDate.getTime())?' '+this._dayOverClass:'')+
                (unselectable?' '+this._unselectableClass+' ui-state-disabled':'')+
                (otherMonth&&!showOtherMonths?'':' '+daySettings[1]+
                    (printDate.getTime()==currentDate.getTime()?' '+this._currentClass:'')+
                    (printDate.getTime()==today.getTime()?' ui-datepicker-today':''))+'"'+
                ((!otherMonth||showOtherMonths)&&daySettings[2]?' title="'+daySettings[2]+'"':'')+
                (unselectable?'':' data-handler="selectDay" data-event="click" data-month="'+printDate.getMonth()+'" data-year="'+printDate.getFullYear()+'"')+'>'+
                (otherMonth&&!showOtherMonths?'&#xa0;':(unselectable?'<span class="ui-state-default">'+printDate.getDate()+'</span>':'<a class="ui-state-default'+
                    (printDate.getTime()==today.getTime()?' ui-state-highlight':'')+
                    (printDate.getTime()==currentDate.getTime()?' ui-state-active':'')+
                    (otherMonth?' ui-priority-secondary':'')+'" href="#">'+printDate.getDate()+'</a>'))+'</td>';
                printDate.setDate(printDate.getDate()+1);
                printDate=this._daylightSavingAdjust(printDate);
            }
            calender+=tbody+'</tr>';
        }
        drawMonth++;
        if(drawMonth>11){
            drawMonth=0;
            drawYear++;
        }
        calender+='</tbody></table>'+(isMultiMonth?'</div>'+
            ((numMonths[0]>0&&col==numMonths[1]-1)?'<div class="ui-datepicker-row-break"></div>':''):'');
        group+=calender;
    }
    html+=group;
}
html+=buttonPanel+($.ui.ie6&&!inst.inline?'<iframe src="javascript:false;" class="ui-datepicker-cover" frameborder="0"></iframe>':'');
inst._keyEvent=false;
return html;
},
_generateMonthYearHeader:function(inst,drawMonth,drawYear,minDate,maxDate,secondary,monthNames,monthNamesShort){
    var changeMonth=this._get(inst,'changeMonth');
    var changeYear=this._get(inst,'changeYear');
    var showMonthAfterYear=this._get(inst,'showMonthAfterYear');
    var html='<div class="ui-datepicker-title">';
    var monthHtml='';
    if(secondary||!changeMonth)
        monthHtml+='<span class="ui-datepicker-month">'+monthNames[drawMonth]+'</span>';
    else{
        var inMinYear=(minDate&&minDate.getFullYear()==drawYear);
        var inMaxYear=(maxDate&&maxDate.getFullYear()==drawYear);
        monthHtml+='<select class="ui-datepicker-month" data-handler="selectMonth" data-event="change">';
        for(var month=0;month<12;month++){
            if((!inMinYear||month>=minDate.getMonth())&&(!inMaxYear||month<=maxDate.getMonth()))
                monthHtml+='<option value="'+month+'"'+
                (month==drawMonth?' selected="selected"':'')+'>'+monthNamesShort[month]+'</option>';
        }
        monthHtml+='</select>';
    }
    if(!showMonthAfterYear)
        html+=monthHtml+(secondary||!(changeMonth&&changeYear)?'&#xa0;':'');
    if(!inst.yearshtml){
        inst.yearshtml='';
        if(secondary||!changeYear)
            html+='<span class="ui-datepicker-year">'+drawYear+'</span>';
        else{
            var years=this._get(inst,'yearRange').split(':');
            var thisYear=new Date().getFullYear();
            var determineYear=function(value){
                var year=(value.match(/c[+-].*/)?drawYear+parseInt(value.substring(1),10):(value.match(/[+-].*/)?thisYear+parseInt(value,10):parseInt(value,10)));
                return(isNaN(year)?thisYear:year);
            };
            
            var year=determineYear(years[0]);
            var endYear=Math.max(year,determineYear(years[1]||''));
            year=(minDate?Math.max(year,minDate.getFullYear()):year);
            endYear=(maxDate?Math.min(endYear,maxDate.getFullYear()):endYear);
            inst.yearshtml+='<select class="ui-datepicker-year" data-handler="selectYear" data-event="change">';
            for(;year<=endYear;year++){
                inst.yearshtml+='<option value="'+year+'"'+
                (year==drawYear?' selected="selected"':'')+'>'+year+'</option>';
            }
            inst.yearshtml+='</select>';
            html+=inst.yearshtml;
            inst.yearshtml=null;
        }
    }
html+=this._get(inst,'yearSuffix');
if(showMonthAfterYear)
    html+=(secondary||!(changeMonth&&changeYear)?'&#xa0;':'')+monthHtml;
html+='</div>';
return html;
},
_adjustInstDate:function(inst,offset,period){
    var year=inst.drawYear+(period=='Y'?offset:0);
    var month=inst.drawMonth+(period=='M'?offset:0);
    var day=Math.min(inst.selectedDay,this._getDaysInMonth(year,month))+
    (period=='D'?offset:0);
    var date=this._restrictMinMax(inst,this._daylightSavingAdjust(new Date(year,month,day)));
    inst.selectedDay=date.getDate();
    inst.drawMonth=inst.selectedMonth=date.getMonth();
    inst.drawYear=inst.selectedYear=date.getFullYear();
    if(period=='M'||period=='Y')
        this._notifyChange(inst);
},
_restrictMinMax:function(inst,date){
    var minDate=this._getMinMaxDate(inst,'min');
    var maxDate=this._getMinMaxDate(inst,'max');
    var newDate=(minDate&&date<minDate?minDate:date);
    newDate=(maxDate&&newDate>maxDate?maxDate:newDate);
    return newDate;
},
_notifyChange:function(inst){
    var onChange=this._get(inst,'onChangeMonthYear');
    if(onChange)
        onChange.apply((inst.input?inst.input[0]:null),[inst.selectedYear,inst.selectedMonth+1,inst]);
},
_getNumberOfMonths:function(inst){
    var numMonths=this._get(inst,'numberOfMonths');
    return(numMonths==null?[1,1]:(typeof numMonths=='number'?[1,numMonths]:numMonths));
},
_getMinMaxDate:function(inst,minMax){
    return this._determineDate(inst,this._get(inst,minMax+'Date'),null);
},
_getDaysInMonth:function(year,month){
    return 32-this._daylightSavingAdjust(new Date(year,month,32)).getDate();
},
_getFirstDayOfMonth:function(year,month){
    return new Date(year,month,1).getDay();
},
_canAdjustMonth:function(inst,offset,curYear,curMonth){
    var numMonths=this._getNumberOfMonths(inst);
    var date=this._daylightSavingAdjust(new Date(curYear,curMonth+(offset<0?offset:numMonths[0]*numMonths[1]),1));
    if(offset<0)
        date.setDate(this._getDaysInMonth(date.getFullYear(),date.getMonth()));
    return this._isInRange(inst,date);
},
_isInRange:function(inst,date){
    var minDate=this._getMinMaxDate(inst,'min');
    var maxDate=this._getMinMaxDate(inst,'max');
    return((!minDate||date.getTime()>=minDate.getTime())&&(!maxDate||date.getTime()<=maxDate.getTime()));
},
_getFormatConfig:function(inst){
    var shortYearCutoff=this._get(inst,'shortYearCutoff');
    shortYearCutoff=(typeof shortYearCutoff!='string'?shortYearCutoff:new Date().getFullYear()%100+parseInt(shortYearCutoff,10));
    return{
        shortYearCutoff:shortYearCutoff,
        dayNamesShort:this._get(inst,'dayNamesShort'),
        dayNames:this._get(inst,'dayNames'),
        monthNamesShort:this._get(inst,'monthNamesShort'),
        monthNames:this._get(inst,'monthNames')
        };
    
},
_formatDate:function(inst,day,month,year){
    if(!day){
        inst.currentDay=inst.selectedDay;
        inst.currentMonth=inst.selectedMonth;
        inst.currentYear=inst.selectedYear;
    }
    var date=(day?(typeof day=='object'?day:this._daylightSavingAdjust(new Date(year,month,day))):this._daylightSavingAdjust(new Date(inst.currentYear,inst.currentMonth,inst.currentDay)));
    return this.formatDate(this._get(inst,'dateFormat'),date,this._getFormatConfig(inst));
}
});
function bindHover(dpDiv){
    var selector='button, .ui-datepicker-prev, .ui-datepicker-next, .ui-datepicker-calendar td a';
    return dpDiv.delegate(selector,'mouseout',function(){
        $(this).removeClass('ui-state-hover');
        if(this.className.indexOf('ui-datepicker-prev')!=-1)$(this).removeClass('ui-datepicker-prev-hover');
        if(this.className.indexOf('ui-datepicker-next')!=-1)$(this).removeClass('ui-datepicker-next-hover');
    }).delegate(selector,'mouseover',function(){
        if(!$.datepicker._isDisabledDatepicker(instActive.inline?dpDiv.parent()[0]:instActive.input[0])){
            $(this).parents('.ui-datepicker-calendar').find('a').removeClass('ui-state-hover');
            $(this).addClass('ui-state-hover');
            if(this.className.indexOf('ui-datepicker-prev')!=-1)$(this).addClass('ui-datepicker-prev-hover');
            if(this.className.indexOf('ui-datepicker-next')!=-1)$(this).addClass('ui-datepicker-next-hover');
        }
    });
}
function extendRemove(target,props){
    $.extend(target,props);
    for(var name in props)
        if(props[name]==null||props[name]==undefined)
            target[name]=props[name];return target;
};

$.fn.datepicker=function(options){
    if(!this.length){
        return this;
    }
    if(!$.datepicker.initialized){
        $(document).mousedown($.datepicker._checkExternalClick).find(document.body).append($.datepicker.dpDiv);
        $.datepicker.initialized=true;
    }
    var otherArgs=Array.prototype.slice.call(arguments,1);
    if(typeof options=='string'&&(options=='isDisabled'||options=='getDate'||options=='widget'))
        return $.datepicker['_'+options+'Datepicker'].apply($.datepicker,[this[0]].concat(otherArgs));
    if(options=='option'&&arguments.length==2&&typeof arguments[1]=='string')
        return $.datepicker['_'+options+'Datepicker'].apply($.datepicker,[this[0]].concat(otherArgs));
    return this.each(function(){
        typeof options=='string'?$.datepicker['_'+options+'Datepicker'].apply($.datepicker,[this].concat(otherArgs)):$.datepicker._attachDatepicker(this,options);
    });
};

$.datepicker=new Datepicker();
$.datepicker.initialized=false;
$.datepicker.uuid=new Date().getTime();
$.datepicker.version="1.9.1";
window['DP_jQuery_'+dpuuid]=$;
})(jQuery);
(function($,undefined){
    var uiDialogClasses="ui-dialog ui-widget ui-widget-content ui-corner-all ",sizeRelatedOptions={
        buttons:true,
        height:true,
        maxHeight:true,
        maxWidth:true,
        minHeight:true,
        minWidth:true,
        width:true
    },resizableRelatedOptions={
        maxHeight:true,
        maxWidth:true,
        minHeight:true,
        minWidth:true
    };
    
    $.widget("ui.dialog",{
        version:"1.9.1",
        options:{
            autoOpen:true,
            buttons:{},
            closeOnEscape:true,
            closeText:"close",
            dialogClass:"",
            draggable:true,
            hide:null,
            height:"auto",
            maxHeight:false,
            maxWidth:false,
            minHeight:150,
            minWidth:150,
            modal:false,
            position:{
                my:"center",
                at:"center",
                of:window,
                collision:"fit",
                using:function(pos){
                    var topOffset=$(this).css(pos).offset().top;
                    if(topOffset<0){
                        $(this).css("top",pos.top-topOffset);
                    }
                }
            },
    resizable:true,
    show:null,
    stack:true,
    title:"",
    width:300,
    zIndex:1000
    },
    _create:function(){
        this.originalTitle=this.element.attr("title");
        if(typeof this.originalTitle!=="string"){
            this.originalTitle="";
        }
        this.oldPosition={
            parent:this.element.parent(),
            index:this.element.parent().children().index(this.element)
            };
            
        this.options.title=this.options.title||this.originalTitle;
        var that=this,options=this.options,title=options.title||"&#160;",uiDialog,uiDialogTitlebar,uiDialogTitlebarClose,uiDialogTitle,uiDialogButtonPane;
        uiDialog=(this.uiDialog=$("<div>")).addClass(uiDialogClasses+options.dialogClass).css({
            display:"none",
            outline:0,
            zIndex:options.zIndex
            }).attr("tabIndex",-1).keydown(function(event){
            if(options.closeOnEscape&&!event.isDefaultPrevented()&&event.keyCode&&event.keyCode===$.ui.keyCode.ESCAPE){
                that.close(event);
                event.preventDefault();
            }
        }).mousedown(function(event){
        that.moveToTop(false,event);
    }).appendTo("body");
    this.element.show().removeAttr("title").addClass("ui-dialog-content ui-widget-content").appendTo(uiDialog);
    uiDialogTitlebar=(this.uiDialogTitlebar=$("<div>")).addClass("ui-dialog-titlebar  ui-widget-header  "+"ui-corner-all  ui-helper-clearfix").bind("mousedown",function(){
        uiDialog.focus();
    }).prependTo(uiDialog);
    uiDialogTitlebarClose=$("<a href='#'></a>").addClass("ui-dialog-titlebar-close  ui-corner-all").attr("role","button").click(function(event){
        event.preventDefault();
        that.close(event);
    }).appendTo(uiDialogTitlebar);
    (this.uiDialogTitlebarCloseText=$("<span>")).addClass("ui-icon ui-icon-closethick").text(options.closeText).appendTo(uiDialogTitlebarClose);
    uiDialogTitle=$("<span>").uniqueId().addClass("ui-dialog-title").html(title).prependTo(uiDialogTitlebar);
    uiDialogButtonPane=(this.uiDialogButtonPane=$("<div>")).addClass("ui-dialog-buttonpane ui-widget-content ui-helper-clearfix");
    (this.uiButtonSet=$("<div>")).addClass("ui-dialog-buttonset").appendTo(uiDialogButtonPane);
    uiDialog.attr({
        role:"dialog",
        "aria-labelledby":uiDialogTitle.attr("id")
        });
    uiDialogTitlebar.find("*").add(uiDialogTitlebar).disableSelection();
    this._hoverable(uiDialogTitlebarClose);
    this._focusable(uiDialogTitlebarClose);
    if(options.draggable&&$.fn.draggable){
        this._makeDraggable();
    }
    if(options.resizable&&$.fn.resizable){
        this._makeResizable();
    }
    this._createButtons(options.buttons);
    this._isOpen=false;
    if($.fn.bgiframe){
        uiDialog.bgiframe();
    }
    this._on(uiDialog,{
        keydown:function(event){
            if(!options.modal||event.keyCode!==$.ui.keyCode.TAB){
                return;
            }
            var tabbables=$(":tabbable",uiDialog),first=tabbables.filter(":first"),last=tabbables.filter(":last");
            if(event.target===last[0]&&!event.shiftKey){
                first.focus(1);
                return false;
            }else if(event.target===first[0]&&event.shiftKey){
                last.focus(1);
                return false;
            }
        }
    });
},
_init:function(){
    if(this.options.autoOpen){
        this.open();
    }
},
_destroy:function(){
    var next,oldPosition=this.oldPosition;
    if(this.overlay){
        this.overlay.destroy();
    }
    this.uiDialog.hide();
    this.element.removeClass("ui-dialog-content ui-widget-content").hide().appendTo("body");
    this.uiDialog.remove();
    if(this.originalTitle){
        this.element.attr("title",this.originalTitle);
    }
    next=oldPosition.parent.children().eq(oldPosition.index);
    if(next.length&&next[0]!==this.element[0]){
        next.before(this.element);
    }else{
        oldPosition.parent.append(this.element);
    }
},
widget:function(){
    return this.uiDialog;
},
close:function(event){
    var that=this,maxZ,thisZ;
    if(!this._isOpen){
        return;
    }
    if(false===this._trigger("beforeClose",event)){
        return;
    }
    this._isOpen=false;
    if(this.overlay){
        this.overlay.destroy();
    }
    if(this.options.hide){
        this._hide(this.uiDialog,this.options.hide,function(){
            that._trigger("close",event);
        });
    }else{
        this.uiDialog.hide();
        this._trigger("close",event);
    }
    $.ui.dialog.overlay.resize();
    if(this.options.modal){
        maxZ=0;
        $(".ui-dialog").each(function(){
            if(this!==that.uiDialog[0]){
                thisZ=$(this).css("z-index");
                if(!isNaN(thisZ)){
                    maxZ=Math.max(maxZ,thisZ);
                }
            }
        });
$.ui.dialog.maxZ=maxZ;
}
return this;
},
isOpen:function(){
    return this._isOpen;
},
moveToTop:function(force,event){
    var options=this.options,saveScroll;
    if((options.modal&&!force)||(!options.stack&&!options.modal)){
        return this._trigger("focus",event);
    }
    if(options.zIndex>$.ui.dialog.maxZ){
        $.ui.dialog.maxZ=options.zIndex;
    }
    if(this.overlay){
        $.ui.dialog.maxZ+=1;
        $.ui.dialog.overlay.maxZ=$.ui.dialog.maxZ;
        this.overlay.$el.css("z-index",$.ui.dialog.overlay.maxZ);
    }
    saveScroll={
        scrollTop:this.element.scrollTop(),
        scrollLeft:this.element.scrollLeft()
        };
        
    $.ui.dialog.maxZ+=1;
    this.uiDialog.css("z-index",$.ui.dialog.maxZ);
    this.element.attr(saveScroll);
    this._trigger("focus",event);
    return this;
},
open:function(){
    if(this._isOpen){
        return;
    }
    var hasFocus,options=this.options,uiDialog=this.uiDialog;
    this._size();
    this._position(options.position);
    uiDialog.show(options.show);
    this.overlay=options.modal?new $.ui.dialog.overlay(this):null;
    this.moveToTop(true);
    hasFocus=this.element.find(":tabbable");
    if(!hasFocus.length){
        hasFocus=this.uiDialogButtonPane.find(":tabbable");
        if(!hasFocus.length){
            hasFocus=uiDialog;
        }
    }
hasFocus.eq(0).focus();
this._isOpen=true;
this._trigger("open");
return this;
},
_createButtons:function(buttons){
    var that=this,hasButtons=false;
    this.uiDialogButtonPane.remove();
    this.uiButtonSet.empty();
    if(typeof buttons==="object"&&buttons!==null){
        $.each(buttons,function(){
            return!(hasButtons=true);
        });
    }
    if(hasButtons){
        $.each(buttons,function(name,props){
            props=$.isFunction(props)?{
                click:props,
                text:name
            }:props;
            var button=$("<button type='button'></button>").attr(props,true).unbind("click").click(function(){
                props.click.apply(that.element[0],arguments);
            }).appendTo(that.uiButtonSet);
            if($.fn.button){
                button.button();
            }
        });
    this.uiDialog.addClass("ui-dialog-buttons");
    this.uiDialogButtonPane.appendTo(this.uiDialog);
}else{
    this.uiDialog.removeClass("ui-dialog-buttons");
}
},
_makeDraggable:function(){
    var that=this,options=this.options;
    function filteredUi(ui){
        return{
            position:ui.position,
            offset:ui.offset
            };
        
}
this.uiDialog.draggable({
    cancel:".ui-dialog-content, .ui-dialog-titlebar-close",
    handle:".ui-dialog-titlebar",
    containment:"document",
    start:function(event,ui){
        $(this).addClass("ui-dialog-dragging");
        that._trigger("dragStart",event,filteredUi(ui));
    },
    drag:function(event,ui){
        that._trigger("drag",event,filteredUi(ui));
    },
    stop:function(event,ui){
        options.position=[ui.position.left-that.document.scrollLeft(),ui.position.top-that.document.scrollTop()];
        $(this).removeClass("ui-dialog-dragging");
        that._trigger("dragStop",event,filteredUi(ui));
        $.ui.dialog.overlay.resize();
    }
});
},
_makeResizable:function(handles){
    handles=(handles===undefined?this.options.resizable:handles);
    var that=this,options=this.options,position=this.uiDialog.css("position"),resizeHandles=typeof handles==='string'?handles:"n,e,s,w,se,sw,ne,nw";
    function filteredUi(ui){
        return{
            originalPosition:ui.originalPosition,
            originalSize:ui.originalSize,
            position:ui.position,
            size:ui.size
            };
        
}
this.uiDialog.resizable({
    cancel:".ui-dialog-content",
    containment:"document",
    alsoResize:this.element,
    maxWidth:options.maxWidth,
    maxHeight:options.maxHeight,
    minWidth:options.minWidth,
    minHeight:this._minHeight(),
    handles:resizeHandles,
    start:function(event,ui){
        $(this).addClass("ui-dialog-resizing");
        that._trigger("resizeStart",event,filteredUi(ui));
    },
    resize:function(event,ui){
        that._trigger("resize",event,filteredUi(ui));
    },
    stop:function(event,ui){
        $(this).removeClass("ui-dialog-resizing");
        options.height=$(this).height();
        options.width=$(this).width();
        that._trigger("resizeStop",event,filteredUi(ui));
        $.ui.dialog.overlay.resize();
    }
}).css("position",position).find(".ui-resizable-se").addClass("ui-icon ui-icon-grip-diagonal-se");
},
_minHeight:function(){
    var options=this.options;
    if(options.height==="auto"){
        return options.minHeight;
    }else{
        return Math.min(options.minHeight,options.height);
    }
},
_position:function(position){
    var myAt=[],offset=[0,0],isVisible;
    if(position){
        if(typeof position==="string"||(typeof position==="object"&&"0"in position)){
            myAt=position.split?position.split(" "):[position[0],position[1]];
            if(myAt.length===1){
                myAt[1]=myAt[0];
            }
            $.each(["left","top"],function(i,offsetPosition){
                if(+myAt[i]===myAt[i]){
                    offset[i]=myAt[i];
                    myAt[i]=offsetPosition;
                }
            });
        position={
            my:myAt[0]+(offset[0]<0?offset[0]:"+"+offset[0])+" "+
            myAt[1]+(offset[1]<0?offset[1]:"+"+offset[1]),
            at:myAt.join(" ")
            };
        
}
position=$.extend({},$.ui.dialog.prototype.options.position,position);
}else{
    position=$.ui.dialog.prototype.options.position;
}
isVisible=this.uiDialog.is(":visible");
if(!isVisible){
    this.uiDialog.show();
}
this.uiDialog.position(position);
if(!isVisible){
    this.uiDialog.hide();
}
},
_setOptions:function(options){
    var that=this,resizableOptions={},resize=false;
    $.each(options,function(key,value){
        that._setOption(key,value);
        if(key in sizeRelatedOptions){
            resize=true;
        }
        if(key in resizableRelatedOptions){
            resizableOptions[key]=value;
        }
    });
if(resize){
    this._size();
}
if(this.uiDialog.is(":data(resizable)")){
    this.uiDialog.resizable("option",resizableOptions);
}
},
_setOption:function(key,value){
    var isDraggable,isResizable,uiDialog=this.uiDialog;
    switch(key){
        case"buttons":
            this._createButtons(value);
            break;
        case"closeText":
            this.uiDialogTitlebarCloseText.text(""+value);
            break;
        case"dialogClass":
            uiDialog.removeClass(this.options.dialogClass).addClass(uiDialogClasses+value);
            break;
        case"disabled":
            if(value){
            uiDialog.addClass("ui-dialog-disabled");
        }else{
            uiDialog.removeClass("ui-dialog-disabled");
        }
        break;
        case"draggable":
            isDraggable=uiDialog.is(":data(draggable)");
            if(isDraggable&&!value){
            uiDialog.draggable("destroy");
        }
        if(!isDraggable&&value){
            this._makeDraggable();
        }
        break;
        case"position":
            this._position(value);
            break;
        case"resizable":
            isResizable=uiDialog.is(":data(resizable)");
            if(isResizable&&!value){
            uiDialog.resizable("destroy");
        }
        if(isResizable&&typeof value==="string"){
            uiDialog.resizable("option","handles",value);
        }
        if(!isResizable&&value!==false){
            this._makeResizable(value);
        }
        break;
        case"title":
            $(".ui-dialog-title",this.uiDialogTitlebar).html(""+(value||"&#160;"));
            break;
    }
    this._super(key,value);
},
_size:function(){
    var nonContentHeight,minContentHeight,autoHeight,options=this.options,isVisible=this.uiDialog.is(":visible");
    this.element.show().css({
        width:"auto",
        minHeight:0,
        height:0
    });
    if(options.minWidth>options.width){
        options.width=options.minWidth;
    }
    nonContentHeight=this.uiDialog.css({
        height:"auto",
        width:options.width
        }).outerHeight();
    minContentHeight=Math.max(0,options.minHeight-nonContentHeight);
    if(options.height==="auto"){
        if($.support.minHeight){
            this.element.css({
                minHeight:minContentHeight,
                height:"auto"
            });
        }else{
            this.uiDialog.show();
            autoHeight=this.element.css("height","auto").height();
            if(!isVisible){
                this.uiDialog.hide();
            }
            this.element.height(Math.max(autoHeight,minContentHeight));
        }
    }else{
    this.element.height(Math.max(options.height-nonContentHeight,0));
}
if(this.uiDialog.is(":data(resizable)")){
    this.uiDialog.resizable("option","minHeight",this._minHeight());
}
}
});
$.extend($.ui.dialog,{
    uuid:0,
    maxZ:0,
    getTitleId:function($el){
        var id=$el.attr("id");
        if(!id){
            this.uuid+=1;
            id=this.uuid;
        }
        return"ui-dialog-title-"+id;
    },
    overlay:function(dialog){
        this.$el=$.ui.dialog.overlay.create(dialog);
    }
});
$.extend($.ui.dialog.overlay,{
    instances:[],
    oldInstances:[],
    maxZ:0,
    events:$.map("focus,mousedown,mouseup,keydown,keypress,click".split(","),function(event){
        return event+".dialog-overlay";
    }).join(" "),
    create:function(dialog){
        if(this.instances.length===0){
            setTimeout(function(){
                if($.ui.dialog.overlay.instances.length){
                    $(document).bind($.ui.dialog.overlay.events,function(event){
                        if($(event.target).zIndex()<$.ui.dialog.overlay.maxZ&&$(event.target).closest('.ui-dialog').zIndex()<$.ui.dialog.overlay.maxZ){
                            return false;
                        }
                    });
            }
            },1);
    $(window).bind("resize.dialog-overlay",$.ui.dialog.overlay.resize);
}
var $el=(this.oldInstances.pop()||$("<div>").addClass("ui-widget-overlay"));
    $(document).bind("keydown.dialog-overlay",function(event){
    var instances=$.ui.dialog.overlay.instances;
    if(instances.length!==0&&instances[instances.length-1]===$el&&dialog.options.closeOnEscape&&!event.isDefaultPrevented()&&event.keyCode&&event.keyCode===$.ui.keyCode.ESCAPE){
        dialog.close(event);
        event.preventDefault();
    }
});
$el.appendTo(document.body).css({
    width:this.width(),
    height:this.height()
    });
if($.fn.bgiframe){
    $el.bgiframe();
}
this.instances.push($el);
return $el;
},
destroy:function($el){
    var indexOf=$.inArray($el,this.instances),maxZ=0;
    if(indexOf!==-1){
        this.oldInstances.push(this.instances.splice(indexOf,1)[0]);
    }
    if(this.instances.length===0){
        $([document,window]).unbind(".dialog-overlay");
    }
    $el.height(0).width(0).remove();
    $.each(this.instances,function(){
        maxZ=Math.max(maxZ,this.css("z-index"));
    });
    this.maxZ=maxZ;
},
height:function(){
    var scrollHeight,offsetHeight;
    if($.ui.ie){
        scrollHeight=Math.max(document.documentElement.scrollHeight,document.body.scrollHeight);
        offsetHeight=Math.max(document.documentElement.offsetHeight,document.body.offsetHeight);
        if(scrollHeight<offsetHeight){
            return $(window).height()+"px";
        }else{
            return scrollHeight+"px";
        }
    }else{
    return $(document).height()+"px";
}
},
width:function(){
    var scrollWidth,offsetWidth;
    if($.ui.ie){
        scrollWidth=Math.max(document.documentElement.scrollWidth,document.body.scrollWidth);
        offsetWidth=Math.max(document.documentElement.offsetWidth,document.body.offsetWidth);
        if(scrollWidth<offsetWidth){
            return $(window).width()+"px";
        }else{
            return scrollWidth+"px";
        }
    }else{
    return $(document).width()+"px";
}
},
resize:function(){
    var $overlays=$([]);
    $.each($.ui.dialog.overlay.instances,function(){
        $overlays=$overlays.add(this);
    });
    $overlays.css({
        width:0,
        height:0
    }).css({
        width:$.ui.dialog.overlay.width(),
        height:$.ui.dialog.overlay.height()
        });
}
});
$.extend($.ui.dialog.overlay.prototype,{
    destroy:function(){
        $.ui.dialog.overlay.destroy(this.$el);
    }
});
}(jQuery));
(function($,undefined){
    var mouseHandled=false;
    $.widget("ui.menu",{
        version:"1.9.1",
        defaultElement:"<ul>",
        delay:300,
        options:{
            icons:{
                submenu:"ui-icon-carat-1-e"
            },
            menus:"ul",
            position:{
                my:"left top",
                at:"right top"
            },
            role:"menu",
            blur:null,
            focus:null,
            select:null
        },
        _create:function(){
            this.activeMenu=this.element;
            this.element.uniqueId().addClass("ui-menu ui-widget ui-widget-content ui-corner-all").toggleClass("ui-menu-icons",!!this.element.find(".ui-icon").length).attr({
                role:this.options.role,
                tabIndex:0
            }).bind("click"+this.eventNamespace,$.proxy(function(event){
                if(this.options.disabled){
                    event.preventDefault();
                }
            },this));
        if(this.options.disabled){
            this.element.addClass("ui-state-disabled").attr("aria-disabled","true");
        }
        this._on({
            "mousedown .ui-menu-item > a":function(event){
                event.preventDefault();
            },
            "click .ui-state-disabled > a":function(event){
                event.preventDefault();
            },
            "click .ui-menu-item:has(a)":function(event){
                var target=$(event.target).closest(".ui-menu-item");
                if(!mouseHandled&&target.not(".ui-state-disabled").length){
                    mouseHandled=true;
                    this.select(event);
                    if(target.has(".ui-menu").length){
                        this.expand(event);
                    }else if(!this.element.is(":focus")){
                        this.element.trigger("focus",[true]);
                        if(this.active&&this.active.parents(".ui-menu").length===1){
                            clearTimeout(this.timer);
                        }
                    }
                }
        },
    "mouseenter .ui-menu-item":function(event){
        var target=$(event.currentTarget);
        target.siblings().children(".ui-state-active").removeClass("ui-state-active");
        this.focus(event,target);
    },
    mouseleave:"collapseAll",
    "mouseleave .ui-menu":"collapseAll",
    focus:function(event,keepActiveItem){
        var item=this.active||this.element.children(".ui-menu-item").eq(0);
        if(!keepActiveItem){
            this.focus(event,item);
        }
    },
    blur:function(event){
        this._delay(function(){
            if(!$.contains(this.element[0],this.document[0].activeElement)){
                this.collapseAll(event);
            }
        });
},
keydown:"_keydown"
});
this.refresh();
this._on(this.document,{
    click:function(event){
        if(!$(event.target).closest(".ui-menu").length){
            this.collapseAll(event);
        }
        mouseHandled=false;
    }
});
},
_destroy:function(){
    this.element.removeAttr("aria-activedescendant").find(".ui-menu").andSelf().removeClass("ui-menu ui-widget ui-widget-content ui-corner-all ui-menu-icons").removeAttr("role").removeAttr("tabIndex").removeAttr("aria-labelledby").removeAttr("aria-expanded").removeAttr("aria-hidden").removeAttr("aria-disabled").removeUniqueId().show();
    this.element.find(".ui-menu-item").removeClass("ui-menu-item").removeAttr("role").removeAttr("aria-disabled").children("a").removeUniqueId().removeClass("ui-corner-all ui-state-hover").removeAttr("tabIndex").removeAttr("role").removeAttr("aria-haspopup").children().each(function(){
        var elem=$(this);
        if(elem.data("ui-menu-submenu-carat")){
            elem.remove();
        }
    });
this.element.find(".ui-menu-divider").removeClass("ui-menu-divider ui-widget-content");
},
_keydown:function(event){
    var match,prev,character,skip,regex,preventDefault=true;
    function escape(value){
        return value.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g,"\\$&");
    }
    switch(event.keyCode){
        case $.ui.keyCode.PAGE_UP:
            this.previousPage(event);
            break;
        case $.ui.keyCode.PAGE_DOWN:
            this.nextPage(event);
            break;
        case $.ui.keyCode.HOME:
            this._move("first","first",event);
            break;
        case $.ui.keyCode.END:
            this._move("last","last",event);
            break;
        case $.ui.keyCode.UP:
            this.previous(event);
            break;
        case $.ui.keyCode.DOWN:
            this.next(event);
            break;
        case $.ui.keyCode.LEFT:
            this.collapse(event);
            break;
        case $.ui.keyCode.RIGHT:
            if(this.active&&!this.active.is(".ui-state-disabled")){
            this.expand(event);
        }
        break;
        case $.ui.keyCode.ENTER:case $.ui.keyCode.SPACE:
            this._activate(event);
            break;
        case $.ui.keyCode.ESCAPE:
            this.collapse(event);
            break;
        default:
            preventDefault=false;
            prev=this.previousFilter||"";
            character=String.fromCharCode(event.keyCode);
            skip=false;
            clearTimeout(this.filterTimer);
            if(character===prev){
            skip=true;
        }else{
            character=prev+character;
        }
        regex=new RegExp("^"+escape(character),"i");
            match=this.activeMenu.children(".ui-menu-item").filter(function(){
            return regex.test($(this).children("a").text());
        });
        match=skip&&match.index(this.active.next())!==-1?this.active.nextAll(".ui-menu-item"):match;
            if(!match.length){
            character=String.fromCharCode(event.keyCode);
            regex=new RegExp("^"+escape(character),"i");
            match=this.activeMenu.children(".ui-menu-item").filter(function(){
                return regex.test($(this).children("a").text());
            });
        }
        if(match.length){
            this.focus(event,match);
            if(match.length>1){
                this.previousFilter=character;
                this.filterTimer=this._delay(function(){
                    delete this.previousFilter;
                },1000);
            }else{
                delete this.previousFilter;
            }
        }else{
            delete this.previousFilter;
        }
    }
if(preventDefault){
    event.preventDefault();
}
},
_activate:function(event){
    if(!this.active.is(".ui-state-disabled")){
        if(this.active.children("a[aria-haspopup='true']").length){
            this.expand(event);
        }else{
            this.select(event);
        }
    }
},
refresh:function(){
    var menus,icon=this.options.icons.submenu,submenus=this.element.find(this.options.menus+":not(.ui-menu)").addClass("ui-menu ui-widget ui-widget-content ui-corner-all").hide().attr({
        role:this.options.role,
        "aria-hidden":"true",
        "aria-expanded":"false"
    });
    menus=submenus.add(this.element);
    menus.children(":not(.ui-menu-item):has(a)").addClass("ui-menu-item").attr("role","presentation").children("a").uniqueId().addClass("ui-corner-all").attr({
        tabIndex:-1,
        role:this._itemRole()
        });
    menus.children(":not(.ui-menu-item)").each(function(){
        var item=$(this);
        if(!/[^\-—–\s]/.test(item.text())){
            item.addClass("ui-widget-content ui-menu-divider");
        }
    });
menus.children(".ui-state-disabled").attr("aria-disabled","true");
submenus.each(function(){
    var menu=$(this),item=menu.prev("a"),submenuCarat=$("<span>").addClass("ui-menu-icon ui-icon "+icon).data("ui-menu-submenu-carat",true);
    item.attr("aria-haspopup","true").prepend(submenuCarat);
    menu.attr("aria-labelledby",item.attr("id"));
});
if(this.active&&!$.contains(this.element[0],this.active[0])){
    this.blur();
}
},
_itemRole:function(){
    return{
        menu:"menuitem",
        listbox:"option"
    }
    [this.options.role];
},
focus:function(event,item){
    var nested,focused;
    this.blur(event,event&&event.type==="focus");
    this._scrollIntoView(item);
    this.active=item.first();
    focused=this.active.children("a").addClass("ui-state-focus");
    if(this.options.role){
        this.element.attr("aria-activedescendant",focused.attr("id"));
    }
    this.active.parent().closest(".ui-menu-item").children("a:first").addClass("ui-state-active");
    if(event&&event.type==="keydown"){
        this._close();
    }else{
        this.timer=this._delay(function(){
            this._close();
        },this.delay);
    }
    nested=item.children(".ui-menu");
    if(nested.length&&(/^mouse/.test(event.type))){
        this._startOpening(nested);
    }
    this.activeMenu=item.parent();
    this._trigger("focus",event,{
        item:item
    });
},
_scrollIntoView:function(item){
    var borderTop,paddingTop,offset,scroll,elementHeight,itemHeight;
    if(this._hasScroll()){
        borderTop=parseFloat($.css(this.activeMenu[0],"borderTopWidth"))||0;
        paddingTop=parseFloat($.css(this.activeMenu[0],"paddingTop"))||0;
        offset=item.offset().top-this.activeMenu.offset().top-borderTop-paddingTop;
        scroll=this.activeMenu.scrollTop();
        elementHeight=this.activeMenu.height();
        itemHeight=item.height();
        if(offset<0){
            this.activeMenu.scrollTop(scroll+offset);
        }else if(offset+itemHeight>elementHeight){
            this.activeMenu.scrollTop(scroll+offset-elementHeight+itemHeight);
        }
    }
},
blur:function(event,fromFocus){
    if(!fromFocus){
        clearTimeout(this.timer);
    }
    if(!this.active){
        return;
    }
    this.active.children("a").removeClass("ui-state-focus");
    this.active=null;
    this._trigger("blur",event,{
        item:this.active
        });
},
_startOpening:function(submenu){
    clearTimeout(this.timer);
    if(submenu.attr("aria-hidden")!=="true"){
        return;
    }
    this.timer=this._delay(function(){
        this._close();
        this._open(submenu);
    },this.delay);
},
_open:function(submenu){
    var position=$.extend({
        of:this.active
        },this.options.position);
    clearTimeout(this.timer);
    this.element.find(".ui-menu").not(submenu.parents(".ui-menu")).hide().attr("aria-hidden","true");
    submenu.show().removeAttr("aria-hidden").attr("aria-expanded","true").position(position);
},
collapseAll:function(event,all){
    clearTimeout(this.timer);
    this.timer=this._delay(function(){
        var currentMenu=all?this.element:$(event&&event.target).closest(this.element.find(".ui-menu"));
        if(!currentMenu.length){
            currentMenu=this.element;
        }
        this._close(currentMenu);
        this.blur(event);
        this.activeMenu=currentMenu;
    },this.delay);
},
_close:function(startMenu){
    if(!startMenu){
        startMenu=this.active?this.active.parent():this.element;
    }
    startMenu.find(".ui-menu").hide().attr("aria-hidden","true").attr("aria-expanded","false").end().find("a.ui-state-active").removeClass("ui-state-active");
},
collapse:function(event){
    var newItem=this.active&&this.active.parent().closest(".ui-menu-item",this.element);
    if(newItem&&newItem.length){
        this._close();
        this.focus(event,newItem);
    }
},
expand:function(event){
    var newItem=this.active&&this.active.children(".ui-menu ").children(".ui-menu-item").first();
    if(newItem&&newItem.length){
        this._open(newItem.parent());
        this._delay(function(){
            this.focus(event,newItem);
        });
    }
},
next:function(event){
    this._move("next","first",event);
},
previous:function(event){
    this._move("prev","last",event);
},
isFirstItem:function(){
    return this.active&&!this.active.prevAll(".ui-menu-item").length;
},
isLastItem:function(){
    return this.active&&!this.active.nextAll(".ui-menu-item").length;
},
_move:function(direction,filter,event){
    var next;
    if(this.active){
        if(direction==="first"||direction==="last"){
            next=this.active
            [direction==="first"?"prevAll":"nextAll"](".ui-menu-item").eq(-1);
        }else{
            next=this.active
            [direction+"All"](".ui-menu-item").eq(0);
        }
    }
if(!next||!next.length||!this.active){
    next=this.activeMenu.children(".ui-menu-item")[filter]();
}
this.focus(event,next);
},
nextPage:function(event){
    var item,base,height;
    if(!this.active){
        this.next(event);
        return;
    }
    if(this.isLastItem()){
        return;
    }
    if(this._hasScroll()){
        base=this.active.offset().top;
        height=this.element.height();
        this.active.nextAll(".ui-menu-item").each(function(){
            item=$(this);
            return item.offset().top-base-height<0;
        });
        this.focus(event,item);
    }else{
        this.focus(event,this.activeMenu.children(".ui-menu-item")
            [!this.active?"first":"last"]());
    }
},
previousPage:function(event){
    var item,base,height;
    if(!this.active){
        this.next(event);
        return;
    }
    if(this.isFirstItem()){
        return;
    }
    if(this._hasScroll()){
        base=this.active.offset().top;
        height=this.element.height();
        this.active.prevAll(".ui-menu-item").each(function(){
            item=$(this);
            return item.offset().top-base+height>0;
        });
        this.focus(event,item);
    }else{
        this.focus(event,this.activeMenu.children(".ui-menu-item").first());
    }
},
_hasScroll:function(){
    return this.element.outerHeight()<this.element.prop("scrollHeight");
},
select:function(event){
    this.active=this.active||$(event.target).closest(".ui-menu-item");
    var ui={
        item:this.active
        };
        
    if(!this.active.has(".ui-menu").length){
        this.collapseAll(event,true);
    }
    this._trigger("select",event,ui);
}
});
}(jQuery));
(function($,undefined){
    $.widget("ui.progressbar",{
        version:"1.9.1",
        options:{
            value:0,
            max:100
        },
        min:0,
        _create:function(){
            this.element.addClass("ui-progressbar ui-widget ui-widget-content ui-corner-all").attr({
                role:"progressbar",
                "aria-valuemin":this.min,
                "aria-valuemax":this.options.max,
                "aria-valuenow":this._value()
                });
            this.valueDiv=$("<div class='ui-progressbar-value ui-widget-header ui-corner-left'></div>").appendTo(this.element);
            this.oldValue=this._value();
            this._refreshValue();
        },
        _destroy:function(){
            this.element.removeClass("ui-progressbar ui-widget ui-widget-content ui-corner-all").removeAttr("role").removeAttr("aria-valuemin").removeAttr("aria-valuemax").removeAttr("aria-valuenow");
            this.valueDiv.remove();
        },
        value:function(newValue){
            if(newValue===undefined){
                return this._value();
            }
            this._setOption("value",newValue);
            return this;
        },
        _setOption:function(key,value){
            if(key==="value"){
                this.options.value=value;
                this._refreshValue();
                if(this._value()===this.options.max){
                    this._trigger("complete");
                }
            }
        this._super(key,value);
    },
    _value:function(){
        var val=this.options.value;
        if(typeof val!=="number"){
            val=0;
        }
        return Math.min(this.options.max,Math.max(this.min,val));
    },
    _percentage:function(){
        return 100*this._value()/this.options.max;
    },
    _refreshValue:function(){
        var value=this.value(),percentage=this._percentage();
        if(this.oldValue!==value){
            this.oldValue=value;
            this._trigger("change");
        }
        this.valueDiv.toggle(value>this.min).toggleClass("ui-corner-right",value===this.options.max).width(percentage.toFixed(0)+"%");
        this.element.attr("aria-valuenow",value);
    }
    });
})(jQuery);
(function($,undefined){
    var numPages=5;
    $.widget("ui.slider",$.ui.mouse,{
        version:"1.9.1",
        widgetEventPrefix:"slide",
        options:{
            animate:false,
            distance:0,
            max:100,
            min:0,
            orientation:"horizontal",
            range:false,
            step:1,
            value:0,
            values:null
        },
        _create:function(){
            var i,handleCount,o=this.options,existingHandles=this.element.find(".ui-slider-handle").addClass("ui-state-default ui-corner-all"),handle="<a class='ui-slider-handle ui-state-default ui-corner-all' href='#'></a>",handles=[];
            this._keySliding=false;
            this._mouseSliding=false;
            this._animateOff=true;
            this._handleIndex=null;
            this._detectOrientation();
            this._mouseInit();
            this.element.addClass("ui-slider"+" ui-slider-"+this.orientation+" ui-widget"+" ui-widget-content"+" ui-corner-all"+
                (o.disabled?" ui-slider-disabled ui-disabled":""));
            this.range=$([]);
            if(o.range){
                if(o.range===true){
                    if(!o.values){
                        o.values=[this._valueMin(),this._valueMin()];
                    }
                    if(o.values.length&&o.values.length!==2){
                        o.values=[o.values[0],o.values[0]];
                    }
                }
            this.range=$("<div></div>").appendTo(this.element).addClass("ui-slider-range"+" ui-widget-header"+
                ((o.range==="min"||o.range==="max")?" ui-slider-range-"+o.range:""));
        }
        handleCount=(o.values&&o.values.length)||1;
        for(i=existingHandles.length;i<handleCount;i++){
            handles.push(handle);
        }
        this.handles=existingHandles.add($(handles.join("")).appendTo(this.element));
        this.handle=this.handles.eq(0);
        this.handles.add(this.range).filter("a").click(function(event){
            event.preventDefault();
        }).mouseenter(function(){
            if(!o.disabled){
                $(this).addClass("ui-state-hover");
            }
        }).mouseleave(function(){
        $(this).removeClass("ui-state-hover");
    }).focus(function(){
        if(!o.disabled){
            $(".ui-slider .ui-state-focus").removeClass("ui-state-focus");
            $(this).addClass("ui-state-focus");
        }else{
            $(this).blur();
        }
    }).blur(function(){
        $(this).removeClass("ui-state-focus");
    });
    this.handles.each(function(i){
        $(this).data("ui-slider-handle-index",i);
    });
    this._on(this.handles,{
        keydown:function(event){
            var allowed,curVal,newVal,step,index=$(event.target).data("ui-slider-handle-index");
            switch(event.keyCode){
                case $.ui.keyCode.HOME:case $.ui.keyCode.END:case $.ui.keyCode.PAGE_UP:case $.ui.keyCode.PAGE_DOWN:case $.ui.keyCode.UP:case $.ui.keyCode.RIGHT:case $.ui.keyCode.DOWN:case $.ui.keyCode.LEFT:
                    event.preventDefault();
                    if(!this._keySliding){
                    this._keySliding=true;
                    $(event.target).addClass("ui-state-active");
                    allowed=this._start(event,index);
                    if(allowed===false){
                        return;
                    }
                }
                break;
        }
        step=this.options.step;
        if(this.options.values&&this.options.values.length){
            curVal=newVal=this.values(index);
        }else{
            curVal=newVal=this.value();
        }
        switch(event.keyCode){
            case $.ui.keyCode.HOME:
                newVal=this._valueMin();
                break;
            case $.ui.keyCode.END:
                newVal=this._valueMax();
                break;
            case $.ui.keyCode.PAGE_UP:
                newVal=this._trimAlignValue(curVal+((this._valueMax()-this._valueMin())/numPages));
                break;
            case $.ui.keyCode.PAGE_DOWN:
                newVal=this._trimAlignValue(curVal-((this._valueMax()-this._valueMin())/numPages));
                break;
            case $.ui.keyCode.UP:case $.ui.keyCode.RIGHT:
                if(curVal===this._valueMax()){
                return;
            }
            newVal=this._trimAlignValue(curVal+step);
                break;
            case $.ui.keyCode.DOWN:case $.ui.keyCode.LEFT:
                if(curVal===this._valueMin()){
                return;
            }
            newVal=this._trimAlignValue(curVal-step);
                break;
        }
        this._slide(event,index,newVal);
    },
    keyup:function(event){
        var index=$(event.target).data("ui-slider-handle-index");
        if(this._keySliding){
            this._keySliding=false;
            this._stop(event,index);
            this._change(event,index);
            $(event.target).removeClass("ui-state-active");
        }
    }
    });
this._refreshValue();
this._animateOff=false;
},
_destroy:function(){
    this.handles.remove();
    this.range.remove();
    this.element.removeClass("ui-slider"+" ui-slider-horizontal"+" ui-slider-vertical"+" ui-slider-disabled"+" ui-widget"+" ui-widget-content"+" ui-corner-all");
    this._mouseDestroy();
},
_mouseCapture:function(event){
    var position,normValue,distance,closestHandle,index,allowed,offset,mouseOverHandle,that=this,o=this.options;
    if(o.disabled){
        return false;
    }
    this.elementSize={
        width:this.element.outerWidth(),
        height:this.element.outerHeight()
        };
        
    this.elementOffset=this.element.offset();
    position={
        x:event.pageX,
        y:event.pageY
        };
        
    normValue=this._normValueFromMouse(position);
    distance=this._valueMax()-this._valueMin()+1;
    this.handles.each(function(i){
        var thisDistance=Math.abs(normValue-that.values(i));
        if(distance>thisDistance){
            distance=thisDistance;
            closestHandle=$(this);
            index=i;
        }
    });
if(o.range===true&&this.values(1)===o.min){
    index+=1;
    closestHandle=$(this.handles[index]);
}
allowed=this._start(event,index);
if(allowed===false){
    return false;
}
this._mouseSliding=true;
this._handleIndex=index;
closestHandle.addClass("ui-state-active").focus();
offset=closestHandle.offset();
mouseOverHandle=!$(event.target).parents().andSelf().is(".ui-slider-handle");
this._clickOffset=mouseOverHandle?{
    left:0,
    top:0
}:{
    left:event.pageX-offset.left-(closestHandle.width()/2),
    top:event.pageY-offset.top-
    (closestHandle.height()/2)-
    (parseInt(closestHandle.css("borderTopWidth"),10)||0)-
    (parseInt(closestHandle.css("borderBottomWidth"),10)||0)+
    (parseInt(closestHandle.css("marginTop"),10)||0)
    };
    
if(!this.handles.hasClass("ui-state-hover")){
    this._slide(event,index,normValue);
}
this._animateOff=true;
return true;
},
_mouseStart:function(){
    return true;
},
_mouseDrag:function(event){
    var position={
        x:event.pageX,
        y:event.pageY
        },normValue=this._normValueFromMouse(position);
    this._slide(event,this._handleIndex,normValue);
    return false;
},
_mouseStop:function(event){
    this.handles.removeClass("ui-state-active");
    this._mouseSliding=false;
    this._stop(event,this._handleIndex);
    this._change(event,this._handleIndex);
    this._handleIndex=null;
    this._clickOffset=null;
    this._animateOff=false;
    return false;
},
_detectOrientation:function(){
    this.orientation=(this.options.orientation==="vertical")?"vertical":"horizontal";
},
_normValueFromMouse:function(position){
    var pixelTotal,pixelMouse,percentMouse,valueTotal,valueMouse;
    if(this.orientation==="horizontal"){
        pixelTotal=this.elementSize.width;
        pixelMouse=position.x-this.elementOffset.left-(this._clickOffset?this._clickOffset.left:0);
    }else{
        pixelTotal=this.elementSize.height;
        pixelMouse=position.y-this.elementOffset.top-(this._clickOffset?this._clickOffset.top:0);
    }
    percentMouse=(pixelMouse/pixelTotal);
    if(percentMouse>1){
        percentMouse=1;
    }
    if(percentMouse<0){
        percentMouse=0;
    }
    if(this.orientation==="vertical"){
        percentMouse=1-percentMouse;
    }
    valueTotal=this._valueMax()-this._valueMin();
    valueMouse=this._valueMin()+percentMouse*valueTotal;
    return this._trimAlignValue(valueMouse);
},
_start:function(event,index){
    var uiHash={
        handle:this.handles[index],
        value:this.value()
        };
        
    if(this.options.values&&this.options.values.length){
        uiHash.value=this.values(index);
        uiHash.values=this.values();
    }
    return this._trigger("start",event,uiHash);
},
_slide:function(event,index,newVal){
    var otherVal,newValues,allowed;
    if(this.options.values&&this.options.values.length){
        otherVal=this.values(index?0:1);
        if((this.options.values.length===2&&this.options.range===true)&&((index===0&&newVal>otherVal)||(index===1&&newVal<otherVal))){
            newVal=otherVal;
        }
        if(newVal!==this.values(index)){
            newValues=this.values();
            newValues[index]=newVal;
            allowed=this._trigger("slide",event,{
                handle:this.handles[index],
                value:newVal,
                values:newValues
            });
            otherVal=this.values(index?0:1);
            if(allowed!==false){
                this.values(index,newVal,true);
            }
        }
    }else{
    if(newVal!==this.value()){
        allowed=this._trigger("slide",event,{
            handle:this.handles[index],
            value:newVal
        });
        if(allowed!==false){
            this.value(newVal);
        }
    }
}
},
_stop:function(event,index){
    var uiHash={
        handle:this.handles[index],
        value:this.value()
        };
        
    if(this.options.values&&this.options.values.length){
        uiHash.value=this.values(index);
        uiHash.values=this.values();
    }
    this._trigger("stop",event,uiHash);
},
_change:function(event,index){
    if(!this._keySliding&&!this._mouseSliding){
        var uiHash={
            handle:this.handles[index],
            value:this.value()
            };
            
        if(this.options.values&&this.options.values.length){
            uiHash.value=this.values(index);
            uiHash.values=this.values();
        }
        this._trigger("change",event,uiHash);
    }
},
value:function(newValue){
    if(arguments.length){
        this.options.value=this._trimAlignValue(newValue);
        this._refreshValue();
        this._change(null,0);
        return;
    }
    return this._value();
},
values:function(index,newValue){
    var vals,newValues,i;
    if(arguments.length>1){
        this.options.values[index]=this._trimAlignValue(newValue);
        this._refreshValue();
        this._change(null,index);
        return;
    }
    if(arguments.length){
        if($.isArray(arguments[0])){
            vals=this.options.values;
            newValues=arguments[0];
            for(i=0;i<vals.length;i+=1){
                vals[i]=this._trimAlignValue(newValues[i]);
                this._change(null,i);
            }
            this._refreshValue();
        }else{
            if(this.options.values&&this.options.values.length){
                return this._values(index);
            }else{
                return this.value();
            }
        }
    }else{
    return this._values();
}
},
_setOption:function(key,value){
    var i,valsLength=0;
    if($.isArray(this.options.values)){
        valsLength=this.options.values.length;
    }
    $.Widget.prototype._setOption.apply(this,arguments);
    switch(key){
        case"disabled":
            if(value){
            this.handles.filter(".ui-state-focus").blur();
            this.handles.removeClass("ui-state-hover");
            this.handles.prop("disabled",true);
            this.element.addClass("ui-disabled");
        }else{
            this.handles.prop("disabled",false);
            this.element.removeClass("ui-disabled");
        }
        break;
        case"orientation":
            this._detectOrientation();
            this.element.removeClass("ui-slider-horizontal ui-slider-vertical").addClass("ui-slider-"+this.orientation);
            this._refreshValue();
            break;
        case"value":
            this._animateOff=true;
            this._refreshValue();
            this._change(null,0);
            this._animateOff=false;
            break;
        case"values":
            this._animateOff=true;
            this._refreshValue();
            for(i=0;i<valsLength;i+=1){
            this._change(null,i);
        }
        this._animateOff=false;
        break;
        case"min":case"max":
            this._animateOff=true;
            this._refreshValue();
            this._animateOff=false;
            break;
    }
},
_value:function(){
    var val=this.options.value;
    val=this._trimAlignValue(val);
    return val;
},
_values:function(index){
    var val,vals,i;
    if(arguments.length){
        val=this.options.values[index];
        val=this._trimAlignValue(val);
        return val;
    }else{
        vals=this.options.values.slice();
        for(i=0;i<vals.length;i+=1){
            vals[i]=this._trimAlignValue(vals[i]);
        }
        return vals;
    }
},
_trimAlignValue:function(val){
    if(val<=this._valueMin()){
        return this._valueMin();
    }
    if(val>=this._valueMax()){
        return this._valueMax();
    }
    var step=(this.options.step>0)?this.options.step:1,valModStep=(val-this._valueMin())%step,alignValue=val-valModStep;
    if(Math.abs(valModStep)*2>=step){
        alignValue+=(valModStep>0)?step:(-step);
    }
    return parseFloat(alignValue.toFixed(5));
},
_valueMin:function(){
    return this.options.min;
},
_valueMax:function(){
    return this.options.max;
},
_refreshValue:function(){
    var lastValPercent,valPercent,value,valueMin,valueMax,oRange=this.options.range,o=this.options,that=this,animate=(!this._animateOff)?o.animate:false,_set={};
    
    if(this.options.values&&this.options.values.length){
        this.handles.each(function(i){
            valPercent=(that.values(i)-that._valueMin())/(that._valueMax()-that._valueMin())*100;
            _set[that.orientation==="horizontal"?"left":"bottom"]=valPercent+"%";
            $(this).stop(1,1)[animate?"animate":"css"](_set,o.animate);
            if(that.options.range===true){
                if(that.orientation==="horizontal"){
                    if(i===0){
                        that.range.stop(1,1)[animate?"animate":"css"]({
                            left:valPercent+"%"
                            },o.animate);
                    }
                    if(i===1){
                        that.range[animate?"animate":"css"]({
                            width:(valPercent-lastValPercent)+"%"
                            },{
                            queue:false,
                            duration:o.animate
                            });
                    }
                }else{
                if(i===0){
                    that.range.stop(1,1)[animate?"animate":"css"]({
                        bottom:(valPercent)+"%"
                        },o.animate);
                }
                if(i===1){
                    that.range[animate?"animate":"css"]({
                        height:(valPercent-lastValPercent)+"%"
                        },{
                        queue:false,
                        duration:o.animate
                        });
                }
            }
        }
    lastValPercent=valPercent;
});
}else{
    value=this.value();
    valueMin=this._valueMin();
    valueMax=this._valueMax();
    valPercent=(valueMax!==valueMin)?(value-valueMin)/(valueMax-valueMin)*100:0;
    _set[this.orientation==="horizontal"?"left":"bottom"]=valPercent+"%";
    this.handle.stop(1,1)[animate?"animate":"css"](_set,o.animate);
    if(oRange==="min"&&this.orientation==="horizontal"){
        this.range.stop(1,1)[animate?"animate":"css"]({
            width:valPercent+"%"
            },o.animate);
    }
    if(oRange==="max"&&this.orientation==="horizontal"){
        this.range[animate?"animate":"css"]({
            width:(100-valPercent)+"%"
            },{
            queue:false,
            duration:o.animate
            });
    }
    if(oRange==="min"&&this.orientation==="vertical"){
        this.range.stop(1,1)[animate?"animate":"css"]({
            height:valPercent+"%"
            },o.animate);
    }
    if(oRange==="max"&&this.orientation==="vertical"){
        this.range[animate?"animate":"css"]({
            height:(100-valPercent)+"%"
            },{
            queue:false,
            duration:o.animate
            });
    }
}
}
});
}(jQuery));
(function($){
    function modifier(fn){
        return function(){
            var previous=this.element.val();
            fn.apply(this,arguments);
            this._refresh();
            if(previous!==this.element.val()){
                this._trigger("change");
            }
        };
    
}
$.widget("ui.spinner",{
    version:"1.9.1",
    defaultElement:"<input>",
    widgetEventPrefix:"spin",
    options:{
        culture:null,
        icons:{
            down:"ui-icon-triangle-1-s",
            up:"ui-icon-triangle-1-n"
        },
        incremental:true,
        max:null,
        min:null,
        numberFormat:null,
        page:10,
        step:1,
        change:null,
        spin:null,
        start:null,
        stop:null
    },
    _create:function(){
        this._setOption("max",this.options.max);
        this._setOption("min",this.options.min);
        this._setOption("step",this.options.step);
        this._value(this.element.val(),true);
        this._draw();
        this._on(this._events);
        this._refresh();
        this._on(this.window,{
            beforeunload:function(){
                this.element.removeAttr("autocomplete");
            }
        });
},
_getCreateOptions:function(){
    var options={},element=this.element;
    $.each(["min","max","step"],function(i,option){
        var value=element.attr(option);
        if(value!==undefined&&value.length){
            options[option]=value;
        }
    });
return options;
},
_events:{
    keydown:function(event){
        if(this._start(event)&&this._keydown(event)){
            event.preventDefault();
        }
    },
keyup:"_stop",
focus:function(){
    this.previous=this.element.val();
},
blur:function(event){
    if(this.cancelBlur){
        delete this.cancelBlur;
        return;
    }
    this._refresh();
    if(this.previous!==this.element.val()){
        this._trigger("change",event);
    }
},
mousewheel:function(event,delta){
    if(!delta){
        return;
    }
    if(!this.spinning&&!this._start(event)){
        return false;
    }
    this._spin((delta>0?1:-1)*this.options.step,event);
    clearTimeout(this.mousewheelTimer);
    this.mousewheelTimer=this._delay(function(){
        if(this.spinning){
            this._stop(event);
        }
    },100);
event.preventDefault();
},
"mousedown .ui-spinner-button":function(event){
    var previous;
    previous=this.element[0]===this.document[0].activeElement?this.previous:this.element.val();
    function checkFocus(){
        var isActive=this.element[0]===this.document[0].activeElement;
        if(!isActive){
            this.element.focus();
            this.previous=previous;
            this._delay(function(){
                this.previous=previous;
            });
        }
    }
event.preventDefault();
checkFocus.call(this);
this.cancelBlur=true;
this._delay(function(){
    delete this.cancelBlur;
    checkFocus.call(this);
});
if(this._start(event)===false){
    return;
}
this._repeat(null,$(event.currentTarget).hasClass("ui-spinner-up")?1:-1,event);
},
"mouseup .ui-spinner-button":"_stop",
"mouseenter .ui-spinner-button":function(event){
    if(!$(event.currentTarget).hasClass("ui-state-active")){
        return;
    }
    if(this._start(event)===false){
        return false;
    }
    this._repeat(null,$(event.currentTarget).hasClass("ui-spinner-up")?1:-1,event);
},
"mouseleave .ui-spinner-button":"_stop"
},
_draw:function(){
    var uiSpinner=this.uiSpinner=this.element.addClass("ui-spinner-input").attr("autocomplete","off").wrap(this._uiSpinnerHtml()).parent().append(this._buttonHtml());
    this.element.attr("role","spinbutton");
    this.buttons=uiSpinner.find(".ui-spinner-button").attr("tabIndex",-1).button().removeClass("ui-corner-all");
    if(this.buttons.height()>Math.ceil(uiSpinner.height()*0.5)&&uiSpinner.height()>0){
        uiSpinner.height(uiSpinner.height());
    }
    if(this.options.disabled){
        this.disable();
    }
},
_keydown:function(event){
    var options=this.options,keyCode=$.ui.keyCode;
    switch(event.keyCode){
        case keyCode.UP:
            this._repeat(null,1,event);
            return true;
        case keyCode.DOWN:
            this._repeat(null,-1,event);
            return true;
        case keyCode.PAGE_UP:
            this._repeat(null,options.page,event);
            return true;
        case keyCode.PAGE_DOWN:
            this._repeat(null,-options.page,event);
            return true;
    }
    return false;
},
_uiSpinnerHtml:function(){
    return"<span class='ui-spinner ui-widget ui-widget-content ui-corner-all'></span>";
},
_buttonHtml:function(){
    return""+"<a class='ui-spinner-button ui-spinner-up ui-corner-tr'>"+"<span class='ui-icon "+this.options.icons.up+"'>&#9650;</span>"+"</a>"+"<a class='ui-spinner-button ui-spinner-down ui-corner-br'>"+"<span class='ui-icon "+this.options.icons.down+"'>&#9660;</span>"+"</a>";
},
_start:function(event){
    if(!this.spinning&&this._trigger("start",event)===false){
        return false;
    }
    if(!this.counter){
        this.counter=1;
    }
    this.spinning=true;
    return true;
},
_repeat:function(i,steps,event){
    i=i||500;
    clearTimeout(this.timer);
    this.timer=this._delay(function(){
        this._repeat(40,steps,event);
    },i);
    this._spin(steps*this.options.step,event);
},
_spin:function(step,event){
    var value=this.value()||0;
    if(!this.counter){
        this.counter=1;
    }
    value=this._adjustValue(value+step*this._increment(this.counter));
    if(!this.spinning||this._trigger("spin",event,{
        value:value
    })!==false){
        this._value(value);
        this.counter++;
    }
},
_increment:function(i){
    var incremental=this.options.incremental;
    if(incremental){
        return $.isFunction(incremental)?incremental(i):Math.floor(i*i*i/50000-i*i/500+17*i/200+1);
    }
    return 1;
},
_precision:function(){
    var precision=this._precisionOf(this.options.step);
    if(this.options.min!==null){
        precision=Math.max(precision,this._precisionOf(this.options.min));
    }
    return precision;
},
_precisionOf:function(num){
    var str=num.toString(),decimal=str.indexOf(".");
    return decimal===-1?0:str.length-decimal-1;
},
_adjustValue:function(value){
    var base,aboveMin,options=this.options;
    base=options.min!==null?options.min:0;
    aboveMin=value-base;
    aboveMin=Math.round(aboveMin/options.step)*options.step;
    value=base+aboveMin;
    value=parseFloat(value.toFixed(this._precision()));
    if(options.max!==null&&value>options.max){
        return options.max;
    }
    if(options.min!==null&&value<options.min){
        return options.min;
    }
    return value;
},
_stop:function(event){
    if(!this.spinning){
        return;
    }
    clearTimeout(this.timer);
    clearTimeout(this.mousewheelTimer);
    this.counter=0;
    this.spinning=false;
    this._trigger("stop",event);
},
_setOption:function(key,value){
    if(key==="culture"||key==="numberFormat"){
        var prevValue=this._parse(this.element.val());
        this.options[key]=value;
        this.element.val(this._format(prevValue));
        return;
    }
    if(key==="max"||key==="min"||key==="step"){
        if(typeof value==="string"){
            value=this._parse(value);
        }
    }
this._super(key,value);
if(key==="disabled"){
    if(value){
        this.element.prop("disabled",true);
        this.buttons.button("disable");
    }else{
        this.element.prop("disabled",false);
        this.buttons.button("enable");
    }
}
},
_setOptions:modifier(function(options){
    this._super(options);
    this._value(this.element.val());
}),
_parse:function(val){
    if(typeof val==="string"&&val!==""){
        val=window.Globalize&&this.options.numberFormat?Globalize.parseFloat(val,10,this.options.culture):+val;
    }
    return val===""||isNaN(val)?null:val;
},
_format:function(value){
    if(value===""){
        return"";
    }
    return window.Globalize&&this.options.numberFormat?Globalize.format(value,this.options.numberFormat,this.options.culture):value;
},
_refresh:function(){
    this.element.attr({
        "aria-valuemin":this.options.min,
        "aria-valuemax":this.options.max,
        "aria-valuenow":this._parse(this.element.val())
        });
},
_value:function(value,allowAny){
    var parsed;
    if(value!==""){
        parsed=this._parse(value);
        if(parsed!==null){
            if(!allowAny){
                parsed=this._adjustValue(parsed);
            }
            value=this._format(parsed);
        }
    }
this.element.val(value);
this._refresh();
},
_destroy:function(){
    this.element.removeClass("ui-spinner-input").prop("disabled",false).removeAttr("autocomplete").removeAttr("role").removeAttr("aria-valuemin").removeAttr("aria-valuemax").removeAttr("aria-valuenow");
    this.uiSpinner.replaceWith(this.element);
},
stepUp:modifier(function(steps){
    this._stepUp(steps);
}),
_stepUp:function(steps){
    this._spin((steps||1)*this.options.step);
},
stepDown:modifier(function(steps){
    this._stepDown(steps);
}),
_stepDown:function(steps){
    this._spin((steps||1)*-this.options.step);
},
pageUp:modifier(function(pages){
    this._stepUp((pages||1)*this.options.page);
}),
pageDown:modifier(function(pages){
    this._stepDown((pages||1)*this.options.page);
}),
value:function(newVal){
    if(!arguments.length){
        return this._parse(this.element.val());
    }
    modifier(this._value).call(this,newVal);
},
widget:function(){
    return this.uiSpinner;
}
});
}(jQuery));
(function($,undefined){
    var tabId=0,rhash=/#.*$/;
    function getNextTabId(){
        return++tabId;
    }
    function isLocal(anchor){
        return anchor.hash.length>1&&anchor.href.replace(rhash,"")===location.href.replace(rhash,"");
    }
    $.widget("ui.tabs",{
        version:"1.9.1",
        delay:300,
        options:{
            active:null,
            collapsible:false,
            event:"click",
            heightStyle:"content",
            hide:null,
            show:null,
            activate:null,
            beforeActivate:null,
            beforeLoad:null,
            load:null
        },
        _create:function(){
            var that=this,options=this.options,active=options.active,locationHash=location.hash.substring(1);
            this.running=false;
            this.element.addClass("ui-tabs ui-widget ui-widget-content ui-corner-all").toggleClass("ui-tabs-collapsible",options.collapsible).delegate(".ui-tabs-nav > li","mousedown"+this.eventNamespace,function(event){
                if($(this).is(".ui-state-disabled")){
                    event.preventDefault();
                }
            }).delegate(".ui-tabs-anchor","focus"+this.eventNamespace,function(){
            if($(this).closest("li").is(".ui-state-disabled")){
                this.blur();
            }
        });
    this._processTabs();
        if(active===null){
        if(locationHash){
            this.tabs.each(function(i,tab){
                if($(tab).attr("aria-controls")===locationHash){
                    active=i;
                    return false;
                }
            });
    }
    if(active===null){
        active=this.tabs.index(this.tabs.filter(".ui-tabs-active"));
    }
    if(active===null||active===-1){
        active=this.tabs.length?0:false;
    }
    }
if(active!==false){
    active=this.tabs.index(this.tabs.eq(active));
    if(active===-1){
        active=options.collapsible?false:0;
    }
}
options.active=active;
if(!options.collapsible&&options.active===false&&this.anchors.length){
    options.active=0;
}
if($.isArray(options.disabled)){
    options.disabled=$.unique(options.disabled.concat($.map(this.tabs.filter(".ui-state-disabled"),function(li){
        return that.tabs.index(li);
    }))).sort();
}
if(this.options.active!==false&&this.anchors.length){
    this.active=this._findActive(this.options.active);
}else{
    this.active=$();
}
this._refresh();
    if(this.active.length){
    this.load(options.active);
}
},
_getCreateEventData:function(){
    return{
        tab:this.active,
        panel:!this.active.length?$():this._getPanelForTab(this.active)
        };
    
},
_tabKeydown:function(event){
    var focusedTab=$(this.document[0].activeElement).closest("li"),selectedIndex=this.tabs.index(focusedTab),goingForward=true;
    if(this._handlePageNav(event)){
        return;
    }
    switch(event.keyCode){
        case $.ui.keyCode.RIGHT:case $.ui.keyCode.DOWN:
            selectedIndex++;
            break;
        case $.ui.keyCode.UP:case $.ui.keyCode.LEFT:
            goingForward=false;
            selectedIndex--;
            break;
        case $.ui.keyCode.END:
            selectedIndex=this.anchors.length-1;
            break;
        case $.ui.keyCode.HOME:
            selectedIndex=0;
            break;
        case $.ui.keyCode.SPACE:
            event.preventDefault();
            clearTimeout(this.activating);
            this._activate(selectedIndex);
            return;
        case $.ui.keyCode.ENTER:
            event.preventDefault();
            clearTimeout(this.activating);
            this._activate(selectedIndex===this.options.active?false:selectedIndex);
            return;
        default:
            return;
    }
    event.preventDefault();
    clearTimeout(this.activating);
    selectedIndex=this._focusNextTab(selectedIndex,goingForward);
    if(!event.ctrlKey){
        focusedTab.attr("aria-selected","false");
        this.tabs.eq(selectedIndex).attr("aria-selected","true");
        this.activating=this._delay(function(){
            this.option("active",selectedIndex);
        },this.delay);
    }
},
_panelKeydown:function(event){
    if(this._handlePageNav(event)){
        return;
    }
    if(event.ctrlKey&&event.keyCode===$.ui.keyCode.UP){
        event.preventDefault();
        this.active.focus();
    }
},
_handlePageNav:function(event){
    if(event.altKey&&event.keyCode===$.ui.keyCode.PAGE_UP){
        this._activate(this._focusNextTab(this.options.active-1,false));
        return true;
    }
    if(event.altKey&&event.keyCode===$.ui.keyCode.PAGE_DOWN){
        this._activate(this._focusNextTab(this.options.active+1,true));
        return true;
    }
},
_findNextTab:function(index,goingForward){
    var lastTabIndex=this.tabs.length-1;
    function constrain(){
        if(index>lastTabIndex){
            index=0;
        }
        if(index<0){
            index=lastTabIndex;
        }
        return index;
    }
    while($.inArray(constrain(),this.options.disabled)!==-1){
        index=goingForward?index+1:index-1;
    }
    return index;
},
_focusNextTab:function(index,goingForward){
    index=this._findNextTab(index,goingForward);
    this.tabs.eq(index).focus();
    return index;
},
_setOption:function(key,value){
    if(key==="active"){
        this._activate(value);
        return;
    }
    if(key==="disabled"){
        this._setupDisabled(value);
        return;
    }
    this._super(key,value);
    if(key==="collapsible"){
        this.element.toggleClass("ui-tabs-collapsible",value);
        if(!value&&this.options.active===false){
            this._activate(0);
        }
    }
if(key==="event"){
    this._setupEvents(value);
}
if(key==="heightStyle"){
    this._setupHeightStyle(value);
}
},
_tabId:function(tab){
    return tab.attr("aria-controls")||"ui-tabs-"+getNextTabId();
},
_sanitizeSelector:function(hash){
    return hash?hash.replace(/[!"$%&'()*+,.\/:;<=>?@\[\]\^`{|}~]/g,"\\$&"):"";
},
refresh:function(){
    var options=this.options,lis=this.tablist.children(":has(a[href])");
    options.disabled=$.map(lis.filter(".ui-state-disabled"),function(tab){
        return lis.index(tab);
    });
    this._processTabs();
    if(options.active===false||!this.anchors.length){
        options.active=false;
        this.active=$();
    }else if(this.active.length&&!$.contains(this.tablist[0],this.active[0])){
        if(this.tabs.length===options.disabled.length){
            options.active=false;
            this.active=$();
        }else{
            this._activate(this._findNextTab(Math.max(0,options.active-1),false));
        }
    }else{
    options.active=this.tabs.index(this.active);
}
this._refresh();
},
_refresh:function(){
    this._setupDisabled(this.options.disabled);
    this._setupEvents(this.options.event);
    this._setupHeightStyle(this.options.heightStyle);
    this.tabs.not(this.active).attr({
        "aria-selected":"false",
        tabIndex:-1
    });
    this.panels.not(this._getPanelForTab(this.active)).hide().attr({
        "aria-expanded":"false",
        "aria-hidden":"true"
    });
    if(!this.active.length){
        this.tabs.eq(0).attr("tabIndex",0);
    }else{
        this.active.addClass("ui-tabs-active ui-state-active").attr({
            "aria-selected":"true",
            tabIndex:0
        });
        this._getPanelForTab(this.active).show().attr({
            "aria-expanded":"true",
            "aria-hidden":"false"
        });
    }
},
_processTabs:function(){
    var that=this;
    this.tablist=this._getList().addClass("ui-tabs-nav ui-helper-reset ui-helper-clearfix ui-widget-header ui-corner-all").attr("role","tablist");
    this.tabs=this.tablist.find("> li:has(a[href])").addClass("ui-state-default ui-corner-top").attr({
        role:"tab",
        tabIndex:-1
    });
    this.anchors=this.tabs.map(function(){
        return $("a",this)[0];
    }).addClass("ui-tabs-anchor").attr({
        role:"presentation",
        tabIndex:-1
    });
    this.panels=$();
    this.anchors.each(function(i,anchor){
        var selector,panel,panelId,anchorId=$(anchor).uniqueId().attr("id"),tab=$(anchor).closest("li"),originalAriaControls=tab.attr("aria-controls");
        if(isLocal(anchor)){
            selector=anchor.hash;
            panel=that.element.find(that._sanitizeSelector(selector));
        }else{
            panelId=that._tabId(tab);
            selector="#"+panelId;
            panel=that.element.find(selector);
            if(!panel.length){
                panel=that._createPanel(panelId);
                panel.insertAfter(that.panels[i-1]||that.tablist);
            }
            panel.attr("aria-live","polite");
        }
        if(panel.length){
            that.panels=that.panels.add(panel);
        }
        if(originalAriaControls){
            tab.data("ui-tabs-aria-controls",originalAriaControls);
        }
        tab.attr({
            "aria-controls":selector.substring(1),
            "aria-labelledby":anchorId
        });
        panel.attr("aria-labelledby",anchorId);
    });
    this.panels.addClass("ui-tabs-panel ui-widget-content ui-corner-bottom").attr("role","tabpanel");
},
_getList:function(){
    return this.element.find("ol,ul").eq(0);
},
_createPanel:function(id){
    return $("<div>").attr("id",id).addClass("ui-tabs-panel ui-widget-content ui-corner-bottom").data("ui-tabs-destroy",true);
},
_setupDisabled:function(disabled){
    if($.isArray(disabled)){
        if(!disabled.length){
            disabled=false;
        }else if(disabled.length===this.anchors.length){
            disabled=true;
        }
    }
for(var i=0,li;(li=this.tabs[i]);i++){
    if(disabled===true||$.inArray(i,disabled)!==-1){
        $(li).addClass("ui-state-disabled").attr("aria-disabled","true");
    }else{
        $(li).removeClass("ui-state-disabled").removeAttr("aria-disabled");
    }
}
this.options.disabled=disabled;
},
_setupEvents:function(event){
    var events={
        click:function(event){
            event.preventDefault();
        }
    };
    
if(event){
    $.each(event.split(" "),function(index,eventName){
        events[eventName]="_eventHandler";
    });
}
this._off(this.anchors.add(this.tabs).add(this.panels));
this._on(this.anchors,events);
this._on(this.tabs,{
    keydown:"_tabKeydown"
});
this._on(this.panels,{
    keydown:"_panelKeydown"
});
this._focusable(this.tabs);
this._hoverable(this.tabs);
},
_setupHeightStyle:function(heightStyle){
    var maxHeight,overflow,parent=this.element.parent();
    if(heightStyle==="fill"){
        if(!$.support.minHeight){
            overflow=parent.css("overflow");
            parent.css("overflow","hidden");
        }
        maxHeight=parent.height();
        this.element.siblings(":visible").each(function(){
            var elem=$(this),position=elem.css("position");
            if(position==="absolute"||position==="fixed"){
                return;
            }
            maxHeight-=elem.outerHeight(true);
        });
        if(overflow){
            parent.css("overflow",overflow);
        }
        this.element.children().not(this.panels).each(function(){
            maxHeight-=$(this).outerHeight(true);
        });
        this.panels.each(function(){
            $(this).height(Math.max(0,maxHeight-
                $(this).innerHeight()+$(this).height()));
        }).css("overflow","auto");
    }else if(heightStyle==="auto"){
        maxHeight=0;
        this.panels.each(function(){
            maxHeight=Math.max(maxHeight,$(this).height("").height());
        }).height(maxHeight);
    }
},
_eventHandler:function(event){
    var options=this.options,active=this.active,anchor=$(event.currentTarget),tab=anchor.closest("li"),clickedIsActive=tab[0]===active[0],collapsing=clickedIsActive&&options.collapsible,toShow=collapsing?$():this._getPanelForTab(tab),toHide=!active.length?$():this._getPanelForTab(active),eventData={
        oldTab:active,
        oldPanel:toHide,
        newTab:collapsing?$():tab,
        newPanel:toShow
    };
    
    event.preventDefault();
    if(tab.hasClass("ui-state-disabled")||tab.hasClass("ui-tabs-loading")||this.running||(clickedIsActive&&!options.collapsible)||(this._trigger("beforeActivate",event,eventData)===false)){
        return;
    }
    options.active=collapsing?false:this.tabs.index(tab);
    this.active=clickedIsActive?$():tab;
    if(this.xhr){
        this.xhr.abort();
    }
    if(!toHide.length&&!toShow.length){
        $.error("jQuery UI Tabs: Mismatching fragment identifier.");
    }
    if(toShow.length){
        this.load(this.tabs.index(tab),event);
    }
    this._toggle(event,eventData);
},
_toggle:function(event,eventData){
    var that=this,toShow=eventData.newPanel,toHide=eventData.oldPanel;
    this.running=true;
    function complete(){
        that.running=false;
        that._trigger("activate",event,eventData);
    }
    function show(){
        eventData.newTab.closest("li").addClass("ui-tabs-active ui-state-active");
        if(toShow.length&&that.options.show){
            that._show(toShow,that.options.show,complete);
        }else{
            toShow.show();
            complete();
        }
    }
if(toHide.length&&this.options.hide){
    this._hide(toHide,this.options.hide,function(){
        eventData.oldTab.closest("li").removeClass("ui-tabs-active ui-state-active");
        show();
    });
}else{
    eventData.oldTab.closest("li").removeClass("ui-tabs-active ui-state-active");
    toHide.hide();
    show();
}
toHide.attr({
    "aria-expanded":"false",
    "aria-hidden":"true"
});
eventData.oldTab.attr("aria-selected","false");
if(toShow.length&&toHide.length){
    eventData.oldTab.attr("tabIndex",-1);
}else if(toShow.length){
    this.tabs.filter(function(){
        return $(this).attr("tabIndex")===0;
    }).attr("tabIndex",-1);
}
toShow.attr({
    "aria-expanded":"true",
    "aria-hidden":"false"
});
eventData.newTab.attr({
    "aria-selected":"true",
    tabIndex:0
});
},
_activate:function(index){
    var anchor,active=this._findActive(index);
    if(active[0]===this.active[0]){
        return;
    }
    if(!active.length){
        active=this.active;
    }
    anchor=active.find(".ui-tabs-anchor")[0];
    this._eventHandler({
        target:anchor,
        currentTarget:anchor,
        preventDefault:$.noop
        });
},
_findActive:function(index){
    return index===false?$():this.tabs.eq(index);
},
_getIndex:function(index){
    if(typeof index==="string"){
        index=this.anchors.index(this.anchors.filter("[href$='"+index+"']"));
    }
    return index;
},
_destroy:function(){
    if(this.xhr){
        this.xhr.abort();
    }
    this.element.removeClass("ui-tabs ui-widget ui-widget-content ui-corner-all ui-tabs-collapsible");
    this.tablist.removeClass("ui-tabs-nav ui-helper-reset ui-helper-clearfix ui-widget-header ui-corner-all").removeAttr("role");
    this.anchors.removeClass("ui-tabs-anchor").removeAttr("role").removeAttr("tabIndex").removeData("href.tabs").removeData("load.tabs").removeUniqueId();
    this.tabs.add(this.panels).each(function(){
        if($.data(this,"ui-tabs-destroy")){
            $(this).remove();
        }else{
            $(this).removeClass("ui-state-default ui-state-active ui-state-disabled "+"ui-corner-top ui-corner-bottom ui-widget-content ui-tabs-active ui-tabs-panel").removeAttr("tabIndex").removeAttr("aria-live").removeAttr("aria-busy").removeAttr("aria-selected").removeAttr("aria-labelledby").removeAttr("aria-hidden").removeAttr("aria-expanded").removeAttr("role");
        }
    });
this.tabs.each(function(){
    var li=$(this),prev=li.data("ui-tabs-aria-controls");
    if(prev){
        li.attr("aria-controls",prev);
    }else{
        li.removeAttr("aria-controls");
    }
});
if(this.options.heightStyle!=="content"){
    this.panels.css("height","");
}
},
enable:function(index){
    var disabled=this.options.disabled;
    if(disabled===false){
        return;
    }
    if(index===undefined){
        disabled=false;
    }else{
        index=this._getIndex(index);
        if($.isArray(disabled)){
            disabled=$.map(disabled,function(num){
                return num!==index?num:null;
            });
        }else{
            disabled=$.map(this.tabs,function(li,num){
                return num!==index?num:null;
            });
        }
    }
this._setupDisabled(disabled);
},
disable:function(index){
    var disabled=this.options.disabled;
    if(disabled===true){
        return;
    }
    if(index===undefined){
        disabled=true;
    }else{
        index=this._getIndex(index);
        if($.inArray(index,disabled)!==-1){
            return;
        }
        if($.isArray(disabled)){
            disabled=$.merge([index],disabled).sort();
        }else{
            disabled=[index];
        }
    }
this._setupDisabled(disabled);
},
load:function(index,event){
    index=this._getIndex(index);
    var that=this,tab=this.tabs.eq(index),anchor=tab.find(".ui-tabs-anchor"),panel=this._getPanelForTab(tab),eventData={
        tab:tab,
        panel:panel
    };
    
    if(isLocal(anchor[0])){
        return;
    }
    this.xhr=$.ajax(this._ajaxSettings(anchor,event,eventData));
    if(this.xhr&&this.xhr.statusText!=="canceled"){
        tab.addClass("ui-tabs-loading");
        panel.attr("aria-busy","true");
        this.xhr.success(function(response){
            setTimeout(function(){
                panel.html(response);
                that._trigger("load",event,eventData);
            },1);
        }).complete(function(jqXHR,status){
            setTimeout(function(){
                if(status==="abort"){
                    that.panels.stop(false,true);
                }
                tab.removeClass("ui-tabs-loading");
                panel.removeAttr("aria-busy");
                if(jqXHR===that.xhr){
                    delete that.xhr;
                }
            },1);
        });
}
},
_ajaxSettings:function(anchor,event,eventData){
    var that=this;
    return{
        url:anchor.attr("href"),
        beforeSend:function(jqXHR,settings){
            return that._trigger("beforeLoad",event,$.extend({
                jqXHR:jqXHR,
                ajaxSettings:settings
            },eventData));
        }
    };

},
_getPanelForTab:function(tab){
    var id=$(tab).attr("aria-controls");
    return this.element.find(this._sanitizeSelector("#"+id));
}
});
if($.uiBackCompat!==false){
    $.ui.tabs.prototype._ui=function(tab,panel){
        return{
            tab:tab,
            panel:panel,
            index:this.anchors.index(tab)
            };
        
};

$.widget("ui.tabs",$.ui.tabs,{
    url:function(index,url){
        this.anchors.eq(index).attr("href",url);
    }
});
$.widget("ui.tabs",$.ui.tabs,{
    options:{
        ajaxOptions:null,
        cache:false
    },
    _create:function(){
        this._super();
        var that=this;
        this._on({
            tabsbeforeload:function(event,ui){
                if($.data(ui.tab[0],"cache.tabs")){
                    event.preventDefault();
                    return;
                }
                ui.jqXHR.success(function(){
                    if(that.options.cache){
                        $.data(ui.tab[0],"cache.tabs",true);
                    }
                });
        }
        });
},
_ajaxSettings:function(anchor,event,ui){
    var ajaxOptions=this.options.ajaxOptions;
    return $.extend({},ajaxOptions,{
        error:function(xhr,status){
            try{
                ajaxOptions.error(xhr,status,ui.tab.closest("li").index(),ui.tab[0]);
            }
            catch(error){}
        }
    },this._superApply(arguments));
},
_setOption:function(key,value){
    if(key==="cache"&&value===false){
        this.anchors.removeData("cache.tabs");
    }
    this._super(key,value);
},
_destroy:function(){
    this.anchors.removeData("cache.tabs");
    this._super();
},
url:function(index){
    this.anchors.eq(index).removeData("cache.tabs");
    this._superApply(arguments);
}
});
$.widget("ui.tabs",$.ui.tabs,{
    abort:function(){
        if(this.xhr){
            this.xhr.abort();
        }
    }
});
$.widget("ui.tabs",$.ui.tabs,{
    options:{
        spinner:"<em>Loading&#8230;</em>"
    },
    _create:function(){
        this._super();
        this._on({
            tabsbeforeload:function(event,ui){
                if(event.target!==this.element[0]||!this.options.spinner){
                    return;
                }
                var span=ui.tab.find("span"),html=span.html();
                span.html(this.options.spinner);
                ui.jqXHR.complete(function(){
                    span.html(html);
                });
            }
        });
}
});
$.widget("ui.tabs",$.ui.tabs,{
    options:{
        enable:null,
        disable:null
    },
    enable:function(index){
        var options=this.options,trigger;
        if(index&&options.disabled===true||($.isArray(options.disabled)&&$.inArray(index,options.disabled)!==-1)){
            trigger=true;
        }
        this._superApply(arguments);
        if(trigger){
            this._trigger("enable",null,this._ui(this.anchors[index],this.panels[index]));
        }
    },
disable:function(index){
    var options=this.options,trigger;
    if(index&&options.disabled===false||($.isArray(options.disabled)&&$.inArray(index,options.disabled)===-1)){
        trigger=true;
    }
    this._superApply(arguments);
    if(trigger){
        this._trigger("disable",null,this._ui(this.anchors[index],this.panels[index]));
    }
}
});
$.widget("ui.tabs",$.ui.tabs,{
    options:{
        add:null,
        remove:null,
        tabTemplate:"<li><a href='#{href}'><span>#{label}</span></a></li>"
    },
    add:function(url,label,index){
        if(index===undefined){
            index=this.anchors.length;
        }
        var doInsertAfter,panel,options=this.options,li=$(options.tabTemplate.replace(/#\{href\}/g,url).replace(/#\{label\}/g,label)),id=!url.indexOf("#")?url.replace("#",""):this._tabId(li);
        li.addClass("ui-state-default ui-corner-top").data("ui-tabs-destroy",true);
        li.attr("aria-controls",id);
        doInsertAfter=index>=this.tabs.length;
        panel=this.element.find("#"+id);
        if(!panel.length){
            panel=this._createPanel(id);
            if(doInsertAfter){
                if(index>0){
                    panel.insertAfter(this.panels.eq(-1));
                }else{
                    panel.appendTo(this.element);
                }
            }else{
            panel.insertBefore(this.panels[index]);
        }
    }
panel.addClass("ui-tabs-panel ui-widget-content ui-corner-bottom").hide();
    if(doInsertAfter){
    li.appendTo(this.tablist);
}else{
    li.insertBefore(this.tabs[index]);
}
options.disabled=$.map(options.disabled,function(n){
    return n>=index?++n:n;
});
this.refresh();
    if(this.tabs.length===1&&options.active===false){
    this.option("active",0);
}
this._trigger("add",null,this._ui(this.anchors[index],this.panels[index]));
    return this;
},
remove:function(index){
    index=this._getIndex(index);
    var options=this.options,tab=this.tabs.eq(index).remove(),panel=this._getPanelForTab(tab).remove();
    if(tab.hasClass("ui-tabs-active")&&this.anchors.length>2){
        this._activate(index+(index+1<this.anchors.length?1:-1));
    }
    options.disabled=$.map($.grep(options.disabled,function(n){
        return n!==index;
    }),function(n){
        return n>=index?--n:n;
    });
    this.refresh();
    this._trigger("remove",null,this._ui(tab.find("a")[0],panel[0]));
    return this;
}
});
$.widget("ui.tabs",$.ui.tabs,{
    length:function(){
        return this.anchors.length;
    }
});
$.widget("ui.tabs",$.ui.tabs,{
    options:{
        idPrefix:"ui-tabs-"
    },
    _tabId:function(tab){
        var a=tab.is("li")?tab.find("a[href]"):tab;
        a=a[0];
        return $(a).closest("li").attr("aria-controls")||a.title&&a.title.replace(/\s/g,"_").replace(/[^\w\u00c0-\uFFFF\-]/g,"")||this.options.idPrefix+getNextTabId();
    }
});
$.widget("ui.tabs",$.ui.tabs,{
    options:{
        panelTemplate:"<div></div>"
    },
    _createPanel:function(id){
        return $(this.options.panelTemplate).attr("id",id).addClass("ui-tabs-panel ui-widget-content ui-corner-bottom").data("ui-tabs-destroy",true);
    }
});
$.widget("ui.tabs",$.ui.tabs,{
    _create:function(){
        var options=this.options;
        if(options.active===null&&options.selected!==undefined){
            options.active=options.selected===-1?false:options.selected;
        }
        this._super();
        options.selected=options.active;
        if(options.selected===false){
            options.selected=-1;
        }
    },
_setOption:function(key,value){
    if(key!=="selected"){
        return this._super(key,value);
    }
    var options=this.options;
    this._super("active",value===-1?false:value);
    options.selected=options.active;
    if(options.selected===false){
        options.selected=-1;
    }
},
_eventHandler:function(){
    this._superApply(arguments);
    this.options.selected=this.options.active;
    if(this.options.selected===false){
        this.options.selected=-1;
    }
}
});
$.widget("ui.tabs",$.ui.tabs,{
    options:{
        show:null,
        select:null
    },
    _create:function(){
        this._super();
        if(this.options.active!==false){
            this._trigger("show",null,this._ui(this.active.find(".ui-tabs-anchor")[0],this._getPanelForTab(this.active)[0]));
        }
    },
_trigger:function(type,event,data){
    var ret=this._superApply(arguments);
    if(!ret){
        return false;
    }
    if(type==="beforeActivate"&&data.newTab.length){
        ret=this._super("select",event,{
            tab:data.newTab.find(".ui-tabs-anchor")[0],
            panel:data.newPanel[0],
            index:data.newTab.closest("li").index()
            });
    }else if(type==="activate"&&data.newTab.length){
        ret=this._super("show",event,{
            tab:data.newTab.find(".ui-tabs-anchor")[0],
            panel:data.newPanel[0],
            index:data.newTab.closest("li").index()
            });
    }
    return ret;
}
});
$.widget("ui.tabs",$.ui.tabs,{
    select:function(index){
        index=this._getIndex(index);
        if(index===-1){
            if(this.options.collapsible&&this.options.selected!==-1){
                index=this.options.selected;
            }else{
                return;
            }
        }
    this.anchors.eq(index).trigger(this.options.event+this.eventNamespace);
}
});
(function(){
    var listId=0;
    $.widget("ui.tabs",$.ui.tabs,{
        options:{
            cookie:null
        },
        _create:function(){
            var options=this.options,active;
            if(options.active==null&&options.cookie){
                active=parseInt(this._cookie(),10);
                if(active===-1){
                    active=false;
                }
                options.active=active;
            }
            this._super();
        },
        _cookie:function(active){
            var cookie=[this.cookie||(this.cookie=this.options.cookie.name||"ui-tabs-"+(++listId))];
            if(arguments.length){
                cookie.push(active===false?-1:active);
                cookie.push(this.options.cookie);
            }
            return $.cookie.apply(null,cookie);
        },
        _refresh:function(){
            this._super();
            if(this.options.cookie){
                this._cookie(this.options.active,this.options.cookie);
            }
        },
    _eventHandler:function(){
        this._superApply(arguments);
        if(this.options.cookie){
            this._cookie(this.options.active,this.options.cookie);
        }
    },
    _destroy:function(){
        this._super();
        if(this.options.cookie){
            this._cookie(null,this.options.cookie);
        }
    }
});
})();
$.widget("ui.tabs",$.ui.tabs,{
    _trigger:function(type,event,data){
        var _data=$.extend({},data);
        if(type==="load"){
            _data.panel=_data.panel[0];
            _data.tab=_data.tab.find(".ui-tabs-anchor")[0];
        }
        return this._super(type,event,_data);
    }
});
$.widget("ui.tabs",$.ui.tabs,{
    options:{
        fx:null
    },
    _getFx:function(){
        var hide,show,fx=this.options.fx;
        if(fx){
            if($.isArray(fx)){
                hide=fx[0];
                show=fx[1];
            }else{
                hide=show=fx;
            }
        }
    return fx?{
        show:show,
        hide:hide
    }:null;
},
_toggle:function(event,eventData){
    var that=this,toShow=eventData.newPanel,toHide=eventData.oldPanel,fx=this._getFx();
    if(!fx){
        return this._super(event,eventData);
    }
    that.running=true;
    function complete(){
        that.running=false;
        that._trigger("activate",event,eventData);
    }
    function show(){
        eventData.newTab.closest("li").addClass("ui-tabs-active ui-state-active");
        if(toShow.length&&fx.show){
            toShow.animate(fx.show,fx.show.duration,function(){
                complete();
            });
        }else{
            toShow.show();
            complete();
        }
    }
if(toHide.length&&fx.hide){
    toHide.animate(fx.hide,fx.hide.duration,function(){
        eventData.oldTab.closest("li").removeClass("ui-tabs-active ui-state-active");
        show();
    });
}else{
    eventData.oldTab.closest("li").removeClass("ui-tabs-active ui-state-active");
    toHide.hide();
    show();
}
}
});
}
})(jQuery);
(function($){
    var increments=0;
    function addDescribedBy(elem,id){
        var describedby=(elem.attr("aria-describedby")||"").split(/\s+/);
        describedby.push(id);
        elem.data("ui-tooltip-id",id).attr("aria-describedby",$.trim(describedby.join(" ")));
    }
    function removeDescribedBy(elem){
        var id=elem.data("ui-tooltip-id"),describedby=(elem.attr("aria-describedby")||"").split(/\s+/),index=$.inArray(id,describedby);
        if(index!==-1){
            describedby.splice(index,1);
        }
        elem.removeData("ui-tooltip-id");
        describedby=$.trim(describedby.join(" "));
        if(describedby){
            elem.attr("aria-describedby",describedby);
        }else{
            elem.removeAttr("aria-describedby");
        }
    }
$.widget("ui.tooltip",{
    version:"1.9.1",
    options:{
        content:function(){
            return $(this).attr("title");
        },
        hide:true,
        items:"[title]:not([disabled])",
        position:{
            my:"left top+15",
            at:"left bottom",
            collision:"flipfit flipfit"
        },
        show:true,
        tooltipClass:null,
        track:false,
        close:null,
        open:null
    },
    _create:function(){
        this._on({
            mouseover:"open",
            focusin:"open"
        });
        this.tooltips={};
        
        this.parents={};
        
        if(this.options.disabled){
            this._disable();
        }
    },
_setOption:function(key,value){
    var that=this;
    if(key==="disabled"){
        this[value?"_disable":"_enable"]();
        this.options[key]=value;
        return;
    }
    this._super(key,value);
    if(key==="content"){
        $.each(this.tooltips,function(id,element){
            that._updateContent(element);
        });
    }
},
_disable:function(){
    var that=this;
    $.each(this.tooltips,function(id,element){
        var event=$.Event("blur");
        event.target=event.currentTarget=element[0];
        that.close(event,true);
    });
    this.element.find(this.options.items).andSelf().each(function(){
        var element=$(this);
        if(element.is("[title]")){
            element.data("ui-tooltip-title",element.attr("title")).attr("title","");
        }
    });
},
_enable:function(){
    this.element.find(this.options.items).andSelf().each(function(){
        var element=$(this);
        if(element.data("ui-tooltip-title")){
            element.attr("title",element.data("ui-tooltip-title"));
        }
    });
},
open:function(event){
    var that=this,target=$(event?event.target:this.element).closest(this.options.items);
    if(!target.length){
        return;
    }
    if(this.options.track&&target.data("ui-tooltip-id")){
        this._find(target).position($.extend({
            of:target
        },this.options.position));
        this._off(this.document,"mousemove");
        return;
    }
    if(target.attr("title")){
        target.data("ui-tooltip-title",target.attr("title"));
    }
    target.data("tooltip-open",true);
    if(event&&event.type==="mouseover"){
        target.parents().each(function(){
            var blurEvent;
            if($(this).data("tooltip-open")){
                blurEvent=$.Event("blur");
                blurEvent.target=blurEvent.currentTarget=this;
                that.close(blurEvent,true);
            }
            if(this.title){
                $(this).uniqueId();
                that.parents[this.id]={
                    element:this,
                    title:this.title
                    };
                    
                this.title="";
            }
        });
}
this._updateContent(target,event);
},
_updateContent:function(target,event){
    var content,contentOption=this.options.content,that=this;
    if(typeof contentOption==="string"){
        return this._open(event,target,contentOption);
    }
    content=contentOption.call(target[0],function(response){
        if(!target.data("tooltip-open")){
            return;
        }
        that._delay(function(){
            this._open(event,target,response);
        });
    });
    if(content){
        this._open(event,target,content);
    }
},
_open:function(event,target,content){
    var tooltip,events,delayedShow,positionOption=$.extend({},this.options.position);
    if(!content){
        return;
    }
    tooltip=this._find(target);
    if(tooltip.length){
        tooltip.find(".ui-tooltip-content").html(content);
        return;
    }
    if(target.is("[title]")){
        if(event&&event.type==="mouseover"){
            target.attr("title","");
        }else{
            target.removeAttr("title");
        }
    }
tooltip=this._tooltip(target);
addDescribedBy(target,tooltip.attr("id"));
tooltip.find(".ui-tooltip-content").html(content);
function position(event){
    positionOption.of=event;
    if(tooltip.is(":hidden")){
        return;
    }
    tooltip.position(positionOption);
}
if(this.options.track&&event&&/^mouse/.test(event.originalEvent.type)){
    this._on(this.document,{
        mousemove:position
    });
    position(event);
}else{
    tooltip.position($.extend({
        of:target
    },this.options.position));
}
tooltip.hide();
this._show(tooltip,this.options.show);
if(this.options.show&&this.options.show.delay){
    delayedShow=setInterval(function(){
        if(tooltip.is(":visible")){
            position(positionOption.of);
            clearInterval(delayedShow);
        }
    },$.fx.interval);
}
this._trigger("open",event,{
    tooltip:tooltip
});
events={
    keyup:function(event){
        if(event.keyCode===$.ui.keyCode.ESCAPE){
            var fakeEvent=$.Event(event);
            fakeEvent.currentTarget=target[0];
            this.close(fakeEvent,true);
        }
    },
remove:function(){
    this._removeTooltip(tooltip);
}
};

if(!event||event.type==="mouseover"){
    events.mouseleave="close";
}
if(!event||event.type==="focusin"){
    events.focusout="close";
}
this._on(target,events);
},
close:function(event){
    var that=this,target=$(event?event.currentTarget:this.element),tooltip=this._find(target);
    if(this.closing){
        return;
    }
    if(target.data("ui-tooltip-title")){
        target.attr("title",target.data("ui-tooltip-title"));
    }
    removeDescribedBy(target);
    tooltip.stop(true);
    this._hide(tooltip,this.options.hide,function(){
        that._removeTooltip($(this));
    });
    target.removeData("tooltip-open");
    this._off(target,"mouseleave focusout keyup");
    if(target[0]!==this.element[0]){
        this._off(target,"remove");
    }
    this._off(this.document,"mousemove");
    if(event&&event.type==="mouseleave"){
        $.each(this.parents,function(id,parent){
            parent.element.title=parent.title;
            delete that.parents[id];
        });
    }
    this.closing=true;
    this._trigger("close",event,{
        tooltip:tooltip
    });
    this.closing=false;
},
_tooltip:function(element){
    var id="ui-tooltip-"+increments++,tooltip=$("<div>").attr({
        id:id,
        role:"tooltip"
    }).addClass("ui-tooltip ui-widget ui-corner-all ui-widget-content "+
        (this.options.tooltipClass||""));
    $("<div>").addClass("ui-tooltip-content").appendTo(tooltip);
    tooltip.appendTo(this.document[0].body);
    if($.fn.bgiframe){
        tooltip.bgiframe();
    }
    this.tooltips[id]=element;
    return tooltip;
},
_find:function(target){
    var id=target.data("ui-tooltip-id");
    return id?$("#"+id):$();
},
_removeTooltip:function(tooltip){
    tooltip.remove();
    delete this.tooltips[tooltip.attr("id")];
},
_destroy:function(){
    var that=this;
    $.each(this.tooltips,function(id,element){
        var event=$.Event("blur");
        event.target=event.currentTarget=element[0];
        that.close(event,true);
        $("#"+id).remove();
        if(element.data("ui-tooltip-title")){
            element.attr("title",element.data("ui-tooltip-title"));
            element.removeData("ui-tooltip-title");
        }
    });
}
});
}(jQuery));
;
(jQuery.effects||(function($,undefined){
    var backCompat=$.uiBackCompat!==false,dataSpace="ui-effects-";
    $.effects={
        effect:{}
};
(function(jQuery,undefined){
    var stepHooks="backgroundColor borderBottomColor borderLeftColor borderRightColor borderTopColor color columnRuleColor outlineColor textDecorationColor textEmphasisColor".split(" "),rplusequals=/^([\-+])=\s*(\d+\.?\d*)/,stringParsers=[{
        re:/rgba?\(\s*(\d{1,3})\s*,\s*(\d{1,3})\s*,\s*(\d{1,3})\s*(?:,\s*(\d+(?:\.\d+)?)\s*)?\)/,
        parse:function(execResult){
            return[execResult[1],execResult[2],execResult[3],execResult[4]];
        }
    },{
    re:/rgba?\(\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d+(?:\.\d+)?)\s*)?\)/,
    parse:function(execResult){
        return[execResult[1]*2.55,execResult[2]*2.55,execResult[3]*2.55,execResult[4]];
    }
},{
    re:/#([a-f0-9]{2})([a-f0-9]{2})([a-f0-9]{2})/,
    parse:function(execResult){
        return[parseInt(execResult[1],16),parseInt(execResult[2],16),parseInt(execResult[3],16)];
    }
},{
    re:/#([a-f0-9])([a-f0-9])([a-f0-9])/,
    parse:function(execResult){
        return[parseInt(execResult[1]+execResult[1],16),parseInt(execResult[2]+execResult[2],16),parseInt(execResult[3]+execResult[3],16)];
    }
},{
    re:/hsla?\(\s*(\d+(?:\.\d+)?)\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d+(?:\.\d+)?)\s*)?\)/,
    space:"hsla",
    parse:function(execResult){
        return[execResult[1],execResult[2]/100,execResult[3]/100,execResult[4]];
    }
}],color=jQuery.Color=function(color,green,blue,alpha){
    return new jQuery.Color.fn.parse(color,green,blue,alpha);
},spaces={
    rgba:{
        props:{
            red:{
                idx:0,
                type:"byte"
            },
            green:{
                idx:1,
                type:"byte"
            },
            blue:{
                idx:2,
                type:"byte"
            }
        }
    },
hsla:{
    props:{
        hue:{
            idx:0,
            type:"degrees"
        },
        saturation:{
            idx:1,
            type:"percent"
        },
        lightness:{
            idx:2,
            type:"percent"
        }
    }
}
},propTypes={
    "byte":{
        floor:true,
        max:255
    },
    "percent":{
        max:1
    },
    "degrees":{
        mod:360,
        floor:true
    }
},support=color.support={},supportElem=jQuery("<p>")[0],colors,each=jQuery.each;
supportElem.style.cssText="background-color:rgba(1,1,1,.5)";
support.rgba=supportElem.style.backgroundColor.indexOf("rgba")>-1;
each(spaces,function(spaceName,space){
    space.cache="_"+spaceName;
    space.props.alpha={
        idx:3,
        type:"percent",
        def:1
    };

});
function clamp(value,prop,allowEmpty){
    var type=propTypes[prop.type]||{};
    
    if(value==null){
        return(allowEmpty||!prop.def)?null:prop.def;
    }
    value=type.floor?~~value:parseFloat(value);
    if(isNaN(value)){
        return prop.def;
    }
    if(type.mod){
        return(value+type.mod)%type.mod;
    }
    return 0>value?0:type.max<value?type.max:value;
}
function stringParse(string){
    var inst=color(),rgba=inst._rgba=[];
    string=string.toLowerCase();
    each(stringParsers,function(i,parser){
        var parsed,match=parser.re.exec(string),values=match&&parser.parse(match),spaceName=parser.space||"rgba";
        if(values){
            parsed=inst[spaceName](values);
            inst[spaces[spaceName].cache]=parsed[spaces[spaceName].cache];
            rgba=inst._rgba=parsed._rgba;
            return false;
        }
    });
if(rgba.length){
    if(rgba.join()==="0,0,0,0"){
        jQuery.extend(rgba,colors.transparent);
    }
    return inst;
}
return colors[string];
}
color.fn=jQuery.extend(color.prototype,{
    parse:function(red,green,blue,alpha){
        if(red===undefined){
            this._rgba=[null,null,null,null];
            return this;
        }
        if(red.jquery||red.nodeType){
            red=jQuery(red).css(green);
            green=undefined;
        }
        var inst=this,type=jQuery.type(red),rgba=this._rgba=[];
        if(green!==undefined){
            red=[red,green,blue,alpha];
            type="array";
        }
        if(type==="string"){
            return this.parse(stringParse(red)||colors._default);
        }
        if(type==="array"){
            each(spaces.rgba.props,function(key,prop){
                rgba[prop.idx]=clamp(red[prop.idx],prop);
            });
            return this;
        }
        if(type==="object"){
            if(red instanceof color){
                each(spaces,function(spaceName,space){
                    if(red[space.cache]){
                        inst[space.cache]=red[space.cache].slice();
                    }
                });
        }else{
            each(spaces,function(spaceName,space){
                var cache=space.cache;
                each(space.props,function(key,prop){
                    if(!inst[cache]&&space.to){
                        if(key==="alpha"||red[key]==null){
                            return;
                        }
                        inst[cache]=space.to(inst._rgba);
                    }
                    inst[cache][prop.idx]=clamp(red[key],prop,true);
                });
                if(inst[cache]&&$.inArray(null,inst[cache].slice(0,3))<0){
                    inst[cache][3]=1;
                    if(space.from){
                        inst._rgba=space.from(inst[cache]);
                    }
                }
            });
}
return this;
}
},
is:function(compare){
    var is=color(compare),same=true,inst=this;
    each(spaces,function(_,space){
        var localCache,isCache=is[space.cache];
        if(isCache){
            localCache=inst[space.cache]||space.to&&space.to(inst._rgba)||[];
            each(space.props,function(_,prop){
                if(isCache[prop.idx]!=null){
                    same=(isCache[prop.idx]===localCache[prop.idx]);
                    return same;
                }
            });
    }
    return same;
    });
return same;
},
_space:function(){
    var used=[],inst=this;
    each(spaces,function(spaceName,space){
        if(inst[space.cache]){
            used.push(spaceName);
        }
    });
return used.pop();
},
transition:function(other,distance){
    var end=color(other),spaceName=end._space(),space=spaces[spaceName],startColor=this.alpha()===0?color("transparent"):this,start=startColor[space.cache]||space.to(startColor._rgba),result=start.slice();
    end=end[space.cache];
    each(space.props,function(key,prop){
        var index=prop.idx,startValue=start[index],endValue=end[index],type=propTypes[prop.type]||{};
        
        if(endValue===null){
            return;
        }
        if(startValue===null){
            result[index]=endValue;
        }else{
            if(type.mod){
                if(endValue-startValue>type.mod/2){
                    startValue+=type.mod;
                }else if(startValue-endValue>type.mod/2){
                    startValue-=type.mod;
                }
            }
        result[index]=clamp((endValue-startValue)*distance+startValue,prop);
    }
    });
return this[spaceName](result);
},
blend:function(opaque){
    if(this._rgba[3]===1){
        return this;
    }
    var rgb=this._rgba.slice(),a=rgb.pop(),blend=color(opaque)._rgba;
    return color(jQuery.map(rgb,function(v,i){
        return(1-a)*blend[i]+a*v;
    }));
},
toRgbaString:function(){
    var prefix="rgba(",rgba=jQuery.map(this._rgba,function(v,i){
        return v==null?(i>2?1:0):v;
    });
    if(rgba[3]===1){
        rgba.pop();
        prefix="rgb(";
    }
    return prefix+rgba.join()+")";
},
toHslaString:function(){
    var prefix="hsla(",hsla=jQuery.map(this.hsla(),function(v,i){
        if(v==null){
            v=i>2?1:0;
        }
        if(i&&i<3){
            v=Math.round(v*100)+"%";
        }
        return v;
    });
    if(hsla[3]===1){
        hsla.pop();
        prefix="hsl(";
    }
    return prefix+hsla.join()+")";
},
toHexString:function(includeAlpha){
    var rgba=this._rgba.slice(),alpha=rgba.pop();
    if(includeAlpha){
        rgba.push(~~(alpha*255));
    }
    return"#"+jQuery.map(rgba,function(v){
        v=(v||0).toString(16);
        return v.length===1?"0"+v:v;
    }).join("");
},
toString:function(){
    return this._rgba[3]===0?"transparent":this.toRgbaString();
}
});
color.fn.parse.prototype=color.fn;
function hue2rgb(p,q,h){
    h=(h+1)%1;
    if(h*6<1){
        return p+(q-p)*h*6;
    }
    if(h*2<1){
        return q;
    }
    if(h*3<2){
        return p+(q-p)*((2/3)-h)*6;
    }
    return p;
}
spaces.hsla.to=function(rgba){
    if(rgba[0]==null||rgba[1]==null||rgba[2]==null){
        return[null,null,null,rgba[3]];
    }
    var r=rgba[0]/255,g=rgba[1]/255,b=rgba[2]/255,a=rgba[3],max=Math.max(r,g,b),min=Math.min(r,g,b),diff=max-min,add=max+min,l=add*0.5,h,s;
    if(min===max){
        h=0;
    }else if(r===max){
        h=(60*(g-b)/diff)+360;
    }else if(g===max){
        h=(60*(b-r)/diff)+120;
    }else{
        h=(60*(r-g)/diff)+240;
    }
    if(l===0||l===1){
        s=l;
    }else if(l<=0.5){
        s=diff/add;
    }else{
        s=diff/(2-add);
    }
    return[Math.round(h)%360,s,l,a==null?1:a];
};

spaces.hsla.from=function(hsla){
    if(hsla[0]==null||hsla[1]==null||hsla[2]==null){
        return[null,null,null,hsla[3]];
    }
    var h=hsla[0]/360,s=hsla[1],l=hsla[2],a=hsla[3],q=l<=0.5?l*(1+s):l+s-l*s,p=2*l-q;
    return[Math.round(hue2rgb(p,q,h+(1/3))*255),Math.round(hue2rgb(p,q,h)*255),Math.round(hue2rgb(p,q,h-(1/3))*255),a];
};

each(spaces,function(spaceName,space){
    var props=space.props,cache=space.cache,to=space.to,from=space.from;
    color.fn[spaceName]=function(value){
        if(to&&!this[cache]){
            this[cache]=to(this._rgba);
        }
        if(value===undefined){
            return this[cache].slice();
        }
        var ret,type=jQuery.type(value),arr=(type==="array"||type==="object")?value:arguments,local=this[cache].slice();
        each(props,function(key,prop){
            var val=arr[type==="object"?key:prop.idx];
            if(val==null){
                val=local[prop.idx];
            }
            local[prop.idx]=clamp(val,prop);
        });
        if(from){
            ret=color(from(local));
            ret[cache]=local;
            return ret;
        }else{
            return color(local);
        }
    };
    
each(props,function(key,prop){
    if(color.fn[key]){
        return;
    }
    color.fn[key]=function(value){
        var vtype=jQuery.type(value),fn=(key==="alpha"?(this._hsla?"hsla":"rgba"):spaceName),local=this[fn](),cur=local[prop.idx],match;
        if(vtype==="undefined"){
            return cur;
        }
        if(vtype==="function"){
            value=value.call(this,cur);
            vtype=jQuery.type(value);
        }
        if(value==null&&prop.empty){
            return this;
        }
        if(vtype==="string"){
            match=rplusequals.exec(value);
            if(match){
                value=cur+parseFloat(match[2])*(match[1]==="+"?1:-1);
            }
        }
    local[prop.idx]=value;
    return this[fn](local);
};

});
});
each(stepHooks,function(i,hook){
    jQuery.cssHooks[hook]={
        set:function(elem,value){
            var parsed,curElem,backgroundColor="";
            if(jQuery.type(value)!=="string"||(parsed=stringParse(value))){
                value=color(parsed||value);
                if(!support.rgba&&value._rgba[3]!==1){
                    curElem=hook==="backgroundColor"?elem.parentNode:elem;
                    while((backgroundColor===""||backgroundColor==="transparent")&&curElem&&curElem.style){
                        try{
                            backgroundColor=jQuery.css(curElem,"backgroundColor");
                            curElem=curElem.parentNode;
                        }catch(e){}
                    }
                value=value.blend(backgroundColor&&backgroundColor!=="transparent"?backgroundColor:"_default");
            }
            value=value.toRgbaString();
        }
        try{
            elem.style[hook]=value;
        }catch(error){}
    }
};

jQuery.fx.step[hook]=function(fx){
    if(!fx.colorInit){
        fx.start=color(fx.elem,hook);
        fx.end=color(fx.end);
        fx.colorInit=true;
    }
    jQuery.cssHooks[hook].set(fx.elem,fx.start.transition(fx.end,fx.pos));
};

});
jQuery.cssHooks.borderColor={
    expand:function(value){
        var expanded={};
        
        each(["Top","Right","Bottom","Left"],function(i,part){
            expanded["border"+part+"Color"]=value;
        });
        return expanded;
    }
};

colors=jQuery.Color.names={
    aqua:"#00ffff",
    black:"#000000",
    blue:"#0000ff",
    fuchsia:"#ff00ff",
    gray:"#808080",
    green:"#008000",
    lime:"#00ff00",
    maroon:"#800000",
    navy:"#000080",
    olive:"#808000",
    purple:"#800080",
    red:"#ff0000",
    silver:"#c0c0c0",
    teal:"#008080",
    white:"#ffffff",
    yellow:"#ffff00",
    transparent:[null,null,null,0],
    _default:"#ffffff"
};

})(jQuery);
(function(){
    var classAnimationActions=["add","remove","toggle"],shorthandStyles={
        border:1,
        borderBottom:1,
        borderColor:1,
        borderLeft:1,
        borderRight:1,
        borderTop:1,
        borderWidth:1,
        margin:1,
        padding:1
    };
    
    $.each(["borderLeftStyle","borderRightStyle","borderBottomStyle","borderTopStyle"],function(_,prop){
        $.fx.step[prop]=function(fx){
            if(fx.end!=="none"&&!fx.setAttr||fx.pos===1&&!fx.setAttr){
                jQuery.style(fx.elem,prop,fx.end);
                fx.setAttr=true;
            }
        };
    
});
function getElementStyles(){
    var style=this.ownerDocument.defaultView?this.ownerDocument.defaultView.getComputedStyle(this,null):this.currentStyle,newStyle={},key,len;
    if(style&&style.length&&style[0]&&style[style[0]]){
        len=style.length;
        while(len--){
            key=style[len];
            if(typeof style[key]==="string"){
                newStyle[$.camelCase(key)]=style[key];
            }
        }
    }else{
    for(key in style){
        if(typeof style[key]==="string"){
            newStyle[key]=style[key];
        }
    }
    }
return newStyle;
}
function styleDifference(oldStyle,newStyle){
    var diff={},name,value;
    for(name in newStyle){
        value=newStyle[name];
        if(oldStyle[name]!==value){
            if(!shorthandStyles[name]){
                if($.fx.step[name]||!isNaN(parseFloat(value))){
                    diff[name]=value;
                }
            }
        }
    }
return diff;
}
$.effects.animateClass=function(value,duration,easing,callback){
    var o=$.speed(duration,easing,callback);
    return this.queue(function(){
        var animated=$(this),baseClass=animated.attr("class")||"",applyClassChange,allAnimations=o.children?animated.find("*").andSelf():animated;
        allAnimations=allAnimations.map(function(){
            var el=$(this);
            return{
                el:el,
                start:getElementStyles.call(this)
                };
            
        });
    applyClassChange=function(){
        $.each(classAnimationActions,function(i,action){
            if(value[action]){
                animated[action+"Class"](value[action]);
            }
        });
    };
    
    applyClassChange();
    allAnimations=allAnimations.map(function(){
        this.end=getElementStyles.call(this.el[0]);
        this.diff=styleDifference(this.start,this.end);
        return this;
    });
    animated.attr("class",baseClass);
    allAnimations=allAnimations.map(function(){
        var styleInfo=this,dfd=$.Deferred(),opts=jQuery.extend({},o,{
            queue:false,
            complete:function(){
                dfd.resolve(styleInfo);
            }
        });
    this.el.animate(this.diff,opts);
        return dfd.promise();
    });
$.when.apply($,allAnimations.get()).done(function(){
    applyClassChange();
    $.each(arguments,function(){
        var el=this.el;
        $.each(this.diff,function(key){
            el.css(key,'');
        });
    });
    o.complete.call(animated[0]);
});
});
};

$.fn.extend({
    _addClass:$.fn.addClass,
    addClass:function(classNames,speed,easing,callback){
        return speed?$.effects.animateClass.call(this,{
            add:classNames
        },speed,easing,callback):this._addClass(classNames);
    },
    _removeClass:$.fn.removeClass,
    removeClass:function(classNames,speed,easing,callback){
        return speed?$.effects.animateClass.call(this,{
            remove:classNames
        },speed,easing,callback):this._removeClass(classNames);
    },
    _toggleClass:$.fn.toggleClass,
    toggleClass:function(classNames,force,speed,easing,callback){
        if(typeof force==="boolean"||force===undefined){
            if(!speed){
                return this._toggleClass(classNames,force);
            }else{
                return $.effects.animateClass.call(this,(force?{
                    add:classNames
                }:{
                    remove:classNames
                }),speed,easing,callback);
            }
        }else{
        return $.effects.animateClass.call(this,{
            toggle:classNames
        },force,speed,easing);
    }
},
switchClass:function(remove,add,speed,easing,callback){
    return $.effects.animateClass.call(this,{
        add:add,
        remove:remove
    },speed,easing,callback);
}
});
})();
(function(){
    $.extend($.effects,{
        version:"1.9.1",
        save:function(element,set){
            for(var i=0;i<set.length;i++){
                if(set[i]!==null){
                    element.data(dataSpace+set[i],element[0].style[set[i]]);
                }
            }
            },
    restore:function(element,set){
        var val,i;
        for(i=0;i<set.length;i++){
            if(set[i]!==null){
                val=element.data(dataSpace+set[i]);
                if(val===undefined){
                    val="";
                }
                element.css(set[i],val);
            }
        }
        },
setMode:function(el,mode){
    if(mode==="toggle"){
        mode=el.is(":hidden")?"show":"hide";
    }
    return mode;
},
getBaseline:function(origin,original){
    var y,x;
    switch(origin[0]){
        case"top":
            y=0;
            break;
        case"middle":
            y=0.5;
            break;
        case"bottom":
            y=1;
            break;
        default:
            y=origin[0]/original.height;
    }
    switch(origin[1]){
        case"left":
            x=0;
            break;
        case"center":
            x=0.5;
            break;
        case"right":
            x=1;
            break;
        default:
            x=origin[1]/original.width;
    }
    return{
        x:x,
        y:y
    };

},
createWrapper:function(element){
    if(element.parent().is(".ui-effects-wrapper")){
        return element.parent();
    }
    var props={
        width:element.outerWidth(true),
        height:element.outerHeight(true),
        "float":element.css("float")
        },wrapper=$("<div></div>").addClass("ui-effects-wrapper").css({
        fontSize:"100%",
        background:"transparent",
        border:"none",
        margin:0,
        padding:0
    }),size={
        width:element.width(),
        height:element.height()
        },active=document.activeElement;
    try{
        active.id;
    }catch(e){
        active=document.body;
    }
    element.wrap(wrapper);
    if(element[0]===active||$.contains(element[0],active)){
        $(active).focus();
    }
    wrapper=element.parent();
    if(element.css("position")==="static"){
        wrapper.css({
            position:"relative"
        });
        element.css({
            position:"relative"
        });
    }else{
        $.extend(props,{
            position:element.css("position"),
            zIndex:element.css("z-index")
            });
        $.each(["top","left","bottom","right"],function(i,pos){
            props[pos]=element.css(pos);
            if(isNaN(parseInt(props[pos],10))){
                props[pos]="auto";
            }
        });
    element.css({
        position:"relative",
        top:0,
        left:0,
        right:"auto",
        bottom:"auto"
    });
}
element.css(size);
return wrapper.css(props).show();
},
removeWrapper:function(element){
    var active=document.activeElement;
    if(element.parent().is(".ui-effects-wrapper")){
        element.parent().replaceWith(element);
        if(element[0]===active||$.contains(element[0],active)){
            $(active).focus();
        }
    }
return element;
},
setTransition:function(element,list,factor,value){
    value=value||{};
    
    $.each(list,function(i,x){
        var unit=element.cssUnit(x);
        if(unit[0]>0){
            value[x]=unit[0]*factor+unit[1];
        }
    });
return value;
}
});
function _normalizeArguments(effect,options,speed,callback){
    if($.isPlainObject(effect)){
        options=effect;
        effect=effect.effect;
    }
    effect={
        effect:effect
    };
    
    if(options==null){
        options={};
    
}
if($.isFunction(options)){
    callback=options;
    speed=null;
    options={};

}
if(typeof options==="number"||$.fx.speeds[options]){
    callback=speed;
    speed=options;
    options={};

}
if($.isFunction(speed)){
    callback=speed;
    speed=null;
}
if(options){
    $.extend(effect,options);
}
speed=speed||options.duration;
effect.duration=$.fx.off?0:typeof speed==="number"?speed:speed in $.fx.speeds?$.fx.speeds[speed]:$.fx.speeds._default;
effect.complete=callback||options.complete;
return effect;
}
function standardSpeed(speed){
    if(!speed||typeof speed==="number"||$.fx.speeds[speed]){
        return true;
    }
    if(typeof speed==="string"&&!$.effects.effect[speed]){
        if(backCompat&&$.effects[speed]){
            return false;
        }
        return true;
    }
    return false;
}
$.fn.extend({
    effect:function(){
        var args=_normalizeArguments.apply(this,arguments),mode=args.mode,queue=args.queue,effectMethod=$.effects.effect[args.effect],oldEffectMethod=!effectMethod&&backCompat&&$.effects[args.effect];
        if($.fx.off||!(effectMethod||oldEffectMethod)){
            if(mode){
                return this[mode](args.duration,args.complete);
            }else{
                return this.each(function(){
                    if(args.complete){
                        args.complete.call(this);
                    }
                });
        }
    }
function run(next){
    var elem=$(this),complete=args.complete,mode=args.mode;
    function done(){
        if($.isFunction(complete)){
            complete.call(elem[0]);
        }
        if($.isFunction(next)){
            next();
        }
    }
if(elem.is(":hidden")?mode==="hide":mode==="show"){
    done();
}else{
    effectMethod.call(elem[0],args,done);
}
}
if(effectMethod){
    return queue===false?this.each(run):this.queue(queue||"fx",run);
}else{
    return oldEffectMethod.call(this,{
        options:args,
        duration:args.duration,
        callback:args.complete,
        mode:args.mode
        });
}
},
_show:$.fn.show,
show:function(speed){
    if(standardSpeed(speed)){
        return this._show.apply(this,arguments);
    }else{
        var args=_normalizeArguments.apply(this,arguments);
        args.mode="show";
        return this.effect.call(this,args);
    }
},
_hide:$.fn.hide,
hide:function(speed){
    if(standardSpeed(speed)){
        return this._hide.apply(this,arguments);
    }else{
        var args=_normalizeArguments.apply(this,arguments);
        args.mode="hide";
        return this.effect.call(this,args);
    }
},
__toggle:$.fn.toggle,
toggle:function(speed){
    if(standardSpeed(speed)||typeof speed==="boolean"||$.isFunction(speed)){
        return this.__toggle.apply(this,arguments);
    }else{
        var args=_normalizeArguments.apply(this,arguments);
        args.mode="toggle";
        return this.effect.call(this,args);
    }
},
cssUnit:function(key){
    var style=this.css(key),val=[];
    $.each(["em","px","%","pt"],function(i,unit){
        if(style.indexOf(unit)>0){
            val=[parseFloat(style),unit];
        }
    });
return val;
}
});
})();
(function(){
    var baseEasings={};
    
    $.each(["Quad","Cubic","Quart","Quint","Expo"],function(i,name){
        baseEasings[name]=function(p){
            return Math.pow(p,i+2);
        };
    
    });
$.extend(baseEasings,{
    Sine:function(p){
        return 1-Math.cos(p*Math.PI/2);
    },
    Circ:function(p){
        return 1-Math.sqrt(1-p*p);
    },
    Elastic:function(p){
        return p===0||p===1?p:-Math.pow(2,8*(p-1))*Math.sin(((p-1)*80-7.5)*Math.PI/15);
    },
    Back:function(p){
        return p*p*(3*p-2);
    },
    Bounce:function(p){
        var pow2,bounce=4;
        while(p<((pow2=Math.pow(2,--bounce))-1)/11){}
        return 1/Math.pow(4,3-bounce)-7.5625*Math.pow((pow2*3-2)/22-p,2);
    }
});
$.each(baseEasings,function(name,easeIn){
    $.easing["easeIn"+name]=easeIn;
    $.easing["easeOut"+name]=function(p){
        return 1-easeIn(1-p);
    };
    
    $.easing["easeInOut"+name]=function(p){
        return p<0.5?easeIn(p*2)/2:1-easeIn(p*-2+2)/2;
    };

});
})();
})(jQuery));
(function($,undefined){
    var rvertical=/up|down|vertical/,rpositivemotion=/up|left|vertical|horizontal/;
    $.effects.effect.blind=function(o,done){
        var el=$(this),props=["position","top","bottom","left","right","height","width"],mode=$.effects.setMode(el,o.mode||"hide"),direction=o.direction||"up",vertical=rvertical.test(direction),ref=vertical?"height":"width",ref2=vertical?"top":"left",motion=rpositivemotion.test(direction),animation={},show=mode==="show",wrapper,distance,margin;
        if(el.parent().is(".ui-effects-wrapper")){
            $.effects.save(el.parent(),props);
        }else{
            $.effects.save(el,props);
        }
        el.show();
        wrapper=$.effects.createWrapper(el).css({
            overflow:"hidden"
        });
        distance=wrapper[ref]();
        margin=parseFloat(wrapper.css(ref2))||0;
        animation[ref]=show?distance:0;
        if(!motion){
            el.css(vertical?"bottom":"right",0).css(vertical?"top":"left","auto").css({
                position:"absolute"
            });
            animation[ref2]=show?margin:distance+margin;
        }
        if(show){
            wrapper.css(ref,0);
            if(!motion){
                wrapper.css(ref2,margin+distance);
            }
        }
    wrapper.animate(animation,{
        duration:o.duration,
        easing:o.easing,
        queue:false,
        complete:function(){
            if(mode==="hide"){
                el.hide();
            }
            $.effects.restore(el,props);
            $.effects.removeWrapper(el);
            done();
        }
    });
};

})(jQuery);
(function($,undefined){
    $.effects.effect.bounce=function(o,done){
        var el=$(this),props=["position","top","bottom","left","right","height","width"],mode=$.effects.setMode(el,o.mode||"effect"),hide=mode==="hide",show=mode==="show",direction=o.direction||"up",distance=o.distance,times=o.times||5,anims=times*2+(show||hide?1:0),speed=o.duration/anims,easing=o.easing,ref=(direction==="up"||direction==="down")?"top":"left",motion=(direction==="up"||direction==="left"),i,upAnim,downAnim,queue=el.queue(),queuelen=queue.length;
        if(show||hide){
            props.push("opacity");
        }
        $.effects.save(el,props);
        el.show();
        $.effects.createWrapper(el);
        if(!distance){
            distance=el[ref==="top"?"outerHeight":"outerWidth"]()/3;
        }
        if(show){
            downAnim={
                opacity:1
            };
            
            downAnim[ref]=0;
            el.css("opacity",0).css(ref,motion?-distance*2:distance*2).animate(downAnim,speed,easing);
        }
        if(hide){
            distance=distance/Math.pow(2,times-1);
        }
        downAnim={};
        
        downAnim[ref]=0;
        for(i=0;i<times;i++){
            upAnim={};
            
            upAnim[ref]=(motion?"-=":"+=")+distance;
            el.animate(upAnim,speed,easing).animate(downAnim,speed,easing);
            distance=hide?distance*2:distance/2;
        }
        if(hide){
            upAnim={
                opacity:0
            };
            
            upAnim[ref]=(motion?"-=":"+=")+distance;
            el.animate(upAnim,speed,easing);
        }
        el.queue(function(){
            if(hide){
                el.hide();
            }
            $.effects.restore(el,props);
            $.effects.removeWrapper(el);
            done();
        });
        if(queuelen>1){
            queue.splice.apply(queue,[1,0].concat(queue.splice(queuelen,anims+1)));
        }
        el.dequeue();
    };

})(jQuery);
(function($,undefined){
    $.effects.effect.clip=function(o,done){
        var el=$(this),props=["position","top","bottom","left","right","height","width"],mode=$.effects.setMode(el,o.mode||"hide"),show=mode==="show",direction=o.direction||"vertical",vert=direction==="vertical",size=vert?"height":"width",position=vert?"top":"left",animation={},wrapper,animate,distance;
        $.effects.save(el,props);
        el.show();
        wrapper=$.effects.createWrapper(el).css({
            overflow:"hidden"
        });
        animate=(el[0].tagName==="IMG")?wrapper:el;
        distance=animate[size]();
        if(show){
            animate.css(size,0);
            animate.css(position,distance/2);
        }
        animation[size]=show?distance:0;
        animation[position]=show?0:distance/2;
        animate.animate(animation,{
            queue:false,
            duration:o.duration,
            easing:o.easing,
            complete:function(){
                if(!show){
                    el.hide();
                }
                $.effects.restore(el,props);
                $.effects.removeWrapper(el);
                done();
            }
        });
};

})(jQuery);
(function($,undefined){
    $.effects.effect.drop=function(o,done){
        var el=$(this),props=["position","top","bottom","left","right","opacity","height","width"],mode=$.effects.setMode(el,o.mode||"hide"),show=mode==="show",direction=o.direction||"left",ref=(direction==="up"||direction==="down")?"top":"left",motion=(direction==="up"||direction==="left")?"pos":"neg",animation={
            opacity:show?1:0
            },distance;
        $.effects.save(el,props);
        el.show();
        $.effects.createWrapper(el);
        distance=o.distance||el[ref==="top"?"outerHeight":"outerWidth"](true)/2;
        if(show){
            el.css("opacity",0).css(ref,motion==="pos"?-distance:distance);
        }
        animation[ref]=(show?(motion==="pos"?"+=":"-="):(motion==="pos"?"-=":"+="))+
        distance;
        el.animate(animation,{
            queue:false,
            duration:o.duration,
            easing:o.easing,
            complete:function(){
                if(mode==="hide"){
                    el.hide();
                }
                $.effects.restore(el,props);
                $.effects.removeWrapper(el);
                done();
            }
        });
};

})(jQuery);
(function($,undefined){
    $.effects.effect.explode=function(o,done){
        var rows=o.pieces?Math.round(Math.sqrt(o.pieces)):3,cells=rows,el=$(this),mode=$.effects.setMode(el,o.mode||"hide"),show=mode==="show",offset=el.show().css("visibility","hidden").offset(),width=Math.ceil(el.outerWidth()/cells),height=Math.ceil(el.outerHeight()/rows),pieces=[],i,j,left,top,mx,my;
        function childComplete(){
            pieces.push(this);
            if(pieces.length===rows*cells){
                animComplete();
            }
        }
    for(i=0;i<rows;i++){
        top=offset.top+i*height;
        my=i-(rows-1)/2;
        for(j=0;j<cells;j++){
            left=offset.left+j*width;
            mx=j-(cells-1)/2;
            el.clone().appendTo("body").wrap("<div></div>").css({
                position:"absolute",
                visibility:"visible",
                left:-j*width,
                top:-i*height
                }).parent().addClass("ui-effects-explode").css({
                position:"absolute",
                overflow:"hidden",
                width:width,
                height:height,
                left:left+(show?mx*width:0),
                top:top+(show?my*height:0),
                opacity:show?0:1
                }).animate({
                left:left+(show?0:mx*width),
                top:top+(show?0:my*height),
                opacity:show?1:0
                },o.duration||500,o.easing,childComplete);
        }
        }
function animComplete(){
    el.css({
        visibility:"visible"
    });
    $(pieces).remove();
    if(!show){
        el.hide();
    }
    done();
}
};

})(jQuery);
(function($,undefined){
    $.effects.effect.fade=function(o,done){
        var el=$(this),mode=$.effects.setMode(el,o.mode||"toggle");
        el.animate({
            opacity:mode
        },{
            queue:false,
            duration:o.duration,
            easing:o.easing,
            complete:done
        });
    };

})(jQuery);
(function($,undefined){
    $.effects.effect.fold=function(o,done){
        var el=$(this),props=["position","top","bottom","left","right","height","width"],mode=$.effects.setMode(el,o.mode||"hide"),show=mode==="show",hide=mode==="hide",size=o.size||15,percent=/([0-9]+)%/.exec(size),horizFirst=!!o.horizFirst,widthFirst=show!==horizFirst,ref=widthFirst?["width","height"]:["height","width"],duration=o.duration/2,wrapper,distance,animation1={},animation2={};
        
        $.effects.save(el,props);
        el.show();
        wrapper=$.effects.createWrapper(el).css({
            overflow:"hidden"
        });
        distance=widthFirst?[wrapper.width(),wrapper.height()]:[wrapper.height(),wrapper.width()];
        if(percent){
            size=parseInt(percent[1],10)/100*distance[hide?0:1];
        }
        if(show){
            wrapper.css(horizFirst?{
                height:0,
                width:size
            }:{
                height:size,
                width:0
            });
        }
        animation1[ref[0]]=show?distance[0]:size;
        animation2[ref[1]]=show?distance[1]:0;
        wrapper.animate(animation1,duration,o.easing).animate(animation2,duration,o.easing,function(){
            if(hide){
                el.hide();
            }
            $.effects.restore(el,props);
            $.effects.removeWrapper(el);
            done();
        });
    };

})(jQuery);
(function($,undefined){
    $.effects.effect.highlight=function(o,done){
        var elem=$(this),props=["backgroundImage","backgroundColor","opacity"],mode=$.effects.setMode(elem,o.mode||"show"),animation={
            backgroundColor:elem.css("backgroundColor")
            };
            
        if(mode==="hide"){
            animation.opacity=0;
        }
        $.effects.save(elem,props);
        elem.show().css({
            backgroundImage:"none",
            backgroundColor:o.color||"#ffff99"
            }).animate(animation,{
            queue:false,
            duration:o.duration,
            easing:o.easing,
            complete:function(){
                if(mode==="hide"){
                    elem.hide();
                }
                $.effects.restore(elem,props);
                done();
            }
        });
};

})(jQuery);
(function($,undefined){
    $.effects.effect.pulsate=function(o,done){
        var elem=$(this),mode=$.effects.setMode(elem,o.mode||"show"),show=mode==="show",hide=mode==="hide",showhide=(show||mode==="hide"),anims=((o.times||5)*2)+(showhide?1:0),duration=o.duration/anims,animateTo=0,queue=elem.queue(),queuelen=queue.length,i;
        if(show||!elem.is(":visible")){
            elem.css("opacity",0).show();
            animateTo=1;
        }
        for(i=1;i<anims;i++){
            elem.animate({
                opacity:animateTo
            },duration,o.easing);
            animateTo=1-animateTo;
        }
        elem.animate({
            opacity:animateTo
        },duration,o.easing);
        elem.queue(function(){
            if(hide){
                elem.hide();
            }
            done();
        });
        if(queuelen>1){
            queue.splice.apply(queue,[1,0].concat(queue.splice(queuelen,anims+1)));
        }
        elem.dequeue();
    };

})(jQuery);
(function($,undefined){
    $.effects.effect.puff=function(o,done){
        var elem=$(this),mode=$.effects.setMode(elem,o.mode||"hide"),hide=mode==="hide",percent=parseInt(o.percent,10)||150,factor=percent/100,original={
            height:elem.height(),
            width:elem.width()
            };
            
        $.extend(o,{
            effect:"scale",
            queue:false,
            fade:true,
            mode:mode,
            complete:done,
            percent:hide?percent:100,
            from:hide?original:{
                height:original.height*factor,
                width:original.width*factor
                }
            });
    elem.effect(o);
};

$.effects.effect.scale=function(o,done){
    var el=$(this),options=$.extend(true,{},o),mode=$.effects.setMode(el,o.mode||"effect"),percent=parseInt(o.percent,10)||(parseInt(o.percent,10)===0?0:(mode==="hide"?0:100)),direction=o.direction||"both",origin=o.origin,original={
        height:el.height(),
        width:el.width(),
        outerHeight:el.outerHeight(),
        outerWidth:el.outerWidth()
        },factor={
        y:direction!=="horizontal"?(percent/100):1,
        x:direction!=="vertical"?(percent/100):1
        };
        
    options.effect="size";
    options.queue=false;
    options.complete=done;
    if(mode!=="effect"){
        options.origin=origin||["middle","center"];
        options.restore=true;
    }
    options.from=o.from||(mode==="show"?{
        height:0,
        width:0
    }:original);
    options.to={
        height:original.height*factor.y,
        width:original.width*factor.x,
        outerHeight:original.outerHeight*factor.y,
        outerWidth:original.outerWidth*factor.x
        };
        
    if(options.fade){
        if(mode==="show"){
            options.from.opacity=0;
            options.to.opacity=1;
        }
        if(mode==="hide"){
            options.from.opacity=1;
            options.to.opacity=0;
        }
    }
el.effect(options);
    };
    
    $.effects.effect.size=function(o,done){
        var original,baseline,factor,el=$(this),props0=["position","top","bottom","left","right","width","height","overflow","opacity"],props1=["position","top","bottom","left","right","overflow","opacity"],props2=["width","height","overflow"],cProps=["fontSize"],vProps=["borderTopWidth","borderBottomWidth","paddingTop","paddingBottom"],hProps=["borderLeftWidth","borderRightWidth","paddingLeft","paddingRight"],mode=$.effects.setMode(el,o.mode||"effect"),restore=o.restore||mode!=="effect",scale=o.scale||"both",origin=o.origin||["middle","center"],position=el.css("position"),props=restore?props0:props1,zero={
            height:0,
            width:0
        };
        
        if(mode==="show"){
            el.show();
        }
        original={
            height:el.height(),
            width:el.width(),
            outerHeight:el.outerHeight(),
            outerWidth:el.outerWidth()
            };
            
        if(o.mode==="toggle"&&mode==="show"){
            el.from=o.to||zero;
            el.to=o.from||original;
        }else{
            el.from=o.from||(mode==="show"?zero:original);
            el.to=o.to||(mode==="hide"?zero:original);
        }
        factor={
            from:{
                y:el.from.height/original.height,
                x:el.from.width/original.width
                },
            to:{
                y:el.to.height/original.height,
                x:el.to.width/original.width
                }
            };
        
    if(scale==="box"||scale==="both"){
        if(factor.from.y!==factor.to.y){
            props=props.concat(vProps);
            el.from=$.effects.setTransition(el,vProps,factor.from.y,el.from);
            el.to=$.effects.setTransition(el,vProps,factor.to.y,el.to);
        }
        if(factor.from.x!==factor.to.x){
            props=props.concat(hProps);
            el.from=$.effects.setTransition(el,hProps,factor.from.x,el.from);
            el.to=$.effects.setTransition(el,hProps,factor.to.x,el.to);
        }
    }
if(scale==="content"||scale==="both"){
    if(factor.from.y!==factor.to.y){
        props=props.concat(cProps).concat(props2);
        el.from=$.effects.setTransition(el,cProps,factor.from.y,el.from);
        el.to=$.effects.setTransition(el,cProps,factor.to.y,el.to);
    }
}
$.effects.save(el,props);
el.show();
$.effects.createWrapper(el);
el.css("overflow","hidden").css(el.from);
if(origin){
    baseline=$.effects.getBaseline(origin,original);
    el.from.top=(original.outerHeight-el.outerHeight())*baseline.y;
    el.from.left=(original.outerWidth-el.outerWidth())*baseline.x;
    el.to.top=(original.outerHeight-el.to.outerHeight)*baseline.y;
    el.to.left=(original.outerWidth-el.to.outerWidth)*baseline.x;
}
el.css(el.from);
if(scale==="content"||scale==="both"){
    vProps=vProps.concat(["marginTop","marginBottom"]).concat(cProps);
    hProps=hProps.concat(["marginLeft","marginRight"]);
    props2=props0.concat(vProps).concat(hProps);
    el.find("*[width]").each(function(){
        var child=$(this),c_original={
            height:child.height(),
            width:child.width()
            };
            
        if(restore){
            $.effects.save(child,props2);
        }
        child.from={
            height:c_original.height*factor.from.y,
            width:c_original.width*factor.from.x
            };
            
        child.to={
            height:c_original.height*factor.to.y,
            width:c_original.width*factor.to.x
            };
            
        if(factor.from.y!==factor.to.y){
            child.from=$.effects.setTransition(child,vProps,factor.from.y,child.from);
            child.to=$.effects.setTransition(child,vProps,factor.to.y,child.to);
        }
        if(factor.from.x!==factor.to.x){
            child.from=$.effects.setTransition(child,hProps,factor.from.x,child.from);
            child.to=$.effects.setTransition(child,hProps,factor.to.x,child.to);
        }
        child.css(child.from);
        child.animate(child.to,o.duration,o.easing,function(){
            if(restore){
                $.effects.restore(child,props2);
            }
        });
    });
}
el.animate(el.to,{
    queue:false,
    duration:o.duration,
    easing:o.easing,
    complete:function(){
        if(el.to.opacity===0){
            el.css("opacity",el.from.opacity);
        }
        if(mode==="hide"){
            el.hide();
        }
        $.effects.restore(el,props);
        if(!restore){
            if(position==="static"){
                el.css({
                    position:"relative",
                    top:el.to.top,
                    left:el.to.left
                    });
            }else{
                $.each(["top","left"],function(idx,pos){
                    el.css(pos,function(_,str){
                        var val=parseInt(str,10),toRef=idx?el.to.left:el.to.top;
                        if(str==="auto"){
                            return toRef+"px";
                        }
                        return val+toRef+"px";
                    });
                });
            }
        }
    $.effects.removeWrapper(el);
    done();
}
});
};

})(jQuery);
(function($,undefined){
    $.effects.effect.shake=function(o,done){
        var el=$(this),props=["position","top","bottom","left","right","height","width"],mode=$.effects.setMode(el,o.mode||"effect"),direction=o.direction||"left",distance=o.distance||20,times=o.times||3,anims=times*2+1,speed=Math.round(o.duration/anims),ref=(direction==="up"||direction==="down")?"top":"left",positiveMotion=(direction==="up"||direction==="left"),animation={},animation1={},animation2={},i,queue=el.queue(),queuelen=queue.length;
        $.effects.save(el,props);
        el.show();
        $.effects.createWrapper(el);
        animation[ref]=(positiveMotion?"-=":"+=")+distance;
        animation1[ref]=(positiveMotion?"+=":"-=")+distance*2;
        animation2[ref]=(positiveMotion?"-=":"+=")+distance*2;
        el.animate(animation,speed,o.easing);
        for(i=1;i<times;i++){
            el.animate(animation1,speed,o.easing).animate(animation2,speed,o.easing);
        }
        el.animate(animation1,speed,o.easing).animate(animation,speed/2,o.easing).queue(function(){
            if(mode==="hide"){
                el.hide();
            }
            $.effects.restore(el,props);
            $.effects.removeWrapper(el);
            done();
        });
        if(queuelen>1){
            queue.splice.apply(queue,[1,0].concat(queue.splice(queuelen,anims+1)));
        }
        el.dequeue();
    };

})(jQuery);
(function($,undefined){
    $.effects.effect.slide=function(o,done){
        var el=$(this),props=["position","top","bottom","left","right","width","height"],mode=$.effects.setMode(el,o.mode||"show"),show=mode==="show",direction=o.direction||"left",ref=(direction==="up"||direction==="down")?"top":"left",positiveMotion=(direction==="up"||direction==="left"),distance,animation={};
        
        $.effects.save(el,props);
        el.show();
        distance=o.distance||el[ref==="top"?"outerHeight":"outerWidth"](true);
        $.effects.createWrapper(el).css({
            overflow:"hidden"
        });
        if(show){
            el.css(ref,positiveMotion?(isNaN(distance)?"-"+distance:-distance):distance);
        }
        animation[ref]=(show?(positiveMotion?"+=":"-="):(positiveMotion?"-=":"+="))+
        distance;
        el.animate(animation,{
            queue:false,
            duration:o.duration,
            easing:o.easing,
            complete:function(){
                if(mode==="hide"){
                    el.hide();
                }
                $.effects.restore(el,props);
                $.effects.removeWrapper(el);
                done();
            }
        });
};

})(jQuery);
(function($,undefined){
    $.effects.effect.transfer=function(o,done){
        var elem=$(this),target=$(o.to),targetFixed=target.css("position")==="fixed",body=$("body"),fixTop=targetFixed?body.scrollTop():0,fixLeft=targetFixed?body.scrollLeft():0,endPosition=target.offset(),animation={
            top:endPosition.top-fixTop,
            left:endPosition.left-fixLeft,
            height:target.innerHeight(),
            width:target.innerWidth()
            },startPosition=elem.offset(),transfer=$('<div class="ui-effects-transfer"></div>').appendTo(document.body).addClass(o.className).css({
            top:startPosition.top-fixTop,
            left:startPosition.left-fixLeft,
            height:elem.innerHeight(),
            width:elem.innerWidth(),
            position:targetFixed?"fixed":"absolute"
            }).animate(animation,o.duration,o.easing,function(){
            transfer.remove();
            done();
        });
    };

})(jQuery);
;
(function($){
    $.extend($.ui,{
        timepicker:{
            version:"0.9.9"
        }
    });
function Timepicker(){
    this.regional=[];
    this.regional['']={
        currentText:'Now',
        closeText:'Done',
        ampm:false,
        amNames:['AM','A'],
        pmNames:['PM','P'],
        timeFormat:'hh:mm tt',
        timeSuffix:'',
        timeOnlyTitle:'Choose Time',
        timeText:'Time',
        hourText:'Hour',
        minuteText:'Minute',
        secondText:'Second',
        millisecText:'Millisecond',
        timezoneText:'Time Zone'
    };
    
    this._defaults={
        showButtonPanel:true,
        timeOnly:false,
        showHour:true,
        showMinute:true,
        showSecond:false,
        showMillisec:false,
        showTimezone:false,
        showTime:true,
        stepHour:1,
        stepMinute:1,
        stepSecond:1,
        stepMillisec:1,
        hour:0,
        minute:0,
        second:0,
        millisec:0,
        timezone:'+0000',
        hourMin:0,
        minuteMin:0,
        secondMin:0,
        millisecMin:0,
        hourMax:23,
        minuteMax:59,
        secondMax:59,
        millisecMax:999,
        minDateTime:null,
        maxDateTime:null,
        onSelect:null,
        hourGrid:0,
        minuteGrid:0,
        secondGrid:0,
        millisecGrid:0,
        alwaysSetTime:true,
        separator:' ',
        altFieldTimeOnly:true,
        showTimepicker:true,
        timezoneIso8609:false,
        timezoneList:null,
        addSliderAccess:false,
        sliderAccessArgs:null
    };
    
    $.extend(this._defaults,this.regional['']);
};

$.extend(Timepicker.prototype,{
    $input:null,
    $altInput:null,
    $timeObj:null,
    inst:null,
    hour_slider:null,
    minute_slider:null,
    second_slider:null,
    millisec_slider:null,
    timezone_select:null,
    hour:0,
    minute:0,
    second:0,
    millisec:0,
    timezone:'+0000',
    hourMinOriginal:null,
    minuteMinOriginal:null,
    secondMinOriginal:null,
    millisecMinOriginal:null,
    hourMaxOriginal:null,
    minuteMaxOriginal:null,
    secondMaxOriginal:null,
    millisecMaxOriginal:null,
    ampm:'',
    formattedDate:'',
    formattedTime:'',
    formattedDateTime:'',
    timezoneList:null,
    setDefaults:function(settings){
        extendRemove(this._defaults,settings||{});
        return this;
    },
    _newInst:function($input,o){
        var tp_inst=new Timepicker(),inlineSettings={};
        
        for(var attrName in this._defaults){
            var attrValue=$input.attr('time:'+attrName);
            if(attrValue){
                try{
                    inlineSettings[attrName]=eval(attrValue);
                }catch(err){
                    inlineSettings[attrName]=attrValue;
                }
            }
        }
tp_inst._defaults=$.extend({},this._defaults,inlineSettings,o,{
    beforeShow:function(input,dp_inst){
        if($.isFunction(o.beforeShow))
            return o.beforeShow(input,dp_inst,tp_inst);
    },
    onChangeMonthYear:function(year,month,dp_inst){
        tp_inst._updateDateTime(dp_inst);
        if($.isFunction(o.onChangeMonthYear))
            o.onChangeMonthYear.call($input[0],year,month,dp_inst,tp_inst);
    },
    onClose:function(dateText,dp_inst){
        if(tp_inst.timeDefined===true&&$input.val()!='')
            tp_inst._updateDateTime(dp_inst);
        if($.isFunction(o.onClose))
            o.onClose.call($input[0],dateText,dp_inst,tp_inst);
    },
    timepicker:tp_inst
});
tp_inst.amNames=$.map(tp_inst._defaults.amNames,function(val){
    return val.toUpperCase()
    });
tp_inst.pmNames=$.map(tp_inst._defaults.pmNames,function(val){
    return val.toUpperCase()
    });
if(tp_inst._defaults.timezoneList===null){
    var timezoneList=[];
    for(var i=-11;i<=12;i++)
        timezoneList.push((i>=0?'+':'-')+('0'+Math.abs(i).toString()).slice(-2)+'00');
    if(tp_inst._defaults.timezoneIso8609)
        timezoneList=$.map(timezoneList,function(val){
            return val=='+0000'?'Z':(val.substring(0,3)+':'+val.substring(3));
        });
    tp_inst._defaults.timezoneList=timezoneList;
}
tp_inst.hour=tp_inst._defaults.hour;
tp_inst.minute=tp_inst._defaults.minute;
tp_inst.second=tp_inst._defaults.second;
tp_inst.millisec=tp_inst._defaults.millisec;
tp_inst.ampm='';
tp_inst.$input=$input;
if(o.altField)
    tp_inst.$altInput=$(o.altField).css({
        cursor:'pointer'
    }).focus(function(){
        $input.trigger("focus");
    });
if(tp_inst._defaults.minDate==0||tp_inst._defaults.minDateTime==0)

{
    tp_inst._defaults.minDate=new Date();
}
if(tp_inst._defaults.maxDate==0||tp_inst._defaults.maxDateTime==0)
{
    tp_inst._defaults.maxDate=new Date();
}
if(tp_inst._defaults.minDate!==undefined&&tp_inst._defaults.minDate instanceof Date)
    tp_inst._defaults.minDateTime=new Date(tp_inst._defaults.minDate.getTime());
if(tp_inst._defaults.minDateTime!==undefined&&tp_inst._defaults.minDateTime instanceof Date)
    tp_inst._defaults.minDate=new Date(tp_inst._defaults.minDateTime.getTime());
if(tp_inst._defaults.maxDate!==undefined&&tp_inst._defaults.maxDate instanceof Date)
    tp_inst._defaults.maxDateTime=new Date(tp_inst._defaults.maxDate.getTime());
if(tp_inst._defaults.maxDateTime!==undefined&&tp_inst._defaults.maxDateTime instanceof Date)
    tp_inst._defaults.maxDate=new Date(tp_inst._defaults.maxDateTime.getTime());
return tp_inst;
},
_addTimePicker:function(dp_inst){
    var currDT=(this.$altInput&&this._defaults.altFieldTimeOnly)?this.$input.val()+' '+this.$altInput.val():this.$input.val();
    this.timeDefined=this._parseTime(currDT);
    this._limitMinMaxDateTime(dp_inst,false);
    this._injectTimePicker();
},
_parseTime:function(timeString,withDate){
    var regstr=this._defaults.timeFormat.toString().replace(/h{1,2}/ig,'(\\d?\\d)').replace(/m{1,2}/ig,'(\\d?\\d)').replace(/s{1,2}/ig,'(\\d?\\d)').replace(/l{1}/ig,'(\\d?\\d?\\d)').replace(/t{1,2}/ig,this._getPatternAmpm()).replace(/z{1}/ig,'(z|[-+]\\d\\d:?\\d\\d)?').replace(/\s/g,'\\s?')+this._defaults.timeSuffix+'$',order=this._getFormatPositions(),ampm='',treg;
    if(!this.inst)this.inst=$.datepicker._getInst(this.$input[0]);
    if(withDate||!this._defaults.timeOnly){
        var dp_dateFormat=$.datepicker._get(this.inst,'dateFormat');
        var specials=new RegExp("[.*+?|()\\[\\]{}\\\\]","g");
        regstr='^.{'+dp_dateFormat.length+',}?'+this._defaults.separator.replace(specials,"\\$&")+regstr;
    }
    treg=timeString.match(new RegExp(regstr,'i'));
    if(treg){
        if(order.t!==-1){
            if(treg[order.t]===undefined||treg[order.t].length===0){
                ampm='';
                this.ampm='';
            }else{
                ampm=$.inArray(treg[order.t].toUpperCase(),this.amNames)!==-1?'AM':'PM';
                this.ampm=this._defaults[ampm=='AM'?'amNames':'pmNames'][0];
            }
        }
    if(order.h!==-1){
        if(ampm=='AM'&&treg[order.h]=='12')
            this.hour=0;
        else if(ampm=='PM'&&treg[order.h]!='12')
            this.hour=(parseFloat(treg[order.h])+12).toFixed(0);else this.hour=Number(treg[order.h]);
    }
    if(order.m!==-1)this.minute=Number(treg[order.m]);
    if(order.s!==-1)this.second=Number(treg[order.s]);
    if(order.l!==-1)this.millisec=Number(treg[order.l]);
    if(order.z!==-1&&treg[order.z]!==undefined){
        var tz=treg[order.z].toUpperCase();
        switch(tz.length){
            case 1:
                tz=this._defaults.timezoneIso8609?'Z':'+0000';
                break;
            case 5:
                if(this._defaults.timezoneIso8609)
                tz=tz.substring(1)=='0000'?'Z':tz.substring(0,3)+':'+tz.substring(3);
            break;
            case 6:
                if(!this._defaults.timezoneIso8609)
                tz=tz=='Z'||tz.substring(1)=='00:00'?'+0000':tz.replace(/:/,'');
            else if(tz.substring(1)=='00:00')
                tz='Z';
            break;
        }
        this.timezone=tz;
    }
    return true;
}
return false;
},
_getPatternAmpm:function(){
    var markers=[];
    o=this._defaults;
    if(o.amNames)
        $.merge(markers,o.amNames);
    if(o.pmNames)
        $.merge(markers,o.pmNames);
    markers=$.map(markers,function(val){
        return val.replace(/[.*+?|()\[\]{}\\]/g,'\\$&')
        });
    return'('+markers.join('|')+')?';
},
_getFormatPositions:function(){
    var finds=this._defaults.timeFormat.toLowerCase().match(/(h{1,2}|m{1,2}|s{1,2}|l{1}|t{1,2}|z)/g),orders={
        h:-1,
        m:-1,
        s:-1,
        l:-1,
        t:-1,
        z:-1
    };
    
    if(finds)
        for(var i=0;i<finds.length;i++)
            if(orders[finds[i].toString().charAt(0)]==-1)
                orders[finds[i].toString().charAt(0)]=i+1;return orders;
},
_injectTimePicker:function(){
    var $dp=this.inst.dpDiv,o=this._defaults,tp_inst=this,hourMax=parseInt((o.hourMax-((o.hourMax-o.hourMin)%o.stepHour)),10),minMax=parseInt((o.minuteMax-((o.minuteMax-o.minuteMin)%o.stepMinute)),10),secMax=parseInt((o.secondMax-((o.secondMax-o.secondMin)%o.stepSecond)),10),millisecMax=parseInt((o.millisecMax-((o.millisecMax-o.millisecMin)%o.stepMillisec)),10),dp_id=this.inst.id.toString().replace(/([^A-Za-z0-9_])/g,'');
    if($dp.find("div#ui-timepicker-div-"+dp_id).length===0&&o.showTimepicker){
        var noDisplay=' style="display:none;"',html='<div class="ui-timepicker-div" id="ui-timepicker-div-'+dp_id+'"><dl>'+'<dt class="ui_tpicker_time_label" id="ui_tpicker_time_label_'+dp_id+'"'+
        ((o.showTime)?'':noDisplay)+'>'+o.timeText+'</dt>'+'<dd class="ui_tpicker_time" id="ui_tpicker_time_'+dp_id+'"'+
        ((o.showTime)?'':noDisplay)+'></dd>'+'<dt class="ui_tpicker_hour_label" id="ui_tpicker_hour_label_'+dp_id+'"'+
        ((o.showHour)?'':noDisplay)+'>'+o.hourText+'</dt>',hourGridSize=0,minuteGridSize=0,secondGridSize=0,millisecGridSize=0,size;
        html+='<dd class="ui_tpicker_hour"><div id="ui_tpicker_hour_'+dp_id+'"'+
        ((o.showHour)?'':noDisplay)+'></div>';
        if(o.showHour&&o.hourGrid>0){
            html+='<div style="padding-left: 1px"><table class="ui-tpicker-grid-label"><tr>';
            for(var h=o.hourMin;h<=hourMax;h+=parseInt(o.hourGrid,10)){
                hourGridSize++;
                var tmph=(o.ampm&&h>12)?h-12:h;
                if(tmph<10)tmph='0'+tmph;
                if(o.ampm){
                    if(h==0)tmph=12+'a';
                    else if(h<12)tmph+='a';else tmph+='p';
                }
                html+='<td>'+tmph+'</td>';
            }
            html+='</tr></table></div>';
        }
        html+='</dd>';
        html+='<dt class="ui_tpicker_minute_label" id="ui_tpicker_minute_label_'+dp_id+'"'+
        ((o.showMinute)?'':noDisplay)+'>'+o.minuteText+'</dt>'+'<dd class="ui_tpicker_minute"><div id="ui_tpicker_minute_'+dp_id+'"'+
        ((o.showMinute)?'':noDisplay)+'></div>';
        if(o.showMinute&&o.minuteGrid>0){
            html+='<div style="padding-left: 1px"><table class="ui-tpicker-grid-label"><tr>';
            for(var m=o.minuteMin;m<=minMax;m+=parseInt(o.minuteGrid,10)){
                minuteGridSize++;
                html+='<td>'+((m<10)?'0':'')+m+'</td>';
            }
            html+='</tr></table></div>';
        }
        html+='</dd>';
        html+='<dt class="ui_tpicker_second_label" id="ui_tpicker_second_label_'+dp_id+'"'+
        ((o.showSecond)?'':noDisplay)+'>'+o.secondText+'</dt>'+'<dd class="ui_tpicker_second"><div id="ui_tpicker_second_'+dp_id+'"'+
        ((o.showSecond)?'':noDisplay)+'></div>';
        if(o.showSecond&&o.secondGrid>0){
            html+='<div style="padding-left: 1px"><table><tr>';
            for(var s=o.secondMin;s<=secMax;s+=parseInt(o.secondGrid,10)){
                secondGridSize++;
                html+='<td>'+((s<10)?'0':'')+s+'</td>';
            }
            html+='</tr></table></div>';
        }
        html+='</dd>';
        html+='<dt class="ui_tpicker_millisec_label" id="ui_tpicker_millisec_label_'+dp_id+'"'+
        ((o.showMillisec)?'':noDisplay)+'>'+o.millisecText+'</dt>'+'<dd class="ui_tpicker_millisec"><div id="ui_tpicker_millisec_'+dp_id+'"'+
        ((o.showMillisec)?'':noDisplay)+'></div>';
        if(o.showMillisec&&o.millisecGrid>0){
            html+='<div style="padding-left: 1px"><table><tr>';
            for(var l=o.millisecMin;l<=millisecMax;l+=parseInt(o.millisecGrid,10)){
                millisecGridSize++;
                html+='<td>'+((l<10)?'0':'')+l+'</td>';
            }
            html+='</tr></table></div>';
        }
        html+='</dd>';
        html+='<dt class="ui_tpicker_timezone_label" id="ui_tpicker_timezone_label_'+dp_id+'"'+
        ((o.showTimezone)?'':noDisplay)+'>'+o.timezoneText+'</dt>';
        html+='<dd class="ui_tpicker_timezone" id="ui_tpicker_timezone_'+dp_id+'"'+
        ((o.showTimezone)?'':noDisplay)+'></dd>';
        html+='</dl></div>';
        $tp=$(html);
        if(o.timeOnly===true){
            $tp.prepend('<div class="ui-widget-header ui-helper-clearfix ui-corner-all">'+'<div class="ui-datepicker-title">'+o.timeOnlyTitle+'</div>'+'</div>');
            $dp.find('.ui-datepicker-header, .ui-datepicker-calendar').hide();
        }
        this.hour_slider=$tp.find('#ui_tpicker_hour_'+dp_id).slider({
            orientation:"horizontal",
            value:this.hour,
            min:o.hourMin,
            max:hourMax,
            step:o.stepHour,
            slide:function(event,ui){
                tp_inst.hour_slider.slider("option","value",ui.value);
                tp_inst._onTimeChange();
            }
        });
    this.minute_slider=$tp.find('#ui_tpicker_minute_'+dp_id).slider({
        orientation:"horizontal",
        value:this.minute,
        min:o.minuteMin,
        max:minMax,
        step:o.stepMinute,
        slide:function(event,ui){
            tp_inst.minute_slider.slider("option","value",ui.value);
            tp_inst._onTimeChange();
        }
    });
this.second_slider=$tp.find('#ui_tpicker_second_'+dp_id).slider({
    orientation:"horizontal",
    value:this.second,
    min:o.secondMin,
    max:secMax,
    step:o.stepSecond,
    slide:function(event,ui){
        tp_inst.second_slider.slider("option","value",ui.value);
        tp_inst._onTimeChange();
    }
});
this.millisec_slider=$tp.find('#ui_tpicker_millisec_'+dp_id).slider({
    orientation:"horizontal",
    value:this.millisec,
    min:o.millisecMin,
    max:millisecMax,
    step:o.stepMillisec,
    slide:function(event,ui){
        tp_inst.millisec_slider.slider("option","value",ui.value);
        tp_inst._onTimeChange();
    }
});
this.timezone_select=$tp.find('#ui_tpicker_timezone_'+dp_id).append('<select></select>').find("select");
$.fn.append.apply(this.timezone_select,$.map(o.timezoneList,function(val,idx){
    return $("<option />").val(typeof val=="object"?val.value:val).text(typeof val=="object"?val.label:val);
}));
this.timezone_select.val((typeof this.timezone!="undefined"&&this.timezone!=null&&this.timezone!="")?this.timezone:o.timezone);
this.timezone_select.change(function(){
    tp_inst._onTimeChange();
});
if(o.showHour&&o.hourGrid>0){
    size=100*hourGridSize*o.hourGrid/(hourMax-o.hourMin);
    $tp.find(".ui_tpicker_hour table").css({
        width:size+"%",
        marginLeft:(size/(-2*hourGridSize))+"%",
        borderCollapse:'collapse'
    }).find("td").each(function(index){
        $(this).click(function(){
            var h=$(this).html();
            if(o.ampm){
                var ap=h.substring(2).toLowerCase(),aph=parseInt(h.substring(0,2),10);
                if(ap=='a'){
                    if(aph==12)h=0;else h=aph;
                }else if(aph==12)h=12;else h=aph+12;
            }
            tp_inst.hour_slider.slider("option","value",h);
            tp_inst._onTimeChange();
            tp_inst._onSelectHandler();
        }).css({
            cursor:'pointer',
            width:(100/hourGridSize)+'%',
            textAlign:'center',
            overflow:'hidden'
        });
    });
}
if(o.showMinute&&o.minuteGrid>0){
    size=100*minuteGridSize*o.minuteGrid/(minMax-o.minuteMin);
    $tp.find(".ui_tpicker_minute table").css({
        width:size+"%",
        marginLeft:(size/(-2*minuteGridSize))+"%",
        borderCollapse:'collapse'
    }).find("td").each(function(index){
        $(this).click(function(){
            tp_inst.minute_slider.slider("option","value",$(this).html());
            tp_inst._onTimeChange();
            tp_inst._onSelectHandler();
        }).css({
            cursor:'pointer',
            width:(100/minuteGridSize)+'%',
            textAlign:'center',
            overflow:'hidden'
        });
    });
}
if(o.showSecond&&o.secondGrid>0){
    $tp.find(".ui_tpicker_second table").css({
        width:size+"%",
        marginLeft:(size/(-2*secondGridSize))+"%",
        borderCollapse:'collapse'
    }).find("td").each(function(index){
        $(this).click(function(){
            tp_inst.second_slider.slider("option","value",$(this).html());
            tp_inst._onTimeChange();
            tp_inst._onSelectHandler();
        }).css({
            cursor:'pointer',
            width:(100/secondGridSize)+'%',
            textAlign:'center',
            overflow:'hidden'
        });
    });
}
if(o.showMillisec&&o.millisecGrid>0){
    $tp.find(".ui_tpicker_millisec table").css({
        width:size+"%",
        marginLeft:(size/(-2*millisecGridSize))+"%",
        borderCollapse:'collapse'
    }).find("td").each(function(index){
        $(this).click(function(){
            tp_inst.millisec_slider.slider("option","value",$(this).html());
            tp_inst._onTimeChange();
            tp_inst._onSelectHandler();
        }).css({
            cursor:'pointer',
            width:(100/millisecGridSize)+'%',
            textAlign:'center',
            overflow:'hidden'
        });
    });
}
var $buttonPanel=$dp.find('.ui-datepicker-buttonpane');
if($buttonPanel.length)$buttonPanel.before($tp);else $dp.append($tp);
this.$timeObj=$tp.find('#ui_tpicker_time_'+dp_id);
if(this.inst!==null){
    var timeDefined=this.timeDefined;
    this._onTimeChange();
    this.timeDefined=timeDefined;
}
var onSelectDelegate=function(){
    tp_inst._onSelectHandler();
};

this.hour_slider.bind('slidestop',onSelectDelegate);
this.minute_slider.bind('slidestop',onSelectDelegate);
this.second_slider.bind('slidestop',onSelectDelegate);
this.millisec_slider.bind('slidestop',onSelectDelegate);
if(this._defaults.addSliderAccess){
    var sliderAccessArgs=this._defaults.sliderAccessArgs;
    setTimeout(function(){
        if($tp.find('.ui-slider-access').length==0){
            $tp.find('.ui-slider:visible').sliderAccess(sliderAccessArgs);
            var sliderAccessWidth=$tp.find('.ui-slider-access:eq(0)').outerWidth(true);
            if(sliderAccessWidth){
                $tp.find('table:visible').each(function(){
                    var $g=$(this),oldWidth=$g.outerWidth(),oldMarginLeft=$g.css('marginLeft').toString().replace('%',''),newWidth=oldWidth-sliderAccessWidth,newMarginLeft=((oldMarginLeft*newWidth)/oldWidth)+'%';
                    $g.css({
                        width:newWidth,
                        marginLeft:newMarginLeft
                    });
                });
            }
        }
    },0);
}
}
},
_limitMinMaxDateTime:function(dp_inst,adjustSliders){
    var o=this._defaults,dp_date=new Date(dp_inst.selectedYear,dp_inst.selectedMonth,dp_inst.selectedDay);
    if(!this._defaults.showTimepicker)return;
    if($.datepicker._get(dp_inst,'minDateTime')!==null&&$.datepicker._get(dp_inst,'minDateTime')!==undefined&&dp_date){
        var minDateTime=$.datepicker._get(dp_inst,'minDateTime'),minDateTimeDate=new Date(minDateTime.getFullYear(),minDateTime.getMonth(),minDateTime.getDate(),0,0,0,0);
        if(this.hourMinOriginal===null||this.minuteMinOriginal===null||this.secondMinOriginal===null||this.millisecMinOriginal===null){
            this.hourMinOriginal=o.hourMin;
            this.minuteMinOriginal=o.minuteMin;
            this.secondMinOriginal=o.secondMin;
            this.millisecMinOriginal=o.millisecMin;
        }
        if(dp_inst.settings.timeOnly||minDateTimeDate.getTime()==dp_date.getTime()){
            this._defaults.hourMin=minDateTime.getHours();
            if(this.hour<=this._defaults.hourMin){
                this.hour=this._defaults.hourMin;
                this._defaults.minuteMin=minDateTime.getMinutes();
                if(this.minute<=this._defaults.minuteMin){
                    this.minute=this._defaults.minuteMin;
                    this._defaults.secondMin=minDateTime.getSeconds();
                }else if(this.second<=this._defaults.secondMin){
                    this.second=this._defaults.secondMin;
                    this._defaults.millisecMin=minDateTime.getMilliseconds();
                }else{
                    if(this.millisec<this._defaults.millisecMin)
                        this.millisec=this._defaults.millisecMin;
                    this._defaults.millisecMin=this.millisecMinOriginal;
                }
            }else{
            this._defaults.minuteMin=this.minuteMinOriginal;
            this._defaults.secondMin=this.secondMinOriginal;
            this._defaults.millisecMin=this.millisecMinOriginal;
        }
    }else{
    this._defaults.hourMin=this.hourMinOriginal;
    this._defaults.minuteMin=this.minuteMinOriginal;
    this._defaults.secondMin=this.secondMinOriginal;
    this._defaults.millisecMin=this.millisecMinOriginal;
}
}
if($.datepicker._get(dp_inst,'maxDateTime')!==null&&$.datepicker._get(dp_inst,'maxDateTime')!==undefined&&dp_date){
    var maxDateTime=$.datepicker._get(dp_inst,'maxDateTime'),maxDateTimeDate=new Date(maxDateTime.getFullYear(),maxDateTime.getMonth(),maxDateTime.getDate(),0,0,0,0);
    if(this.hourMaxOriginal===null||this.minuteMaxOriginal===null||this.secondMaxOriginal===null){
        this.hourMaxOriginal=o.hourMax;
        this.minuteMaxOriginal=o.minuteMax;
        this.secondMaxOriginal=o.secondMax;
        this.millisecMaxOriginal=o.millisecMax;
    }
    if(dp_inst.settings.timeOnly||maxDateTimeDate.getTime()==dp_date.getTime()){
        this._defaults.hourMax=maxDateTime.getHours();
        if(this.hour>=this._defaults.hourMax){
            this.hour=this._defaults.hourMax;
            this._defaults.minuteMax=maxDateTime.getMinutes();
            if(this.minute>=this._defaults.minuteMax){
                this.minute=this._defaults.minuteMax;
                this._defaults.secondMax=maxDateTime.getSeconds();
            }else if(this.second>=this._defaults.secondMax){
                this.second=this._defaults.secondMax;
                this._defaults.millisecMax=maxDateTime.getMilliseconds();
            }else{
                if(this.millisec>this._defaults.millisecMax)this.millisec=this._defaults.millisecMax;
                this._defaults.millisecMax=this.millisecMaxOriginal;
            }
        }else{
        this._defaults.minuteMax=this.minuteMaxOriginal;
        this._defaults.secondMax=this.secondMaxOriginal;
        this._defaults.millisecMax=this.millisecMaxOriginal;
    }
}else{
    this._defaults.hourMax=this.hourMaxOriginal;
    this._defaults.minuteMax=this.minuteMaxOriginal;
    this._defaults.secondMax=this.secondMaxOriginal;
    this._defaults.millisecMax=this.millisecMaxOriginal;
}
}
if(adjustSliders!==undefined&&adjustSliders===true){
    var hourMax=parseInt((this._defaults.hourMax-((this._defaults.hourMax-this._defaults.hourMin)%this._defaults.stepHour)),10),minMax=parseInt((this._defaults.minuteMax-((this._defaults.minuteMax-this._defaults.minuteMin)%this._defaults.stepMinute)),10),secMax=parseInt((this._defaults.secondMax-((this._defaults.secondMax-this._defaults.secondMin)%this._defaults.stepSecond)),10),millisecMax=parseInt((this._defaults.millisecMax-((this._defaults.millisecMax-this._defaults.millisecMin)%this._defaults.stepMillisec)),10);
    if(this.hour_slider)
        this.hour_slider.slider("option",{
            min:this._defaults.hourMin,
            max:hourMax
        }).slider('value',this.hour);
    if(this.minute_slider)
        this.minute_slider.slider("option",{
            min:this._defaults.minuteMin,
            max:minMax
        }).slider('value',this.minute);
    if(this.second_slider)
        this.second_slider.slider("option",{
            min:this._defaults.secondMin,
            max:secMax
        }).slider('value',this.second);
    if(this.millisec_slider)
        this.millisec_slider.slider("option",{
            min:this._defaults.millisecMin,
            max:millisecMax
        }).slider('value',this.millisec);
}
},
_onTimeChange:function(){
    var hour=(this.hour_slider)?this.hour_slider.slider('value'):false,minute=(this.minute_slider)?this.minute_slider.slider('value'):false,second=(this.second_slider)?this.second_slider.slider('value'):false,millisec=(this.millisec_slider)?this.millisec_slider.slider('value'):false,timezone=(this.timezone_select)?this.timezone_select.val():false,o=this._defaults;
    if(typeof(hour)=='object')hour=false;
    if(typeof(minute)=='object')minute=false;
    if(typeof(second)=='object')second=false;
    if(typeof(millisec)=='object')millisec=false;
    if(typeof(timezone)=='object')timezone=false;
    if(hour!==false)hour=parseInt(hour,10);
    if(minute!==false)minute=parseInt(minute,10);
    if(second!==false)second=parseInt(second,10);
    if(millisec!==false)millisec=parseInt(millisec,10);
    var ampm=o[hour<12?'amNames':'pmNames'][0];
    var hasChanged=(hour!=this.hour||minute!=this.minute||second!=this.second||millisec!=this.millisec||(this.ampm.length>0&&(hour<12)!=($.inArray(this.ampm.toUpperCase(),this.amNames)!==-1))||timezone!=this.timezone);
    if(hasChanged){
        if(hour!==false)this.hour=hour;
        if(minute!==false)this.minute=minute;
        if(second!==false)this.second=second;
        if(millisec!==false)this.millisec=millisec;
        if(timezone!==false)this.timezone=timezone;
        if(!this.inst)this.inst=$.datepicker._getInst(this.$input[0]);
        this._limitMinMaxDateTime(this.inst,true);
    }
    if(o.ampm)this.ampm=ampm;
    this.formattedTime=$.datepicker.formatTime(this._defaults.timeFormat,this,this._defaults);
    if(this.$timeObj)this.$timeObj.text(this.formattedTime+o.timeSuffix);
    this.timeDefined=true;
    if(hasChanged)this._updateDateTime();
},
_onSelectHandler:function(){
    var onSelect=this._defaults.onSelect;
    var inputEl=this.$input?this.$input[0]:null;
    if(onSelect&&inputEl){
        onSelect.apply(inputEl,[this.formattedDateTime,this]);
    }
},
_formatTime:function(time,format){
    time=time||{
        hour:this.hour,
        minute:this.minute,
        second:this.second,
        millisec:this.millisec,
        ampm:this.ampm,
        timezone:this.timezone
        };
        
    var tmptime=(format||this._defaults.timeFormat).toString();
    tmptime=$.datepicker.formatTime(tmptime,time,this._defaults);
    if(arguments.length)return tmptime;else this.formattedTime=tmptime;
},
_updateDateTime:function(dp_inst){
    dp_inst=this.inst||dp_inst;
    var dt=$.datepicker._daylightSavingAdjust(new Date(dp_inst.selectedYear,dp_inst.selectedMonth,dp_inst.selectedDay)),dateFmt=$.datepicker._get(dp_inst,'dateFormat'),formatCfg=$.datepicker._getFormatConfig(dp_inst),timeAvailable=dt!==null&&this.timeDefined;
    this.formattedDate=$.datepicker.formatDate(dateFmt,(dt===null?new Date():dt),formatCfg);
    var formattedDateTime=this.formattedDate;
    if(dp_inst.lastVal!==undefined&&(dp_inst.lastVal.length>0&&this.$input.val().length===0))
        return;
    if(this._defaults.timeOnly===true){
        formattedDateTime=this.formattedTime;
    }else if(this._defaults.timeOnly!==true&&(this._defaults.alwaysSetTime||timeAvailable)){
        formattedDateTime+=this._defaults.separator+this.formattedTime+this._defaults.timeSuffix;
    }
    this.formattedDateTime=formattedDateTime;
    if(!this._defaults.showTimepicker){
        this.$input.val(this.formattedDate);
    }else if(this.$altInput&&this._defaults.altFieldTimeOnly===true){
        this.$altInput.val(this.formattedTime);
        this.$input.val(this.formattedDate);
    }else if(this.$altInput){
        this.$altInput.val(formattedDateTime);
        this.$input.val(formattedDateTime);
    }else{
        this.$input.val(formattedDateTime);
    }
    this.$input.trigger("change");
}
});
$.fn.extend({
    timepicker:function(o){
        o=o||{};
        
        var tmp_args=arguments;
        if(typeof o=='object')tmp_args[0]=$.extend(o,{
            timeOnly:true
        });
        return $(this).each(function(){
            $.fn.datetimepicker.apply($(this),tmp_args);
        });
    },
    datetimepicker:function(o){
        o=o||{};
        
        var $input=this,tmp_args=arguments;
        if(typeof(o)=='string'){
            if(o=='getDate'||o=='widget')
                return $.fn.datepicker.apply($(this[0]),tmp_args);else
                return this.each(function(){
                    var $t=$(this);
                    $t.datepicker.apply($t,tmp_args);
                });
        }
        else
            return this.each(function(){
                var $t=$(this);
                $t.datepicker($.timepicker._newInst($t,o)._defaults);
            });
    }
});
$.datepicker.formatTime=function(format,time,options){
    options=options||{};
    
    options=$.extend($.timepicker._defaults,options);
    time=$.extend({
        hour:0,
        minute:0,
        second:0,
        millisec:0,
        timezone:'+0000'
    },time);
    var tmptime=format;
    var ampmName=options['amNames'][0];
    var hour=parseInt(time.hour,10);
    if(options.ampm){
        if(hour>11){
            ampmName=options['pmNames'][0];
            if(hour>12)
                hour=hour%12;
        }
        if(hour===0)
            hour=12;
    }
    tmptime=tmptime.replace(/(?:hh?|mm?|ss?|[tT]{1,2}|[lz])/g,function(match){
        switch(match.toLowerCase()){
            case'hh':
                return('0'+hour).slice(-2);
            case'h':
                return hour;
            case'mm':
                return('0'+time.minute).slice(-2);
            case'm':
                return time.minute;
            case'ss':
                return('0'+time.second).slice(-2);
            case's':
                return time.second;
            case'l':
                return('00'+time.millisec).slice(-3);
            case'z':
                return time.timezone;
            case't':case'tt':
                if(options.ampm){
                if(match.length==1)
                    ampmName=ampmName.charAt(0);
                return match.charAt(0)=='T'?ampmName.toUpperCase():ampmName.toLowerCase();
            }
            return'';
        }
    });
tmptime=$.trim(tmptime);
return tmptime;
}
$.datepicker._base_selectDate=$.datepicker._selectDate;
$.datepicker._selectDate=function(id,dateStr){
    var inst=this._getInst($(id)[0]),tp_inst=this._get(inst,'timepicker');
    if(tp_inst){
        tp_inst._limitMinMaxDateTime(inst,true);
        inst.inline=inst.stay_open=true;
        this._base_selectDate(id,dateStr);
        inst.inline=inst.stay_open=false;
        this._notifyChange(inst);
        this._updateDatepicker(inst);
    }
    else this._base_selectDate(id,dateStr);
};

$.datepicker._base_updateDatepicker=$.datepicker._updateDatepicker;
$.datepicker._updateDatepicker=function(inst){
    var input=inst.input[0];
    if($.datepicker._curInst&&$.datepicker._curInst!=inst&&$.datepicker._datepickerShowing&&$.datepicker._lastInput!=input){
        return;
    }
    if(typeof(inst.stay_open)!=='boolean'||inst.stay_open===false){
        this._base_updateDatepicker(inst);
        var tp_inst=this._get(inst,'timepicker');
        if(tp_inst)tp_inst._addTimePicker(inst);
    }
};

$.datepicker._base_doKeyPress=$.datepicker._doKeyPress;
$.datepicker._doKeyPress=function(event){
    var inst=$.datepicker._getInst(event.target),tp_inst=$.datepicker._get(inst,'timepicker');
    if(tp_inst){
        if($.datepicker._get(inst,'constrainInput')){
            var ampm=tp_inst._defaults.ampm,dateChars=$.datepicker._possibleChars($.datepicker._get(inst,'dateFormat')),datetimeChars=tp_inst._defaults.timeFormat.toString().replace(/[hms]/g,'').replace(/TT/g,ampm?'APM':'').replace(/Tt/g,ampm?'AaPpMm':'').replace(/tT/g,ampm?'AaPpMm':'').replace(/T/g,ampm?'AP':'').replace(/tt/g,ampm?'apm':'').replace(/t/g,ampm?'ap':'')+" "+
            tp_inst._defaults.separator+
            tp_inst._defaults.timeSuffix+
            (tp_inst._defaults.showTimezone?tp_inst._defaults.timezoneList.join(''):'')+
            (tp_inst._defaults.amNames.join(''))+
            (tp_inst._defaults.pmNames.join(''))+
            dateChars,chr=String.fromCharCode(event.charCode===undefined?event.keyCode:event.charCode);
            return event.ctrlKey||(chr<' '||!dateChars||datetimeChars.indexOf(chr)>-1);
        }
    }
return $.datepicker._base_doKeyPress(event);
};

$.datepicker._base_doKeyUp=$.datepicker._doKeyUp;
$.datepicker._doKeyUp=function(event){
    var inst=$.datepicker._getInst(event.target),tp_inst=$.datepicker._get(inst,'timepicker');
    if(tp_inst){
        if(tp_inst._defaults.timeOnly&&(inst.input.val()!=inst.lastVal)){
            try{
                $.datepicker._updateDatepicker(inst);
            }
            catch(err){
                $.datepicker.log(err);
            }
        }
    }
return $.datepicker._base_doKeyUp(event);
};

$.datepicker._base_gotoToday=$.datepicker._gotoToday;
$.datepicker._gotoToday=function(id){
    var inst=this._getInst($(id)[0]),$dp=inst.dpDiv;
    this._base_gotoToday(id);
    var now=new Date();
    var tp_inst=this._get(inst,'timepicker');
    if(tp_inst&&tp_inst._defaults.showTimezone&&tp_inst.timezone_select){
        var tzoffset=now.getTimezoneOffset();
        var tzsign=tzoffset>0?'-':'+';
        tzoffset=Math.abs(tzoffset);
        var tzmin=tzoffset%60;
        tzoffset=tzsign+('0'+(tzoffset-tzmin)/60).slice(-2)+('0'+tzmin).slice(-2);
        if(tp_inst._defaults.timezoneIso8609)
            tzoffset=tzoffset.substring(0,3)+':'+tzoffset.substring(3);
        tp_inst.timezone_select.val(tzoffset);
    }
    this._setTime(inst,now);
    $('.ui-datepicker-today',$dp).click();
};

$.datepicker._disableTimepickerDatepicker=function(target,date,withDate){
    var inst=this._getInst(target),tp_inst=this._get(inst,'timepicker');
    $(target).datepicker('getDate');
    if(tp_inst){
        tp_inst._defaults.showTimepicker=false;
        tp_inst._updateDateTime(inst);
    }
};

$.datepicker._enableTimepickerDatepicker=function(target,date,withDate){
    var inst=this._getInst(target),tp_inst=this._get(inst,'timepicker');
    $(target).datepicker('getDate');
    if(tp_inst){
        tp_inst._defaults.showTimepicker=true;
        tp_inst._addTimePicker(inst);
        tp_inst._updateDateTime(inst);
    }
};

$.datepicker._setTime=function(inst,date){
    var tp_inst=this._get(inst,'timepicker');
    if(tp_inst){
        var defaults=tp_inst._defaults,hour=date?date.getHours():defaults.hour,minute=date?date.getMinutes():defaults.minute,second=date?date.getSeconds():defaults.second,millisec=date?date.getMilliseconds():defaults.millisec;
        if((hour<defaults.hourMin||hour>defaults.hourMax)||(minute<defaults.minuteMin||minute>defaults.minuteMax)||(second<defaults.secondMin||second>defaults.secondMax)||(millisec<defaults.millisecMin||millisec>defaults.millisecMax)){
            hour=defaults.hourMin;
            minute=defaults.minuteMin;
            second=defaults.secondMin;
            millisec=defaults.millisecMin;
        }
        tp_inst.hour=hour;
        tp_inst.minute=minute;
        tp_inst.second=second;
        tp_inst.millisec=millisec;
        if(tp_inst.hour_slider)tp_inst.hour_slider.slider('value',hour);
        if(tp_inst.minute_slider)tp_inst.minute_slider.slider('value',minute);
        if(tp_inst.second_slider)tp_inst.second_slider.slider('value',second);
        if(tp_inst.millisec_slider)tp_inst.millisec_slider.slider('value',millisec);
        tp_inst._onTimeChange();
        tp_inst._updateDateTime(inst);
    }
};

$.datepicker._setTimeDatepicker=function(target,date,withDate){
    var inst=this._getInst(target),tp_inst=this._get(inst,'timepicker');
    if(tp_inst){
        this._setDateFromField(inst);
        var tp_date;
        if(date){
            if(typeof date=="string"){
                tp_inst._parseTime(date,withDate);
                tp_date=new Date();
                tp_date.setHours(tp_inst.hour,tp_inst.minute,tp_inst.second,tp_inst.millisec);
            }
            else tp_date=new Date(date.getTime());
            if(tp_date.toString()=='Invalid Date')tp_date=undefined;
            this._setTime(inst,tp_date);
        }
    }
};

$.datepicker._base_setDateDatepicker=$.datepicker._setDateDatepicker;
$.datepicker._setDateDatepicker=function(target,date){
    var inst=this._getInst(target),tp_date=(date instanceof Date)?new Date(date.getTime()):date;
    this._updateDatepicker(inst);
    this._base_setDateDatepicker.apply(this,arguments);
    this._setTimeDatepicker(target,tp_date,true);
};

$.datepicker._base_getDateDatepicker=$.datepicker._getDateDatepicker;
$.datepicker._getDateDatepicker=function(target,noDefault){
    var inst=this._getInst(target),tp_inst=this._get(inst,'timepicker');
    if(tp_inst){
        this._setDateFromField(inst,noDefault);
        var date=this._getDate(inst);
        if(date&&tp_inst._parseTime($(target).val(),tp_inst.timeOnly))date.setHours(tp_inst.hour,tp_inst.minute,tp_inst.second,tp_inst.millisec);
        return date;
    }
    return this._base_getDateDatepicker(target,noDefault);
};

$.datepicker._base_parseDate=$.datepicker.parseDate;
$.datepicker.parseDate=function(format,value,settings){
    var date;
    try{
        date=this._base_parseDate(format,value,settings);
    }catch(err){
        if(err.indexOf(":")>=0){
            date=this._base_parseDate(format,value.substring(0,value.length-(err.length-err.indexOf(':')-2)),settings);
        }else{
            throw err;
        }
    }
return date;
};

$.datepicker._base_formatDate=$.datepicker._formatDate;
$.datepicker._formatDate=function(inst,day,month,year){
    var tp_inst=this._get(inst,'timepicker');
    if(tp_inst)

    {
        if(day)
            var b=this._base_formatDate(inst,day,month,year);
        tp_inst._updateDateTime(inst);
        return tp_inst.$input.val();
    }
    return this._base_formatDate(inst);
};

$.datepicker._base_optionDatepicker=$.datepicker._optionDatepicker;
$.datepicker._optionDatepicker=function(target,name,value){
    var inst=this._getInst(target),tp_inst=this._get(inst,'timepicker');
    if(tp_inst){
        var min,max,onselect;
        if(typeof name=='string'){
            if(name==='minDate'||name==='minDateTime')
                min=value;
            else if(name==='maxDate'||name==='maxDateTime')
                max=value;
            else if(name==='onSelect')
                onselect=value;
        }else if(typeof name=='object'){
            if(name.minDate)
                min=name.minDate;
            else if(name.minDateTime)
                min=name.minDateTime;
            else if(name.maxDate)
                max=name.maxDate;
            else if(name.maxDateTime)
                max=name.maxDateTime;
        }
        if(min){
            if(min==0)
                min=new Date();else
                min=new Date(min);
            tp_inst._defaults.minDate=min;
            tp_inst._defaults.minDateTime=min;
        }else if(max){
            if(max==0)
                max=new Date();else
                max=new Date(max);
            tp_inst._defaults.maxDate=max;
            tp_inst._defaults.maxDateTime=max;
        }
        else if(onselect)
            tp_inst._defaults.onSelect=onselect;
    }
    if(value===undefined)
        return this._base_optionDatepicker(target,name);
    return this._base_optionDatepicker(target,name,value);
};

function extendRemove(target,props){
    $.extend(target,props);
    for(var name in props)
        if(props[name]===null||props[name]===undefined)
            target[name]=props[name];return target;
};

$.timepicker=new Timepicker();
$.timepicker.version="0.9.9";
})(jQuery);
;
(function($){
    $.widget("ech.notify",{
        options:{
            speed:500,
            expires:5000,
            stack:'below',
            custom:false
        },
        _create:function(){
            var self=this;
            this.templates={};
            
            this.keys=[];
            this.element.addClass("ui-notify").children().addClass("ui-notify-message ui-notify-message-style").each(function(i){
                var key=this.id||i;
                self.keys.push(key);
                self.templates[key]=$(this).removeAttr("id").wrap("<div></div>").parent().html();
            }).end().empty().show();
        },
        create:function(template,msg,opts){
            if(typeof template==="object"){
                opts=msg;
                msg=template;
                template=null;
            }
            var tpl=this.templates[template||this.keys[0]];
            if(opts&&opts.custom){
                tpl=$(tpl).removeClass("ui-notify-message-style").wrap("<div></div>").parent().html();
            }
            return new $.ech.notify.instance(this)._create(msg,$.extend({},this.options,opts),tpl);
        }
    });
$.extend($.ech.notify,{
    instance:function(widget){
        this.parent=widget;
        this.isOpen=false;
    }
});
$.extend($.ech.notify.instance.prototype,{
    _create:function(params,options,template){
        this.options=options;
        var self=this,html=template.replace(/#(?:\{|%7B)(.*?)(?:\}|%7D)/g,function($1,$2){
            return($2 in params)?params[$2]:'';
        }),m=(this.element=$(html)),closelink=m.find(".ui-notify-close");
        if(typeof this.options.click==="function"){
            m.addClass("ui-notify-click").bind("click",function(e){
                self._trigger("click",e,self);
            });
        }
        if(closelink.length){
            closelink.bind("click",function(){
                self.close();
                return false;
            });
        }
        this.open();
        if(typeof options.expires==="number"){
            window.setTimeout(function(){
                self.close();
            },options.expires);
        }
        return this;
    },
    close:function(){
        var self=this,speed=this.options.speed;
        this.element.fadeTo(speed,0).slideUp(speed,function(){
            self._trigger("close");
            self.isOpen=false;
        });
        return this;
    },
    open:function(){
        if(this.isOpen||this._trigger("beforeopen")===false){
            return this;
        }
        var self=this;
        this.element[this.options.stack==='above'?'prependTo':'appendTo'](this.parent.element).css({
            display:"none",
            opacity:""
        }).fadeIn(this.options.speed,function(){
            self._trigger("open");
            self.isOpen=true;
        });
        return this;
    },
    widget:function(){
        return this.element;
    },
    _trigger:function(type,e,instance){
        return this.parent._trigger.call(this,type,e,instance);
    }
});
})(jQuery);
;
;
(function(d){
    var k=d.scrollTo=function(a,i,e){
        d(window).scrollTo(a,i,e)
        };
        
    k.defaults={
        axis:'xy',
        duration:parseFloat(d.fn.jquery)>=1.3?0:1
        };
        
    k.window=function(a){
        return d(window)._scrollable()
        };
        
    d.fn._scrollable=function(){
        return this.map(function(){
            var a=this,i=!a.nodeName||d.inArray(a.nodeName.toLowerCase(),['iframe','#document','html','body'])!=-1;
            if(!i)return a;
            var e=(a.contentWindow||a).document||a.ownerDocument||a;
            return d.browser.safari||e.compatMode=='BackCompat'?e.body:e.documentElement
            })
        };
        
    d.fn.scrollTo=function(n,j,b){
        if(typeof j=='object'){
            b=j;
            j=0
            }
            if(typeof b=='function')b={
            onAfter:b
        };
        
        if(n=='max')n=9e9;
        b=d.extend({},k.defaults,b);
        j=j||b.speed||b.duration;
        b.queue=b.queue&&b.axis.length>1;
        if(b.queue)j/=2;
        b.offset=p(b.offset);
        b.over=p(b.over);
        return this._scrollable().each(function(){
            var q=this,r=d(q),f=n,s,g={},u=r.is('html,body');
            switch(typeof f){
                case'number':case'string':
                    if(/^([+-]=)?\d+(\.\d+)?(px|%)?$/.test(f)){
                    f=p(f);
                    break
                }
                f=d(f,this);
                case'object':
                    if(f.is||f.style)s=(f=d(f)).offset()
                    }
                    d.each(b.axis.split(''),function(a,i){
                var e=i=='x'?'Left':'Top',h=e.toLowerCase(),c='scroll'+e,l=q[c],m=k.max(q,i);
                if(s){
                    g[c]=s[h]+(u?0:l-r.offset()[h]);
                    if(b.margin){
                        g[c]-=parseInt(f.css('margin'+e))||0;
                        g[c]-=parseInt(f.css('border'+e+'Width'))||0
                        }
                        g[c]+=b.offset[h]||0;
                    if(b.over[h])g[c]+=f[i=='x'?'width':'height']()*b.over[h]
                        }else{
                    var o=f[h];
                    g[c]=o.slice&&o.slice(-1)=='%'?parseFloat(o)/100*m:o
                    }
                    if(/^\d+$/.test(g[c]))g[c]=g[c]<=0?0:Math.min(g[c],m);
                if(!a&&b.queue){
                    if(l!=g[c])t(b.onAfterFirst);
                    delete g[c]
                }
            });
        t(b.onAfter);
            function t(a){
            r.animate(g,j,b.easing,a&&function(){
                a.call(this,n,b)
                })
            }
        }).end()
    };
    
k.max=function(a,i){
    var e=i=='x'?'Width':'Height',h='scroll'+e;
    if(!d(a).is('html,body'))return a[h]-d(a)[e.toLowerCase()]();
    var c='client'+e,l=a.ownerDocument.documentElement,m=a.ownerDocument.body;
    return Math.max(l[h],m[h])-Math.min(l[c],m[c])
    };
    
function p(a){
    return typeof a=='object'?a:{
        top:a,
        left:a
    }
}
})(jQuery);
;
(function($){
    function maybeCall(thing,ctx){
        return(typeof thing=='function')?(thing.call(ctx)):thing;
    };
    
    function Tipsy(element,options){
        this.$element=$(element);
        this.options=options;
        this.enabled=true;
        this.fixTitle();
    };
    
    Tipsy.prototype={
        show:function(){
            $.fn.tipsy.clear();
            if(!this.$element.parent().length){
                return;
            }
            var title=this.getTitle();
            if(title&&this.enabled){
                var $tip=this.tip();
                $tip.find('.tipsy-inner')[this.options.html?'html':'text'](title);
                $tip[0].className='tipsy ';
                $tip.openerpClass('oe_tooltip');
                $tip.remove().css({
                    top:0,
                    left:0,
                    visibility:'hidden',
                    display:'block'
                }).prependTo(document.body);
                var pos=$.extend({},this.$element.offset(),{
                    width:this.$element[0].offsetWidth,
                    height:this.$element[0].offsetHeight
                    });
                var actualWidth=$tip[0].offsetWidth,actualHeight=$tip[0].offsetHeight,gravity=maybeCall(this.options.gravity,this.$element[0]);
                var tp;
                switch(gravity.charAt(0)){
                    case'n':
                        tp={
                        top:pos.top+pos.height+this.options.offset,
                        left:pos.left+pos.width/2-actualWidth/2
                        };
                        
                    break;
                    case's':
                        tp={
                        top:pos.top-actualHeight-this.options.offset,
                        left:pos.left+pos.width/2-actualWidth/2
                        };
                        
                    break;
                    case'e':
                        tp={
                        top:pos.top+pos.height/2-actualHeight/2,
                        left:pos.left-actualWidth-this.options.offset
                        };
                        
                    break;
                    case'w':
                        tp={
                        top:pos.top+pos.height/2-actualHeight/2,
                        left:pos.left+pos.width+this.options.offset
                        };
                        
                    break;
                }
                if(gravity.length==2){
                    if(gravity.charAt(1)=='w'){
                        tp.left=pos.left+pos.width/2-15;
                    }else{
                        tp.left=pos.left+pos.width/2-actualWidth+15;
                    }
                }
            $tip.css(tp).addClass('tipsy-'+gravity);
            $tip.find('.tipsy-arrow')[0].className='tipsy-arrow tipsy-arrow-'+gravity.charAt(0);
            if(this.options.className){
                $tip.addClass(maybeCall(this.options.className,this.$element[0]));
            }
            if(this.options.fade){
                $tip.stop().css({
                    opacity:0,
                    display:'block',
                    visibility:'visible'
                }).animate({
                    opacity:this.options.opacity
                    });
            }else{
                $tip.css({
                    visibility:'visible',
                    opacity:this.options.opacity
                    });
            }
        }
    },
hide:function(){
    if(this.options.fade){
        this.tip().stop().fadeOut(function(){
            $(this).remove();
        });
    }else{
        this.tip().remove();
    }
},
fixTitle:function(){
    var $e=this.$element;
    if($e.attr('title')||typeof($e.attr('original-title'))!='string'){
        $e.attr('original-title',$e.attr('title')||'').removeAttr('title');
    }
},
getTitle:function(){
    var title,$e=this.$element,o=this.options;
    this.fixTitle();
    var title,o=this.options;
    if(typeof o.title=='string'){
        title=$e.attr(o.title=='title'?'original-title':o.title);
    }else if(typeof o.title=='function'){
        title=o.title.call($e[0]);
    }
    title=(''+title).replace(/(^\s*|\s*$)/,"");
    return title||o.fallback;
},
tip:function(){
    if(!this.$tip){
        this.$tip=$('<div class="tipsy"></div>').html('<div class="tipsy-arrow"></div><div class="tipsy-inner"></div>');
    }
    return this.$tip;
},
validate:function(){
    if(!this.$element[0].parentNode){
        this.hide();
        this.$element=null;
        this.options=null;
    }
},
enable:function(){
    this.enabled=true;
},
disable:function(){
    this.enabled=false;
},
toggleEnabled:function(){
    this.enabled=!this.enabled;
}
};

$.fn.tipsy=function(options){
    if(options===true){
        return this.data('tipsy');
    }else if(typeof options=='string'){
        var tipsy=this.data('tipsy');
        if(tipsy)tipsy[options]();
        return this;
    }
    options=$.extend({},$.fn.tipsy.defaults,options);
    function get(ele){
        var tipsy=$.data(ele,'tipsy');
        if(!tipsy){
            tipsy=new Tipsy(ele,$.fn.tipsy.elementOptions(ele,options));
            $.data(ele,'tipsy',tipsy);
        }
        return tipsy;
    }
    function enter(){
        var tipsy=get(this);
        tipsy.hoverState='in';
        if(options.delayIn==0){
            tipsy.show();
        }else{
            tipsy.fixTitle();
            setTimeout(function(){
                if(tipsy.hoverState=='in')tipsy.show();
            },options.delayIn);
        }
    };
    
function leave(){
    var tipsy=get(this);
    tipsy.hoverState='out';
    if(options.delayOut==0){
        tipsy.hide();
    }else{
        setTimeout(function(){
            if(tipsy.hoverState=='out')tipsy.hide();
        },options.delayOut);
    }
};

if(!options.live)this.each(function(){
    get(this);
});
if(options.trigger!='manual'){
    var binder=options.live?'live':'bind',eventIn=options.trigger=='hover'?'mouseenter':'focus',eventOut=options.trigger=='hover'?'mouseleave':'blur';
    this[binder](eventIn,enter)[binder](eventOut,leave);
}
return this;
};

$.fn.tipsy.clear=function(){
    $('div.tipsy').stop().remove();
}
$.fn.tipsy.defaults={
    className:null,
    delayIn:0,
    delayOut:0,
    fade:false,
    fallback:'',
    gravity:'n',
    html:false,
    live:false,
    offset:0,
    opacity:0.8,
    title:'title',
    trigger:'hover'
};

$.fn.tipsy.elementOptions=function(ele,options){
    return $.metadata?$.extend({},options,$(ele).metadata()):options;
};

$.fn.tipsy.autoNS=function(){
    return $(this).offset().top>($(document).scrollTop()+$(window).height()/2)?'s':'n';
};

$.fn.tipsy.autoWE=function(){
    return $(this).offset().left>($(document).scrollLeft()+$(window).width()/2)?'e':'w';
};

$.fn.tipsy.autoBounds=function(margin,prefer){
    return function(){
        var dir={
            ns:prefer[0],
            ew:(prefer.length>1?prefer[1]:false)
            },boundTop=$(document).scrollTop()+margin,boundLeft=$(document).scrollLeft()+margin,$this=$(this);
        if($this.offset().top<boundTop)dir.ns='n';
        if($this.offset().left<boundLeft)dir.ew='w';
        if($(window).width()+$(document).scrollLeft()-$this.offset().left<margin)dir.ew='e';
        if($(window).height()+$(document).scrollTop()-$this.offset().top<margin)dir.ns='s';
        return dir.ns+(dir.ew?dir.ew:'');
    }
};

})(jQuery);
;
;
(function($,undefined)

{
    function TextExt(){};
    
    function ItemManager(){};
    
    function TextExtPlugin(){};
    
    var stringify=(JSON||{}).stringify,slice=Array.prototype.slice,UNDEFINED='undefined',OPT_ITEM_MANAGER='item.manager',OPT_PLUGINS='plugins',OPT_EXT='ext',OPT_HTML_WRAP='html.wrap',OPT_HTML_HIDDEN='html.hidden',OPT_KEYS='keys',EVENT_PRE_INVALIDATE='preInvalidate',EVENT_POST_INVALIDATE='postInvalidate',EVENT_GET_FORM_DATA='getFormData',EVENT_SET_FORM_DATA='setFormData',EVENT_SET_INPUT_DATA='setInputData',EVENT_POST_INIT='postInit',EVENT_READY='ready',DEFAULT_OPTS={
        itemManager:ItemManager,
        plugins:[],
        ext:{},
        html:{
            wrap:'<div class="text-core"><div class="text-wrap"/></div>',
            hidden:'<input type="hidden" />'
        },
        keys:{
            8:'backspace',
            9:'tab',
            13:'enter!',
            27:'escape!',
            37:'left',
            38:'up!',
            39:'right',
            40:'down!',
            46:'delete',
            108:'numpadEnter'
        }
    };
    
if(!stringify)
    throw new Error('JSON.stringify() not found');
function getProperty(source,name)

{
    if(typeof(name)==='string')
        name=name.split('.');
    var fullCamelCaseName=name.join('.').replace(/\.(\w)/g,function(match,letter){
        return letter.toUpperCase()
        }),nestedName=name.shift(),result;
    if(typeof(result=source[fullCamelCaseName])!=UNDEFINED)
        result=result;
    else if(typeof(result=source[nestedName])!=UNDEFINED&&name.length>0)
        result=getProperty(result,name);
    return result;
};

function hookupEvents()

{
    var args=slice.apply(arguments),self=this,target=args.length===1?self:args.shift(),event;
    args=args[0]||{};
    
    function bind(event,handler)

    {
        target.bind(event,function()

        {
            return handler.apply(self,arguments);
        });
    }
    for(event in args)
        bind(event,args[event]);
    };
    
function formDataObject(input,form)

{
    return{
        'input':input,
        'form':form
    };

};

p=ItemManager.prototype;
p.init=function(core)

{};
    
    p.filter=function(list,query)

    {
    var result=[],i,item;
    for(i=0;i<list.length;i++)

    {
        item=list[i];
        if(this.itemContains(item,query))
            result.push(item);
    }
    return result;
};

p.itemContains=function(item,needle)

{
    return this.itemToString(item).toLowerCase().indexOf(needle.toLowerCase())==0;
};

p.stringToItem=function(str)

{
    return str;
};

p.itemToString=function(item)

{
    return item;
};

p.compareItems=function(item1,item2)

{
    return item1==item2;
};

p=TextExt.prototype;
p.init=function(input,opts)

{
    var self=this,hiddenInput,itemManager,container;
    self._defaults=$.extend({},DEFAULT_OPTS);
    self._opts=opts||{};
    
    self._plugins={};
    
    self._itemManager=itemManager=new(self.opts(OPT_ITEM_MANAGER))();
    input=$(input);
    container=$(self.opts(OPT_HTML_WRAP));
    hiddenInput=$(self.opts(OPT_HTML_HIDDEN));
    input.wrap(container).keydown(function(e){
        return self.onKeyDown(e)
        }).keyup(function(e){
        return self.onKeyUp(e)
        }).data('textext',self);
    $(self).data({
        'hiddenInput':hiddenInput,
        'wrapElement':input.parents('.text-wrap').first(),
        'input':input
    });
    hiddenInput.attr('name',input.attr('name'));
    input.attr('name',null);
    hiddenInput.insertAfter(input);
    $.extend(true,itemManager,self.opts(OPT_EXT+'.item.manager'));
    $.extend(true,self,self.opts(OPT_EXT+'.*'),self.opts(OPT_EXT+'.core'));
    self.originalWidth=input.outerWidth();
    self.invalidateBounds();
    itemManager.init(self);
    self.initPatches();
    self.initPlugins(self.opts(OPT_PLUGINS),$.fn.textext.plugins);
    self.on({
        setFormData:self.onSetFormData,
        getFormData:self.onGetFormData,
        setInputData:self.onSetInputData,
        anyKeyUp:self.onAnyKeyUp
        });
    self.trigger(EVENT_POST_INIT);
    self.trigger(EVENT_READY);
    self.getFormData(0);
};

p.initPatches=function()

{
    var list=[],source=$.fn.textext.patches,name;
    for(name in source)
        list.push(name);this.initPlugins(list,source);
};

p.initPlugins=function(plugins,source)

{
    var self=this,ext,name,plugin,initList=[],i;
    if(typeof(plugins)=='string')
        plugins=plugins.split(/\s*,\s*|\s+/g);
    for(i=0;i<plugins.length;i++)

    {
        name=plugins[i];
        plugin=source[name];
        if(plugin)

        {
            self._plugins[name]=plugin=new plugin();
            self[name]=(function(plugin){
                return function(){
                    return plugin;
                }
            })(plugin);
        initList.push(plugin);
        $.extend(true,plugin,self.opts(OPT_EXT+'.*'),self.opts(OPT_EXT+'.'+name));
    }
    }
initList.sort(function(p1,p2)
{
    p1=p1.initPriority();
    p2=p2.initPriority();
    return p1===p2?0:p1<p2?1:-1;
});
for(i=0;i<initList.length;i++)
    initList[i].init(self);
};

p.hasPlugin=function(name)
{
    return!!this._plugins[name];
};

p.on=hookupEvents;
p.bind=function(event,handler)
{
    this.input().bind(event,handler);
};

p.trigger=function()
{
    var args=arguments;
    this.input().trigger(args[0],slice.call(args,1));
};

p.itemManager=function()
{
    return this._itemManager;
};

p.input=function()
{
    return $(this).data('input');
};

p.opts=function(name)
{
    var result=getProperty(this._opts,name);
    return typeof(result)=='undefined'?getProperty(this._defaults,name):result;
};

p.wrapElement=function()
{
    return $(this).data('wrapElement');
};

p.invalidateBounds=function()
{
    var self=this,input=self.input(),wrap=self.wrapElement(),container=wrap.parent(),width=self.originalWidth,height;
    self.trigger(EVENT_PRE_INVALIDATE);
    height=input.outerHeight();
    input.width(width);
    wrap.width(width).height(height);
    container.height(height);
    self.trigger(EVENT_POST_INVALIDATE);
};

p.focusInput=function()
{
    this.input()[0].focus();
};

p.serializeData=stringify;
p.hiddenInput=function(value)
{
    return $(this).data('hiddenInput');
};

p.getWeightedEventResponse=function(event,args)
{
    var self=this,data={},maxWeight=0;
    self.trigger(event,data,args);
    for(var weight in data)
        maxWeight=Math.max(maxWeight,weight);return data[maxWeight];
};

p.getFormData=function(keyCode)
{
    var self=this,data=self.getWeightedEventResponse(EVENT_GET_FORM_DATA,keyCode||0);
    self.trigger(EVENT_SET_FORM_DATA,data['form']);
    self.trigger(EVENT_SET_INPUT_DATA,data['input']);
};

p.onAnyKeyUp=function(e,keyCode)
{
    this.getFormData(keyCode);
};

p.onSetInputData=function(e,data)
{
    this.input().val(data);
};

p.onSetFormData=function(e,data)
{
    var self=this;
    self.hiddenInput().val(self.serializeData(data));
};

p.onGetFormData=function(e,data)
{
    var val=this.input().val();
    data[0]=formDataObject(val,val);
};

$(['Down','Up']).each(function()

{
    var type=this.toString();
    p['onKey'+type]=function(e)

    {
        var self=this,keyName=self.opts(OPT_KEYS)[e.keyCode],defaultResult=true;
        if(keyName)

        {
            defaultResult=keyName.substr(-1)!='!';
            keyName=keyName.replace('!','');
            self.trigger(keyName+'Key'+type);
            if(type=='Up'&&self._lastKeyDown==e.keyCode)

            {
                self._lastKeyDown=null;
                self.trigger(keyName+'KeyPress');
            }
            if(type=='Down')
                self._lastKeyDown=e.keyCode;
        }
        self.trigger('anyKey'+type,e.keyCode);
        return defaultResult;
    };

});
p=TextExtPlugin.prototype;
p.on=hookupEvents;
p.formDataObject=formDataObject;
p.init=function(core){
    throw new Error('Not implemented')
    };
    
p.baseInit=function(core,defaults)
{
    var self=this;
    core._defaults=$.extend(true,core._defaults,defaults);
    self._core=core;
    self._timers={};

};

p.startTimer=function(name,delay,callback)
{
    var self=this;
    self.stopTimer(name);
    self._timers[name]=setTimeout(function()

    {
        delete self._timers[name];
        callback.apply(self);
    },delay*1000);
};

p.stopTimer=function(name)
{
    clearTimeout(this._timers[name]);
};

p.core=function()
{
    return this._core;
};

p.opts=function(name)
{
    return this.core().opts(name);
};

p.itemManager=function()
{
    return this.core().itemManager();
};

p.input=function()
{
    return this.core().input();
};

p.val=function(value)
{
    var input=this.input();
    if(typeof(value)===UNDEFINED)
        return input.val();else
        input.val(value);
};

p.trigger=function()
{
    var core=this.core();
    core.trigger.apply(core,arguments);
};

p.bind=function(event,handler)
{
    this.core().bind(event,handler);
};

p.initPriority=function()
{
    return 0;
};

var cssInjected=false;
var textext=$.fn.textext=function(opts)
{
    var css;
    if(!cssInjected&&(css=$.fn.textext.css)!=null)

    {
        $('head').append('<style>'+css+'</style>');
        cssInjected=true;
    }
    return this.map(function()
    {
        var self=$(this);
        if(opts==null)
            return self.data('textext');
        var instance=new TextExt();
        instance.init(self,opts);
        self.data('textext',instance);
        return instance.input()[0];
    });
};

textext.addPlugin=function(name,constructor)
{
    textext.plugins[name]=constructor;
    constructor.prototype=new textext.TextExtPlugin();
};

textext.addPatch=function(name,constructor)
{
    textext.patches[name]=constructor;
    constructor.prototype=new textext.TextExtPlugin();
};

textext.TextExt=TextExt;
textext.TextExtPlugin=TextExtPlugin;
textext.ItemManager=ItemManager;
textext.plugins={};

textext.patches={};

})(jQuery);
(function($)

{
    function TextExtIE9Patches(){};
    
    $.fn.textext.TextExtIE9Patches=TextExtIE9Patches;
    $.fn.textext.addPatch('ie9',TextExtIE9Patches);
    var p=TextExtIE9Patches.prototype;
    p.init=function(core)

    {
        if(navigator.userAgent.indexOf('MSIE 9')==-1)
            return;
        var self=this;
        core.on({
            postInvalidate:self.onPostInvalidate
            });
    };
    
    p.onPostInvalidate=function()

    {
        var self=this,input=self.input(),val=input.val();
        input.val(Math.random());
        input.val(val);
    };

})(jQuery);
;
(function($)

{
    function TextExtAjax(){};
    
    $.fn.textext.TextExtAjax=TextExtAjax;
    $.fn.textext.addPlugin('ajax',TextExtAjax);
    var p=TextExtAjax.prototype,OPT_DATA_CALLBACK='ajax.data.callback',OPT_CACHE_RESULTS='ajax.cache.results',OPT_LOADING_DELAY='ajax.loading.delay',OPT_LOADING_MESSAGE='ajax.loading.message',OPT_TYPE_DELAY='ajax.type.delay',EVENT_SET_SUGGESTION='setSuggestions',EVENT_SHOW_DROPDOWN='showDropdown',TIMER_LOADING='loading',DEFAULT_OPTS={
        ajax:{
            typeDelay:0.5,
            loadingMessage:'Loading...',
            loadingDelay:0.5,
            cacheResults:false,
            dataCallback:null
        }
    };
    
p.init=function(core)

{
    var self=this;
    self.baseInit(core,DEFAULT_OPTS);
    self.on({
        getSuggestions:self.onGetSuggestions
        });
    self._suggestions=null;
};

p.load=function(query)

{
    var self=this,dataCallback=self.opts(OPT_DATA_CALLBACK)||function(query){
        return{
            q:query
        }
    },opts;
opts=$.extend(true,{
    data:dataCallback(query),
    success:function(data){
        self.onComplete(data,query)
        },
    error:function(jqXHR,message){
        console.error(message,query)
        }
    },self.opts('ajax'));
    $.ajax(opts);
};

p.onComplete=function(data,query)
{
    var self=this,result=data;
    self.dontShowLoading();
    if(self.opts(OPT_CACHE_RESULTS)==true)

    {
        self._suggestions=data;
        result=self.itemManager().filter(data,query);
    }
    self.trigger(EVENT_SET_SUGGESTION,{
        result:result
    });
};

p.dontShowLoading=function()
{
    this.stopTimer(TIMER_LOADING);
};

p.showLoading=function()
{
    var self=this;
    self.dontShowLoading();
    self.startTimer(TIMER_LOADING,self.opts(OPT_LOADING_DELAY),function()

    {
        self.trigger(EVENT_SHOW_DROPDOWN,function(autocomplete)

        {
            autocomplete.clearItems();
            var node=autocomplete.addDropdownItem(self.opts(OPT_LOADING_MESSAGE));
            node.addClass('text-loading');
        });
    });
};

p.onGetSuggestions=function(e,data)
{
    var self=this,suggestions=self._suggestions,query=(data||{}).query||'';
    if(suggestions&&self.opts(OPT_CACHE_RESULTS)===true)
        return self.onComplete(suggestions,query);
    self.startTimer('ajax',self.opts(OPT_TYPE_DELAY),function()

    {
        self.showLoading();
        self.load(query);
    });
};

})(jQuery);
;
(function($)

{
    function TextExtArrow(){};
    
    $.fn.textext.TextExtArrow=TextExtArrow;
    $.fn.textext.addPlugin('arrow',TextExtArrow);
    var p=TextExtArrow.prototype,OPT_HTML_ARROW='html.arrow',DEFAULT_OPTS={
        html:{
            arrow:'<div class="text-arrow"/>'
        }
    };
    
p.init=function(core)

{
    var self=this,arrow;
    self.baseInit(core,DEFAULT_OPTS);
    self._arrow=arrow=$(self.opts(OPT_HTML_ARROW));
    self.core().wrapElement().append(arrow);
    arrow.bind('click',function(e){
        self.onArrowClick(e);
    });
};

p.onArrowClick=function(e)

{
    this.trigger('toggleDropdown');
    this.core().focusInput();
};

})(jQuery);
;
(function($)

{
    function TextExtAutocomplete(){};
    
    $.fn.textext.TextExtAutocomplete=TextExtAutocomplete;
    $.fn.textext.addPlugin('autocomplete',TextExtAutocomplete);
    var p=TextExtAutocomplete.prototype,CSS_DOT='.',CSS_SELECTED='text-selected',CSS_DOT_SELECTED=CSS_DOT+CSS_SELECTED,CSS_SUGGESTION='text-suggestion',CSS_DOT_SUGGESTION=CSS_DOT+CSS_SUGGESTION,CSS_LABEL='text-label',CSS_DOT_LABEL=CSS_DOT+CSS_LABEL,OPT_ENABLED='autocomplete.enabled',OPT_POSITION='autocomplete.dropdown.position',OPT_MAX_HEIGHT='autocomplete.dropdown.maxHeight',OPT_RENDER='autocomplete.render',OPT_HTML_DROPDOWN='html.dropdown',OPT_HTML_SUGGESTION='html.suggestion',EVENT_HIDE_DROPDOWN='hideDropdown',EVENT_SHOW_DROPDOWN='showDropdown',EVENT_GET_SUGGESTIONS='getSuggestions',EVENT_GET_FORM_DATA='getFormData',EVENT_TOGGLE_DROPDOWN='toggleDropdown',POSITION_ABOVE='above',POSITION_BELOW='below',DATA_MOUSEDOWN_ON_AUTOCOMPLETE='mousedownOnAutocomplete',DEFAULT_OPTS={
        autocomplete:{
            enabled:true,
            dropdown:{
                position:POSITION_BELOW,
                maxHeight:'100px'
            }
        },
    html:{
        dropdown:'<div class="text-dropdown"><div class="text-list"/></div>',
        suggestion:'<div class="text-suggestion"><span class="text-label"/></div>'
    }
};

p.init=function(core)

{
    var self=this;
    self.baseInit(core,DEFAULT_OPTS);
    var input=self.input(),container;
    if(self.opts(OPT_ENABLED)===true)

    {
        self.on({
            blur:self.onBlur,
            anyKeyUp:self.onAnyKeyUp,
            deleteKeyUp:self.onAnyKeyUp,
            backspaceKeyPress:self.onBackspaceKeyPress,
            enterKeyPress:self.onEnterKeyPress,
            escapeKeyPress:self.onEscapeKeyPress,
            setSuggestions:self.onSetSuggestions,
            showDropdown:self.onShowDropdown,
            hideDropdown:self.onHideDropdown,
            toggleDropdown:self.onToggleDropdown,
            postInvalidate:self.positionDropdown,
            getFormData:self.onGetFormData,
            downKeyDown:self.onDownKeyDown,
            upKeyDown:self.onUpKeyDown
            });
        container=$(self.opts(OPT_HTML_DROPDOWN));
        container.insertAfter(input);
        self.on(container,{
            mouseover:self.onMouseOver,
            mousedown:self.onMouseDown,
            click:self.onClick
            });
        container.css('maxHeight',self.opts(OPT_MAX_HEIGHT)).addClass('text-position-'+self.opts(OPT_POSITION));
        $(self).data('container',container);
        $(document.body).click(function(e)

        {
            if(self.isDropdownVisible()&&!self.withinWrapElement(e.target))
                self.trigger(EVENT_HIDE_DROPDOWN);
        });
        self.positionDropdown();
    }
};

p.containerElement=function()
{
    return $(this).data('container');
};

p.onMouseOver=function(e)
{
    var self=this,target=$(e.target);
    if(target.is(CSS_DOT_SUGGESTION))

    {
        self.clearSelected();
        target.addClass(CSS_SELECTED);
    }
};

p.onMouseDown=function(e)
{
    this.containerElement().data(DATA_MOUSEDOWN_ON_AUTOCOMPLETE,true);
};

p.onClick=function(e)
{
    var self=this,target=$(e.target);
    if($(CSS_DOT_SUGGESTION).has(target[0])||$(CSS_DOT_LABEL).has(target[0]))
        self.trigger('enterKeyPress');
    if(self.core().hasPlugin('tags'))
        self.val('');
};

p.onBlur=function(e)
{
    var self=this,container=self.containerElement(),isBlurByMousedown=container.data(DATA_MOUSEDOWN_ON_AUTOCOMPLETE)===true;
    if(self.isDropdownVisible())
        isBlurByMousedown?self.core().focusInput():self.trigger(EVENT_HIDE_DROPDOWN);
    container.removeData(DATA_MOUSEDOWN_ON_AUTOCOMPLETE);
};

p.onBackspaceKeyPress=function(e)
{
    var self=this,isEmpty=self.val().length>0;
    if(isEmpty||self.isDropdownVisible())
        self.getSuggestions();
};

p.onAnyKeyUp=function(e,keyCode)
{
    var self=this,isFunctionKey=self.opts('keys.'+keyCode)!=null;
    if(self.val().length>0&&!isFunctionKey)
        self.getSuggestions();
};

p.onDownKeyDown=function(e)
{
    var self=this;
    self.isDropdownVisible()?self.toggleNextSuggestion():self.getSuggestions();
};

p.onUpKeyDown=function(e)
{
    this.togglePreviousSuggestion();
};

p.onEnterKeyPress=function(e)
{
    var self=this;
    if(self.isDropdownVisible())
        self.selectFromDropdown();
};

p.onEscapeKeyPress=function(e)
{
    var self=this;
    if(self.isDropdownVisible())
        self.trigger(EVENT_HIDE_DROPDOWN);
};

p.positionDropdown=function()
{
    var self=this,container=self.containerElement(),direction=self.opts(OPT_POSITION),height=self.core().wrapElement().outerHeight(),css={};
    
    css[direction===POSITION_ABOVE?'bottom':'top']=height+'px';
    container.css(css);
};

p.suggestionElements=function()
{
    return this.containerElement().find(CSS_DOT_SUGGESTION);
};

p.setSelectedSuggestion=function(suggestion)
{
    if(!suggestion)
        return;
    var self=this,all=self.suggestionElements(),target=all.first(),item,i;
    self.clearSelected();
    for(i=0;i<all.length;i++)

    {
        item=$(all[i]);
        if(self.itemManager().compareItems(item.data(CSS_SUGGESTION),suggestion))

        {
            target=item.addClass(CSS_SELECTED);
            break;
        }
    }
target.addClass(CSS_SELECTED);
self.scrollSuggestionIntoView(target);
};

p.selectedSuggestionElement=function()
{
    return this.suggestionElements().filter(CSS_DOT_SELECTED).first();
};

p.isDropdownVisible=function()
{
    return this.containerElement().is(':visible')===true;
};

p.onGetFormData=function(e,data,keyCode)
{
    var self=this,val=self.val(),inputValue=val,formValue=val;
    data[100]=self.formDataObject(inputValue,formValue);
};

p.initPriority=function()
{
    return 200;
};

p.onHideDropdown=function(e)
{
    this.hideDropdown();
};

p.onToggleDropdown=function(e)
{
    var self=this;
    self.trigger(self.containerElement().is(':visible')?EVENT_HIDE_DROPDOWN:EVENT_SHOW_DROPDOWN);
};

p.onShowDropdown=function(e,renderCallback)
{
    var self=this,current=self.selectedSuggestionElement().data(CSS_SUGGESTION),suggestions=self._suggestions;
    if(!suggestions)
        return self.trigger(EVENT_GET_SUGGESTIONS);
    if($.isFunction(renderCallback))

    {
        renderCallback(self);
    }
    else
    {
        self.renderSuggestions(self._suggestions);
        self.toggleNextSuggestion();
    }
    self.showDropdown(self.containerElement());
    self.setSelectedSuggestion(current);
};

p.onSetSuggestions=function(e,data)
{
    var self=this,suggestions=self._suggestions=data.result;
    if(data.showHideDropdown!==false)
        self.trigger(suggestions===null||suggestions.length===0?EVENT_HIDE_DROPDOWN:EVENT_SHOW_DROPDOWN);
};

p.getSuggestions=function()
{
    var self=this,val=self.val();
    if(self._previousInputValue==val)
        return;
    if(val=='')
        current=null;
    self._previousInputValue=val;
    self.trigger(EVENT_GET_SUGGESTIONS,{
        query:val
    });
};

p.clearItems=function()
{
    this.containerElement().find('.text-list').children().remove();
};

p.renderSuggestions=function(suggestions)
{
    var self=this;
    self.clearItems();
    $.each(suggestions||[],function(index,item)

    {
        self.addSuggestion(item);
    });
};

p.showDropdown=function()
{
    this.containerElement().show();
};

p.hideDropdown=function()
{
    var self=this,dropdown=self.containerElement();
    self._previousInputValue=null;
    dropdown.hide();
};

p.addSuggestion=function(suggestion)
{
    var self=this,renderer=self.opts(OPT_RENDER),node=self.addDropdownItem(renderer?renderer.call(self,suggestion):self.itemManager().itemToString(suggestion));
    node.data(CSS_SUGGESTION,suggestion);
};

p.addDropdownItem=function(html)
{
    var self=this,container=self.containerElement().find('.text-list'),node=$(self.opts(OPT_HTML_SUGGESTION));
    node.find('.text-label').html(html);
    container.append(node);
    return node;
};

p.clearSelected=function()
{
    this.suggestionElements().removeClass(CSS_SELECTED);
};

p.toggleNextSuggestion=function()
{
    var self=this,selected=self.selectedSuggestionElement(),next;
    if(selected.length>0)

    {
        next=selected.next();
        if(next.length>0)
            selected.removeClass(CSS_SELECTED);
    }
    else
    {
        next=self.suggestionElements().first();
    }
    next.addClass(CSS_SELECTED);
    self.scrollSuggestionIntoView(next);
};

p.togglePreviousSuggestion=function()
{
    var self=this,selected=self.selectedSuggestionElement(),prev=selected.prev();
    if(prev.length==0)
        return;
    self.clearSelected();
    prev.addClass(CSS_SELECTED);
    self.scrollSuggestionIntoView(prev);
};

p.scrollSuggestionIntoView=function(item)
{
    var itemHeight=item.outerHeight(),dropdown=this.containerElement(),dropdownHeight=dropdown.innerHeight(),scrollPos=dropdown.scrollTop(),itemTop=(item.position()||{}).top,scrollTo=null,paddingTop=parseInt(dropdown.css('paddingTop'));
    if(itemTop==null)
        return;
    if(itemTop+itemHeight>dropdownHeight)
        scrollTo=itemTop+scrollPos+itemHeight-dropdownHeight+paddingTop;
    if(itemTop<0)
        scrollTo=itemTop+scrollPos-paddingTop;
    if(scrollTo!=null)
        dropdown.scrollTop(scrollTo);
};

p.selectFromDropdown=function()
{
    var self=this,suggestion=self.selectedSuggestionElement().data(CSS_SUGGESTION);
    if(suggestion)

    {
        self.val(self.itemManager().itemToString(suggestion));
        self.core().getFormData();
    }
    self.trigger(EVENT_HIDE_DROPDOWN);
};

p.withinWrapElement=function(element)
{
    return this.core().wrapElement().find(element).size()>0;
}
})(jQuery);
;
(function($)

{
    function TextExtFilter(){};
    
    $.fn.textext.TextExtFilter=TextExtFilter;
    $.fn.textext.addPlugin('filter',TextExtFilter);
    var p=TextExtFilter.prototype,OPT_ENABLED='filter.enabled',OPT_ITEMS='filter.items',DEFAULT_OPTS={
        filter:{
            enabled:true,
            items:null
        }
    };
    
p.init=function(core)

{
    var self=this;
    self.baseInit(core,DEFAULT_OPTS);
    self.on({
        getFormData:self.onGetFormData,
        isTagAllowed:self.onIsTagAllowed,
        setSuggestions:self.onSetSuggestions
        });
    self._suggestions=null;
};

p.onGetFormData=function(e,data,keyCode)

{
    var self=this,val=self.val(),inputValue=val,formValue='';
    if(!self.core().hasPlugin('tags'))

    {
        if(self.isValueAllowed(inputValue))
            formValue=val;
        data[300]=self.formDataObject(inputValue,formValue);
    }
};

p.isValueAllowed=function(value)

{
    var self=this,list=self.opts('filterItems')||self._suggestions||[],itemManager=self.itemManager(),result=!self.opts(OPT_ENABLED),i;
    for(i=0;i<list.length&&!result;i++)
        if(itemManager.compareItems(value,list[i]))
            result=true;return result;
};

p.onIsTagAllowed=function(e,data)

{
    data.result=this.isValueAllowed(data.tag);
};

p.onSetSuggestions=function(e,data)

{
    this._suggestions=data.result;
};

})(jQuery);
;
(function($)

{
    function TextExtFocus(){};
    
    $.fn.textext.TextExtFocus=TextExtFocus;
    $.fn.textext.addPlugin('focus',TextExtFocus);
    var p=TextExtFocus.prototype,OPT_HTML_FOCUS='html.focus',DEFAULT_OPTS={
        html:{
            focus:'<div class="text-focus"/>'
        }
    };
    
p.init=function(core)

{
    var self=this;
    self.baseInit(core,DEFAULT_OPTS);
    self.core().wrapElement().append(self.opts(OPT_HTML_FOCUS));
    self.on({
        blur:self.onBlur,
        focus:self.onFocus
        });
    self._timeoutId=0;
};

p.onBlur=function(e)

{
    var self=this;
    clearTimeout(self._timeoutId);
    self._timeoutId=setTimeout(function()

    {
        self.getFocus().hide();
    },100);
};

p.onFocus=function(e)

{
    var self=this;
    clearTimeout(self._timeoutId);
    self.getFocus().show();
};

p.getFocus=function()

{
    return this.core().wrapElement().find('.text-focus');
};

})(jQuery);
;
(function($)

{
    function TextExtPrompt(){};
    
    $.fn.textext.TextExtPrompt=TextExtPrompt;
    $.fn.textext.addPlugin('prompt',TextExtPrompt);
    var p=TextExtPrompt.prototype,CSS_HIDE_PROMPT='text-hide-prompt',OPT_PROMPT='prompt',OPT_HTML_PROMPT='html.prompt',DEFAULT_OPTS={
        prompt:'Awaiting input...',
        html:{
            prompt:'<div class="text-prompt"/>'
        }
    };
    
p.init=function(core)

{
    var self=this,placeholderKey='placeholder',container,prompt;
    self.baseInit(core,DEFAULT_OPTS);
    container=$(self.opts(OPT_HTML_PROMPT));
    $(self).data('container',container);
    self.core().wrapElement().append(container);
    self.setPrompt(self.opts(OPT_PROMPT));
    prompt=core.input().attr(placeholderKey);
    if(!prompt)
        prompt=self.opts(OPT_PROMPT);
    core.input().attr(placeholderKey,'');
    if(prompt)
        self.setPrompt(prompt);
    if($.trim(self.val()).length>0)
        self.hidePrompt();
    self.on({
        blur:self.onBlur,
        focus:self.onFocus,
        postInvalidate:self.onPostInvalidate,
        postInit:self.onPostInit
        });
};

p.onPostInit=function(e)

{
    this.invalidateBounds();
};

p.onPostInvalidate=function(e)

{
    this.invalidateBounds();
};

p.invalidateBounds=function()

{
    var self=this,input=self.input();
    self.containerElement().css({
        paddingLeft:input.css('paddingLeft'),
        paddingTop:input.css('paddingTop')
        });
};

p.onBlur=function(e)

{
    var self=this;
    self.startTimer('prompt',0.1,function()

    {
        self.showPrompt();
    });
};

p.showPrompt=function()

{
    var self=this,input=self.input();
    if($.trim(self.val()).length===0&&!input.is(':focus'))
        self.containerElement().removeClass(CSS_HIDE_PROMPT);
};

p.hidePrompt=function()

{
    this.stopTimer('prompt');
    this.containerElement().addClass(CSS_HIDE_PROMPT);
};

p.onFocus=function(e)

{
    this.hidePrompt();
};

p.setPrompt=function(str)

{
    this.containerElement().text(str);
};

p.containerElement=function()

{
    return $(this).data('container');
};

})(jQuery);
;
(function($)

{
    function TextExtSuggestions(){};
    
    $.fn.textext.TextExtSuggestions=TextExtSuggestions;
    $.fn.textext.addPlugin('suggestions',TextExtSuggestions);
    var p=TextExtSuggestions.prototype,OPT_SUGGESTIONS='suggestions',DEFAULT_OPTS={
        suggestions:null
    };
    
    p.init=function(core)

    {
        var self=this;
        self.baseInit(core,DEFAULT_OPTS);
        self.on({
            getSuggestions:self.onGetSuggestions,
            postInit:self.onPostInit
            });
    };
    
    p.setSuggestions=function(suggestions,showHideDropdown)

    {
        this.trigger('setSuggestions',{
            result:suggestions,
            showHideDropdown:showHideDropdown!=false
            });
    };
    
    p.onPostInit=function(e)

    {
        var self=this;
        self.setSuggestions(self.opts(OPT_SUGGESTIONS),false);
    };
    
    p.onGetSuggestions=function(e,data)

    {
        var self=this,suggestions=self.opts(OPT_SUGGESTIONS);
        suggestions.sort();
        self.setSuggestions(self.itemManager().filter(suggestions,data.query));
    };

})(jQuery);
;
(function($)

{
    function TextExtTags(){};
    
    $.fn.textext.TextExtTags=TextExtTags;
    $.fn.textext.addPlugin('tags',TextExtTags);
    var p=TextExtTags.prototype,CSS_DOT='.',CSS_TAGS_ON_TOP='text-tags-on-top',CSS_DOT_TAGS_ON_TOP=CSS_DOT+CSS_TAGS_ON_TOP,CSS_TAG='text-tag',CSS_DOT_TAG=CSS_DOT+CSS_TAG,CSS_TAGS='text-tags',CSS_DOT_TAGS=CSS_DOT+CSS_TAGS,CSS_LABEL='text-label',CSS_DOT_LABEL=CSS_DOT+CSS_LABEL,CSS_REMOVE='text-remove',CSS_DOT_REMOVE=CSS_DOT+CSS_REMOVE,OPT_ENABLED='tags.enabled',OPT_ITEMS='tags.items',OPT_HTML_TAG='html.tag',OPT_HTML_TAGS='html.tags',EVENT_IS_TAG_ALLOWED='isTagAllowed',EVENT_TAG_CLICK='tagClick',DEFAULT_OPTS={
        tags:{
            enabled:true,
            items:null
        },
        html:{
            tags:'<div class="text-tags"/>',
            tag:'<div class="text-tag"><div class="text-button"><span class="text-label"/><a class="text-remove"/></div></div>'
        }
    };
    
p.init=function(core)

{
    this.baseInit(core,DEFAULT_OPTS);
    var self=this,input=self.input(),container;
    if(self.opts(OPT_ENABLED))

    {
        container=$(self.opts(OPT_HTML_TAGS));
        input.after(container);
        $(self).data('container',container);
        self.on({
            enterKeyPress:self.onEnterKeyPress,
            backspaceKeyDown:self.onBackspaceKeyDown,
            preInvalidate:self.onPreInvalidate,
            postInit:self.onPostInit,
            getFormData:self.onGetFormData
            });
        self.on(container,{
            click:self.onClick,
            mousemove:self.onContainerMouseMove
            });
        self.on(input,{
            mousemove:self.onInputMouseMove
            });
    }
    self._originalPadding={
        left:parseInt(input.css('paddingLeft')||0),
        top:parseInt(input.css('paddingTop')||0)
        };
        
    self._paddingBox={
        left:0,
        top:0
    };
    
    self.updateFormCache();
};

p.containerElement=function()

{
    return $(this).data('container');
};

p.onPostInit=function(e)

{
    var self=this;
    self.addTags(self.opts(OPT_ITEMS));
};

p.onGetFormData=function(e,data,keyCode)

{
    var self=this,inputValue=keyCode===13?'':self.val(),formValue=self._formData;
    data[200]=self.formDataObject(inputValue,formValue);
};

p.initPriority=function()

{
    return 100;
};

p.onInputMouseMove=function(e)

{
    this.toggleZIndex(e);
};

p.onContainerMouseMove=function(e)

{
    this.toggleZIndex(e);
};

p.onBackspaceKeyDown=function(e)

{
    var self=this,lastTag=self.tagElements().last();
    if(self.val().length==0)
        self.removeTag(lastTag);
};

p.onPreInvalidate=function(e)

{
    var self=this,lastTag=self.tagElements().last(),pos=lastTag.position();
    if(lastTag.length>0)
        pos.left+=lastTag.innerWidth();else
        pos=self._originalPadding;
    self._paddingBox=pos;
    self.input().css({
        paddingLeft:pos.left,
        paddingTop:pos.top
        });
};

p.onClick=function(e)

{
    var self=this,core=self.core(),source=$(e.target),focus=0,tag;
    if(source.is(CSS_DOT_TAGS))

    {
        focus=1;
    }
    else if(source.is(CSS_DOT_REMOVE))
    {
        self.removeTag(source.parents(CSS_DOT_TAG+':first'));
        focus=1;
    }
    else if(source.is(CSS_DOT_LABEL))
    {
        tag=source.parents(CSS_DOT_TAG+':first');
        self.trigger(EVENT_TAG_CLICK,tag,tag.data(CSS_TAG),tagClickCallback);
    }
    function tagClickCallback(newValue,refocus)
    {
        tag.data(CSS_TAG,newValue);
        tag.find(CSS_DOT_LABEL).text(self.itemManager().itemToString(newValue));
        self.updateFormCache();
        core.getFormData();
        core.invalidateBounds();
        if(refocus)
            core.focusInput();
    }
    if(focus)
        core.focusInput();
};

p.onEnterKeyPress=function(e)

{
    var self=this,val=self.val(),tag=self.itemManager().stringToItem(val);
    if(self.isTagAllowed(tag))

    {
        self.addTags([tag]);
        self.core().focusInput();
    }
};

p.updateFormCache=function()

{
    var self=this,result=[];
    self.tagElements().each(function()

    {
        result.push($(this).data(CSS_TAG));
    });
    self._formData=result;
};

p.toggleZIndex=function(e)

{
    var self=this,offset=self.input().offset(),mouseX=e.clientX-offset.left,mouseY=e.clientY-offset.top,box=self._paddingBox,container=self.containerElement(),isOnTop=container.is(CSS_DOT_TAGS_ON_TOP),isMouseOverText=mouseX>box.left&&mouseY>box.top;
    if(!isOnTop&&!isMouseOverText||isOnTop&&isMouseOverText)
        container[(!isOnTop?'add':'remove')+'Class'](CSS_TAGS_ON_TOP);
};

p.tagElements=function()

{
    return this.containerElement().find(CSS_DOT_TAG);
};

p.isTagAllowed=function(tag)

{
    var opts={
        tag:tag,
        result:true
    };
    
    this.trigger(EVENT_IS_TAG_ALLOWED,opts);
    return opts.result===true;
};

p.addTags=function(tags)

{
    if(!tags||tags.length==0)
        return;
    var self=this,core=self.core(),container=self.containerElement(),i,tag;
    for(i=0;i<tags.length;i++)

    {
        tag=tags[i];
        if(tag&&self.isTagAllowed(tag))
            container.append(self.renderTag(tag));
    }
    self.updateFormCache();
    core.getFormData();
    core.invalidateBounds();
};

p.getTagElement=function(tag)

{
    var self=this,list=self.tagElements(),i,item;
    for(i=0;i<list.length,item=$(list[i]);i++)
        if(self.itemManager().compareItems(item.data(CSS_TAG),tag))
            return item;
    };
    
p.removeTag=function(tag)

{
    var self=this,core=self.core(),element;
    if(tag instanceof $)

    {
        element=tag;
        tag=tag.data(CSS_TAG);
    }
    else
    {
        element=self.getTagElement(tag);
    }
    element.remove();
    self.updateFormCache();
    core.getFormData();
    core.invalidateBounds();
};

p.renderTag=function(tag)

{
    var self=this,node=$(self.opts(OPT_HTML_TAG));
    node.find('.text-label').text(self.itemManager().itemToString(tag));
    node.data(CSS_TAG,tag);
    return node;
};

})(jQuery);
;
(function($){
    $.timeago=function(timestamp){
        if(timestamp instanceof Date){
            return inWords(timestamp);
        }else if(typeof timestamp==="string"){
            return inWords($.timeago.parse(timestamp));
        }else if(typeof timestamp==="number"){
            return inWords(new Date(timestamp));
        }else{
            return inWords($.timeago.datetime(timestamp));
        }
    };
    
var $t=$.timeago;
$.extend($.timeago,{
    settings:{
        refreshMillis:60000,
        allowFuture:false,
        strings:{
            prefixAgo:null,
            prefixFromNow:null,
            suffixAgo:"ago",
            suffixFromNow:"from now",
            seconds:"less than a minute",
            minute:"about a minute",
            minutes:"%d minutes",
            hour:"about an hour",
            hours:"about %d hours",
            day:"a day",
            days:"%d days",
            month:"about a month",
            months:"%d months",
            year:"about a year",
            years:"%d years",
            wordSeparator:" ",
            numbers:[]
        },
        translator:null
    },
    inWords:function(distanceMillis){
        var $l=this.settings.strings;
        var prefix=$l.prefixAgo;
        var suffix=$l.suffixAgo;
        if(this.settings.allowFuture){
            if(distanceMillis<0){
                prefix=$l.prefixFromNow;
                suffix=$l.suffixFromNow;
            }
        }
    var seconds=Math.abs(distanceMillis)/1000;
    var minutes=seconds/60;
    var hours=minutes/60;
    var days=hours/24;
    var years=days/365;
    function convert(stringOrFunction,number){
        var string=$.isFunction(stringOrFunction)?stringOrFunction(number,distanceMillis):stringOrFunction;
        return{
            'string':string,
            'value':($l.numbers&&$l.numbers[number])||number
            };
        
}
var stringAndNumber=seconds<45&&convert($l.seconds,Math.round(seconds))||seconds<90&&convert($l.minute,1)||minutes<45&&convert($l.minutes,Math.round(minutes))||minutes<90&&convert($l.hour,1)||hours<24&&convert($l.hours,Math.round(hours))||hours<42&&convert($l.day,1)||days<30&&convert($l.days,Math.round(days))||days<45&&convert($l.month,1)||days<365&&convert($l.months,Math.round(days/30))||years<1.5&&convert($l.year,1)||convert($l.years,Math.round(years));
    var string=stringAndNumber.string;
    var value=stringAndNumber.value;
    var separator=$l.wordSeparator===undefined?" ":$l.wordSeparator;
    var fullString=$.trim([prefix,string,suffix].join(separator));
    var translatedString=$t.settings.translator?$t.settings.translator(fullString):fullString;
    return translatedString.replace(/%d/i,value);
    },
    parse:function(iso8601){
        var s=$.trim(iso8601);
        s=s.replace(/\.\d\d\d+/,"");
        s=s.replace(/-/,"/").replace(/-/,"/");
        s=s.replace(/T/," ").replace(/Z/," UTC");
        s=s.replace(/([\+\-]\d\d)\:?(\d\d)/," $1$2");
        return new Date(s);
    },
    datetime:function(elem){
        var iso8601=$t.isTime(elem)?$(elem).attr("datetime"):$(elem).attr("title");
        return $t.parse(iso8601);
    },
    isTime:function(elem){
        return $(elem).get(0).tagName.toLowerCase()==="time";
    }
});
$.fn.timeago=function(){
    var self=this;
    self.each(refresh);
    var $s=$t.settings;
    if($s.refreshMillis>0){
        setInterval(function(){
            self.each(refresh);
        },$s.refreshMillis);
    }
    return self;
};

function refresh(){
    var data=prepareData(this);
    if(!isNaN(data.datetime)){
        $(this).text(inWords(data.datetime));
    }
    return this;
}
function prepareData(element){
    element=$(element);
    if(!element.data("timeago")){
        element.data("timeago",{
            datetime:$t.datetime(element)
            });
        var text=$.trim(element.text());
        if(text.length>0&&!($t.isTime(element)&&element.attr("title"))){
            element.attr("title",text);
        }
    }
return element.data("timeago");
}
function inWords(date){
    return $t.inWords(distance(date));
}
function distance(date){
    return(new Date().getTime()-date.getTime());
}
document.createElement("abbr");
document.createElement("time");
}(jQuery));
;
var QWeb2={
    expressions_cache:{},
    RESERVED_WORDS:'true,false,NaN,null,undefined,debugger,console,window,in,instanceof,new,function,return,this,typeof,eval,void,Math,RegExp,Array,Object,Date'.split(','),
    ACTIONS_PRECEDENCE:'foreach,if,call,set,esc,escf,raw,rawf,js,debug,log'.split(','),
    WORD_REPLACEMENT:{
        'and':'&&',
        'or':'||',
        'gt':'>',
        'gte':'>=',
        'lt':'<',
        'lte':'<='
    },
    tools:{
        exception:function(message,context){
            context=context||{};
            
            var prefix='QWeb2';
            if(context.template){
                prefix+=" - template['"+context.template+"']";
            }
            throw new Error(prefix+": "+message);
        },
        warning:function(message){
            if(typeof(window)!=='undefined'&&window.console){
                window.console.warn(message);
            }
        },
    trim:function(s,mode){
        switch(mode){
            case"left":
                return s.replace(/^\s*/,"");
            case"right":
                return s.replace(/\s*$/,"");
            default:
                return s.replace(/^\s*|\s*$/g,"");
        }
    },
js_escape:function(s,noquotes){
    return(noquotes?'':"'")+s.replace(/\r?\n/g,"\\n").replace(/'/g,"\\'")+(noquotes?'':"'");
},
html_escape:function(s,attribute){
    if(s==null){
        return'';
    }
    s=String(s).replace(/&/g,'&amp;').replace(/</g,'&lt;').replace(/>/g,'&gt;');
    if(attribute){
        s=s.replace(/"/g,'&quot;');
    }
    return s;
},
gen_attribute:function(o){
    if(o!==null&&o!==undefined){
        if(o.constructor===Array){
            if(o[1]!==null&&o[1]!==undefined){
                return this.format_attribute(o[0],o[1]);
            }
        }else if(typeof o==='object'){
        var r='';
        for(var k in o){
            if(o.hasOwnProperty(k)){
                r+=this.gen_attribute([k,o[k]]);
            }
        }
    return r;
}
}
return'';
},
format_attribute:function(name,value){
    return' '+name+'="'+this.html_escape(value,true)+'"';
},
extend:function(dst,src,exclude){
    for(var p in src){
        if(src.hasOwnProperty(p)&&!(exclude&&this.arrayIndexOf(exclude,p)!==-1)){
            dst[p]=src[p];
        }
    }
return dst;
},
arrayIndexOf:function(array,item){
    for(var i=0,ilen=array.length;i<ilen;i++){
        if(array[i]===item){
            return i;
        }
    }
return-1;
},
xml_node_to_string:function(node,childs_only){
    if(childs_only){
        var childs=node.childNodes,r=[];
        for(var i=0,ilen=childs.length;i<ilen;i++){
            r.push(this.xml_node_to_string(childs[i]));
        }
        return r.join('');
    }else{
        if(typeof XMLSerializer!=='undefined'){
            return(new XMLSerializer()).serializeToString(node);
        }else{
            switch(node.nodeType){
                case 1:
                    return node.outerHTML;
                case 3:
                    return node.data;
                case 4:
                    return'<![CDATA['+node.data+']]>';
                case 8:
                    return'<!-- '+node.data+'-->';
            }
            throw new Error('Unknown node type '+node.nodeType);
        }
    }
},
call:function(context,template,old_dict,_import,callback){
    var new_dict=this.extend({},old_dict);
    new_dict['__caller__']=old_dict['__template__'];
    if(callback){
        new_dict['__content__']=callback(context,new_dict);
    }
    var r=context.engine._render(template,new_dict);
    if(_import){
        if(_import==='*'){
            this.extend(old_dict,new_dict,['__caller__','__template__']);
        }else{
            _import=_import.split(',');
            for(var i=0,ilen=_import.length;i<ilen;i++){
                var v=_import[i];
                old_dict[v]=new_dict[v];
            }
            }
        }
return r;
},
foreach:function(context,enu,as,old_dict,callback){
    if(enu!=null){
        var size,new_dict=this.extend({},old_dict);
        new_dict[as+"_all"]=enu;
        var as_value=as+"_value",as_index=as+"_index",as_first=as+"_first",as_last=as+"_last",as_parity=as+"_parity";
        if(size=enu.length){
            new_dict[as+"_size"]=size;
            for(var j=0,jlen=enu.length;j<jlen;j++){
                var cur=enu[j];
                new_dict[as_value]=cur;
                new_dict[as_index]=j;
                new_dict[as_first]=j===0;
                new_dict[as_last]=j+1===size;
                new_dict[as_parity]=(j%2==1?'odd':'even');
                if(cur.constructor===Object){
                    this.extend(new_dict,cur);
                }
                new_dict[as]=cur;
                callback(context,new_dict);
            }
            }else if(enu.constructor==Number){
        var _enu=[];
        for(var i=0;i<enu;i++){
            _enu.push(i);
        }
        this.foreach(context,_enu,as,old_dict,callback);
    }else{
        var index=0;
        for(var k in enu){
            if(enu.hasOwnProperty(k)){
                var v=enu[k];
                new_dict[as_value]=v;
                new_dict[as_index]=index;
                new_dict[as_first]=index===0;
                new_dict[as_parity]=(j%2==1?'odd':'even');
                new_dict[as]=k;
                callback(context,new_dict);
                index+=1;
            }
        }
        }
    }else{
    this.exception("No enumerator given to foreach",context);
}
}
}
};

QWeb2.Engine=(function(){
    function Engine(){
        this.prefix='t';
        this.debug=false;
        this.templates_resources=[];
        this.templates={};
        
        this.compiled_templates={};
        
        this.extend_templates={};
        
        this.default_dict={};
        
        this.tools=QWeb2.tools;
        this.jQuery=window.jQuery;
        this.reserved_words=QWeb2.RESERVED_WORDS.slice(0);
        this.actions_precedence=QWeb2.ACTIONS_PRECEDENCE.slice(0);
        this.word_replacement=QWeb2.tools.extend({},QWeb2.WORD_REPLACEMENT);
        this.preprocess_node=null;
        for(var i=0;i<arguments.length;i++){
            this.add_template(arguments[i]);
        }
        }
QWeb2.tools.extend(Engine.prototype,{
    add_template:function(template){
        this.templates_resources.push(template);
        if(template.constructor===String){
            template=this.load_xml(template);
        }
        var ec=(template.documentElement&&template.documentElement.childNodes)||template.childNodes||[];
        for(var i=0;i<ec.length;i++){
            var node=ec[i];
            if(node.nodeType===1){
                if(node.nodeName=='parsererror'){
                    return this.tools.exception(node.innerText);
                }
                var name=node.getAttribute(this.prefix+'-name');
                var extend=node.getAttribute(this.prefix+'-extend');
                if(name&&extend){
                    if(!this.templates[extend]){
                        return this.tools.exception("Can't clone undefined template "+extend);
                    }
                    this.templates[name]=this.templates[extend].cloneNode(true);
                    extend=name;
                    name=undefined;
                }
                if(name){
                    this.templates[name]=node;
                    this.compiled_templates[name]=null;
                }else if(extend){
                    delete(this.compiled_templates[extend]);
                    if(this.extend_templates[extend]){
                        this.extend_templates[extend].push(node);
                    }else{
                        this.extend_templates[extend]=[node];
                    }
                }
            }
        }
return true;
},
load_xml:function(s){
    s=this.tools.trim(s);
    if(s.charAt(0)==='<'){
        return this.load_xml_string(s);
    }else{
        var req=this.get_xhr();
        if(req){
            if(this.debug){
                s+='?debug='+(new Date()).getTime();
            }
            req.open('GET',s,false);
            req.send(null);
            var xDoc=req.responseXML;
            if(xDoc){
                if(!xDoc.documentElement){
                    throw new Error("QWeb2: This xml document has no root document : "+xDoc.responseText);
                }
                if(xDoc.documentElement.nodeName=="parsererror"){
                    return this.tools.exception(xDoc.documentElement.childNodes[0].nodeValue);
                }
                return xDoc;
            }else{
                return this.load_xml_string(req.responseText);
            }
        }
    }
},
load_xml_string:function(s){
    if(window.DOMParser){
        var dp=new DOMParser();
        var r=dp.parseFromString(s,"text/xml");
        if(r.body&&r.body.firstChild&&r.body.firstChild.nodeName=='parsererror'){
            return this.tools.exception(r.body.innerText);
        }
        return r;
    }
    var xDoc;
    try{
        xDoc=new ActiveXObject("MSXML2.DOMDocument");
    }catch(e){
        return this.tools.exception("Could not find a DOM Parser: "+e.message);
    }
    xDoc.async=false;
    xDoc.preserveWhiteSpace=true;
    xDoc.loadXML(s);
    return xDoc;
},
has_template:function(template){
    return!!this.templates[template];
},
get_xhr:function(){
    if(window.XMLHttpRequest){
        return new window.XMLHttpRequest();
    }
    try{
        return new ActiveXObject('MSXML2.XMLHTTP.3.0');
    }catch(e){
        return null;
    }
},
compile:function(node){
    var e=new QWeb2.Element(this,node);
    var template=node.getAttribute(this.prefix+'-name');
    return"   /* 'this' refers to Qweb2.Engine instance */\n"+"   var context = { engine : this, template : "+(this.tools.js_escape(template))+" };\n"+"   dict = dict || {};\n"+"   dict['__template__'] = '"+template+"';\n"+"   var r = [];\n"+"   /* START TEMPLATE */"+
    (this.debug?"":" try {\n")+
    (e.compile())+"\n"+"   /* END OF TEMPLATE */"+
    (this.debug?"":" } catch(error) {\n"+"       if (console && console.exception) console.exception(error);\n"+"       context.engine.tools.exception('Runtime Error: ' + error, context);\n")+
    (this.debug?"":"   }\n")+"   return r.join('');";
},
render:function(template,dict){
    dict=dict||{};
    
    QWeb2.tools.extend(dict,this.default_dict);
    var r=this._render(template,dict);
    return r;
},
_render:function(template,dict){
    if(this.compiled_templates[template]){
        return this.compiled_templates[template].apply(this,[dict||{}]);
    }else if(this.templates[template]){
        var ext;
        if(ext=this.extend_templates[template]){
            var extend_node;
            while(extend_node=ext.shift()){
                this.extend(template,extend_node);
            }
        }
    var code=this.compile(this.templates[template]),tcompiled;
    try{
        tcompiled=new Function(['dict'],code);
    }catch(error){
        if(this.debug&&window.console){
            console.log(code);
        }
        this.tools.exception("Error evaluating template: "+error,{
            template:name
        });
    }
    if(!tcompiled){
        this.tools.exception("Error evaluating template: (IE?)"+error,{
            template:name
        });
    }
    this.compiled_templates[template]=tcompiled;
    return this.render(template,dict);
}else{
    return this.tools.exception("Template '"+template+"' not found");
}
},
extend:function(template,extend_node){
    if(!this.jQuery){
        return this.tools.exception("Can't extend template "+template+" without jQuery");
    }
    var template_dest=this.templates[template];
    for(var i=0,ilen=extend_node.childNodes.length;i<ilen;i++){
        var child=extend_node.childNodes[i];
        if(child.nodeType===1){
            var jquery=child.getAttribute(this.prefix+'-jquery'),operation=child.getAttribute(this.prefix+'-operation'),target,error_msg="Error while extending template '"+template;
            if(jquery){
                target=this.jQuery(jquery,template_dest);
            }else{
                this.tools.exception(error_msg+"No expression given");
            }
            error_msg+="' (expression='"+jquery+"') : ";
            if(operation){
                var allowed_operations="append,prepend,before,after,replace,inner".split(',');
                if(this.tools.arrayIndexOf(allowed_operations,operation)==-1){
                    this.tools.exception(error_msg+"Invalid operation : '"+operation+"'");
                }
                operation={
                    'replace':'replaceWith',
                    'inner':'html'
                }
                [operation]||operation;
                target[operation](child.cloneNode(true).childNodes);
            }else{
                try{
                    var f=new Function(['$','document'],this.tools.xml_node_to_string(child,true));
                }catch(error){
                    return this.tools.exception("Parse "+error_msg+error);
                }
                try{
                    f.apply(target,[this.jQuery,template_dest.ownerDocument]);
                }catch(error){
                    return this.tools.exception("Runtime "+error_msg+error);
                }
            }
        }
    }
}
});
return Engine;
})();
QWeb2.Element=(function(){
    function Element(engine,node){
        this.engine=engine;
        this.node=node;
        this.tag=node.tagName;
        this.actions={};
        
        this.actions_done=[];
        this.attributes={};
        
        this.children=[];
        this._top=[];
        this._bottom=[];
        this._indent=1;
        this.process_children=true;
        var childs=this.node.childNodes;
        if(childs){
            for(var i=0,ilen=childs.length;i<ilen;i++){
                this.children.push(new QWeb2.Element(this.engine,childs[i]));
            }
            }
    var attrs=this.node.attributes;
    if(attrs){
        for(var j=0,jlen=attrs.length;j<jlen;j++){
            var attr=attrs[j];
            var name=attr.name;
            var m=name.match(new RegExp("^"+this.engine.prefix+"-(.+)"));
            if(m){
                name=m[1];
                if(name==='name'){
                    continue;
                }
                this.actions[name]=attr.value;
            }else{
                this.attributes[name]=attr.value;
            }
        }
        }
if(this.engine.preprocess_node){
    this.engine.preprocess_node.call(this);
}
}
QWeb2.tools.extend(Element.prototype,{
    compile:function(){
        var r=[],instring=false,lines=this._compile().split('\n');
        for(var i=0,ilen=lines.length;i<ilen;i++){
            var m,line=lines[i];
            if(m=line.match(/^(\s*)\/\/@string=(.*)/)){
                if(instring){
                    if(this.engine.debug){
                        r.push((m[2].indexOf("\\n")!=-1?"',\n\t"+m[1]+"'":'')+m[2]);
                    }else{
                        r.push(m[2]);
                    }
                }else{
                r.push(m[1]+"r.push('"+m[2]);
                instring=true;
            }
        }else{
            if(instring){
                r.push("');\n");
            }
            instring=false;
            r.push(line+'\n');
        }
    }
return r.join('');
},
_compile:function(){
    switch(this.node.nodeType){
        case 3:case 4:
            this.top_string(this.node.data);
            break;
        case 1:
            this.compile_element();
    }
    var r=this._top.join('');
    if(this.process_children){
        for(var i=0,ilen=this.children.length;i<ilen;i++){
            var child=this.children[i];
            child._indent=this._indent;
            r+=child._compile();
        }
        }
r+=this._bottom.join('');
return r;
},
format_expression:function(e){
    if(QWeb2.expressions_cache[e]){
        return QWeb2.expressions_cache[e];
    }
    var chars=e.split(''),instring='',invar='',invar_pos=0,r='';
    chars.push(' ');
    for(var i=0,ilen=chars.length;i<ilen;i++){
        var c=chars[i];
        if(instring.length){
            if(c===instring&&chars[i-1]!=="\\"){
                instring='';
            }
        }else if(c==='"'||c==="'"){
        instring=c;
    }else if(c.match(/[a-zA-Z_\$]/)&&!invar.length){
        invar=c;
        invar_pos=i;
        continue;
    }else if(c.match(/\W/)&&invar.length){
        if(chars[invar_pos-1]!=='.'&&QWeb2.tools.arrayIndexOf(this.engine.reserved_words,invar)<0){
            invar=this.engine.word_replacement[invar]||("dict['"+invar+"']");
        }
        r+=invar;
        invar='';
    }else if(invar.length){
        invar+=c;
        continue;
    }
    r+=c;
    }
r=r.slice(0,-1);
QWeb2.expressions_cache[e]=r;
return r;
},
string_interpolation:function(s){
    if(!s){
        return"''";
    }
    var regex=/^{(.*)}(.*)/,src=s.split(/#/),r=[];
    for(var i=0,ilen=src.length;i<ilen;i++){
        var val=src[i],m=val.match(regex);
        if(m){
            r.push("("+this.format_expression(m[1])+")");
            if(m[2]){
                r.push(this.engine.tools.js_escape(m[2]));
            }
        }else if(!(i===0&&val==='')){
        r.push(this.engine.tools.js_escape((i===0?'':'#')+val));
    }
    }
return r.join(' + ');
},
indent:function(){
    return this._indent++;
},
dedent:function(){
    if(this._indent!==0){
        return this._indent--;
    }
},
get_indent:function(){
    return new Array(this._indent+1).join("\t");
},
top:function(s){
    return this._top.push(this.get_indent()+s+'\n');
},
top_string:function(s){
    return this._top.push(this.get_indent()+"//@string="+this.engine.tools.js_escape(s,true)+'\n');
},
bottom:function(s){
    return this._bottom.unshift(this.get_indent()+s+'\n');
},
bottom_string:function(s){
    return this._bottom.unshift(this.get_indent()+"//@string="+this.engine.tools.js_escape(s,true)+'\n');
},
compile_element:function(){
    for(var i=0,ilen=this.engine.actions_precedence.length;i<ilen;i++){
        var a=this.engine.actions_precedence[i];
        if(a in this.actions){
            var value=this.actions[a];
            var key='compile_action_'+a;
            if(this[key]){
                this[key](value);
            }else if(this.engine[key]){
                this.engine[key].call(this,value);
            }else{
                this.engine.tools.exception("No handler method for action '"+a+"'");
            }
        }
    }
if(this.tag.toLowerCase()!==this.engine.prefix){
    var tag="<"+this.tag;
    for(var a in this.attributes){
        tag+=this.engine.tools.gen_attribute([a,this.attributes[a]]);
    }
    this.top_string(tag);
    if(this.actions.att){
        this.top("r.push(context.engine.tools.gen_attribute("+(this.format_expression(this.actions.att))+"));");
    }
    for(var a in this.actions){
        var v=this.actions[a];
        var m=a.match(/att-(.+)/);
        if(m){
            this.top("r.push(context.engine.tools.gen_attribute(['"+m[1]+"', ("+(this.format_expression(v))+")]));");
        }
        var m=a.match(/attf-(.+)/);
        if(m){
            this.top("r.push(context.engine.tools.gen_attribute(['"+m[1]+"', ("+(this.string_interpolation(v))+")]));");
        }
    }
if(this.children.length||this.actions.opentag==='true'){
    this.top_string(">");
    this.bottom_string("</"+this.tag+">");
}else{
    this.top_string("/>");
}
}
},
compile_action_if:function(value){
    this.top("if ("+(this.format_expression(value))+") {");
    this.bottom("}");
    this.indent();
},
compile_action_foreach:function(value){
    var as=this.actions['as']||value.replace(/[^a-zA-Z0-9]/g,'_');
    this.top("context.engine.tools.foreach(context, "+(this.format_expression(value))+", "+(this.engine.tools.js_escape(as))+", dict, function(context, dict) {");
    this.bottom("});");
    this.indent();
},
compile_action_call:function(value){
    var _import=this.actions['import']||'';
    if(this.children.length===0){
        return this.top("r.push(context.engine.tools.call(context, "+(this.engine.tools.js_escape(value))+", dict, "+(this.engine.tools.js_escape(_import))+"));");
    }else{
        this.top("r.push(context.engine.tools.call(context, "+(this.engine.tools.js_escape(value))+", dict, "+(this.engine.tools.js_escape(_import))+", function(context, dict) {");
        this.bottom("}));");
        this.indent();
        this.top("var r = [];");
        return this.bottom("return r.join('');");
    }
},
compile_action_set:function(value){
    var variable=this.format_expression(value);
    if(this.actions['value']){
        if(this.children.length){
            this.engine.tools.warning("@set with @value plus node chidren found. Children are ignored.");
        }
        this.top(variable+" = ("+(this.format_expression(this.actions['value']))+");");
        this.process_children=false;
    }else{
        if(this.children.length===0){
            this.top(variable+" = '';");
        }else if(this.children.length===1&&this.children[0].node.nodeType===3){
            this.top(variable+" = "+(this.engine.tools.js_escape(this.children[0].node.data))+";");
            this.process_children=false;
        }else{
            this.top(variable+" = (function(dict) {");
            this.bottom("})(dict);");
            this.indent();
            this.top("var r = [];");
            this.bottom("return r.join('');");
        }
    }
},
compile_action_esc:function(value){
    this.top("r.push(context.engine.tools.html_escape("+(this.format_expression(value))+"));");
},
compile_action_escf:function(value){
    this.top("r.push(context.engine.tools.html_escape("+(this.string_interpolation(value))+"));");
},
compile_action_raw:function(value){
    this.top("r.push("+(this.format_expression(value))+");");
},
compile_action_rawf:function(value){
    this.top("r.push("+(this.string_interpolation(value))+");");
},
compile_action_js:function(value){
    this.top("(function("+value+") {");
    this.bottom("})(dict);");
    this.indent();
    var lines=this.engine.tools.xml_node_to_string(this.node,true).split(/\r?\n/);
    for(var i=0,ilen=lines.length;i<ilen;i++){
        this.top(lines[i]);
    }
    this.process_children=false;
},
compile_action_debug:function(value){
    this.top("debugger;");
},
compile_action_log:function(value){
    this.top("console.log("+this.format_expression(value)+");");
}
});
return Element;
})();
;
(function(){
    var root=this;
    var previousUnderscore=root._;
    var breaker={};
    
    var ArrayProto=Array.prototype,ObjProto=Object.prototype,FuncProto=Function.prototype;
    var slice=ArrayProto.slice,unshift=ArrayProto.unshift,toString=ObjProto.toString,hasOwnProperty=ObjProto.hasOwnProperty;
    var
    nativeForEach=ArrayProto.forEach,nativeMap=ArrayProto.map,nativeReduce=ArrayProto.reduce,nativeReduceRight=ArrayProto.reduceRight,nativeFilter=ArrayProto.filter,nativeEvery=ArrayProto.every,nativeSome=ArrayProto.some,nativeIndexOf=ArrayProto.indexOf,nativeLastIndexOf=ArrayProto.lastIndexOf,nativeIsArray=Array.isArray,nativeKeys=Object.keys,nativeBind=FuncProto.bind;
    var _=function(obj){
        return new wrapper(obj);
    };
    
    if(typeof exports!=='undefined'){
        if(typeof module!=='undefined'&&module.exports){
            exports=module.exports=_;
        }
        exports._=_;
    }else{
        root['_']=_;
    }
    _.VERSION='1.3.1';
    var each=_.each=_.forEach=function(obj,iterator,context){
        if(obj==null)return;
        if(nativeForEach&&obj.forEach===nativeForEach){
            obj.forEach(iterator,context);
        }else if(obj.length===+obj.length){
            for(var i=0,l=obj.length;i<l;i++){
                if(i in obj&&iterator.call(context,obj[i],i,obj)===breaker)return;
            }
            }else{
        for(var key in obj){
            if(_.has(obj,key)){
                if(iterator.call(context,obj[key],key,obj)===breaker)return;
            }
        }
        }
    };

_.map=_.collect=function(obj,iterator,context){
    var results=[];
    if(obj==null)return results;
    if(nativeMap&&obj.map===nativeMap)return obj.map(iterator,context);
    each(obj,function(value,index,list){
        results[results.length]=iterator.call(context,value,index,list);
    });
    if(obj.length===+obj.length)results.length=obj.length;
    return results;
};

_.reduce=_.foldl=_.inject=function(obj,iterator,memo,context){
    var initial=arguments.length>2;
    if(obj==null)obj=[];
    if(nativeReduce&&obj.reduce===nativeReduce){
        if(context)iterator=_.bind(iterator,context);
        return initial?obj.reduce(iterator,memo):obj.reduce(iterator);
    }
    each(obj,function(value,index,list){
        if(!initial){
            memo=value;
            initial=true;
        }else{
            memo=iterator.call(context,memo,value,index,list);
        }
    });
if(!initial)throw new TypeError('Reduce of empty array with no initial value');
return memo;
};

_.reduceRight=_.foldr=function(obj,iterator,memo,context){
    var initial=arguments.length>2;
    if(obj==null)obj=[];
    if(nativeReduceRight&&obj.reduceRight===nativeReduceRight){
        if(context)iterator=_.bind(iterator,context);
        return initial?obj.reduceRight(iterator,memo):obj.reduceRight(iterator);
    }
    var reversed=_.toArray(obj).reverse();
    if(context&&!initial)iterator=_.bind(iterator,context);
    return initial?_.reduce(reversed,iterator,memo,context):_.reduce(reversed,iterator);
};

_.find=_.detect=function(obj,iterator,context){
    var result;
    any(obj,function(value,index,list){
        if(iterator.call(context,value,index,list)){
            result=value;
            return true;
        }
    });
return result;
};

_.filter=_.select=function(obj,iterator,context){
    var results=[];
    if(obj==null)return results;
    if(nativeFilter&&obj.filter===nativeFilter)return obj.filter(iterator,context);
    each(obj,function(value,index,list){
        if(iterator.call(context,value,index,list))results[results.length]=value;
    });
    return results;
};

_.reject=function(obj,iterator,context){
    var results=[];
    if(obj==null)return results;
    each(obj,function(value,index,list){
        if(!iterator.call(context,value,index,list))results[results.length]=value;
    });
    return results;
};

_.every=_.all=function(obj,iterator,context){
    var result=true;
    if(obj==null)return result;
    if(nativeEvery&&obj.every===nativeEvery)return obj.every(iterator,context);
    each(obj,function(value,index,list){
        if(!(result=result&&iterator.call(context,value,index,list)))return breaker;
    });
    return result;
};

var any=_.some=_.any=function(obj,iterator,context){
    iterator||(iterator=_.identity);
    var result=false;
    if(obj==null)return result;
    if(nativeSome&&obj.some===nativeSome)return obj.some(iterator,context);
    each(obj,function(value,index,list){
        if(result||(result=iterator.call(context,value,index,list)))return breaker;
    });
    return!!result;
};

_.include=_.contains=function(obj,target){
    var found=false;
    if(obj==null)return found;
    if(nativeIndexOf&&obj.indexOf===nativeIndexOf)return obj.indexOf(target)!=-1;
    found=any(obj,function(value){
        return value===target;
    });
    return found;
};

_.invoke=function(obj,method){
    var args=slice.call(arguments,2);
    return _.map(obj,function(value){
        return(_.isFunction(method)?method||value:value[method]).apply(value,args);
    });
};

_.pluck=function(obj,key){
    return _.map(obj,function(value){
        return value[key];
    });
};

_.max=function(obj,iterator,context){
    if(!iterator&&_.isArray(obj))return Math.max.apply(Math,obj);
    if(!iterator&&_.isEmpty(obj))return-Infinity;
    var result={
        computed:-Infinity
        };
        
    each(obj,function(value,index,list){
        var computed=iterator?iterator.call(context,value,index,list):value;
        computed>=result.computed&&(result={
            value:value,
            computed:computed
        });
    });
    return result.value;
};

_.min=function(obj,iterator,context){
    if(!iterator&&_.isArray(obj))return Math.min.apply(Math,obj);
    if(!iterator&&_.isEmpty(obj))return Infinity;
    var result={
        computed:Infinity
    };
    
    each(obj,function(value,index,list){
        var computed=iterator?iterator.call(context,value,index,list):value;
        computed<result.computed&&(result={
            value:value,
            computed:computed
        });
    });
    return result.value;
};

_.shuffle=function(obj){
    var shuffled=[],rand;
    each(obj,function(value,index,list){
        if(index==0){
            shuffled[0]=value;
        }else{
            rand=Math.floor(Math.random()*(index+1));
            shuffled[index]=shuffled[rand];
            shuffled[rand]=value;
        }
    });
return shuffled;
};

_.sortBy=function(obj,iterator,context){
    return _.pluck(_.map(obj,function(value,index,list){
        return{
            value:value,
            criteria:iterator.call(context,value,index,list)
            };
        
    }).sort(function(left,right){
        var a=left.criteria,b=right.criteria;
        return a<b?-1:a>b?1:0;
    }),'value');
};

_.groupBy=function(obj,val){
    var result={};
    
    var iterator=_.isFunction(val)?val:function(obj){
        return obj[val];
    };
    
    each(obj,function(value,index){
        var key=iterator(value,index);
        (result[key]||(result[key]=[])).push(value);
    });
    return result;
};

_.sortedIndex=function(array,obj,iterator){
    iterator||(iterator=_.identity);
    var low=0,high=array.length;
    while(low<high){
        var mid=(low+high)>>1;
        iterator(array[mid])<iterator(obj)?low=mid+1:high=mid;
    }
    return low;
};

_.toArray=function(iterable){
    if(!iterable)return[];
    if(iterable.toArray)return iterable.toArray();
    if(_.isArray(iterable))return slice.call(iterable);
    if(_.isArguments(iterable))return slice.call(iterable);
    return _.values(iterable);
};

_.size=function(obj){
    return _.toArray(obj).length;
};

_.first=_.head=function(array,n,guard){
    return(n!=null)&&!guard?slice.call(array,0,n):array[0];
};

_.initial=function(array,n,guard){
    return slice.call(array,0,array.length-((n==null)||guard?1:n));
};

_.last=function(array,n,guard){
    if((n!=null)&&!guard){
        return slice.call(array,Math.max(array.length-n,0));
    }else{
        return array[array.length-1];
    }
};

_.rest=_.tail=function(array,index,guard){
    return slice.call(array,(index==null)||guard?1:index);
};

_.compact=function(array){
    return _.filter(array,function(value){
        return!!value;
    });
};

_.flatten=function(array,shallow){
    return _.reduce(array,function(memo,value){
        if(_.isArray(value))return memo.concat(shallow?value:_.flatten(value));
        memo[memo.length]=value;
        return memo;
    },[]);
};

_.without=function(array){
    return _.difference(array,slice.call(arguments,1));
};

_.uniq=_.unique=function(array,isSorted,iterator){
    var initial=iterator?_.map(array,iterator):array;
    var result=[];
    _.reduce(initial,function(memo,el,i){
        if(0==i||(isSorted===true?_.last(memo)!=el:!_.include(memo,el))){
            memo[memo.length]=el;
            result[result.length]=array[i];
        }
        return memo;
    },[]);
    return result;
};

_.union=function(){
    return _.uniq(_.flatten(arguments,true));
};

_.intersection=_.intersect=function(array){
    var rest=slice.call(arguments,1);
    return _.filter(_.uniq(array),function(item){
        return _.every(rest,function(other){
            return _.indexOf(other,item)>=0;
        });
    });
};

_.difference=function(array){
    var rest=_.flatten(slice.call(arguments,1));
    return _.filter(array,function(value){
        return!_.include(rest,value);
    });
};

_.zip=function(){
    var args=slice.call(arguments);
    var length=_.max(_.pluck(args,'length'));
    var results=new Array(length);
    for(var i=0;i<length;i++)results[i]=_.pluck(args,""+i);
    return results;
};

_.indexOf=function(array,item,isSorted){
    if(array==null)return-1;
    var i,l;
    if(isSorted){
        i=_.sortedIndex(array,item);
        return array[i]===item?i:-1;
    }
    if(nativeIndexOf&&array.indexOf===nativeIndexOf)return array.indexOf(item);
    for(i=0,l=array.length;i<l;i++)if(i in array&&array[i]===item)return i;return-1;
};

_.lastIndexOf=function(array,item){
    if(array==null)return-1;
    if(nativeLastIndexOf&&array.lastIndexOf===nativeLastIndexOf)return array.lastIndexOf(item);
    var i=array.length;
    while(i--)if(i in array&&array[i]===item)return i;
    return-1;
};

_.range=function(start,stop,step){
    if(arguments.length<=1){
        stop=start||0;
        start=0;
    }
    step=arguments[2]||1;
    var len=Math.max(Math.ceil((stop-start)/step),0);
    var idx=0;
    var range=new Array(len);
    while(idx<len){
        range[idx++]=start;
        start+=step;
    }
    return range;
};

var ctor=function(){};

_.bind=function bind(func,context){
    var bound,args;
    if(func.bind===nativeBind&&nativeBind)return nativeBind.apply(func,slice.call(arguments,1));
    if(!_.isFunction(func))throw new TypeError;
    args=slice.call(arguments,2);
    return bound=function(){
        if(!(this instanceof bound))return func.apply(context,args.concat(slice.call(arguments)));
        ctor.prototype=func.prototype;
        var self=new ctor;
        var result=func.apply(self,args.concat(slice.call(arguments)));
        if(Object(result)===result)return result;
        return self;
    };

};

_.bindAll=function(obj){
    var funcs=slice.call(arguments,1);
    if(funcs.length==0)funcs=_.functions(obj);
    each(funcs,function(f){
        obj[f]=_.bind(obj[f],obj);
    });
    return obj;
};

_.memoize=function(func,hasher){
    var memo={};
    
    hasher||(hasher=_.identity);
    return function(){
        var key=hasher.apply(this,arguments);
        return _.has(memo,key)?memo[key]:(memo[key]=func.apply(this,arguments));
    };

};

_.delay=function(func,wait){
    var args=slice.call(arguments,2);
    return setTimeout(function(){
        return func.apply(func,args);
    },wait);
};

_.defer=function(func){
    return _.delay.apply(_,[func,1].concat(slice.call(arguments,1)));
};

_.throttle=function(func,wait){
    var context,args,timeout,throttling,more;
    var whenDone=_.debounce(function(){
        more=throttling=false;
    },wait);
    return function(){
        context=this;
        args=arguments;
        var later=function(){
            timeout=null;
            if(more)func.apply(context,args);
            whenDone();
        };
        
        if(!timeout)timeout=setTimeout(later,wait);
        if(throttling){
            more=true;
        }else{
            func.apply(context,args);
        }
        whenDone();
        throttling=true;
    };

};

_.debounce=function(func,wait){
    var timeout;
    return function(){
        var context=this,args=arguments;
        var later=function(){
            timeout=null;
            func.apply(context,args);
        };
        
        clearTimeout(timeout);
        timeout=setTimeout(later,wait);
    };

};

_.once=function(func){
    var ran=false,memo;
    return function(){
        if(ran)return memo;
        ran=true;
        return memo=func.apply(this,arguments);
    };

};

_.wrap=function(func,wrapper){
    return function(){
        var args=[func].concat(slice.call(arguments,0));
        return wrapper.apply(this,args);
    };

};

_.compose=function(){
    var funcs=arguments;
    return function(){
        var args=arguments;
        for(var i=funcs.length-1;i>=0;i--){
            args=[funcs[i].apply(this,args)];
        }
        return args[0];
    };

};

_.after=function(times,func){
    if(times<=0)return func();
    return function(){
        if(--times<1){
            return func.apply(this,arguments);
        }
    };

};

_.keys=nativeKeys||function(obj){
    if(obj!==Object(obj))throw new TypeError('Invalid object');
    var keys=[];
    for(var key in obj)if(_.has(obj,key))keys[keys.length]=key;return keys;
};

_.values=function(obj){
    return _.map(obj,_.identity);
};

_.functions=_.methods=function(obj){
    var names=[];
    for(var key in obj){
        if(_.isFunction(obj[key]))names.push(key);
    }
    return names.sort();
};

_.extend=function(obj){
    each(slice.call(arguments,1),function(source){
        for(var prop in source){
            obj[prop]=source[prop];
        }
        });
return obj;
};

_.defaults=function(obj){
    each(slice.call(arguments,1),function(source){
        for(var prop in source){
            if(obj[prop]==null)obj[prop]=source[prop];
        }
        });
return obj;
};

_.clone=function(obj){
    if(!_.isObject(obj))return obj;
    return _.isArray(obj)?obj.slice():_.extend({},obj);
};

_.tap=function(obj,interceptor){
    interceptor(obj);
    return obj;
};

function eq(a,b,stack){
    if(a===b)return a!==0||1/a==1/b;
    if(a==null||b==null)return a===b;
    if(a._chain)a=a._wrapped;
    if(b._chain)b=b._wrapped;
    if(a.isEqual&&_.isFunction(a.isEqual))return a.isEqual(b);
    if(b.isEqual&&_.isFunction(b.isEqual))return b.isEqual(a);
    var className=toString.call(a);
    if(className!=toString.call(b))return false;
    switch(className){
        case'[object String]':
            return a==String(b);
        case'[object Number]':
            return a!=+a?b!=+b:(a==0?1/a==1/b:a==+b);
        case'[object Date]':case'[object Boolean]':
            return+a==+b;
        case'[object RegExp]':
            return a.source==b.source&&a.global==b.global&&a.multiline==b.multiline&&a.ignoreCase==b.ignoreCase;
    }
    if(typeof a!='object'||typeof b!='object')return false;
    var length=stack.length;
    while(length--){
        if(stack[length]==a)return true;
    }
    stack.push(a);
    var size=0,result=true;
    if(className=='[object Array]'){
        size=a.length;
        result=size==b.length;
        if(result){
            while(size--){
                if(!(result=size in a==size in b&&eq(a[size],b[size],stack)))break;
            }
        }
    }else{
    if('constructor'in a!='constructor'in b||a.constructor!=b.constructor)return false;
    for(var key in a){
        if(_.has(a,key)){
            size++;
            if(!(result=_.has(b,key)&&eq(a[key],b[key],stack)))break;
        }
    }
if(result){
    for(key in b){
        if(_.has(b,key)&&!(size--))break;
    }
    result=!size;
}
}
stack.pop();
return result;
}
_.isEqual=function(a,b){
    return eq(a,b,[]);
};

_.isEmpty=function(obj){
    if(_.isArray(obj)||_.isString(obj))return obj.length===0;
    for(var key in obj)if(_.has(obj,key))return false;return true;
};

_.isElement=function(obj){
    return!!(obj&&obj.nodeType==1);
};

_.isArray=nativeIsArray||function(obj){
    return toString.call(obj)=='[object Array]';
};

_.isObject=function(obj){
    return obj===Object(obj);
};

_.isArguments=function(obj){
    return toString.call(obj)=='[object Arguments]';
};

if(!_.isArguments(arguments)){
    _.isArguments=function(obj){
        return!!(obj&&_.has(obj,'callee'));
    };

}
_.isFunction=function(obj){
    return toString.call(obj)=='[object Function]';
};

_.isString=function(obj){
    return toString.call(obj)=='[object String]';
};

_.isNumber=function(obj){
    return toString.call(obj)=='[object Number]';
};

_.isNaN=function(obj){
    return obj!==obj;
};

_.isBoolean=function(obj){
    return obj===true||obj===false||toString.call(obj)=='[object Boolean]';
};

_.isDate=function(obj){
    return toString.call(obj)=='[object Date]';
};

_.isRegExp=function(obj){
    return toString.call(obj)=='[object RegExp]';
};

_.isNull=function(obj){
    return obj===null;
};

_.isUndefined=function(obj){
    return obj===void 0;
};

_.has=function(obj,key){
    return hasOwnProperty.call(obj,key);
};

_.noConflict=function(){
    root._=previousUnderscore;
    return this;
};

_.identity=function(value){
    return value;
};

_.times=function(n,iterator,context){
    for(var i=0;i<n;i++)iterator.call(context,i);
};

_.escape=function(string){
    return(''+string).replace(/&/g,'&amp;').replace(/</g,'&lt;').replace(/>/g,'&gt;').replace(/"/g,'&quot;').replace(/'/g,'&#x27;').replace(/\//g,'&#x2F;');
};

_.mixin=function(obj){
    each(_.functions(obj),function(name){
        addToWrapper(name,_[name]=obj[name]);
    });
};

var idCounter=0;
_.uniqueId=function(prefix){
    var id=idCounter++;
    return prefix?prefix+id:id;
};

_.templateSettings={
    evaluate:/<%([\s\S]+?)%>/g,
    interpolate:/<%=([\s\S]+?)%>/g,
    escape:/<%-([\s\S]+?)%>/g
};

var noMatch=/.^/;
var unescape=function(code){
    return code.replace(/\\\\/g,'\\').replace(/\\'/g,"'");
};

_.template=function(str,data){
    var c=_.templateSettings;
    var tmpl='var __p=[],print=function(){__p.push.apply(__p,arguments);};'+'with(obj||{}){__p.push(\''+
    str.replace(/\\/g,'\\\\').replace(/'/g,"\\'").replace(c.escape||noMatch,function(match,code){
        return"',_.escape("+unescape(code)+"),'";
    }).replace(c.interpolate||noMatch,function(match,code){
        return"',"+unescape(code)+",'";
    }).replace(c.evaluate||noMatch,function(match,code){
        return"');"+unescape(code).replace(/[\r\n\t]/g,' ')+";__p.push('";
    }).replace(/\r/g,'\\r').replace(/\n/g,'\\n').replace(/\t/g,'\\t')
    +"');}return __p.join('');";
    var func=new Function('obj','_',tmpl);
    if(data)return func(data,_);
    return function(data){
        return func.call(this,data,_);
    };

};

_.chain=function(obj){
    return _(obj).chain();
};

var wrapper=function(obj){
    this._wrapped=obj;
};

_.prototype=wrapper.prototype;
var result=function(obj,chain){
    return chain?_(obj).chain():obj;
};

var addToWrapper=function(name,func){
    wrapper.prototype[name]=function(){
        var args=slice.call(arguments);
        unshift.call(args,this._wrapped);
        return result(func.apply(_,args),this._chain);
    };

};

_.mixin(_);
each(['pop','push','reverse','shift','sort','splice','unshift'],function(name){
    var method=ArrayProto[name];
    wrapper.prototype[name]=function(){
        var wrapped=this._wrapped;
        method.apply(wrapped,arguments);
        var length=wrapped.length;
        if((name=='shift'||name=='splice')&&length===0)delete wrapped[0];
        return result(wrapped,this._chain);
    };

});
each(['concat','join','slice'],function(name){
    var method=ArrayProto[name];
    wrapper.prototype[name]=function(){
        return result(method.apply(this._wrapped,arguments),this._chain);
    };

});
wrapper.prototype.chain=function(){
    this._chain=true;
    return this;
};

wrapper.prototype.value=function(){
    return this._wrapped;
};

}).call(this);
;
(function(root){
    'use strict';
    var nativeTrim=String.prototype.trim;
    var parseNumber=function(source){
        return source*1||0;
    };
    
    var strRepeat=function(i,m){
        for(var o=[];m>0;o[--m]=i){}
        return o.join('');
    };
    
    var slice=function(a){
        return Array.prototype.slice.call(a);
    };
    
    var defaultToWhiteSpace=function(characters){
        if(characters){
            return _s.escapeRegExp(characters);
        }
        return'\\s';
    };
    
    var sArgs=function(method){
        return function(){
            var args=slice(arguments);
            for(var i=0;i<args.length;i++)
                args[i]=args[i]==null?'':''+args[i];
            return method.apply(null,args);
        };
    
};

var sprintf=(function(){
    function get_type(variable){
        return Object.prototype.toString.call(variable).slice(8,-1).toLowerCase();
    }
    var str_repeat=strRepeat;
    var str_format=function(){
        if(!str_format.cache.hasOwnProperty(arguments[0])){
            str_format.cache[arguments[0]]=str_format.parse(arguments[0]);
        }
        return str_format.format.call(null,str_format.cache[arguments[0]],arguments);
    };
    
    str_format.format=function(parse_tree,argv){
        var cursor=1,tree_length=parse_tree.length,node_type='',arg,output=[],i,k,match,pad,pad_character,pad_length;
        for(i=0;i<tree_length;i++){
            node_type=get_type(parse_tree[i]);
            if(node_type==='string'){
                output.push(parse_tree[i]);
            }
            else if(node_type==='array'){
                match=parse_tree[i];
                if(match[2]){
                    arg=argv[cursor];
                    for(k=0;k<match[2].length;k++){
                        if(!arg.hasOwnProperty(match[2][k])){
                            throw new Error(sprintf('[_.sprintf] property "%s" does not exist',match[2][k]));
                        }
                        arg=arg[match[2][k]];
                    }
                    }else if(match[1]){
                arg=argv[match[1]];
            }
            else{
                arg=argv[cursor++];
            }
            if(/[^s]/.test(match[8])&&(get_type(arg)!='number')){
                throw new Error(sprintf('[_.sprintf] expecting number but found %s',get_type(arg)));
            }
            switch(match[8]){
                case'b':
                    arg=arg.toString(2);
                    break;
                case'c':
                    arg=String.fromCharCode(arg);
                    break;
                case'd':
                    arg=parseInt(arg,10);
                    break;
                case'e':
                    arg=match[7]?arg.toExponential(match[7]):arg.toExponential();
                    break;
                case'f':
                    arg=match[7]?parseFloat(arg).toFixed(match[7]):parseFloat(arg);
                    break;
                case'o':
                    arg=arg.toString(8);
                    break;
                case's':
                    arg=((arg=String(arg))&&match[7]?arg.substring(0,match[7]):arg);
                    break;
                case'u':
                    arg=Math.abs(arg);
                    break;
                case'x':
                    arg=arg.toString(16);
                    break;
                case'X':
                    arg=arg.toString(16).toUpperCase();
                    break;
            }
            arg=(/[def]/.test(match[8])&&match[3]&&arg>=0?'+'+arg:arg);
            pad_character=match[4]?match[4]=='0'?'0':match[4].charAt(1):' ';
            pad_length=match[6]-String(arg).length;
            pad=match[6]?str_repeat(pad_character,pad_length):'';
            output.push(match[5]?arg+pad:pad+arg);
        }
        }
return output.join('');
    };
    
    str_format.cache={};
    
    str_format.parse=function(fmt){
        var _fmt=fmt,match=[],parse_tree=[],arg_names=0;
        while(_fmt){
            if((match=/^[^\x25]+/.exec(_fmt))!==null){
                parse_tree.push(match[0]);
            }
            else if((match=/^\x25{2}/.exec(_fmt))!==null){
                parse_tree.push('%');
            }
            else if((match=/^\x25(?:([1-9]\d*)\$|\(([^\)]+)\))?(\+)?(0|'[^$])?(-)?(\d+)?(?:\.(\d+))?([b-fosuxX])/.exec(_fmt))!==null){
                if(match[2]){
                    arg_names|=1;
                    var field_list=[],replacement_field=match[2],field_match=[];
                    if((field_match=/^([a-z_][a-z_\d]*)/i.exec(replacement_field))!==null){
                        field_list.push(field_match[1]);
                        while((replacement_field=replacement_field.substring(field_match[0].length))!==''){
                            if((field_match=/^\.([a-z_][a-z_\d]*)/i.exec(replacement_field))!==null){
                                field_list.push(field_match[1]);
                            }
                            else if((field_match=/^\[(\d+)\]/.exec(replacement_field))!==null){
                                field_list.push(field_match[1]);
                            }
                            else{
                                throw new Error('[_.sprintf] huh?');
                            }
                        }
                    }
            else{
                throw new Error('[_.sprintf] huh?');
            }
            match[2]=field_list;
        }
        else{
            arg_names|=2;
        }
        if(arg_names===3){
            throw new Error('[_.sprintf] mixing positional and named placeholders is not (yet) supported');
        }
        parse_tree.push(match);
    }
    else{
        throw new Error('[_.sprintf] huh?');
    }
    _fmt=_fmt.substring(match[0].length);
}
return parse_tree;
};

return str_format;
})();
var _s={
    VERSION:'1.2.0',
    isBlank:sArgs(function(str){
        return(/^\s*$/).test(str);
    }),
    stripTags:sArgs(function(str){
        return str.replace(/<\/?[^>]+>/ig,'');
    }),
    capitalize:sArgs(function(str){
        return str.charAt(0).toUpperCase()+str.substring(1).toLowerCase();
    }),
    chop:sArgs(function(str,step){
        step=parseNumber(step)||str.length;
        var arr=[];
        for(var i=0;i<str.length;){
            arr.push(str.slice(i,i+step));
            i=i+step;
        }
        return arr;
    }),
    clean:sArgs(function(str){
        return _s.strip(str.replace(/\s+/g,' '));
    }),
    count:sArgs(function(str,substr){
        var count=0,index;
        for(var i=0;i<str.length;){
            index=str.indexOf(substr,i);
            index>=0&&count++;
            i=i+(index>=0?index:0)+substr.length;
        }
        return count;
    }),
    chars:sArgs(function(str){
        return str.split('');
    }),
    escapeHTML:sArgs(function(str){
        return str.replace(/&/g,'&amp;').replace(/</g,'&lt;').replace(/>/g,'&gt;').replace(/"/g,'&quot;').replace(/'/g,"&apos;");
    }),
    unescapeHTML:sArgs(function(str){
        return str.replace(/&lt;/g,'<').replace(/&gt;/g,'>').replace(/&quot;/g,'"').replace(/&apos;/g,"'").replace(/&amp;/g,'&');
    }),
    escapeRegExp:sArgs(function(str){
        return str.replace(/([-.*+?^${}()|[\]\/\\])/g,'\\$1');
    }),
    insert:sArgs(function(str,i,substr){
        var arr=str.split('');
        arr.splice(parseNumber(i),0,substr);
        return arr.join('');
    }),
    include:sArgs(function(str,needle){
        return str.indexOf(needle)!==-1;
    }),
    join:sArgs(function(sep){
        var args=slice(arguments);
        return args.join(args.shift());
    }),
    lines:sArgs(function(str){
        return str.split("\n");
    }),
    reverse:sArgs(function(str){
        return Array.prototype.reverse.apply(String(str).split('')).join('');
    }),
    splice:sArgs(function(str,i,howmany,substr){
        var arr=str.split('');
        arr.splice(parseNumber(i),parseNumber(howmany),substr);
        return arr.join('');
    }),
    startsWith:sArgs(function(str,starts){
        return str.length>=starts.length&&str.substring(0,starts.length)===starts;
    }),
    endsWith:sArgs(function(str,ends){
        return str.length>=ends.length&&str.substring(str.length-ends.length)===ends;
    }),
    succ:sArgs(function(str){
        var arr=str.split('');
        arr.splice(str.length-1,1,String.fromCharCode(str.charCodeAt(str.length-1)+1));
        return arr.join('');
    }),
    titleize:sArgs(function(str){
        var arr=str.split(' '),word;
        for(var i=0;i<arr.length;i++){
            word=arr[i].split('');
            if(typeof word[0]!=='undefined')word[0]=word[0].toUpperCase();
            i+1===arr.length?arr[i]=word.join(''):arr[i]=word.join('')+' ';
        }
        return arr.join('');
    }),
    camelize:sArgs(function(str){
        return _s.trim(str).replace(/(\-|_|\s)+(.)?/g,function(match,separator,chr){
            return chr?chr.toUpperCase():'';
        });
    }),
    underscored:function(str){
        return _s.trim(str).replace(/([a-z\d])([A-Z]+)/g,'$1_$2').replace(/\-|\s+/g,'_').toLowerCase();
    },
    dasherize:function(str){
        return _s.trim(str).replace(/([a-z\d])([A-Z]+)/g,'$1-$2').replace(/^([A-Z]+)/,'-$1').replace(/\_|\s+/g,'-').toLowerCase();
    },
    humanize:function(str){
        return _s.capitalize(this.underscored(str).replace(/_id$/,'').replace(/_/g,' '));
    },
    trim:sArgs(function(str,characters){
        if(!characters&&nativeTrim){
            return nativeTrim.call(str);
        }
        characters=defaultToWhiteSpace(characters);
        return str.replace(new RegExp('\^['+characters+']+|['+characters+']+$','g'),'');
    }),
    ltrim:sArgs(function(str,characters){
        characters=defaultToWhiteSpace(characters);
        return str.replace(new RegExp('\^['+characters+']+','g'),'');
    }),
    rtrim:sArgs(function(str,characters){
        characters=defaultToWhiteSpace(characters);
        return str.replace(new RegExp('['+characters+']+$','g'),'');
    }),
    truncate:sArgs(function(str,length,truncateStr){
        truncateStr=truncateStr||'...';
        length=parseNumber(length);
        return str.length>length?str.slice(0,length)+truncateStr:str;
    }),
    prune:sArgs(function(str,length,pruneStr){
        pruneStr=pruneStr||'...';
        length=parseNumber(length);
        var pruned='';
        if(str.substring(length-1,length+1).search(/^\w\w$/)===0)
            pruned=_s.rtrim(str.slice(0,length).replace(/([\W][\w]*)$/,''));else
            pruned=_s.rtrim(str.slice(0,length));
        pruned=pruned.replace(/\W+$/,'');
        return(pruned.length+pruneStr.length>str.length)?str:pruned+pruneStr;
    }),
    words:function(str,delimiter){
        return String(str).split(delimiter||" ");
    },
    pad:sArgs(function(str,length,padStr,type){
        var padding='',padlen=0;
        length=parseNumber(length);
        if(!padStr){
            padStr=' ';
        }
        else if(padStr.length>1){
            padStr=padStr.charAt(0);
        }
        switch(type){
            case'right':
                padlen=(length-str.length);
                padding=strRepeat(padStr,padlen);
                str=str+padding;
                break;
            case'both':
                padlen=(length-str.length);
                padding={
                'left':strRepeat(padStr,Math.ceil(padlen/2)),
                'right':strRepeat(padStr,Math.floor(padlen/2))
                };
                
            str=padding.left+str+padding.right;
            break;
            default:
                padlen=(length-str.length);
                padding=strRepeat(padStr,padlen);
                ;
                str=padding+str;
        }
        return str;
    }),
    lpad:function(str,length,padStr){
        return _s.pad(str,length,padStr);
    },
    rpad:function(str,length,padStr){
        return _s.pad(str,length,padStr,'right');
    },
    lrpad:function(str,length,padStr){
        return _s.pad(str,length,padStr,'both');
    },
    sprintf:sprintf,
    vsprintf:function(fmt,argv){
        argv.unshift(fmt);
        return sprintf.apply(null,argv);
    },
    toNumber:function(str,decimals){
        var num=parseNumber(parseNumber(str).toFixed(parseNumber(decimals)));
        return(!(num===0&&(str!=="0"&&str!==0)))?num:Number.NaN;
    },
    strRight:sArgs(function(sourceStr,sep){
        var pos=(!sep)?-1:sourceStr.indexOf(sep);
        return(pos!=-1)?sourceStr.slice(pos+sep.length,sourceStr.length):sourceStr;
    }),
    strRightBack:sArgs(function(sourceStr,sep){
        var pos=(!sep)?-1:sourceStr.lastIndexOf(sep);
        return(pos!=-1)?sourceStr.slice(pos+sep.length,sourceStr.length):sourceStr;
    }),
    strLeft:sArgs(function(sourceStr,sep){
        var pos=(!sep)?-1:sourceStr.indexOf(sep);
        return(pos!=-1)?sourceStr.slice(0,pos):sourceStr;
    }),
    strLeftBack:sArgs(function(sourceStr,sep){
        var pos=sourceStr.lastIndexOf(sep);
        return(pos!=-1)?sourceStr.slice(0,pos):sourceStr;
    }),
    exports:function(){
        var result={};
        
        for(var prop in this){
            if(!this.hasOwnProperty(prop)||prop=='include'||prop=='contains'||prop=='reverse')continue;
            result[prop]=this[prop];
        }
        return result;
    }
};

_s.strip=_s.trim;
_s.lstrip=_s.ltrim;
_s.rstrip=_s.rtrim;
_s.center=_s.lrpad;
_s.ljust=_s.lpad;
_s.rjust=_s.rpad;
_s.contains=_s.include;
if(typeof exports!=='undefined'){
    if(typeof module!=='undefined'&&module.exports){
        module.exports=_s;
    }
    exports._s=_s;
}else if(typeof root._!=='undefined'){
    root._.string=_s;
    root._.str=root._.string;
}else{
    root._={
        string:_s,
        str:_s
    };

}
}(this||window));
;
(function(){
    var root=this;
    var previousBackbone=root.Backbone;
    var slice=Array.prototype.slice;
    var splice=Array.prototype.splice;
    var Backbone;
    if(typeof exports!=='undefined'){
        Backbone=exports;
    }else{
        Backbone=root.Backbone={};
    
}
Backbone.VERSION='0.9.2';
var _=root._;
if(!_&&(typeof require!=='undefined'))_=require('underscore');
    var $=root.jQuery||root.Zepto||root.ender;
    Backbone.setDomLibrary=function(lib){
    $=lib;
};

Backbone.noConflict=function(){
    root.Backbone=previousBackbone;
    return this;
};

Backbone.emulateHTTP=false;
Backbone.emulateJSON=false;
var eventSplitter=/\s+/;
var Events=Backbone.Events={
    on:function(events,callback,context){
        var calls,event,node,tail,list;
        if(!callback)return this;
        events=events.split(eventSplitter);
        calls=this._callbacks||(this._callbacks={});
        while(event=events.shift()){
            list=calls[event];
            node=list?list.tail:{};
            
            node.next=tail={};
            
            node.context=context;
            node.callback=callback;
            calls[event]={
                tail:tail,
                next:list?list.next:node
                };
            
    }
    return this;
},
off:function(events,callback,context){
    var event,calls,node,tail,cb,ctx;
    if(!(calls=this._callbacks))return;
    if(!(events||callback||context)){
        delete this._callbacks;
        return this;
    }
    events=events?events.split(eventSplitter):_.keys(calls);
    while(event=events.shift()){
        node=calls[event];
        delete calls[event];
        if(!node||!(callback||context))continue;
        tail=node.tail;
        while((node=node.next)!==tail){
            cb=node.callback;
            ctx=node.context;
            if((callback&&cb!==callback)||(context&&ctx!==context)){
                this.on(event,cb,ctx);
            }
        }
    }
return this;
},
trigger:function(events){
    var event,node,calls,tail,args,all,rest;
    if(!(calls=this._callbacks))return this;
    all=calls.all;
    events=events.split(eventSplitter);
    rest=slice.call(arguments,1);
    while(event=events.shift()){
        if(node=calls[event]){
            tail=node.tail;
            while((node=node.next)!==tail){
                node.callback.apply(node.context||this,rest);
            }
        }
    if(node=all){
        tail=node.tail;
        args=[event].concat(rest);
        while((node=node.next)!==tail){
            node.callback.apply(node.context||this,args);
        }
    }
}
return this;
}
};

Events.bind=Events.on;
Events.unbind=Events.off;
var Model=Backbone.Model=function(attributes,options){
    var defaults;
    attributes||(attributes={});
    if(options&&options.parse)attributes=this.parse(attributes);
    if(defaults=getValue(this,'defaults')){
        attributes=_.extend({},defaults,attributes);
    }
    if(options&&options.collection)this.collection=options.collection;
    this.attributes={};
    
    this._escapedAttributes={};
    
    this.cid=_.uniqueId('c');
    this.changed={};
    
    this._silent={};
    
    this._pending={};
    
    this.set(attributes,{
        silent:true
    });
    this.changed={};
    
    this._silent={};
    
    this._pending={};
    
    this._previousAttributes=_.clone(this.attributes);
    this.initialize.apply(this,arguments);
};

_.extend(Model.prototype,Events,{
    changed:null,
    _silent:null,
    _pending:null,
    idAttribute:'id',
    initialize:function(){},
    toJSON:function(options){
        return _.clone(this.attributes);
    },
    get:function(attr){
        return this.attributes[attr];
    },
    escape:function(attr){
        var html;
        if(html=this._escapedAttributes[attr])return html;
        var val=this.get(attr);
        return this._escapedAttributes[attr]=_.escape(val==null?'':''+val);
    },
    has:function(attr){
        return this.get(attr)!=null;
    },
    set:function(key,value,options){
        var attrs,attr,val;
        if(_.isObject(key)||key==null){
            attrs=key;
            options=value;
        }else{
            attrs={};
            
            attrs[key]=value;
        }
        options||(options={});
        if(!attrs)return this;
        if(attrs instanceof Model)attrs=attrs.attributes;
        if(options.unset)for(attr in attrs)attrs[attr]=void 0;if(!this._validate(attrs,options))return false;
        if(this.idAttribute in attrs)this.id=attrs[this.idAttribute];
        var changes=options.changes={};
        
        var now=this.attributes;
        var escaped=this._escapedAttributes;
        var prev=this._previousAttributes||{};
        
        for(attr in attrs){
            val=attrs[attr];
            if(!_.isEqual(now[attr],val)||(options.unset&&_.has(now,attr))){
                delete escaped[attr];
                (options.silent?this._silent:changes)[attr]=true;
            }
            options.unset?delete now[attr]:now[attr]=val;
            if(!_.isEqual(prev[attr],val)||(_.has(now,attr)!=_.has(prev,attr))){
                this.changed[attr]=val;
                if(!options.silent)this._pending[attr]=true;
            }else{
                delete this.changed[attr];
                delete this._pending[attr];
            }
        }
    if(!options.silent)this.change(options);
    return this;
},
unset:function(attr,options){
    (options||(options={})).unset=true;
    return this.set(attr,null,options);
},
clear:function(options){
    (options||(options={})).unset=true;
    return this.set(_.clone(this.attributes),options);
},
fetch:function(options){
    options=options?_.clone(options):{};
    
    var model=this;
    var success=options.success;
    options.success=function(resp,status,xhr){
        if(!model.set(model.parse(resp,xhr),options))return false;
        if(success)success(model,resp);
    };
    
    options.error=Backbone.wrapError(options.error,model,options);
    return(this.sync||Backbone.sync).call(this,'read',this,options);
},
save:function(key,value,options){
    var attrs,current;
    if(_.isObject(key)||key==null){
        attrs=key;
        options=value;
    }else{
        attrs={};
        
        attrs[key]=value;
    }
    options=options?_.clone(options):{};
    
    if(options.wait){
        if(!this._validate(attrs,options))return false;
        current=_.clone(this.attributes);
    }
    var silentOptions=_.extend({},options,{
        silent:true
    });
    if(attrs&&!this.set(attrs,options.wait?silentOptions:options)){
        return false;
    }
    var model=this;
    var success=options.success;
    options.success=function(resp,status,xhr){
        var serverAttrs=model.parse(resp,xhr);
        if(options.wait){
            delete options.wait;
            serverAttrs=_.extend(attrs||{},serverAttrs);
        }
        if(!model.set(serverAttrs,options))return false;
        if(success){
            success(model,resp);
        }else{
            model.trigger('sync',model,resp,options);
        }
    };
    
options.error=Backbone.wrapError(options.error,model,options);
    var method=this.isNew()?'create':'update';
    var xhr=(this.sync||Backbone.sync).call(this,method,this,options);
    if(options.wait)this.set(current,silentOptions);
    return xhr;
},
destroy:function(options){
    options=options?_.clone(options):{};
    
    var model=this;
    var success=options.success;
    var triggerDestroy=function(){
        model.trigger('destroy',model,model.collection,options);
    };
    
    if(this.isNew()){
        triggerDestroy();
        return false;
    }
    options.success=function(resp){
        if(options.wait)triggerDestroy();
        if(success){
            success(model,resp);
        }else{
            model.trigger('sync',model,resp,options);
        }
    };
    
options.error=Backbone.wrapError(options.error,model,options);
var xhr=(this.sync||Backbone.sync).call(this,'delete',this,options);
if(!options.wait)triggerDestroy();
return xhr;
},
url:function(){
    var base=getValue(this,'urlRoot')||getValue(this.collection,'url')||urlError();
    if(this.isNew())return base;
    return base+(base.charAt(base.length-1)=='/'?'':'/')+encodeURIComponent(this.id);
},
parse:function(resp,xhr){
    return resp;
},
clone:function(){
    return new this.constructor(this.attributes);
},
isNew:function(){
    return this.id==null;
},
change:function(options){
    options||(options={});
    var changing=this._changing;
    this._changing=true;
    for(var attr in this._silent)this._pending[attr]=true;var changes=_.extend({},options.changes,this._silent);
    this._silent={};
    
    for(var attr in changes){
        this.trigger('change:'+attr,this,this.get(attr),options);
    }
    if(changing)return this;
    while(!_.isEmpty(this._pending)){
        this._pending={};
        
        this.trigger('change',this,options);
        for(var attr in this.changed){
            if(this._pending[attr]||this._silent[attr])continue;
            delete this.changed[attr];
        }
        this._previousAttributes=_.clone(this.attributes);
    }
    this._changing=false;
    return this;
},
hasChanged:function(attr){
    if(!arguments.length)return!_.isEmpty(this.changed);
    return _.has(this.changed,attr);
},
changedAttributes:function(diff){
    if(!diff)return this.hasChanged()?_.clone(this.changed):false;
    var val,changed=false,old=this._previousAttributes;
    for(var attr in diff){
        if(_.isEqual(old[attr],(val=diff[attr])))continue;
        (changed||(changed={}))[attr]=val;
    }
    return changed;
},
previous:function(attr){
    if(!arguments.length||!this._previousAttributes)return null;
    return this._previousAttributes[attr];
},
previousAttributes:function(){
    return _.clone(this._previousAttributes);
},
isValid:function(){
    return!this.validate(this.attributes);
},
_validate:function(attrs,options){
    if(options.silent||!this.validate)return true;
    attrs=_.extend({},this.attributes,attrs);
    var error=this.validate(attrs,options);
    if(!error)return true;
    if(options&&options.error){
        options.error(this,error,options);
    }else{
        this.trigger('error',this,error,options);
    }
    return false;
}
});
var Collection=Backbone.Collection=function(models,options){
    options||(options={});
    if(options.model)this.model=options.model;
    if(options.comparator)this.comparator=options.comparator;
    this._reset();
    this.initialize.apply(this,arguments);
    if(models)this.reset(models,{
        silent:true,
        parse:options.parse
        });
};

_.extend(Collection.prototype,Events,{
    model:Model,
    initialize:function(){},
    toJSON:function(options){
        return this.map(function(model){
            return model.toJSON(options);
        });
    },
    add:function(models,options){
        var i,index,length,model,cid,id,cids={},ids={},dups=[];
        options||(options={});
        models=_.isArray(models)?models.slice():[models];
        for(i=0,length=models.length;i<length;i++){
            if(!(model=models[i]=this._prepareModel(models[i],options))){
                throw new Error("Can't add an invalid model to a collection");
            }
            cid=model.cid;
            id=model.id;
            if(cids[cid]||this._byCid[cid]||((id!=null)&&(ids[id]||this._byId[id]))){
                dups.push(i);
                continue;
            }
            cids[cid]=ids[id]=model;
        }
        i=dups.length;
        while(i--){
            models.splice(dups[i],1);
        }
        for(i=0,length=models.length;i<length;i++){
            (model=models[i]).on('all',this._onModelEvent,this);
            this._byCid[model.cid]=model;
            if(model.id!=null)this._byId[model.id]=model;
        }
        this.length+=length;
        index=options.at!=null?options.at:this.models.length;
        splice.apply(this.models,[index,0].concat(models));
        if(this.comparator)this.sort({
            silent:true
        });
        if(options.silent)return this;
        for(i=0,length=this.models.length;i<length;i++){
            if(!cids[(model=this.models[i]).cid])continue;
            options.index=i;
            model.trigger('add',model,this,options);
        }
        return this;
    },
    remove:function(models,options){
        var i,l,index,model;
        options||(options={});
        models=_.isArray(models)?models.slice():[models];
        for(i=0,l=models.length;i<l;i++){
            model=this.getByCid(models[i])||this.get(models[i]);
            if(!model)continue;
            delete this._byId[model.id];
            delete this._byCid[model.cid];
            index=this.indexOf(model);
            this.models.splice(index,1);
            this.length--;
            if(!options.silent){
                options.index=index;
                model.trigger('remove',model,this,options);
            }
            this._removeReference(model);
        }
        return this;
    },
    push:function(model,options){
        model=this._prepareModel(model,options);
        this.add(model,options);
        return model;
    },
    pop:function(options){
        var model=this.at(this.length-1);
        this.remove(model,options);
        return model;
    },
    unshift:function(model,options){
        model=this._prepareModel(model,options);
        this.add(model,_.extend({
            at:0
        },options));
        return model;
    },
    shift:function(options){
        var model=this.at(0);
        this.remove(model,options);
        return model;
    },
    get:function(id){
        if(id==null)return void 0;
        return this._byId[id.id!=null?id.id:id];
    },
    getByCid:function(cid){
        return cid&&this._byCid[cid.cid||cid];
    },
    at:function(index){
        return this.models[index];
    },
    where:function(attrs){
        if(_.isEmpty(attrs))return[];
        return this.filter(function(model){
            for(var key in attrs){
                if(attrs[key]!==model.get(key))return false;
            }
            return true;
        });
    },
    sort:function(options){
        options||(options={});
        if(!this.comparator)throw new Error('Cannot sort a set without a comparator');
        var boundComparator=_.bind(this.comparator,this);
        if(this.comparator.length==1){
            this.models=this.sortBy(boundComparator);
        }else{
            this.models.sort(boundComparator);
        }
        if(!options.silent)this.trigger('reset',this,options);
        return this;
    },
    pluck:function(attr){
        return _.map(this.models,function(model){
            return model.get(attr);
        });
    },
    reset:function(models,options){
        models||(models=[]);
        options||(options={});
        for(var i=0,l=this.models.length;i<l;i++){
            this._removeReference(this.models[i]);
        }
        this._reset();
        this.add(models,_.extend({
            silent:true
        },options));
        if(!options.silent)this.trigger('reset',this,options);
        return this;
    },
    fetch:function(options){
        options=options?_.clone(options):{};
        
        if(options.parse===undefined)options.parse=true;
        var collection=this;
        var success=options.success;
        options.success=function(resp,status,xhr){
            collection[options.add?'add':'reset'](collection.parse(resp,xhr),options);
            if(success)success(collection,resp);
        };
        
        options.error=Backbone.wrapError(options.error,collection,options);
        return(this.sync||Backbone.sync).call(this,'read',this,options);
    },
    create:function(model,options){
        var coll=this;
        options=options?_.clone(options):{};
        
        model=this._prepareModel(model,options);
        if(!model)return false;
        if(!options.wait)coll.add(model,options);
        var success=options.success;
        options.success=function(nextModel,resp,xhr){
            if(options.wait)coll.add(nextModel,options);
            if(success){
                success(nextModel,resp);
            }else{
                nextModel.trigger('sync',model,resp,options);
            }
        };
        
    model.save(null,options);
    return model;
},
parse:function(resp,xhr){
    return resp;
},
chain:function(){
    return _(this.models).chain();
},
_reset:function(options){
    this.length=0;
    this.models=[];
    this._byId={};
    
    this._byCid={};

},
_prepareModel:function(model,options){
    options||(options={});
    if(!(model instanceof Model)){
        var attrs=model;
        options.collection=this;
        model=new this.model(attrs,options);
        if(!model._validate(model.attributes,options))model=false;
    }else if(!model.collection){
        model.collection=this;
    }
    return model;
},
_removeReference:function(model){
    if(this==model.collection){
        delete model.collection;
    }
    model.off('all',this._onModelEvent,this);
},
_onModelEvent:function(event,model,collection,options){
    if((event=='add'||event=='remove')&&collection!=this)return;
    if(event=='destroy'){
        this.remove(model,options);
    }
    if(model&&event==='change:'+model.idAttribute){
        delete this._byId[model.previous(model.idAttribute)];
        this._byId[model.id]=model;
    }
    this.trigger.apply(this,arguments);
}
});
var methods=['forEach','each','map','reduce','reduceRight','find','detect','filter','select','reject','every','all','some','any','include','contains','invoke','max','min','sortBy','sortedIndex','toArray','size','first','initial','rest','last','without','indexOf','shuffle','lastIndexOf','isEmpty','groupBy'];
_.each(methods,function(method){
    Collection.prototype[method]=function(){
        return _[method].apply(_,[this.models].concat(_.toArray(arguments)));
    };

});
var Router=Backbone.Router=function(options){
    options||(options={});
    if(options.routes)this.routes=options.routes;
    this._bindRoutes();
    this.initialize.apply(this,arguments);
};

var namedParam=/:\w+/g;
var splatParam=/\*\w+/g;
var escapeRegExp=/[-[\]{}()+?.,\\^$|#\s]/g;
_.extend(Router.prototype,Events,{
    initialize:function(){},
    route:function(route,name,callback){
        Backbone.history||(Backbone.history=new History);
        if(!_.isRegExp(route))route=this._routeToRegExp(route);
        if(!callback)callback=this[name];
        Backbone.history.route(route,_.bind(function(fragment){
            var args=this._extractParameters(route,fragment);
            callback&&callback.apply(this,args);
            this.trigger.apply(this,['route:'+name].concat(args));
            Backbone.history.trigger('route',this,name,args);
        },this));
        return this;
    },
    navigate:function(fragment,options){
        Backbone.history.navigate(fragment,options);
    },
    _bindRoutes:function(){
        if(!this.routes)return;
        var routes=[];
        for(var route in this.routes){
            routes.unshift([route,this.routes[route]]);
        }
        for(var i=0,l=routes.length;i<l;i++){
            this.route(routes[i][0],routes[i][1],this[routes[i][1]]);
        }
        },
_routeToRegExp:function(route){
    route=route.replace(escapeRegExp,'\\$&').replace(namedParam,'([^\/]+)').replace(splatParam,'(.*?)');
    return new RegExp('^'+route+'$');
},
_extractParameters:function(route,fragment){
    return route.exec(fragment).slice(1);
}
});
var History=Backbone.History=function(){
    this.handlers=[];
    _.bindAll(this,'checkUrl');
};

var routeStripper=/^[#\/]/;
var isExplorer=/msie [\w.]+/;
History.started=false;
_.extend(History.prototype,Events,{
    interval:50,
    getHash:function(windowOverride){
        var loc=windowOverride?windowOverride.location:window.location;
        var match=loc.href.match(/#(.*)$/);
        return match?match[1]:'';
    },
    getFragment:function(fragment,forcePushState){
        if(fragment==null){
            if(this._hasPushState||forcePushState){
                fragment=window.location.pathname;
                var search=window.location.search;
                if(search)fragment+=search;
            }else{
                fragment=this.getHash();
            }
        }
    if(!fragment.indexOf(this.options.root))fragment=fragment.substr(this.options.root.length);
    return fragment.replace(routeStripper,'');
},
start:function(options){
    if(History.started)throw new Error("Backbone.history has already been started");
    History.started=true;
    this.options=_.extend({},{
        root:'/'
    },this.options,options);
    this._wantsHashChange=this.options.hashChange!==false;
    this._wantsPushState=!!this.options.pushState;
    this._hasPushState=!!(this.options.pushState&&window.history&&window.history.pushState);
    var fragment=this.getFragment();
    var docMode=document.documentMode;
    var oldIE=(isExplorer.exec(navigator.userAgent.toLowerCase())&&(!docMode||docMode<=7));
    if(oldIE){
        this.iframe=$('<iframe src="javascript:0" tabindex="-1" />').hide().appendTo('body')[0].contentWindow;
        this.navigate(fragment);
    }
    if(this._hasPushState){
        $(window).bind('popstate',this.checkUrl);
    }else if(this._wantsHashChange&&('onhashchange'in window)&&!oldIE){
        $(window).bind('hashchange',this.checkUrl);
    }else if(this._wantsHashChange){
        this._checkUrlInterval=setInterval(this.checkUrl,this.interval);
    }
    this.fragment=fragment;
    var loc=window.location;
    var atRoot=loc.pathname==this.options.root;
    if(this._wantsHashChange&&this._wantsPushState&&!this._hasPushState&&!atRoot){
        this.fragment=this.getFragment(null,true);
        window.location.replace(this.options.root+'#'+this.fragment);
        return true;
    }else if(this._wantsPushState&&this._hasPushState&&atRoot&&loc.hash){
        this.fragment=this.getHash().replace(routeStripper,'');
        window.history.replaceState({},document.title,loc.protocol+'//'+loc.host+this.options.root+this.fragment);
    }
    if(!this.options.silent){
        return this.loadUrl();
    }
},
stop:function(){
    $(window).unbind('popstate',this.checkUrl).unbind('hashchange',this.checkUrl);
    clearInterval(this._checkUrlInterval);
    History.started=false;
},
route:function(route,callback){
    this.handlers.unshift({
        route:route,
        callback:callback
    });
},
checkUrl:function(e){
    var current=this.getFragment();
    if(current==this.fragment&&this.iframe)current=this.getFragment(this.getHash(this.iframe));
    if(current==this.fragment)return false;
    if(this.iframe)this.navigate(current);
    this.loadUrl()||this.loadUrl(this.getHash());
},
loadUrl:function(fragmentOverride){
    var fragment=this.fragment=this.getFragment(fragmentOverride);
    var matched=_.any(this.handlers,function(handler){
        if(handler.route.test(fragment)){
            handler.callback(fragment);
            return true;
        }
    });
return matched;
},
navigate:function(fragment,options){
    if(!History.started)return false;
    if(!options||options===true)options={
        trigger:options
    };
    
    var frag=(fragment||'').replace(routeStripper,'');
    if(this.fragment==frag)return;
    if(this._hasPushState){
        if(frag.indexOf(this.options.root)!=0)frag=this.options.root+frag;
        this.fragment=frag;
        window.history[options.replace?'replaceState':'pushState']({},document.title,frag);
    }else if(this._wantsHashChange){
        this.fragment=frag;
        this._updateHash(window.location,frag,options.replace);
        if(this.iframe&&(frag!=this.getFragment(this.getHash(this.iframe)))){
            if(!options.replace)this.iframe.document.open().close();
            this._updateHash(this.iframe.location,frag,options.replace);
        }
    }else{
    window.location.assign(this.options.root+fragment);
}
if(options.trigger)this.loadUrl(fragment);
},
_updateHash:function(location,fragment,replace){
    if(replace){
        location.replace(location.toString().replace(/(javascript:|#).*$/,'')+'#'+fragment);
    }else{
        location.hash=fragment;
    }
}
});
var View=Backbone.View=function(options){
    this.cid=_.uniqueId('view');
    this._configure(options||{});
    this._ensureElement();
    this.initialize.apply(this,arguments);
    this.delegateEvents();
};

var delegateEventSplitter=/^(\S+)\s*(.*)$/;
var viewOptions=['model','collection','el','id','attributes','className','tagName'];
_.extend(View.prototype,Events,{
    tagName:'div',
    $:function(selector){
        return this.$el.find(selector);
    },
    initialize:function(){},
    render:function(){
        return this;
    },
    remove:function(){
        this.$el.remove();
        return this;
    },
    make:function(tagName,attributes,content){
        var el=document.createElement(tagName);
        if(attributes)$(el).attr(attributes);
        if(content)$(el).html(content);
        return el;
    },
    setElement:function(element,delegate){
        if(this.$el)this.undelegateEvents();
        this.$el=(element instanceof $)?element:$(element);
        this.el=this.$el[0];
        if(delegate!==false)this.delegateEvents();
        return this;
    },
    delegateEvents:function(events){
        if(!(events||(events=getValue(this,'events'))))return;
        this.undelegateEvents();
        for(var key in events){
            var method=events[key];
            if(!_.isFunction(method))method=this[events[key]];
            if(!method)throw new Error('Method "'+events[key]+'" does not exist');
            var match=key.match(delegateEventSplitter);
            var eventName=match[1],selector=match[2];
            method=_.bind(method,this);
            eventName+='.delegateEvents'+this.cid;
            if(selector===''){
                this.$el.bind(eventName,method);
            }else{
                this.$el.delegate(selector,eventName,method);
            }
        }
        },
undelegateEvents:function(){
    this.$el.unbind('.delegateEvents'+this.cid);
},
_configure:function(options){
    if(this.options)options=_.extend({},this.options,options);
    for(var i=0,l=viewOptions.length;i<l;i++){
        var attr=viewOptions[i];
        if(options[attr])this[attr]=options[attr];
    }
    this.options=options;
},
_ensureElement:function(){
    if(!this.el){
        var attrs=getValue(this,'attributes')||{};
        
        if(this.id)attrs.id=this.id;
        if(this.className)attrs['class']=this.className;
        this.setElement(this.make(this.tagName,attrs),false);
    }else{
        this.setElement(this.el,false);
    }
}
});
var extend=function(protoProps,classProps){
    var child=inherits(this,protoProps,classProps);
    child.extend=this.extend;
    return child;
};

Model.extend=Collection.extend=Router.extend=View.extend=extend;
var methodMap={
    'create':'POST',
    'update':'PUT',
    'delete':'DELETE',
    'read':'GET'
};

Backbone.sync=function(method,model,options){
    var type=methodMap[method];
    options||(options={});
    var params={
        type:type,
        dataType:'json'
    };
    
    if(!options.url){
        params.url=getValue(model,'url')||urlError();
    }
    if(!options.data&&model&&(method=='create'||method=='update')){
        params.contentType='application/json';
        params.data=JSON.stringify(model.toJSON());
    }
    if(Backbone.emulateJSON){
        params.contentType='application/x-www-form-urlencoded';
        params.data=params.data?{
            model:params.data
            }:{};
    
}
if(Backbone.emulateHTTP){
    if(type==='PUT'||type==='DELETE'){
        if(Backbone.emulateJSON)params.data._method=type;
        params.type='POST';
        params.beforeSend=function(xhr){
            xhr.setRequestHeader('X-HTTP-Method-Override',type);
        };
    
}
}
if(params.type!=='GET'&&!Backbone.emulateJSON){
    params.processData=false;
}
return $.ajax(_.extend(params,options));
};

Backbone.wrapError=function(onError,originalModel,options){
    return function(model,resp){
        resp=model===originalModel?resp:model;
        if(onError){
            onError(originalModel,resp,options);
        }else{
            originalModel.trigger('error',originalModel,resp,options);
        }
    };

};

var ctor=function(){};

var inherits=function(parent,protoProps,staticProps){
    var child;
    if(protoProps&&protoProps.hasOwnProperty('constructor')){
        child=protoProps.constructor;
    }else{
        child=function(){
            parent.apply(this,arguments);
        };
    
}
_.extend(child,parent);
ctor.prototype=parent.prototype;
child.prototype=new ctor();
if(protoProps)_.extend(child.prototype,protoProps);
if(staticProps)_.extend(child,staticProps);
child.prototype.constructor=child;
child.__super__=parent.prototype;
return child;
};

var getValue=function(object,prop){
    if(!(object&&object[prop]))return null;
    return _.isFunction(object[prop])?object[prop]():object[prop];
};

var urlError=function(){
    throw new Error('A "url" property or function must be specified');
};

}).call(this);
;
﻿
(function($){
    $.cleditor={
        defaultOptions:{
            width:500,
            height:250,
            controls:"bold italic underline strikethrough subscript superscript | font size "+"style | color highlight removeformat | bullets numbering | outdent "+"indent | alignleft center alignright justify | undo redo | "+"rule image link unlink | cut copy paste pastetext | print source",
            colors:"FFF FCC FC9 FF9 FFC 9F9 9FF CFF CCF FCF "+"CCC F66 F96 FF6 FF3 6F9 3FF 6FF 99F F9F "+"BBB F00 F90 FC6 FF0 3F3 6CC 3CF 66C C6C "+"999 C00 F60 FC3 FC0 3C0 0CC 36F 63F C3C "+"666 900 C60 C93 990 090 399 33F 60C 939 "+"333 600 930 963 660 060 366 009 339 636 "+"000 300 630 633 330 030 033 006 309 303",
            fonts:"Arial,Arial Black,Comic Sans MS,Courier New,Narrow,Garamond,"+"Georgia,Impact,Sans Serif,Serif,Tahoma,Trebuchet MS,Verdana",
            sizes:"1,2,3,4,5,6,7",
            styles:[["Paragraph","<p>"],["Header 1","<h1>"],["Header 2","<h2>"],["Header 3","<h3>"],["Header 4","<h4>"],["Header 5","<h5>"],["Header 6","<h6>"]],
            useCSS:false,
            docType:'<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">',
            docCSSFile:"",
            bodyStyle:"margin:4px; color:#4c4c4c; font-size:13px; font-family:\"Lucida Grande\",Helvetica,Verdana,Arial,sans-serif; cursor:text"
        },
        buttons:{
            init:"bold,,|"+"italic,,|"+"underline,,|"+"strikethrough,,|"+"subscript,,|"+"superscript,,|"+"font,,fontname,|"+"size,Font Size,fontsize,|"+"style,,formatblock,|"+"color,Font Color,forecolor,|"+"highlight,Text Highlight Color,hilitecolor,color|"+"removeformat,Remove Formatting,|"+"bullets,,insertunorderedlist|"+"numbering,,insertorderedlist|"+"outdent,,|"+"indent,,|"+"alignleft,Align Text Left,justifyleft|"+"center,,justifycenter|"+"alignright,Align Text Right,justifyright|"+"justify,,justifyfull|"+"undo,,|"+"redo,,|"+"rule,Insert Horizontal Rule,inserthorizontalrule|"+"image,Insert Image,insertimage,url|"+"link,Insert Hyperlink,createlink,url|"+"unlink,Remove Hyperlink,|"+"cut,,|"+"copy,,|"+"paste,,|"+"pastetext,Paste as Text,inserthtml,|"+"print,,|"+"source,Show Source"
        },
        imagesPath:function(){
            return imagesPath();
        }
    };
    
$.fn.cleditor=function(options){
    var $result=$([]);
    this.each(function(idx,elem){
        if(elem.tagName=="TEXTAREA"){
            var data=$.data(elem,CLEDITOR);
            if(!data)data=new cleditor(elem,options);
            $result=$result.add(data);
        }
    });
return $result;
};

var
BACKGROUND_COLOR="backgroundColor",BUTTON="button",BUTTON_NAME="buttonName",CHANGE="change",CLEDITOR="cleditor",CLICK="click",DISABLED="disabled",DIV_TAG="<div>",TRANSPARENT="transparent",UNSELECTABLE="unselectable",MAIN_CLASS="cleditorMain",TOOLBAR_CLASS="cleditorToolbar",GROUP_CLASS="cleditorGroup",BUTTON_CLASS="cleditorButton",DISABLED_CLASS="cleditorDisabled",DIVIDER_CLASS="cleditorDivider",POPUP_CLASS="cleditorPopup",LIST_CLASS="cleditorList",COLOR_CLASS="cleditorColor",PROMPT_CLASS="cleditorPrompt",MSG_CLASS="cleditorMsg",ie=$.browser.msie,ie6=/msie\s6/i.test(navigator.userAgent),iOS=/iphone|ipad|ipod/i.test(navigator.userAgent),popups={},documentClickAssigned,buttons=$.cleditor.buttons;
    $.each(buttons.init.split("|"),function(idx,button){
    var items=button.split(","),name=items[0];
    buttons[name]={
        stripIndex:idx,
        name:name,
        title:items[1]===""?name.charAt(0).toUpperCase()+name.substr(1):items[1],
        command:items[2]===""?name:items[2],
        popupName:items[3]===""?name:items[3]
        };
    
});
delete buttons.init;
cleditor=function(area,options){
    var editor=this;
    editor.options=options=$.extend({},$.cleditor.defaultOptions,options);
    var $area=editor.$area=$(area).hide().data(CLEDITOR,editor).blur(function(){
        updateFrame(editor,true);
    });
    var $main=editor.$main=$(DIV_TAG).addClass(MAIN_CLASS).width(options.width).height(options.height);
    var $toolbar=editor.$toolbar=$(DIV_TAG).addClass(TOOLBAR_CLASS).appendTo($main);
    var $group=$(DIV_TAG).addClass(GROUP_CLASS).appendTo($toolbar);
    $.each(options.controls.split(" "),function(idx,buttonName){
        if(buttonName==="")return true;
        if(buttonName=="|"){
            var $div=$(DIV_TAG).addClass(DIVIDER_CLASS).appendTo($group);
            $group=$(DIV_TAG).addClass(GROUP_CLASS).appendTo($toolbar);
        }
        else{
            var button=buttons[buttonName];
            var $buttonDiv=$(DIV_TAG).data(BUTTON_NAME,button.name).addClass(BUTTON_CLASS).attr("title",button.title).bind(CLICK,$.proxy(buttonClick,editor)).appendTo($group).hover(hoverEnter,hoverLeave);
            var map={};
            
            if(button.css)map=button.css;
            else if(button.image)map.backgroundImage=imageUrl(button.image);
            if(button.stripIndex)map.backgroundPosition=button.stripIndex*-24;
            $buttonDiv.css(map);
            if(ie)
                $buttonDiv.attr(UNSELECTABLE,"on");
            if(button.popupName)
                createPopup(button.popupName,options,button.popupClass,button.popupContent,button.popupHover);
        }
    });
$main.insertBefore($area).append($area);
if(!documentClickAssigned){
    $(document).click(function(e){
        var $target=$(e.target);
        if(!$target.add($target.parents()).is("."+PROMPT_CLASS))
            hidePopups();
    });
    documentClickAssigned=true;
}
if(/auto|%/.test(""+options.width+options.height))
    $(window).resize(function(){
        if(editor.$main.parent().parent().size()){
            refresh(editor);
        }
    });
refresh(editor);
};

var fn=cleditor.prototype,methods=[["clear",clear],["disable",disable],["execCommand",execCommand],["focus",focus],["hidePopups",hidePopups],["sourceMode",sourceMode,true],["refresh",refresh],["select",select],["selectedHTML",selectedHTML,true],["selectedText",selectedText,true],["showMessage",showMessage],["updateFrame",updateFrame],["updateTextArea",updateTextArea]];
$.each(methods,function(idx,method){
    fn[method[0]]=function(){
        var editor=this,args=[editor];
        for(var x=0;x<arguments.length;x++){
            args.push(arguments[x]);
        }
        var result=method[1].apply(editor,args);
        if(method[2])return result;
        return editor;
    };

});
fn.change=function(handler){
    var $this=$(this);
    return handler?$this.bind(CHANGE,handler):$this.trigger(CHANGE);
};

function buttonClick(e){
    var editor=this,buttonDiv=e.target,buttonName=$.data(buttonDiv,BUTTON_NAME),button=buttons[buttonName],popupName=button.popupName,popup=popups[popupName];
    if(editor.disabled||$(buttonDiv).attr(DISABLED)==DISABLED)
        return;
    var data={
        editor:editor,
        button:buttonDiv,
        buttonName:buttonName,
        popup:popup,
        popupName:popupName,
        command:button.command,
        useCSS:editor.options.useCSS
        };
        
    if(button.buttonClick&&button.buttonClick(e,data)===false)
        return false;
    if(buttonName=="source"){
        if(sourceMode(editor)){
            delete editor.range;
            editor.$area.hide();
            editor.$frame.show();
            buttonDiv.title=button.title;
        }
        else{
            editor.$frame.hide();
            editor.$area.show();
            buttonDiv.title="Show Rich Text";
        }
        setTimeout(function(){
            refreshButtons(editor);
        },100);
    }
    else if(!sourceMode(editor)){
        if(popupName){
            var $popup=$(popup);
            if(popupName=="url"){
                if(buttonName=="link"&&selectedText(editor)===""){
                    showMessage(editor,"A selection is required when inserting a link.",buttonDiv);
                    return false;
                }
                $popup.children(":button").unbind(CLICK).bind(CLICK,function(){
                    var $text=$popup.find(":text"),url=$.trim($text.val());
                    if(url!=="")
                        execCommand(editor,data.command,url,null,data.button);
                    $text.val("http://");
                    hidePopups();
                    focus(editor);
                });
            }
            else if(popupName=="pastetext"){
                $popup.children(":button").unbind(CLICK).bind(CLICK,function(){
                    var $textarea=$popup.find("textarea"),text=$textarea.val().replace(/\n/g,"<br />");
                    if(text!=="")
                        execCommand(editor,data.command,text,null,data.button);
                    $textarea.val("");
                    hidePopups();
                    focus(editor);
                });
            }
            if(buttonDiv!==$.data(popup,BUTTON)){
                showPopup(editor,popup,buttonDiv);
                return false;
            }
            return;
        }
        else if(buttonName=="print")
            editor.$frame[0].contentWindow.print();
        else if(!execCommand(editor,data.command,data.value,data.useCSS,buttonDiv))
            return false;
    }
    focus(editor);
}
function hoverEnter(e){
    var $div=$(e.target).closest("div");
    $div.css(BACKGROUND_COLOR,$div.data(BUTTON_NAME)?"#FFF":"#FFC");
}
function hoverLeave(e){
    $(e.target).closest("div").css(BACKGROUND_COLOR,"transparent");
}
function popupClick(e){
    var editor=this,popup=e.data.popup,target=e.target;
    if(popup===popups.msg||$(popup).hasClass(PROMPT_CLASS))
        return;
    var buttonDiv=$.data(popup,BUTTON),buttonName=$.data(buttonDiv,BUTTON_NAME),button=buttons[buttonName],command=button.command,value,useCSS=editor.options.useCSS;
    if(buttonName=="font")
        value=target.style.fontFamily.replace(/"/g,"");
    else if(buttonName=="size"){
        if(target.tagName=="DIV")
            target=target.children[0];
        value=target.innerHTML;
    }
    else if(buttonName=="style")
        value="<"+target.tagName+">";
    else if(buttonName=="color")
        value=hex(target.style.backgroundColor);
    else if(buttonName=="highlight"){
        value=hex(target.style.backgroundColor);
        if(ie)command='backcolor';else useCSS=true;
    }
    var data={
        editor:editor,
        button:buttonDiv,
        buttonName:buttonName,
        popup:popup,
        popupName:button.popupName,
        command:command,
        value:value,
        useCSS:useCSS
    };
    
    if(button.popupClick&&button.popupClick(e,data)===false)
        return;
    if(data.command&&!execCommand(editor,data.command,data.value,data.useCSS,buttonDiv))
        return false;
    hidePopups();
    focus(editor);
}
function checksum(text)
{
    var a=1,b=0;
    for(var index=0;index<text.length;++index){
        a=(a+text.charCodeAt(index))%65521;
        b=(b+a)%65521;
    }
    return(b<<16)|a;
}
function clear(editor){
    editor.$area.val("");
    updateFrame(editor);
}
function createPopup(popupName,options,popupTypeClass,popupContent,popupHover){
    if(popups[popupName])
        return popups[popupName];
    var $popup=$(DIV_TAG).hide().addClass(POPUP_CLASS).appendTo("body");
    if(popupContent)
        $popup.html(popupContent);
    else if(popupName=="color"){
        var colors=options.colors.split(" ");
        if(colors.length<10)
            $popup.width("auto");
        $.each(colors,function(idx,color){
            $(DIV_TAG).appendTo($popup).css(BACKGROUND_COLOR,"#"+color);
        });
        popupTypeClass=COLOR_CLASS;
    }
    else if(popupName=="font")
        $.each(options.fonts.split(","),function(idx,font){
            $(DIV_TAG).appendTo($popup).css("fontFamily",font).html(font);
        });
    else if(popupName=="size")
        $.each(options.sizes.split(","),function(idx,size){
            $(DIV_TAG).appendTo($popup).html("<font size="+size+">"+size+"</font>");
        });
    else if(popupName=="style")
        $.each(options.styles,function(idx,style){
            $(DIV_TAG).appendTo($popup).html(style[1]+style[0]+style[1].replace("<","</"));
        });
    else if(popupName=="url"){
        $popup.html('Enter URL:<br><input type=text value="http://" size=35><br><input type=button value="Submit">');
        popupTypeClass=PROMPT_CLASS;
    }
    else if(popupName=="pastetext"){
        $popup.html('Paste your content here and click submit.<br /><textarea cols=40 rows=3></textarea><br /><input type=button value=Submit>');
        popupTypeClass=PROMPT_CLASS;
    }
    if(!popupTypeClass&&!popupContent)
        popupTypeClass=LIST_CLASS;
    $popup.addClass(popupTypeClass);
    if(ie){
        $popup.attr(UNSELECTABLE,"on").find("div,font,p,h1,h2,h3,h4,h5,h6").attr(UNSELECTABLE,"on");
    }
    if($popup.hasClass(LIST_CLASS)||popupHover===true)
        $popup.children().hover(hoverEnter,hoverLeave);
    popups[popupName]=$popup[0];
    return $popup[0];
}
function disable(editor,disabled){
    if(disabled){
        editor.$area.attr(DISABLED,DISABLED);
        editor.disabled=true;
    }
    else{
        editor.$area.removeAttr(DISABLED);
        delete editor.disabled;
    }
    try{
        if(ie)editor.doc.body.contentEditable=!disabled;else editor.doc.designMode=!disabled?"on":"off";
    }
    catch(err){}
    refreshButtons(editor);
}
function execCommand(editor,command,value,useCSS,button){
    restoreRange(editor);
    if(!ie){
        if(useCSS===undefined||useCSS===null)
            useCSS=editor.options.useCSS;
        editor.doc.execCommand("styleWithCSS",0,useCSS.toString());
    }
    var success=true,description;
    if(ie&&command.toLowerCase()=="inserthtml")
        getRange(editor).pasteHTML(value);
    else{
        try{
            success=editor.doc.execCommand(command,0,value||null);
        }
        catch(err){
            description=err.description;
            success=false;
        }
        if(!success){
            if("cutcopypaste".indexOf(command)>-1)
                showMessage(editor,"For security reasons, your browser does not support the "+
                    command+" command. Try using the keyboard shortcut or context menu instead.",button);else
                showMessage(editor,(description?description:"Error executing the "+command+" command."),button);
        }
    }
refreshButtons(editor);
return success;
}
function focus(editor){
    setTimeout(function(){
        if(sourceMode(editor))editor.$area.focus();else editor.$frame[0].contentWindow.focus();
        refreshButtons(editor);
    },0);
}
function getRange(editor){
    if(ie)return getSelection(editor).createRange();
    return getSelection(editor).getRangeAt(0);
}
function getSelection(editor){
    if(ie)return editor.doc.selection;
    return editor.$frame[0].contentWindow.getSelection();
}
function hex(s){
    var m=/rgba?\((\d+), (\d+), (\d+)/.exec(s),c=s.split("");
    if(m){
        s=(m[1]<<16|m[2]<<8|m[3]).toString(16);
        while(s.length<6)
            s="0"+s;
    }
    return"#"+(s.length==6?s:c[1]+c[1]+c[2]+c[2]+c[3]+c[3]);
}
function hidePopups(){
    $.each(popups,function(idx,popup){
        $(popup).hide().unbind(CLICK).removeData(BUTTON);
    });
}
function imagesPath(){
    var cssFile="jquery.cleditor.css",href=$("link[href$='"+cssFile+"']").attr("href");
    return href.substr(0,href.length-cssFile.length)+"images/";
}
function imageUrl(filename){
    return"url("+imagesPath()+filename+")";
}
function refresh(editor){
    var $main=editor.$main,options=editor.options;
    if(editor.$frame)
        editor.$frame.remove();
    var $frame=editor.$frame=$('<iframe frameborder="0" src="javascript:true;">').hide().appendTo($main);
    var contentWindow=$frame[0].contentWindow,doc=editor.doc=contentWindow.document,$doc=$(doc);
    doc.open();
    doc.write(options.docType+'<html>'+
        ((options.docCSSFile==='')?'':'<head><link rel="stylesheet" type="text/css" href="'+options.docCSSFile+'" /></head>')+'<body style="'+options.bodyStyle+'"></body></html>');
    doc.close();
    if(ie)
        $doc.click(function(){
            focus(editor);
        });
    updateFrame(editor);
    if(ie){
        $doc.bind("beforedeactivate beforeactivate selectionchange keypress",function(e){
            if(e.type=="beforedeactivate")
                editor.inactive=true;
            else if(e.type=="beforeactivate"){
                if(!editor.inactive&&editor.range&&editor.range.length>1)
                    editor.range.shift();
                delete editor.inactive;
            }
            else if(!editor.inactive){
                if(!editor.range)
                    editor.range=[];
                editor.range.unshift(getRange(editor));
                while(editor.range.length>2)
                    editor.range.pop();
            }
        });
    $frame.focus(function(){
        restoreRange(editor);
    });
}
($.browser.mozilla?$doc:$(contentWindow)).blur(function(){
    updateTextArea(editor,true);
});
$doc.click(hidePopups).bind("keyup mouseup",function(){
    refreshButtons(editor);
});
if(iOS)editor.$area.show();else $frame.show();
$(function(){
    var $toolbar=editor.$toolbar,$group=$toolbar.children("div:last"),wid=/%/.test(""+options.width)?options.width:$main.width();
    var hgt=$group.offset().top+$group.outerHeight()-$toolbar.offset().top+1;
    $toolbar.height(hgt);
    hgt=(/%/.test(""+options.height)?$main.height():parseInt(options.height))-hgt;
    $frame.width(wid).height(hgt);
    editor.$area.width(wid).height(ie6?hgt-2:hgt);
    disable(editor,editor.disabled);
    refreshButtons(editor);
});
}
function refreshButtons(editor){
    if(!iOS&&$.browser.webkit&&!editor.focused){
        editor.$frame[0].contentWindow.focus();
        window.focus();
        editor.focused=true;
    }
    var queryObj=editor.doc;
    if(ie)queryObj=getRange(editor);
    var inSourceMode=sourceMode(editor);
    $.each(editor.$toolbar.find("."+BUTTON_CLASS),function(idx,elem){
        var $elem=$(elem),button=$.cleditor.buttons[$.data(elem,BUTTON_NAME)],command=button.command,enabled=true;
        if(editor.disabled)
            enabled=false;
        else if(button.getEnabled){
            var data={
                editor:editor,
                button:elem,
                buttonName:button.name,
                popup:popups[button.popupName],
                popupName:button.popupName,
                command:button.command,
                useCSS:editor.options.useCSS
                };
                
            enabled=button.getEnabled(data);
            if(enabled===undefined)
                enabled=true;
        }
        else if(((inSourceMode||iOS)&&button.name!="source")||(ie&&(command=="undo"||command=="redo")))
            enabled=false;
        else if(command&&command!="print"){
            if(ie&&command=="hilitecolor")
                command="backcolor";
            if(!ie||command!="inserthtml"){
                try{
                    enabled=queryObj.queryCommandEnabled(command);
                }
                catch(err){
                    enabled=false;
                }
            }
        }
    if(enabled){
        $elem.removeClass(DISABLED_CLASS);
        $elem.removeAttr(DISABLED);
    }
    else{
        $elem.addClass(DISABLED_CLASS);
        $elem.attr(DISABLED,DISABLED);
    }
});
}
function restoreRange(editor){
    if(ie&&editor.range)
        editor.range[0].select();
}
function select(editor){
    setTimeout(function(){
        if(sourceMode(editor))editor.$area.select();else execCommand(editor,"selectall");
    },0);
}
function selectedHTML(editor){
    restoreRange(editor);
    var range=getRange(editor);
    if(ie)
        return range.htmlText;
    var layer=$("<layer>")[0];
    layer.appendChild(range.cloneContents());
    var html=layer.innerHTML;
    layer=null;
    return html;
}
function selectedText(editor){
    restoreRange(editor);
    if(ie)return getRange(editor).text;
    return getSelection(editor).toString();
}
function showMessage(editor,message,button){
    var popup=createPopup("msg",editor.options,MSG_CLASS);
    popup.innerHTML=message;
    showPopup(editor,popup,button);
}
function showPopup(editor,popup,button){
    var offset,left,top,$popup=$(popup);
    if(button){
        var $button=$(button);
        offset=$button.offset();
        left=--offset.left;
        top=offset.top+$button.height();
    }
    else{
        var $toolbar=editor.$toolbar;
        offset=$toolbar.offset();
        left=Math.floor(($toolbar.width()-$popup.width())/2)+offset.left;
        top=offset.top+$toolbar.height()-2;
    }
    hidePopups();
    $popup.css({
        left:left,
        top:top
    }).show();
    if(button){
        $.data(popup,BUTTON,button);
        $popup.bind(CLICK,{
            popup:popup
        },$.proxy(popupClick,editor));
    }
    setTimeout(function(){
        $popup.find(":text,textarea").eq(0).focus().select();
    },100);
}
function sourceMode(editor){
    return editor.$area.is(":visible");
}
function updateFrame(editor,checkForChange){
    var code=editor.$area.val(),options=editor.options,updateFrameCallback=options.updateFrame,$body=$(editor.doc.body);
    if(updateFrameCallback){
        var sum=checksum(code);
        if(checkForChange&&editor.areaChecksum==sum)
            return;
        editor.areaChecksum=sum;
    }
    var html=updateFrameCallback?updateFrameCallback(code):code;
    html=html.replace(/<(?=\/?script)/ig,"&lt;");
    if(options.updateTextArea)
        editor.frameChecksum=checksum(html);
    if(html!=$body.html()){
        $body.html(html);
        $(editor).triggerHandler(CHANGE);
    }
}
function updateTextArea(editor,checkForChange){
    var html=$(editor.doc.body).html(),options=editor.options,updateTextAreaCallback=options.updateTextArea,$area=editor.$area;
    if(updateTextAreaCallback){
        var sum=checksum(html);
        if(checkForChange&&editor.frameChecksum==sum)
            return;
        editor.frameChecksum=sum;
    }
    var code=updateTextAreaCallback?updateTextAreaCallback(html):html;
    if(options.updateFrame)
        editor.areaChecksum=checksum(code);
    if(code!=$area.val()){
        $area.val(code);
        $(editor).triggerHandler(CHANGE);
    }
}
})(jQuery);
;
var py={};
(function(py){
    var create=function(o,props){
        function F(){}
        F.prototype=o;
        var inst=new F;
        if(props){
            for(var name in props){
                if(!props.hasOwnProperty(name)){
                    continue;
                }
                inst[name]=props[name];
            }
            }
    return inst;
};

var symbols={};

var comparators={};

var Base={
    nud:function(){
        throw new Error(this.id+" undefined as prefix");
    },
    led:function(led){
        throw new Error(this.id+" undefined as infix");
    },
    toString:function(){
        if(this.id==='(constant)'||this.id==='(number)'||this.id==='(name)'||this.id==='(string)'){
            return[this.id.slice(0,this.id.length-1),' ',this.value,')'].join('');
        }else if(this.id==='(end)'){
            return'(end)';
        }else if(this.id==='(comparator)'){
            var repr=['(comparator',this.expressions[0]];
            for(var i=0;i<this.operators.length;++i){
                repr.push(this.operators[i],this.expressions[i+1]);
            }
            return repr.join(' ')+')';
        }
        var out=[this.id,this.first,this.second,this.third].filter(function(r){
            return r
            }).join(' ');
        return'('+out+')';
    }
};

function symbol(id,bp){
    bp=bp||0;
    var s=symbols[id];
    if(s){
        if(bp>s.lbp){
            s.lbp=bp;
        }
        return s;
    }
    return symbols[id]=create(Base,{
        id:id,
        lbp:bp
    });
}
function constant(id){
    var s=symbol(id);
    s.id='(constant)';
    s.value=id;
    s.nud=function(){
        return this;
    };

}
function prefix(id,bp,nud){
    symbol(id).nud=nud||function(){
        this.first=expression(bp);
        return this
        }
    }
function infix(id,bp,led){
    symbol(id,bp).led=led||function(left){
        this.first=left;
        this.second=expression(bp);
        return this;
    }
}
function infixr(id,bp){
    symbol(id,bp).led=function(left){
        this.first=left;
        this.second=expression(bp-1);
        return this;
    }
}
function comparator(id){
    comparators[id]=true;
    var bp=60;
    infix(id,bp,function(left){
        this.id='(comparator)';
        this.operators=[id];
        this.expressions=[left,expression(bp)];
        while(token.id in comparators){
            this.operators.push(token.id);
            advance();
            this.expressions.push(expression(bp));
        }
        return this;
    });
}
constant('None');
constant('False');
constant('True');
symbol('(number)').nud=function(){
    return this;
};

symbol('(name)').nud=function(){
    return this;
};

symbol('(string)').nud=function(){
    return this;
};

symbol('(end)');
symbol(':');
symbol(')');
symbol(']');
symbol('}');
symbol(',');
symbol('else');
infix('=',10,function(left){
    if(left.id!=='(name)'){
        throw new Error("Expected keyword argument name, got "+token.id);
    }
    this.first=left;
    this.second=expression();
    return this;
});
symbol('lambda',20).nud=function(){
    this.first=[];
    if(token.id!==':'){
        for(;;){
            if(token.id!=='(name)'){
                throw new Error('Excepted an argument name');
            }
            this.first.push(token);
            advance();
            if(token.id!==','){
                break;
            }
            advance(',');
        }
        }
advance(':');
this.second=expression();
return this;
};

infix('if',20,function(left){
    this.first=left;
    this.second=expression();
    advance('else');
    this.third=expression();
    return this;
});
infixr('or',30);
infixr('and',40);
prefix('not',50);
comparator('in');
comparator('not in');
comparator('is');
comparator('is not');
comparator('<');
comparator('<=');
comparator('>');
comparator('>=');
comparator('<>');
comparator('!=');
comparator('==');
infix('|',70);
infix('^',80);
infix('&',90);
infix('<<',100);
infix('>>',100);
infix('+',110);
infix('-',110);
infix('*',120);
infix('/',120);
infix('//',120);
infix('%',120);
prefix('-',130);
prefix('+',130);
prefix('~',130);
infixr('**',140);
infix('.',150,function(left){
    if(token.id!=='(name)'){
        throw new Error('Expected attribute name, got '+token.id);
    }
    this.first=left;
    this.second=token;
    advance();
    return this;
});
symbol('(',150).nud=function(){
    this.first=[];
    var comma=false;
    if(token.id!==')'){
        while(true){
            if(token.id===')'){
                break;
            }
            this.first.push(expression());
            if(token.id!==','){
                break;
            }
            comma=true;
            advance(',');
        }
    }
advance(')');
if(!this.first.length||comma){
    return this;
}else{
    return this.first[0];
}
};

symbol('(').led=function(left){
    this.first=left;
    this.second=[];
    if(token.id!==")"){
        for(;;){
            this.second.push(expression());
            if(token.id!==','){
                break;
            }
            advance(',');
        }
        }
advance(")");
return this;
};

infix('[',150,function(left){
    this.first=left;
    this.second=expression();
    advance("]");
    return this;
});
symbol('[').nud=function(){
    this.first=[];
    if(token.id!==']'){
        for(;;){
            if(token.id===']'){
                break;
            }
            this.first.push(expression());
            if(token.id!==','){
                break;
            }
            advance(',');
        }
        }
advance(']');
return this;
};

symbol('{').nud=function(){
    this.first=[];
    if(token.id!=='}'){
        for(;;){
            if(token.id==='}'){
                break;
            }
            var key=expression();
            advance(':');
            var value=expression();
            this.first.push([key,value]);
            if(token.id!==','){
                break;
            }
            advance(',');
        }
        }
advance('}');
return this;
};

py.tokenize=(function(){
    function group(){
        return'('+Array.prototype.join.call(arguments,'|')+')';
    }
    var Whitespace='[ \\f\\t]*';
    var Name='[a-zA-Z_]\\w*';
    var DecNumber='\\d+(L|l)?';
    var IntNumber=DecNumber;
    var PointFloat=group('\\d+\\.\\d*','\\.\\d+');
    var FloatNumber=PointFloat;
    var Number=group(FloatNumber,IntNumber);
    var Operator=group("\\*\\*=?",">>=?","<<=?","<>","!=","//=?","[+\\-*/%&|^=<>]=?","~");
    var Bracket='[\\[\\]\\(\\)\\{\\}]';
    var Special='[:;.,`@]';
    var Funny=group(Operator,Bracket,Special);
    var ContStr=group("[uU]?'([^']*)'",'[uU]?"([^"]*)"');
    var PseudoToken=Whitespace+group(Number,Funny,ContStr,Name);
    var number_pattern=new RegExp('^'+Number+'$');
    var string_pattern=new RegExp('^'+ContStr+'$');
    var name_pattern=new RegExp('^'+Name+'$');
    var strip=new RegExp('^'+Whitespace);
    return function tokenize(s){
        var max=s.length,tokens=[],start,end=undefined;
        var pseudoprog=new RegExp(PseudoToken,'g');
        while(pseudoprog.lastIndex<max){
            var pseudomatch=pseudoprog.exec(s);
            if(!pseudomatch){
                if(/^\s+$/.test(s.slice(end))){
                    break;
                }
                throw new Error('Failed to tokenize <<'+s
                    +'>> at index '+(end||0)
                    +'; parsed so far: '+tokens);
            }
            start=pseudomatch.index;
            end=pseudoprog.lastIndex;
            var token=s.slice(start,end).replace(strip,'');
            var initial=token[0];
            if(number_pattern.test(token)){
                tokens.push(create(symbols['(number)'],{
                    value:parseFloat(token)
                    }));
            }else if(string_pattern.test(token)){
                var m=string_pattern.exec(token);
                tokens.push(create(symbols['(string)'],{
                    value:(m[2]!==undefined?m[2]:m[3])
                    }));
            }else if(token in symbols){
                var symbol;
                if(token==='in'&&tokens[tokens.length-1].id==='not'){
                    symbol=symbols['not in'];
                    tokens.pop();
                }else if(token==='not'&&tokens[tokens.length-1].id==='is'){
                    symbol=symbols['is not'];
                    tokens.pop();
                }else{
                    symbol=symbols[token];
                }
                tokens.push(create(symbol));
            }else if(name_pattern.test(token)){
                tokens.push(create(symbols['(name)'],{
                    value:token
                }));
            }else{
                throw new Error("Tokenizing failure of <<"+s+">> at index "+start
                    +" for token [["+token+"]]"
                    +"; parsed so far: "+tokens);
            }
        }
    tokens.push(create(symbols['(end)']));
    return tokens;
}
})();
var token,next;
function expression(rbp){
    rbp=rbp||0;
    var t=token;
    token=next();
    var left=t.nud();
    while(rbp<token.lbp){
        t=token;
        token=next();
        left=t.led(left);
    }
    return left;
}
function advance(id){
    if(id&&token.id!==id){
        throw new Error('Expected "'+id+'", got "'+token.id+'"');
    }
    token=next();
}
function PY_ensurepy(val,name){
    switch(val){
        case undefined:
            throw new Error("NameError: name '"+name+"' is not defined");
        case null:
            return py.None;
        case true:
            return py.True;
        case false:
            return py.False;
    }
    var fn=function(){};
    
    fn.prototype=py.object;
    if(py.PY_isInstance(val,py.object)||py.PY_isSubclass(val,py.object)){
        return val;
    }
    switch(typeof val){
        case'number':
            return py.float.fromJSON(val);
        case'string':
            return py.str.fromJSON(val);
        case'function':
            return py.PY_def.fromJSON(val);
    }
    switch(val.constructor){
        case Object:
            var out=py.PY_call(py.object);
            for(var k in val){
            if(val.hasOwnProperty(k)){
                out[k]=val[k];
            }
        }
        return out;
    case Array:
        return py.list.fromJSON(val);
}
throw new Error("Could not convert "+val+" to a pyval");
}
var typename=function(obj){
    if(obj.__class__){
        return obj.__class__.__name__;
    }else if(typeof obj!=='object'){
        return typeof obj;
    }else{
        return obj.constructor.name;
    }
};

py.py={};

py.PY_parseArgs=function PY_parseArgs(argument,format){
    var out={};
    
    var args=argument[0];
    var kwargs={};
    
    for(var k in argument[1]){
        if(!argument[1].hasOwnProperty(k)){
            continue;
        }
        kwargs[k]=argument[1][k];
    }
    if(typeof format==='string'){
        format=format.split(/\s+/);
    }
    var name=function(spec){
        if(typeof spec==='string'){
            return spec;
        }else if(spec instanceof Array&&spec.length===2){
            return spec[0];
        }
        throw new Error("TypeError: unknown format specification "+
            JSON.stringify(spec));
    };
    
    var spec;
    for(var i=0;i<args.length;++i){
        spec=format[i];
        if(!spec||spec==='*'){
            throw new Error("TypeError: function takes exactly "+(i-1)+" positional arguments ("+args.length+" given")
            }else if(/^\*\w/.test(spec)){
            out[name(spec.slice(1))]=args.slice(i);
            break;
        }
        out[name(spec)]=args[i];
    }
    for(var j=i;j<format.length;++j){
        spec=format[j];
        var n=name(spec);
        if(n in out){
            throw new Error("TypeError: function got multiple values "+"for keyword argument '"+kwarg+"'");
        }
        if(/^\*\*\w/.test(n)){
            out[n.slice(2)]=kwargs;
            kwargs={};
            
            break;
        }
        if(n in kwargs){
            out[n]=kwargs[n];
            delete kwargs[n];
        }
    }
for(var key in kwargs){
    throw new Error("TypeError: function got an unexpected keyword argument '"
        +key+"'");
}
var kwonly=0;
for(var k=0;k<format.length;++k){
    if(/^\*/.test(format[k])){
        kwonly=1;
        break;
    }
}
for(var k=0;k<format.length;++k){
    spec=format[k];
    var n=name(spec);
    if(/^\*/.test(n)||n in out){
        continue;
    }
    if(!(spec instanceof Array)){
        throw new Error("TypeError: function takes exactly "+(format.length-kwonly)
            +" arguments");
    }
    out[n]=spec[1];
}
return out;
};

py.PY_hasAttr=function(o,attr_name){
    try{
        py.PY_getAttr(o,attr_name);
        return true;
    }catch(e){
        return false;
    }
};

py.PY_getAttr=function(o,attr_name){
    return PY_ensurepy(o.__getattribute__(attr_name),attr_name);
};

py.PY_str=function(o){
    var v=o.__str__();
    if(py.PY_isInstance(v,py.str)){
        return v;
    }
    throw new Error('TypeError: __str__ returned non-string (type '
        +typename(v)
        +')');
};

py.PY_isInstance=function(inst,cls){
    var fn=function(){};
    
    fn.prototype=cls;
    return inst instanceof fn;
};

py.PY_isSubclass=function(derived,cls){
    var fn=function(){};
    
    fn.prototype=cls;
    return derived===cls||derived instanceof fn;
};

py.PY_call=function(callable,args,kwargs){
    if(!args){
        args=[];
        kwargs={};
    
}else if(typeof args==='object'&&!(args instanceof Array)){
    kwargs=args;
    args=[];
}else if(!kwargs){
    kwargs={};

}
if(callable.__is_type){
    var instance=callable.__new__.call(callable,args,kwargs);
    var typ=function(){};
    
    typ.prototype=callable;
    if(instance instanceof typ){
        instance.__init__.call(instance,args,kwargs);
    }
    return instance
    }
return callable.__call__(args,kwargs);
};

py.PY_isTrue=function(o){
    var res=o.__nonzero__();
    if(res===py.True){
        return true;
    }
    if(res===py.False){
        return false;
    }
    throw new Error("TypeError: __nonzero__ should return bool, returned "
        +typename(res));
};

py.PY_not=function(o){
    return!py.PY_isTrue(o);
};

py.PY_size=function(o){
    if(!o.__len__){
        throw new Error("TypeError: object of type '"+
            typename(o)+"' has no len()");
    }
    var v=o.__len__();
    if(typeof v!=='number'){
        throw new Error("TypeError: a number is required");
    }
    return v;
};

py.PY_getItem=function(o,key){
    if(!('__getitem__'in o)){
        throw new Error("TypeError: '"+typename(o)+"' object is unsubscriptable")
        }
    if(!py.PY_isInstance(key,py.object)){
        throw new Error("TypeError: '"+typename(key)+"' is not a py.js object");
    }
    var res=o.__getitem__(key);
    if(!py.PY_isInstance(key,py.object)){
        throw new Error("TypeError: __getitem__ must return a py.js object, got "
            +typename(res));
    }
    return res;
};

py.PY_setItem=function(o,key,v){
    if(!('__setitem__'in o)){
        throw new Error("TypeError: '"+typename(o)+"' object does not support item assignment");
    }
    if(!py.PY_isInstance(key,py.object)){
        throw new Error("TypeError: '"+typename(key)+"' is not a py.js object");
    }
    if(!py.PY_isInstance(v,py.object)){
        throw new Error("TypeError: '"+typename(v)+"' is not a py.js object");
    }
    o.__setitem__(key,v);
};

py.PY_add=function(o1,o2){
    return PY_op(o1,o2,'+');
};

py.PY_subtract=function(o1,o2){
    return PY_op(o1,o2,'-');
};

py.PY_multiply=function(o1,o2){
    return PY_op(o1,o2,'*');
};

py.PY_divide=function(o1,o2){
    return PY_op(o1,o2,'/');
};

py.PY_negative=function(o){
    if(!o.__neg__){
        throw new Error("TypeError: bad operand for unary -: '"
            +typename(o)
            +"'");
    }
    return o.__neg__();
};

py.PY_positive=function(o){
    if(!o.__pos__){
        throw new Error("TypeError: bad operand for unary +: '"
            +typename(o)
            +"'");
    }
    return o.__pos__();
};

py.type=function type(name,bases,dict){
    if(typeof name!=='string'){
        throw new Error("ValueError: a class name should be a string");
    }
    if(!bases||bases.length===0){
        bases=[py.object];
    }else if(bases.length>1){
        throw new Error("ValueError: can't provide multiple bases for a "
            +"new type");
    }
    var base=bases[0];
    var ClassObj=create(base);
    if(dict){
        for(var k in dict){
            if(!dict.hasOwnProperty(k)){
                continue;
            }
            ClassObj[k]=dict[k];
        }
        }
ClassObj.__class__=ClassObj;
ClassObj.__name__=name;
ClassObj.__bases__=bases;
ClassObj.__is_type=true;
return ClassObj;
};

py.type.__call__=function(){
    var args=py.PY_parseArgs(arguments,['object']);
    return args.object.__class__;
};

var hash_counter=0;
py.object=py.type('object',[{}],{
    __new__:function(){
        var inst=create(this);
        inst.__is_type=false;
        return inst;
    },
    __init__:function(){},
    __hash__:function(){
        if(this._hash){
            return this._hash;
        }
        return this._hash='\0\0\0'+String(hash_counter++);
    },
    __eq__:function(other){
        return(this===other)?py.True:py.False;
    },
    __ne__:function(other){
        if(py.PY_isTrue(this.__eq__(other))){
            return py.False;
        }else{
            return py.True;
        }
    },
__lt__:function(){
    return py.NotImplemented;
},
__le__:function(){
    return py.NotImplemented;
},
__ge__:function(){
    return py.NotImplemented;
},
__gt__:function(){
    return py.NotImplemented;
},
__str__:function(){
    return this.__unicode__();
},
__unicode__:function(){
    return py.str.fromJSON('<'+typename(this)+' object>');
},
__nonzero__:function(){
    return py.True;
},
__getattribute__:function(name){
    if(name in this){
        var val=this[name];
        if(typeof val==='object'&&'__get__'in val){
            return val.__get__(this,py.PY_call(py.type,[this]));
        }
        if(typeof val==='function'&&!this.hasOwnProperty(name)){
            return PY_instancemethod.fromJSON(val,this);
        }
        return val;
    }
    if('__getattr__'in this){
        return this.__getattr__(name);
    }
    throw new Error("AttributeError: object has no attribute '"+name+"'");
},
__setattr__:function(name,value){
    if(name in this&&'__set__'in this[name]){
        this[name].__set__(this,value);
    }
    this[name]=value;
},
toJSON:function(){
    var out={};
    
    for(var k in this){
        if(this.hasOwnProperty(k)&&!/^__/.test(k)){
            var val=this[k];
            out[k]=val.toJSON?val.toJSON():val;
        }
    }
return out;
}
});
var NoneType=py.type('NoneType',null,{
    __nonzero__:function(){
        return py.False;
    },
    toJSON:function(){
        return null;
    }
});
py.None=py.PY_call(NoneType);
var NotImplementedType=py.type('NotImplementedType',null,{});
py.NotImplemented=py.PY_call(NotImplementedType);
var booleans_initialized=false;
py.bool=py.type('bool',null,{
    __new__:function(){
        if(!booleans_initialized){
            return py.object.__new__.apply(this);
        }
        var ph={};
        
        var args=py.PY_parseArgs(arguments,[['value',ph]]);
        if(args.value===ph){
            return py.False;
        }
        return py.PY_isTrue(args.value)?py.True:py.False;
    },
    __str__:function(){
        return py.str.fromJSON((this===py.True)?"True":"False");
    },
    __nonzero__:function(){
        return this;
    },
    fromJSON:function(val){
        return val?py.True:py.False
        },
    toJSON:function(){
        return this===py.True;
    }
});
py.True=py.PY_call(py.bool);
py.False=py.PY_call(py.bool);
booleans_initialized=true;
py.float=py.type('float',null,{
    __init__:function(){
        var placeholder={};
        
        var args=py.PY_parseArgs(arguments,[['value',placeholder]]);
        var value=args.value;
        if(value===placeholder){
            this._value=0;
            return;
        }
        if(py.PY_isInstance(value,py.float)){
            this._value=value._value;
        }
        if(py.PY_isInstance(value,py.object)&&'__float__'in value){
            var res=value.__float__();
            if(py.PY_isInstance(res,py.float)){
                this._value=res._value;
                return;
            }
            throw new Error('TypeError: __float__ returned non-float (type '+
                typename(res)+')');
        }
        throw new Error('TypeError: float() argument must be a string or a number');
    },
    __str__:function(){
        return py.str.fromJSON(String(this._value));
    },
    __eq__:function(other){
        return this._value===other._value?py.True:py.False;
    },
    __lt__:function(other){
        if(!py.PY_isInstance(other,py.float)){
            return py.NotImplemented;
        }
        return this._value<other._value?py.True:py.False;
    },
    __le__:function(other){
        if(!py.PY_isInstance(other,py.float)){
            return py.NotImplemented;
        }
        return this._value<=other._value?py.True:py.False;
    },
    __gt__:function(other){
        if(!py.PY_isInstance(other,py.float)){
            return py.NotImplemented;
        }
        return this._value>other._value?py.True:py.False;
    },
    __ge__:function(other){
        if(!py.PY_isInstance(other,py.float)){
            return py.NotImplemented;
        }
        return this._value>=other._value?py.True:py.False;
    },
    __abs__:function(){
        return py.float.fromJSON(Math.abs(this._value));
    },
    __add__:function(other){
        if(!py.PY_isInstance(other,py.float)){
            return py.NotImplemented;
        }
        return py.float.fromJSON(this._value+other._value);
    },
    __neg__:function(){
        return py.float.fromJSON(-this._value);
    },
    __sub__:function(other){
        if(!py.PY_isInstance(other,py.float)){
            return py.NotImplemented;
        }
        return py.float.fromJSON(this._value-other._value);
    },
    __mul__:function(other){
        if(!py.PY_isInstance(other,py.float)){
            return py.NotImplemented;
        }
        return py.float.fromJSON(this._value*other._value);
    },
    __div__:function(other){
        if(!py.PY_isInstance(other,py.float)){
            return py.NotImplemented;
        }
        return py.float.fromJSON(this._value/other._value);
    },
    __nonzero__:function(){
        return this._value?py.True:py.False;
    },
    fromJSON:function(v){
        if(!(typeof v==='number')){
            throw new Error('py.float.fromJSON can only take numbers');
        }
        var instance=py.PY_call(py.float);
        instance._value=v;
        return instance;
    },
    toJSON:function(){
        return this._value;
    }
});
py.str=py.type('str',null,{
    __init__:function(){
        var placeholder={};
        
        var args=py.PY_parseArgs(arguments,[['value',placeholder]]);
        var s=args.value;
        if(s===placeholder){
            this._value='';
            return;
        }
        this._value=py.PY_str(s)._value;
    },
    __hash__:function(){
        return'\1\0\1'+this._value;
    },
    __str__:function(){
        return this;
    },
    __eq__:function(other){
        if(py.PY_isInstance(other,py.str)&&this._value===other._value){
            return py.True;
        }
        return py.False;
    },
    __lt__:function(other){
        if(py.PY_not(py.PY_call(py.isinstance,[other,py.str]))){
            return py.NotImplemented;
        }
        return this._value<other._value?py.True:py.False;
    },
    __le__:function(other){
        if(!py.PY_isInstance(other,py.str)){
            return py.NotImplemented;
        }
        return this._value<=other._value?py.True:py.False;
    },
    __gt__:function(other){
        if(!py.PY_isInstance(other,py.str)){
            return py.NotImplemented;
        }
        return this._value>other._value?py.True:py.False;
    },
    __ge__:function(other){
        if(!py.PY_isInstance(other,py.str)){
            return py.NotImplemented;
        }
        return this._value>=other._value?py.True:py.False;
    },
    __add__:function(other){
        if(!py.PY_isInstance(other,py.str)){
            return py.NotImplemented;
        }
        return py.str.fromJSON(this._value+other._value);
    },
    __nonzero__:function(){
        return this._value.length?py.True:py.False;
    },
    __contains__:function(s){
        return(this._value.indexOf(s._value)!==-1)?py.True:py.False;
    },
    fromJSON:function(s){
        if(typeof s==='string'){
            var instance=py.PY_call(py.str);
            instance._value=s;
            return instance;
        }
        throw new Error("str.fromJSON can only take strings");
    },
    toJSON:function(){
        return this._value;
    }
});
py.tuple=py.type('tuple',null,{
    __init__:function(){
        this._values=[];
    },
    __contains__:function(value){
        for(var i=0,len=this._values.length;i<len;++i){
            if(py.PY_isTrue(this._values[i].__eq__(value))){
                return py.True;
            }
        }
    return py.False;
},
__getitem__:function(index){
    return this._values[index.toJSON()];
},
toJSON:function(){
    var out=[];
    for(var i=0;i<this._values.length;++i){
        out.push(this._values[i].toJSON());
    }
    return out;
},
fromJSON:function(ar){
    if(!(ar instanceof Array)){
        throw new Error("Can only create a py.tuple from an Array");
    }
    var t=py.PY_call(py.tuple);
    for(var i=0;i<ar.length;++i){
        t._values.push(PY_ensurepy(ar[i],i));
    }
    return t;
}
});
py.list=py.tuple;
py.dict=py.type('dict',null,{
    __init__:function(){
        this._store={};
    
},
__getitem__:function(key){
    var h=key.__hash__();
    if(!(h in this._store)){
        throw new Error("KeyError: '"+key.toJSON()+"'");
    }
    return this._store[h][1];
},
__setitem__:function(key,value){
    this._store[key.__hash__()]=[key,value];
},
get:function(){
    var args=py.PY_parseArgs(arguments,['k',['d',py.None]]);
    var h=args.k.__hash__();
    if(!(h in this._store)){
        return args.d;
    }
    return this._store[h][1];
},
fromJSON:function(d){
    var instance=py.PY_call(py.dict);
    for(var k in(d||{})){
        if(!d.hasOwnProperty(k)){
            continue;
        }
        instance.__setitem__(py.str.fromJSON(k),PY_ensurepy(d[k],k));
    }
    return instance;
},
toJSON:function(){
    var out={};
    
    for(var k in this._store){
        var item=this._store[k];
        out[item[0].toJSON()]=item[1].toJSON();
    }
    return out;
}
});
py.PY_def=py.type('function',null,{
    __call__:function(){
        return this._func.apply(this._inst,arguments);
    },
    fromJSON:function(nativefunc){
        var instance=py.PY_call(py.PY_def);
        instance._inst=null;
        instance._func=nativefunc;
        return instance;
    },
    toJSON:function(){
        return this._func;
    }
});
py.classmethod=py.type('classmethod',null,{
    __init__:function(){
        var args=py.PY_parseArgs(arguments,'function');
        this._func=args['function'];
    },
    __get__:function(obj,type){
        return PY_instancemethod.fromJSON(this._func,type);
    },
    fromJSON:function(func){
        return py.PY_call(py.classmethod,[func]);
    }
});
var PY_instancemethod=py.type('instancemethod',[py.PY_def],{
    fromJSON:function(nativefunc,instance){
        var inst=py.PY_call(PY_instancemethod);
        inst._inst=instance;
        inst._func=nativefunc;
        return inst;
    }
});
py.abs=new py.PY_def.fromJSON(function abs(){
    var args=py.PY_parseArgs(arguments,['number']);
    if(!args.number.__abs__){
        throw new Error("TypeError: bad operand type for abs(): '"
            +typename(args.number)
            +"'");
    }
    return args.number.__abs__();
});
py.len=new py.PY_def.fromJSON(function len(){
    var args=py.PY_parseArgs(arguments,['object']);
    return py.float.fromJSON(py.PY_size(args.object));
});
py.isinstance=new py.PY_def.fromJSON(function isinstance(){
    var args=py.PY_parseArgs(arguments,['object','class']);
    return py.PY_isInstance(args.object,args['class'])?py.True:py.False;
});
py.issubclass=new py.PY_def.fromJSON(function issubclass(){
    var args=py.PY_parseArgs(arguments,['C','B']);
    return py.PY_isSubclass(args.C,args.B)?py.True:py.False;
});
var PY_operators={
    '==':['eq','eq',function(a,b){
        return a===b;
    }],
    '!=':['ne','ne',function(a,b){
        return a!==b;
    }],
    '<>':['ne','ne',function(a,b){
        return a!==b;
    }],
    '<':['lt','gt',function(a,b){
        return a.__class__.__name__<b.__class__.__name__;
    }],
    '<=':['le','ge',function(a,b){
        return a.__class__.__name__<=b.__class__.__name__;
    }],
    '>':['gt','lt',function(a,b){
        return a.__class__.__name__>b.__class__.__name__;
    }],
    '>=':['ge','le',function(a,b){
        return a.__class__.__name__>=b.__class__.__name__;
    }],
    '+':['add','radd'],
    '-':['sub','rsub'],
    '*':['mul','rmul'],
    '/':['div','rdiv'],
    '//':['floordiv','rfloordiv'],
    '%':['mod','rmod'],
    '**':['pow','rpow'],
    '<<':['lshift','rlshift'],
    '>>':['rshift','rrshift'],
    '&':['and','rand'],
    '^':['xor','rxor'],
    '|':['or','ror']
    };
    
var PY_op=function(o1,o2,op){
    var r;
    var methods=PY_operators[op];
    var forward='__'+methods[0]+'__',reverse='__'+methods[1]+'__';
    var otherwise=methods[2];
    if(forward in o1&&(r=o1[forward](o2))!==py.NotImplemented){
        return r;
    }
    if(reverse in o2&&(r=o2[reverse](o1))!==py.NotImplemented){
        return r;
    }
    if(otherwise){
        return PY_ensurepy(otherwise(o1,o2));
    }
    throw new Error("TypeError: unsupported operand type(s) for "+op+": '"
        +typename(o1)+"' and '"+typename(o2)+"'");
};

var PY_builtins={
    type:py.type,
    None:py.None,
    True:py.True,
    False:py.False,
    NotImplemented:py.NotImplemented,
    object:py.object,
    bool:py.bool,
    float:py.float,
    str:py.str,
    unicode:py.unicode,
    tuple:py.tuple,
    list:py.list,
    dict:py.dict,
    abs:py.abs,
    len:py.len,
    isinstance:py.isinstance,
    issubclass:py.issubclass,
    classmethod:py.classmethod,
};

py.parse=function(toks){
    var index=0;
    token=toks[0];
    next=function(){
        return toks[++index];
    };
    
    return expression();
};

var evaluate_operator=function(operator,a,b){
    switch(operator){
        case'is':
            return a===b?py.True:py.False;
        case'is not':
            return a!==b?py.True:py.False;
        case'in':
            return b.__contains__(a);
        case'not in':
            return py.PY_isTrue(b.__contains__(a))?py.False:py.True;
        case'==':case'!=':case'<>':case'<':case'<=':case'>':case'>=':
            return PY_op(a,b,operator);
    }
    throw new Error('SyntaxError: unknown comparator [['+operator+']]');
};

py.evaluate=function(expr,context){
    context=context||{};
    
    switch(expr.id){
        case'(name)':
            var val=context[expr.value];
            if(val===undefined&&expr.value in PY_builtins){
            return PY_builtins[expr.value];
        }
        return PY_ensurepy(val,expr.value);
        case'(string)':
            return py.str.fromJSON(expr.value);
        case'(number)':
            return py.float.fromJSON(expr.value);
        case'(constant)':
            switch(expr.value){
            case'None':
                return py.None;
            case'False':
                return py.False;
            case'True':
                return py.True;
        }
        throw new Error("SyntaxError: unknown constant '"+expr.value+"'");
        case'(comparator)':
            var result,left=py.evaluate(expr.expressions[0],context);
            for(var i=0;i<expr.operators.length;++i){
            result=evaluate_operator(expr.operators[i],left,left=py.evaluate(expr.expressions[i+1],context));
            if(py.PY_not(result)){
                return py.False;
            }
        }
        return py.True;
    case'not':
        return py.PY_isTrue(py.evaluate(expr.first,context))?py.False:py.True;
    case'and':
        var and_first=py.evaluate(expr.first,context);
        if(py.PY_isTrue(and_first.__nonzero__())){
        return py.evaluate(expr.second,context);
    }
    return and_first;
    case'or':
        var or_first=py.evaluate(expr.first,context);
        if(py.PY_isTrue(or_first.__nonzero__())){
        return or_first
        }
    return py.evaluate(expr.second,context);
    case'(':
        if(expr.second){
        var callable=py.evaluate(expr.first,context);
        var args=[],kwargs={};
        
        for(var jj=0;jj<expr.second.length;++jj){
            var arg=expr.second[jj];
            if(arg.id!=='='){
                args.push(py.evaluate(arg,context));
            }else{
                kwargs[arg.first.value]=py.evaluate(arg.second,context);
            }
        }
    return py.PY_call(callable,args,kwargs);
    }
    var tuple_exprs=expr.first,tuple_values=[];
    for(var j=0,len=tuple_exprs.length;j<len;++j){
        tuple_values.push(py.evaluate(tuple_exprs[j],context));
    }
    return py.tuple.fromJSON(tuple_values);
case'[':
    if(expr.second){
    return py.PY_getItem(py.evaluate(expr.first,context),py.evaluate(expr.second,context));
}
var list_exprs=expr.first,list_values=[];
for(var k=0;k<list_exprs.length;++k){
    list_values.push(py.evaluate(list_exprs[k],context));
}
return py.list.fromJSON(list_values);
case'{':
    var dict_exprs=expr.first,dict=py.PY_call(py.dict);
    for(var l=0;l<dict_exprs.length;++l){
    py.PY_setItem(dict,py.evaluate(dict_exprs[l][0],context),py.evaluate(dict_exprs[l][1],context));
}
return dict;
case'.':
    if(expr.second.id!=='(name)'){
    throw new Error('SyntaxError: '+expr);
}
return py.PY_getAttr(py.evaluate(expr.first,context),expr.second.value);
case'~':
    return(py.evaluate(expr.first,context)).__invert__();
case'+':
    if(!expr.second){
    return py.PY_positive(py.evaluate(expr.first,context));
}
case'-':
    if(!expr.second){
    return py.PY_negative(py.evaluate(expr.first,context));
}
case'*':case'/':case'//':case'%':case'**':case'<<':case'>>':case'&':case'^':case'|':
    return PY_op(py.evaluate(expr.first,context),py.evaluate(expr.second,context),expr.id);
default:
    throw new Error('SyntaxError: Unknown node [['+expr.id+']]');
}
};

py.eval=function(str,context){
    return py.evaluate(py.parse(py.tokenize(str)),context).toJSON();
}
})(typeof exports==='undefined'?py:exports);
;
(function(){
    if(this.openerp)
        return;
    var session_counter=0;
    var openerp=this.openerp={
        instances:{},
        init:function(modules){
            if(modules===null){
                modules=[];
            }else{
                modules=_.union(['web'],modules||[]);
            }
            var new_instance={
                _openerp:openerp,
                _session_id:"instance"+session_counter++,
                _modules:modules,
                web:{},
                web_mobile:{}
        };
        
        openerp.instances[new_instance._session_id]=new_instance;
        for(var i=0;i<modules.length;i++){
            new_instance[modules[i]]={};
            
            if(openerp[modules[i]]){
                openerp[modules[i]](new_instance,new_instance[modules[i]]);
            }
        }
    return new_instance;
}
};

})();
openerp.web=function(session){
    var files=["pyeval","corelib","coresetup","dates","formats","chrome","data","views","search","list","form","list_editable","web_mobile","view_tree","data_export","data_import"];
    for(var i=0;i<files.length;i++){
        if(openerp.web[files[i]]){
            openerp.web[files[i]](session);
        }
    }
    };
;

openerp.testing={};
(function(testing){
    var dependencies={
        pyeval:[],
        corelib:['pyeval'],
        coresetup:['corelib'],
        data:['corelib','coresetup'],
        dates:[],
        formats:['coresetup','dates'],
        chrome:['corelib','coresetup'],
        views:['corelib','coresetup','data','chrome'],
        search:['views','formats'],
        list:['views','data'],
        form:['data','views','list','formats'],
        list_editable:['list','form','data'],
    };
    
    testing.dependencies=window['oe_all_dependencies']||[];
    testing.current_module=null;
    testing.templates={};
    
    testing.add_template=function(name){
        var xhr=QWeb2.Engine.prototype.get_xhr();
        xhr.open('GET',name,false);
        xhr.send(null);
        (testing.templates[testing.current_module]=testing.templates[testing.current_module]||[]).push(xhr.responseXML);
    };
    
    testing.noop=function(){};
    
    testing.mockifyRPC=function(instance,responses){
        var session=instance.session;
        session.responses=responses||{};
        
        session.rpc_function=function(url,payload){
            var fn,params;
            var needle=payload.params.model+':'+payload.params.method;
            if(url.url==='/web/dataset/call_kw'&&needle in this.responses){
                fn=this.responses[needle];
                params=[payload.params.args||[],payload.params.kwargs||{}];
            }else{
                fn=this.responses[url.url];
                params=[payload];
            }
            if(!fn){
                return $.Deferred().reject({},'failed',_.str.sprintf("Url %s not found in mock responses, with arguments %s",url.url,JSON.stringify(payload.params))).promise();
            }
            try{
                return $.when(fn.apply(null,params)).then(function(result){
                    return{
                        result:result
                    };
                
                });
        }catch(e){
            return $.Deferred().reject({},'failed',String(e));
        }
    };

};

var StackProto={
    execute:function(fn){
        var args=[].slice.call(arguments,1);
        var i=0,setups=this.setups,teardowns=this.teardowns;
        var d=$.Deferred();
        var succeeded,failed;
        var success=function(){
            succeeded=_.toArray(arguments);
            return teardown();
        };
        
        var failure=function(){
            if(!failed){
                failed=_.toArray(arguments);
            }
            return teardown();
        };
        
        var setup=function(){
            if(i<setups.length){
                var f=setups[i]||testing.noop;
                $.when(f.apply(null,args)).then(function(){
                    ++i;
                    setup();
                },failure);
            }else{
                $.when(fn.apply(null,args)).then(success,failure);
            }
        };
        
    var teardown=function(){
        if(i>0){
            var f=teardowns[--i]||testing.noop;
            $.when(f.apply(null,args)).then(teardown,failure);
        }else{
            if(failed){
                d.reject.apply(d,failed);
            }else if(succeeded){
                d.resolve.apply(d,succeeded);
            }else{
                throw new Error("Didn't succeed or fail?");
            }
        }
    };

setup();
return d;
},
push:function(setup,teardown){
    return _.extend(Object.create(StackProto),{
        setups:this.setups.concat([setup]),
        teardowns:this.teardowns.concat([teardown])
        });
},
unshift:function(setup,teardown){
    return _.extend(Object.create(StackProto),{
        setups:[setup].concat(this.setups),
        teardowns:[teardown].concat(this.teardowns)
        });
}
};

testing.Stack=function(setup,teardown){
    return _.extend(Object.create(StackProto),{
        setups:setup?[setup]:[],
        teardowns:teardown?[teardown]:[]
        });
};

var db=window['oe_db_info'];
testing.section=function(name,options,body){
    if(_.isFunction(options)){
        body=options;
        options={};
    
}
_.defaults(options,{
    setup:testing.noop,
    teardown:testing.noop
    });
QUnit.module(testing.current_module+'.'+name,{
    _oe:options
});
body(testing.case);
};

testing.case=function(name,options,callback){
    if(_.isFunction(options)){
        callback=options;
        options={};
    
}
var module=testing.current_module;
var module_index=_.indexOf(testing.dependencies,module);
var module_deps=testing.dependencies.slice(0,module_index+1||undefined);
var env=QUnit.config.currentModuleTestEnviroment;
var case_stack=testing.Stack().push(env._oe.setup,env._oe.teardown).push(options.setup,options.teardown);
var opts=_.defaults({},options,env._oe);
if(opts.rpc==='rpc'&&!db){
    QUnit.config.autostart=false;
    db={
        source:null,
        supadmin:null,
        password:null
    };
    
    var $msg=$('<form style="margin: 0 1em 1em;">').append('<h3>A test needs to clone a database</h3>').append('<h4>Please provide the source clone information</h4>').append('     Source DB: ').append('<input name="source">').append('<br>').append('   DB Password: ').append('<input name="supadmin">').append('<br>').append('Admin Password: ').append('<input name="password">').append('<br>').append('<input type="submit" value="OK"/>').submit(function(e){
        e.preventDefault();
        e.stopPropagation();
        db.source=$msg.find('input[name=source]').val();
        db.supadmin=$msg.find('input[name=supadmin]').val();
        db.password=$msg.find('input[name=password]').val();
        QUnit.start();
        $.unblockUI();
    });
    $.blockUI({
        message:$msg,
        css:{
            fontFamily:'monospace',
            textAlign:'left',
            whiteSpace:'pre-wrap',
            cursor:'default'
        }
    });
}
QUnit.test(name,function(){
    var instance;
    if(!opts.dependencies){
        instance=openerp.init(module_deps);
    }else{
        var d=opts.dependencies.slice();
        d.reverse();
        var di=0;
        while(di<d.length){
            var m=/^web\.(\w+)$/.exec(d[di]);
            if(m){
                d[di]=m[1];
            }
            d.splice.apply(d,[di+1,0].concat(_(dependencies[d[di]]).reverse()));
            ++di;
        }
        instance=openerp.init(null);
        _(d).chain().reverse().uniq().each(function(module){
            openerp.web[module](instance);
        });
    }
    if(instance.session){
        instance.session.uid=42;
    }
    if(_.isNumber(opts.asserts)){
        expect(opts.asserts);
    }
    if(opts.templates){
        for(var i=0;i<module_deps.length;++i){
            var dep=module_deps[i];
            var templates=testing.templates[dep];
            if(_.isEmpty(templates)){
                continue;
            }
            for(var j=0;j<templates.length;++j){
                instance.web.qweb.add_template(templates[j]);
            }
            }
        }
var $fixture=$('#qunit-fixture');
var mock,async=false;
switch(opts.rpc){
    case'mock':
        async=true;
        testing.mockifyRPC(instance);
        mock=function(spec,handler){
        instance.session.responses[spec]=handler;
    };
    
    break;
    case'rpc':
        async=true;
        (function(){
        var dbname='test_'+Math.random().toString(36).slice(2);
        case_stack=case_stack.unshift(function(instance){
            instance.session.session_init=testing.noop;
            instance.session.load_modules=testing.noop;
            instance.session.session_bind();
            return instance.session.rpc('/web/database/duplicate',{
                fields:[{
                    name:'super_admin_pwd',
                    value:db.supadmin
                    },{
                    name:'db_original_name',
                    value:db.source
                    },{
                    name:'db_name',
                    value:dbname
                }]
                }).then(function(result){
                if(result.error){
                    return $.Deferred().reject(result.error).promise();
                }
                return instance.session.session_authenticate(dbname,'admin',db.password,true);
            });
        },function(instance){
            return instance.session.rpc('/web/database/drop',{
                fields:[{
                    name:'drop_pwd',
                    value:db.supadmin
                    },{
                    name:'drop_db',
                    value:dbname
                }]
                }).then(function(result){
                if(result.error){
                    return $.Deferred().reject(result.error).promise();
                }
                return result;
            });
        });
    })();
}
stop();
var timeout;
case_stack.execute(function(){
    var result=callback.apply(null,arguments);
    if(!(result&&_.isFunction(result.then))){
        if(async){
            ok(false,"asynchronous test cases must return a promise");
        }
    }else{
    if(!_.isNumber(opts.asserts)){
        ok(false,"asynchronous test cases must specify the "
            +"number of assertions they expect");
    }
}
return $.Deferred(function(d){
    $.when(result).then(function(){
        d.resolve.apply(d,arguments)
        },function(){
        d.reject.apply(d,arguments);
    });
    if(async||(result&&result.then)){
        timeout=setTimeout(function(){
            QUnit.config.semaphore=1;
            d.reject({
                message:"Test timed out"
            });
        },2000);
    }
});
},instance,$fixture,mock).always(function(){
    if(timeout){
        clearTimeout(timeout);
    }
    start();
}).fail(function(error){
    if(options.fail_on_rejection===false){
        return;
    }
    var message;
    if(typeof error!=='object'||typeof error.message!=='string'){
        message=JSON.stringify([].slice.apply(arguments));
    }else{
        message=error.message;
        if(error.data&&error.data.debug){
            message+='\n\n'+error.data.debug;
        }
    }
ok(false,message);
});
});
};

})(openerp.testing);
;
openerp.web.pyeval=function(instance){
    instance.web.pyeval={};
    
    var obj=function(){};
    
    obj.prototype=py.object;
    var asJS=function(arg){
        if(arg instanceof obj){
            return arg.toJSON();
        }
        return arg;
    };
    
    var datetime=py.PY_call(py.object);
    var divmod=function(a,b,fn){
        var mod=a%b;
        if(mod>0&&b<0||mod<0&&b>0){
            mod+=b;
        }
        return fn(Math.floor(a/b),mod);
    };
    
    var modf=function(x,fn){
        var mod=x%1;
        if(mod<0){
            mod+=1;
        }
        return fn(mod,Math.floor(x));
    };
    
    var zero=py.float.fromJSON(0);
    var DAYS_IN_MONTH=[null,31,28,31,30,31,30,31,31,30,31,30,31];
    var DAYS_BEFORE_MONTH=[null];
    var dbm=0;
    for(var i=1;i<DAYS_IN_MONTH.length;++i){
        DAYS_BEFORE_MONTH.push(dbm);
        dbm+=DAYS_IN_MONTH[i];
    }
    var is_leap=function(year){
        return year%4===0&&(year%100!==0||year%400===0);
    };
    
    var days_before_year=function(year){
        var y=year-1;
        return y*365+Math.floor(y/4)-Math.floor(y/100)+Math.floor(y/400);
    };
    
    var days_in_month=function(year,month){
        if(month===2&&is_leap(year)){
            return 29;
        }
        return DAYS_IN_MONTH[month];
    };
    
    var days_before_month=function(year,month){
        var post_leap_feb=month>2&&is_leap(year);
        return DAYS_BEFORE_MONTH[month]
        +(post_leap_feb?1:0);
    };
    
    var ymd2ord=function(year,month,day){
        var dim=days_in_month(year,month);
        if(!(1<=day&&day<=dim)){
            throw new Error("ValueError: day must be in 1.."+dim);
        }
        return days_before_year(year)
        +days_before_month(year,month)
        +day;
    };
    
    var DI400Y=days_before_year(401);
    var DI100Y=days_before_year(101);
    var DI4Y=days_before_year(5);
    var assert=function(bool){
        if(!bool){
            throw new Error("AssertionError");
        }
    };
    
var ord2ymd=function(n){
    --n;
    var n400,n100,n4,n1,n0;
    divmod(n,DI400Y,function(_n400,n){
        n400=_n400;
        divmod(n,DI100Y,function(_n100,n){
            n100=_n100;
            divmod(n,DI4Y,function(_n4,n){
                n4=_n4;
                divmod(n,365,function(_n1,n){
                    n1=_n1;
                    n0=n;
                })
                });
        });
    });
    n=n0;
    var year=n400*400+1+n100*100+n4*4+n1;
    if(n1==4||n100==100){
        assert(n0===0);
        return{
            year:year-1,
            month:12,
            day:31
        };
    
}
var leapyear=n1===3&&(n4!==24||n100==3);
    assert(leapyear==is_leap(year));
    var month=(n+50)>>5;
    var preceding=DAYS_BEFORE_MONTH[month]+((month>2&&leapyear)?1:0);
    if(preceding>n){
    --month;
    preceding-=DAYS_IN_MONTH[month]+((month===2&&leapyear)?1:0);
}
n-=preceding;
return{
    year:year,
    month:month,
    day:n+1
    };

};

var tmxxx=function(year,month,day,hour,minute,second,microsecond){
    hour=hour||0;
    minute=minute||0;
    second=second||0;
    microsecond=microsecond||0;
    if(microsecond<0||microsecond>999999){
        divmod(microsecond,1000000,function(carry,ms){
            microsecond=ms;
            second+=carry
            });
    }
    if(second<0||second>59){
        divmod(second,60,function(carry,s){
            second=s;
            minute+=carry;
        });
    }
    if(minute<0||minute>59){
        divmod(minute,60,function(carry,m){
            minute=m;
            hour+=carry;
        })
        }
    if(hour<0||hour>23){
        divmod(hour,24,function(carry,h){
            hour=h;
            day+=carry;
        })
        }
    if(month<1||month>12){
        divmod(month-1,12,function(carry,m){
            month=m+1;
            year+=carry;
        })
        }
    var dim=days_in_month(year,month);
    if(day<1||day>dim){
        if(day===0){
            --month;
            if(month>0){
                day=days_in_month(year,month);
            }else{
                --year;
                month=12;
                day=31;
            }
        }else if(day==dim+1){
        ++month;
        day=1;
        if(month>12){
            month=1;
            ++year;
        }
    }else{
    var r=ord2ymd(ymd2ord(year,month,1)+(day-1));
    year=r.year;
    month=r.month;
    day=r.day;
}
}
return{
    year:year,
    month:month,
    day:day,
    hour:hour,
    minute:minute,
    second:second,
    microsecond:microsecond
};

};

datetime.timedelta=py.type('timedelta',null,{
    __init__:function(){
        var args=py.PY_parseArgs(arguments,[['days',zero],['seconds',zero],['microseconds',zero],['milliseconds',zero],['minutes',zero],['hours',zero],['weeks',zero]]);
        var d=0,s=0,m=0;
        var days=args.days.toJSON()+args.weeks.toJSON()*7;
        var seconds=args.seconds.toJSON()
        +args.minutes.toJSON()*60
        +args.hours.toJSON()*3600;
        var microseconds=args.microseconds.toJSON()
        +args.milliseconds.toJSON()*1000;
        var daysecondsfrac=modf(days,function(dayfrac,days){
            d=days;
            if(dayfrac){
                return modf(dayfrac*24*3600,function(dsf,dsw){
                    s=dsw;
                    return dsf;
                });
            }
            return 0;
        });
        var secondsfrac=modf(seconds,function(sf,s){
            seconds=s;
            return sf+daysecondsfrac;
        });
        divmod(seconds,24*3600,function(days,seconds){
            d+=days;
            s+=seconds
            });
        microseconds+=secondsfrac*1e6;
        divmod(microseconds,1000000,function(seconds,microseconds){
            divmod(seconds,24*3600,function(days,seconds){
                d+=days;
                s+=seconds;
                m+=Math.round(microseconds);
            });
        });
        this.days=d;
        this.seconds=s;
        this.microseconds=m;
    },
    __str__:function(){
        var hh,mm,ss;
        divmod(this.seconds,60,function(m,s){
            divmod(m,60,function(h,m){
                hh=h;
                mm=m;
                ss=s;
            });
        });
        var s=_.str.sprintf("%d:%02d:%02d",hh,mm,ss);
        if(this.days){
            s=_.str.sprintf("%d day%s, %s",this.days,(this.days!=1&&this.days!=-1)?'s':'',s);
        }
        if(this.microseconds){
            s=_.str.sprintf("%s.%06d",s,this.microseconds);
        }
        return py.str.fromJSON(s);
    },
    __eq__:function(other){
        if(!py.PY_isInstance(other,datetime.timedelta)){
            return py.False;
        }
        return(this.days===other.days&&this.seconds===other.seconds&&this.microseconds===other.microseconds)?py.True:py.False;
    },
    __add__:function(other){
        if(!py.PY_isInstance(other,datetime.timedelta)){
            return py.NotImplemented;
        }
        return py.PY_call(datetime.timedelta,[py.float.fromJSON(this.days+other.days),py.float.fromJSON(this.seconds+other.seconds),py.float.fromJSON(this.microseconds+other.microseconds)]);
    },
    __radd__:function(other){
        return this.__add__(other);
    },
    __sub__:function(other){
        if(!py.PY_isInstance(other,datetime.timedelta)){
            return py.NotImplemented;
        }
        return py.PY_call(datetime.timedelta,[py.float.fromJSON(this.days-other.days),py.float.fromJSON(this.seconds-other.seconds),py.float.fromJSON(this.microseconds-other.microseconds)]);
    },
    __rsub__:function(other){
        if(!py.PY_isInstance(other,datetime.timedelta)){
            return py.NotImplemented;
        }
        return this.__neg__().__add__(other);
    },
    __neg__:function(){
        return py.PY_call(datetime.timedelta,[py.float.fromJSON(-this.days),py.float.fromJSON(-this.seconds),py.float.fromJSON(-this.microseconds)]);
    },
    __pos__:function(){
        return this;
    },
    __mul__:function(other){
        if(!py.PY_isInstance(other,py.float)){
            return py.NotImplemented;
        }
        var n=other.toJSON();
        return py.PY_call(datetime.timedelta,[py.float.fromJSON(this.days*n),py.float.fromJSON(this.seconds*n),py.float.fromJSON(this.microseconds*n)]);
    },
    __rmul__:function(other){
        return this.__mul__(other);
    },
    __div__:function(other){
        if(!py.PY_isInstance(other,py.float)){
            return py.NotImplemented;
        }
        var usec=((this.days*24*3600)+this.seconds)*1000000
        +this.microseconds;
        return py.PY_call(datetime.timedelta,[zero,zero,py.float.fromJSON(usec/other.toJSON())]);
    },
    __floordiv__:function(other){
        return this.__div__(other);
    },
    total_seconds:function(){
        return py.float.fromJSON(this.days*86400
            +this.seconds
            +this.microseconds/1000000)
        },
    __nonzero__:function(){
        return(!!this.days||!!this.seconds||!!this.microseconds)?py.True:py.False;
    }
});
datetime.datetime=py.type('datetime',null,{
    __init__:function(){
        var zero=py.float.fromJSON(0);
        var args=py.PY_parseArgs(arguments,['year','month','day',['hour',zero],['minute',zero],['second',zero],['microsecond',zero],['tzinfo',py.None]]);
        for(var key in args){
            if(!args.hasOwnProperty(key)){
                continue;
            }
            this[key]=asJS(args[key]);
        }
        },
strftime:function(){
    var self=this;
    var args=py.PY_parseArgs(arguments,'format');
    return py.str.fromJSON(args.format.toJSON().replace(/%([A-Za-z])/g,function(m,c){
        switch(c){
            case'Y':
                return self.year;
            case'm':
                return _.str.sprintf('%02d',self.month);
            case'd':
                return _.str.sprintf('%02d',self.day);
            case'H':
                return _.str.sprintf('%02d',self.hour);
            case'M':
                return _.str.sprintf('%02d',self.minute);
            case'S':
                return _.str.sprintf('%02d',self.second);
        }
        throw new Error('ValueError: No known conversion for '+m);
    }));
},
now:py.classmethod.fromJSON(function(){
    var d=new Date();
    return py.PY_call(datetime.datetime,[d.getUTCFullYear(),d.getUTCMonth()+1,d.getUTCDate(),d.getUTCHours(),d.getUTCMinutes(),d.getUTCSeconds(),d.getUTCMilliseconds()*1000]);
}),
combine:py.classmethod.fromJSON(function(){
    var args=py.PY_parseArgs(arguments,'date time');
    return py.PY_call(datetime.datetime,[py.PY_getAttr(args.date,'year'),py.PY_getAttr(args.date,'month'),py.PY_getAttr(args.date,'day'),py.PY_getAttr(args.time,'hour'),py.PY_getAttr(args.time,'minute'),py.PY_getAttr(args.time,'second')]);
})
});
datetime.date=py.type('date',null,{
    __init__:function(){
        var args=py.PY_parseArgs(arguments,'year month day');
        this.year=asJS(args.year);
        this.month=asJS(args.month);
        this.day=asJS(args.day);
    },
    strftime:function(){
        var self=this;
        var args=py.PY_parseArgs(arguments,'format');
        return py.str.fromJSON(args.format.toJSON().replace(/%([A-Za-z])/g,function(m,c){
            switch(c){
                case'Y':
                    return self.year;
                case'm':
                    return _.str.sprintf('%02d',self.month);
                case'd':
                    return _.str.sprintf('%02d',self.day);
            }
            throw new Error('ValueError: No known conversion for '+m);
        }));
    },
    __eq__:function(other){
        return(this.year===other.year&&this.month===other.month&&this.day===other.day)?py.True:py.False;
    },
    __add__:function(other){
        if(!py.PY_isInstance(other,datetime.timedelta)){
            return py.NotImplemented;
        }
        var s=tmxxx(this.year,this.month,this.day+other.days);
        return datetime.date.fromJSON(s.year,s.month,s.day);
    },
    __radd__:function(other){
        return this.__add__(other);
    },
    __sub__:function(other){
        if(py.PY_isInstance(other,datetime.timedelta)){
            return this.__add__(other.__neg__());
        }
        if(py.PY_isInstance(other,datetime.date)){
            return py.PY_call(datetime.timedelta,[py.PY_subtract(py.PY_call(py.PY_getAttr(this,'toordinal')),py.PY_call(py.PY_getAttr(other,'toordinal')))]);
        }
        return py.NotImplemented;
    },
    toordinal:function(){
        return py.float.fromJSON(ymd2ord(this.year,this.month,this.day));
    },
    fromJSON:function(year,month,day){
        return py.PY_call(datetime.date,[year,month,day])
        }
    });
var context_today=function(){
    var d=new Date();
    return py.PY_call(datetime.date,[d.getFullYear(),d.getMonth()+1,d.getDate()]);
};

datetime.time=py.type('time',null,{
    __init__:function(){
        var zero=py.float.fromJSON(0);
        var args=py.PY_parseArgs(arguments,[['hour',zero],['minute',zero],['second',zero],['microsecond',zero],['tzinfo',py.None]]);
        for(var k in args){
            if(!args.hasOwnProperty(k)){
                continue;
            }
            this[k]=asJS(args[k]);
        }
        }
        });
var time=py.PY_call(py.object);
time.strftime=py.PY_def.fromJSON(function(){
    var args=py.PY_parseArgs(arguments,'format');
    var dt_class=py.PY_getAttr(datetime,'datetime');
    var d=py.PY_call(py.PY_getAttr(dt_class,'now'));
    return py.PY_call(py.PY_getAttr(d,'strftime'),[args.format]);
});
var relativedelta=py.type('relativedelta',null,{
    __init__:function(){
        this.ops=py.PY_parseArgs(arguments,'* year month day hour minute second microsecond '
            +'years months weeks days hours minutes secondes microseconds '
            +'weekday leakdays yearday nlyearday');
    },
    __add__:function(other){
        if(!py.PY_isInstance(other,datetime.date)){
            return py.NotImplemented;
        }
        var year=asJS(this.ops.year)||asJS(other.year);
        if(asJS(this.ops.years)){
            year+=asJS(this.ops.years);
        }
        var month=asJS(this.ops.month)||asJS(other.month);
        if(asJS(this.ops.months)){
            month+=asJS(this.ops.months);
            while(month<1){
                year-=1;
                month+=12;
            }
            while(month>12){
                year+=1;
                month-=12;
            }
        }
    var lastMonthDay=new Date(year,month,0).getDate();
    var day=asJS(this.ops.day)||asJS(other.day);
    if(day>lastMonthDay){
        day=lastMonthDay;
    }
    var days_offset=((asJS(this.ops.weeks)||0)*7)+(asJS(this.ops.days)||0);
    if(days_offset){
        day=new Date(year,month-1,day+days_offset).getDate();
    }
    return py.PY_call(datetime.date,[py.float.fromJSON(year),py.float.fromJSON(month),py.float.fromJSON(day)]);
},
__radd__:function(other){
    return this.__add__(other);
},
__sub__:function(other){
    if(!py.PY_isInstance(other,datetime.date)){
        return py.NotImplemented;
    }
    var year=asJS(this.ops.year)||asJS(other.year);
    if(asJS(this.ops.years)){
        year-=asJS(this.ops.years);
    }
    var month=asJS(this.ops.month)||asJS(other.month);
    if(asJS(this.ops.months)){
        month-=asJS(this.ops.months);
        while(month<1){
            year-=1;
            month+=12;
        }
        while(month>12){
            year+=1;
            month-=12;
        }
    }
var lastMonthDay=new Date(year,month,0).getDate();
    var day=asJS(this.ops.day)||asJS(other.day);
    if(day>lastMonthDay){
    day=lastMonthDay;
}
var days_offset=((asJS(this.ops.weeks)||0)*7)+(asJS(this.ops.days)||0);
    if(days_offset){
    day=new Date(year,month-1,day-days_offset).getDate();
}
return py.PY_call(datetime.date,[py.float.fromJSON(year),py.float.fromJSON(month),py.float.fromJSON(day)]);
},
__rsub__:function(other){
    return this.__sub__(other);
}
});
var eval_contexts=function(contexts,evaluation_context){
    evaluation_context=evaluation_context||{};
    
    return _(contexts).reduce(function(result_context,ctx){
        if(_.isEmpty(ctx)){
            return result_context;
        }
        if(_.isString(ctx)){
            ctx={
                __ref:'context',
                __debug:ctx
            };
        
    }
    var evaluated=ctx;
    switch(ctx.__ref){
        case'context':
            evaluation_context.context=py.dict.fromJSON(evaluation_context);
            evaluated=py.eval(ctx.__debug,evaluation_context);
            break;
        case'compound_context':
            var eval_context=eval_contexts([ctx.__eval_context]);
            evaluated=eval_contexts(ctx.__contexts,_.extend({},evaluation_context,eval_context));
            break;
    }
    _.extend(evaluation_context,evaluated);
        return _.extend(result_context,evaluated);
    },_.extend({},instance.session.user_context));
};

var eval_domains=function(domains,evaluation_context){
    var result_domain=[];
    _(domains).each(function(domain){
        if(_.isString(domain)){
            domain={
                __ref:'domain',
                __debug:domain
            };
        
    }
    switch(domain.__ref){
        case'domain':
            evaluation_context.context=py.dict.fromJSON(evaluation_context);
            result_domain.push.apply(result_domain,py.eval(domain.__debug,evaluation_context));
            break;
        case'compound_domain':
            var eval_context=eval_contexts([domain.__eval_context]);
            result_domain.push.apply(result_domain,eval_domains(domain.__domains,_.extend({},evaluation_context,eval_context)));
            break;
        default:
            result_domain.push.apply(result_domain,domain);
    }
    });
return result_domain;
};

var eval_groupbys=function(contexts,evaluation_context){
    var result_group=[];
    _(contexts).each(function(ctx){
        if(_.isString(ctx)){
            ctx={
                __ref:'context',
                __debug:ctx
            };
        
    }
    var group;
    var evaluated=ctx;
    switch(ctx.__ref){
        case'context':
            evaluation_context.context=py.dict.fromJSON(evaluation_context);
            evaluated=py.eval(ctx.__debug,evaluation_context);
            break;
        case'compound_context':
            var eval_context=eval_contexts([ctx.__eval_context]);
            evaluated=eval_contexts(ctx.__contexts,_.extend({},evaluation_context,eval_context));
            break;
    }
    group=evaluated.group_by;
    if(!group){
        return;
    }
    if(typeof group==='string'){
        result_group.push(group);
    }else if(group instanceof Array){
        result_group.push.apply(result_group,group);
    }else{
        throw new Error('Got invalid groupby {{'
            +JSON.stringify(group)+'}}');
    }
    _.extend(evaluation_context,evaluated);
    });
return result_group;
};

instance.web.pyeval.context=function(){
    return _.extend({
        datetime:datetime,
        context_today:context_today,
        time:time,
        relativedelta:relativedelta,
        current_date:py.PY_call(time.strftime,[py.str.fromJSON('%Y-%m-%d')]),
    },instance.session.user_context);
};

instance.web.pyeval.eval=function(type,object,context){
    context=_.extend(instance.web.pyeval.context(),context||{});
    context['context']=py.dict.fromJSON(context);
    switch(type){
        case'context':
            object=[object];
        case'contexts':
            return eval_contexts(object,context);
        case'domain':
            object=[object];
        case'domains':
            return eval_domains(object,context);
        case'groupbys':
            return eval_groupbys(object,context);
    }
    throw new Error("Unknow evaluation type "+type)
    };
    
var eval_arg=function(arg){
    if(typeof arg!=='object'||!arg.__ref){
        return arg;
    }
    switch(arg.__ref){
        case'domain':case'compound_domain':
            return instance.web.pyeval.eval('domains',[arg]);
        case'context':case'compound_context':
            return instance.web.pyeval.eval('contexts',[arg]);
        default:
            throw new Error(instance.web._t("Unknown nonliteral type "+arg.__ref));
    }
};

instance.web.pyeval.ensure_evaluated=function(args,kwargs){
    for(var i=0;i<args.length;++i){
        args[i]=eval_arg(args[i]);
    }
    for(var k in kwargs){
        if(!kwargs.hasOwnProperty(k)){
            continue;
        }
        kwargs[k]=eval_arg(kwargs[k]);
    }
    };
    
instance.web.pyeval.eval_domains_and_contexts=function(source){
    return new $.Deferred(function(d){
        setTimeout(function(){
            try{
                var contexts=([instance.session.user_context]||[]).concat(source.contexts);
                d.resolve({
                    context:instance.web.pyeval.eval('contexts',contexts),
                    domain:instance.web.pyeval.eval('domains',source.domains),
                    group_by:instance.web.pyeval.eval('groupbys',source.group_by_seq||[])
                    });
            }catch(e){
                d.resolve({
                    error:{
                        code:400,
                        message:instance.web._t("Evaluation Error"),
                        data:{
                            type:'local_exception',
                            debug:_.str.sprintf(instance.web._t("Local evaluation failure\n%s\n\n%s"),e.message,JSON.stringify(source))
                            }
                        }
                });
        }
    },0);
});
}
};
;

openerp.web.corelib=function(instance){
    (function(){
        var initializing=false,fnTest=/xyz/.test(function(){
            xyz;
        })?/\b_super\b/:/.*/;
        instance.web.Class=function(){};
        
        instance.web.Class.extend=function(){
            var _super=this.prototype;
            var args=_.toArray(arguments);
            args.unshift({});
            var prop=_.extend.apply(_,args);
            initializing=true;
            var prototype=new this();
            initializing=false;
            for(var name in prop){
                prototype[name]=typeof prop[name]=="function"&&fnTest.test(prop[name])?(function(name,fn){
                    return function(){
                        var tmp=this._super;
                        this._super=_super[name];
                        var ret=fn.apply(this,arguments);
                        this._super=tmp;
                        return ret;
                    };
                
                })(name,prop[name]):prop[name];
                }
        function Class(){
            if(this.constructor!==instance.web.Class){
                throw new Error("You can only instanciate objects with the 'new' operator");
                return null;
            }
            if(!initializing&&this.init){
                var ret=this.init.apply(this,arguments);
                if(ret){
                    return ret;
                }
            }
        return this;
    }
    Class.include=function(properties){
        for(var name in properties){
            if(typeof properties[name]!=='function'||!fnTest.test(properties[name])){
                prototype[name]=properties[name];
            }else if(typeof prototype[name]==='function'&&prototype.hasOwnProperty(name)){
                prototype[name]=(function(name,fn,previous){
                    return function(){
                        var tmp=this._super;
                        this._super=previous;
                        var ret=fn.apply(this,arguments);
                        this._super=tmp;
                        return ret;
                    }
                })(name,properties[name],prototype[name]);
        }else if(typeof _super[name]==='function'){
            prototype[name]=(function(name,fn){
                return function(){
                    var tmp=this._super;
                    this._super=_super[name];
                    var ret=fn.apply(this,arguments);
                    this._super=tmp;
                    return ret;
                }
            })(name,properties[name]);
            }
        }
    };
    
Class.prototype=prototype;
Class.constructor=Class;
Class.extend=arguments.callee;
return Class;
};

})();
instance.web.ParentedMixin={
    __parentedMixin:true,
    init:function(){
        this.__parentedDestroyed=false;
        this.__parentedChildren=[];
        this.__parentedParent=null;
    },
    setParent:function(parent){
        if(this.getParent()){
            if(this.getParent().__parentedMixin){
                this.getParent().__parentedChildren=_.without(this.getParent().getChildren(),this);
            }
        }
    this.__parentedParent=parent;
    if(parent&&parent.__parentedMixin){
        parent.__parentedChildren.push(this);
    }
},
getParent:function(){
    return this.__parentedParent;
},
getChildren:function(){
    return _.clone(this.__parentedChildren);
},
isDestroyed:function(){
    return this.__parentedDestroyed;
},
alive:function(promise,reject){
    var def=$.Deferred();
    var self=this;
    promise.done(function(){
        if(!self.isDestroyed()){
            if(!reject)
                def.resolve.apply(def,arguments);else
                def.reject();
        }
    }).fail(function(){
    if(!self.isDestroyed()){
        if(!reject)
            def.reject.apply(def,arguments);else
            def.reject();
    }
});
return def.promise();
},
destroy:function(){
    _.each(this.getChildren(),function(el){
        el.destroy();
    });
    this.setParent(undefined);
    this.__parentedDestroyed=true;
}
};

var Events=instance.web.Class.extend({
    on:function(events,callback,context){
        var ev;
        events=events.split(/\s+/);
        var calls=this._callbacks||(this._callbacks={});
        while(ev=events.shift()){
            var list=calls[ev]||(calls[ev]={});
            var tail=list.tail||(list.tail=list.next={});
            tail.callback=callback;
            tail.context=context;
            list.tail=tail.next={};
        
    }
    return this;
},
off:function(events,callback,context){
    var ev,calls,node;
    if(!events){
        delete this._callbacks;
    }else if(calls=this._callbacks){
        events=events.split(/\s+/);
        while(ev=events.shift()){
            node=calls[ev];
            delete calls[ev];
            if(!callback||!node)
                continue;
            while((node=node.next)&&node.next){
                if(node.callback===callback&&(!context||node.context===context))
                    continue;
                this.on(ev,node.callback,node.context);
            }
        }
    }
return this;
},
callbackList:function(){
    var lst=[];
    _.each(this._callbacks||{},function(el,eventName){
        var node=el;
        while((node=node.next)&&node.next){
            lst.push([eventName,node.callback,node.context]);
        }
    });
return lst;
},
trigger:function(events){
    var event,node,calls,tail,args,all,rest;
    if(!(calls=this._callbacks))
        return this;
    all=calls['all'];
    (events=events.split(/\s+/)).push(null);
    while(event=events.shift()){
        if(all)
            events.push({
                next:all.next,
                tail:all.tail,
                event:event
            });
        if(!(node=calls[event]))
            continue;
        events.push({
            next:node.next,
            tail:node.tail
            });
    }
    rest=Array.prototype.slice.call(arguments,1);
    while(node=events.pop()){
        tail=node.tail;
        args=node.event?[node.event].concat(rest):rest;
        while((node=node.next)!==tail){
            node.callback.apply(node.context||this,args);
        }
    }
return this;
}
});
instance.web.EventDispatcherMixin=_.extend({},instance.web.ParentedMixin,{
    __eventDispatcherMixin:true,
    init:function(){
        instance.web.ParentedMixin.init.call(this);
        this.__edispatcherEvents=new Events();
        this.__edispatcherRegisteredEvents=[];
    },
    on:function(events,dest,func){
        var self=this;
        if(!(func instanceof Function)){
            throw new Error("Event handler must be a function.");
        }
        events=events.split(/\s+/);
        _.each(events,function(eventName){
            self.__edispatcherEvents.on(eventName,func,dest);
            if(dest&&dest.__eventDispatcherMixin){
                dest.__edispatcherRegisteredEvents.push({
                    name:eventName,
                    func:func,
                    source:self
                });
            }
        });
    return this;
},
off:function(events,dest,func){
    var self=this;
    events=events.split(/\s+/);
    _.each(events,function(eventName){
        self.__edispatcherEvents.off(eventName,func,dest);
        if(dest&&dest.__eventDispatcherMixin){
            dest.__edispatcherRegisteredEvents=_.filter(dest.__edispatcherRegisteredEvents,function(el){
                return!(el.name===eventName&&el.func===func&&el.source===self);
            });
        }
    });
return this;
},
trigger:function(events){
    this.__edispatcherEvents.trigger.apply(this.__edispatcherEvents,arguments);
    return this;
},
destroy:function(){
    var self=this;
    _.each(this.__edispatcherRegisteredEvents,function(event){
        event.source.__edispatcherEvents.off(event.name,event.func,self);
    });
    this.__edispatcherRegisteredEvents=[];
    _.each(this.__edispatcherEvents.callbackList(),function(cal){
        this.off(cal[0],cal[2],cal[1]);
    },this);
    this.__edispatcherEvents.off();
    instance.web.ParentedMixin.destroy.call(this);
}
});
instance.web.PropertiesMixin=_.extend({},instance.web.EventDispatcherMixin,{
    init:function(){
        instance.web.EventDispatcherMixin.init.call(this);
        this.__getterSetterInternalMap={};
    
},
set:function(arg1,arg2,arg3){
    var map;
    var options;
    if(typeof arg1==="string"){
        map={};
        
        map[arg1]=arg2;
        options=arg3||{};
    
}else{
    map=arg1;
    options=arg2||{};

}
var self=this;
var changed=false;
_.each(map,function(val,key){
    var tmp=self.__getterSetterInternalMap[key];
    if(tmp===val)
        return;
    changed=true;
    self.__getterSetterInternalMap[key]=val;
    if(!options.silent)
        self.trigger("change:"+key,self,{
            oldValue:tmp,
            newValue:val
        });
});
if(changed)
    self.trigger("change",self);
},
get:function(key){
    return this.__getterSetterInternalMap[key];
}
});
instance.web.Controller=instance.web.Class.extend(instance.web.PropertiesMixin,{
    init:function(parent){
        instance.web.PropertiesMixin.init.call(this);
        this.setParent(parent);
    },
    proxy:function(method){
        var self=this;
        return function(){
            var fn=(typeof method==='string')?self[method]:method;
            return fn.apply(self,arguments);
        }
    },
do_action:function(){
    var parent=this.getParent();
    if(parent){
        return parent.do_action.apply(parent,arguments);
    }
    return false;
},
do_notify:function(){
    if(this.getParent()){
        return this.getParent().do_notify.apply(this,arguments);
    }
    return false;
},
do_warn:function(){
    if(this.getParent()){
        return this.getParent().do_warn.apply(this,arguments);
    }
    return false;
},
rpc:function(url,data,options){
    return this.alive(instance.session.rpc(url,data,options));
}
});
instance.web.Widget=instance.web.Controller.extend({
    tagName:'div',
    id:null,
    className:null,
    attributes:{},
    events:{},
    template:null,
    init:function(parent){
        this._super(parent);
        for(var name in this){
            if(typeof(this[name])=="function"){
                if((/^on_|^do_/).test(name)){
                    this[name]=this[name].bind(this);
                }
            }
        }
this.setElement(this._make_descriptive());
    this.session=instance.session;
},
destroy:function(){
    _.each(this.getChildren(),function(el){
        el.destroy();
    });
    if(this.$el){
        this.$el.remove();
    }
    instance.web.PropertiesMixin.destroy.call(this);
},
appendTo:function(target){
    var self=this;
    return this.__widgetRenderAndInsert(function(t){
        self.$el.appendTo(t);
    },target);
},
prependTo:function(target){
    var self=this;
    return this.__widgetRenderAndInsert(function(t){
        self.$el.prependTo(t);
    },target);
},
insertAfter:function(target){
    var self=this;
    return this.__widgetRenderAndInsert(function(t){
        self.$el.insertAfter(t);
    },target);
},
insertBefore:function(target){
    var self=this;
    return this.__widgetRenderAndInsert(function(t){
        self.$el.insertBefore(t);
    },target);
},
replace:function(target){
    return this.__widgetRenderAndInsert(_.bind(function(t){
        this.$el.replaceAll(t);
    },this),target);
},
__widgetRenderAndInsert:function(insertion,target){
    this.renderElement();
    insertion(target);
    return this.start();
},
renderElement:function(){},
start:function(){
    return $.when();
},
renderElement:function(){
    var $el;
    if(this.template){
        $el=$(_.str.trim(instance.web.qweb.render(this.template,{
            widget:this
        })));
    }else{
        $el=this._make_descriptive();
    }
    this.replaceElement($el);
},
replaceElement:function($el){
    var $oldel=this.$el;
    this.setElement($el);
    if($oldel&&!$oldel.is(this.$el)){
        $oldel.replaceWith(this.$el);
    }
    return this;
},
setElement:function(element){
    if(this.$el){
        this.undelegateEvents();
    }
    this.$el=(element instanceof $)?element:$(element);
    this.el=this.$el[0];
    this.delegateEvents();
    return this;
},
make:function(tagName,attributes,content){
    var el=document.createElement(tagName);
    if(!_.isEmpty(attributes)){
        $(el).attr(attributes);
    }
    if(content){
        $(el).html(content);
    }
    return el;
},
_make_descriptive:function(){
    var attrs=_.extend({},this.attributes||{});
    if(this.id){
        attrs.id=this.id;
    }
    if(this.className){
        attrs['class']=this.className;
    }
    return $(this.make(this.tagName,attrs));
},
delegateEvents:function(){
    var events=this.events;
    if(_.isEmpty(events)){
        return;
    }
    for(var key in events){
        if(!events.hasOwnProperty(key)){
            continue;
        }
        var method=this.proxy(events[key]);
        var match=/^(\S+)(\s+(.*))?$/.exec(key);
        var event=match[1];
        var selector=match[3];
        event+='.widget_events';
        if(!selector){
            this.$el.on(event,method);
        }else{
            this.$el.on(event,selector,method);
        }
    }
    },
undelegateEvents:function(){
    this.$el.off('.widget_events');
},
$:function(selector){
    return this.$el.find(selector);
}
});
instance.web.Registry=instance.web.Class.extend({
    init:function(mapping){
        this.parent=null;
        this.map=mapping||{};
    
},
get_object:function(key,silent_error){
    var path_string=this.map[key];
    if(path_string===undefined){
        if(this.parent){
            return this.parent.get_object(key,silent_error);
        }
        if(silent_error){
            return void'nooo';
        }
        return null;
    }
    var object_match=instance;
    var path=path_string.split('.');
    for(var i=1;i<path.length;++i){
        object_match=object_match[path[i]];
        if(object_match===undefined){
            if(silent_error){
                return void'noooooo';
            }
            return null;
        }
    }
return object_match;
},
contains:function(key){
    if(key===undefined){
        return false;
    }
    if(key in this.map){
        return true
        }
    if(this.parent){
        return this.parent.contains(key);
    }
    return false;
},
get_any:function(keys){
    for(var i=0;i<keys.length;++i){
        var key=keys[i];
        if(!this.contains(key)){
            continue;
        }
        return this.get_object(key);
    }
    return null;
},
add:function(key,object_path){
    this.map[key]=object_path;
    return this;
},
extend:function(mapping){
    var child=new instance.web.Registry(mapping);
    child.parent=this;
    return child;
},
clone:function(mapping){
    console.warn('Registry#clone is deprecated, use Registry#extend');
    return this.extend(mapping);
}
});
instance.web.JsonRPC=instance.web.Class.extend(instance.web.PropertiesMixin,{
    triggers:{
        'request':'Request sent',
        'response':'Response received',
        'response_failed':'HTTP Error response or timeout received',
        'error':'The received response is an JSON-RPC error',
    },
    init:function(){
        instance.web.PropertiesMixin.init.call(this);
        this.server=null;
        this.debug=($.deparam($.param.querystring()).debug!=undefined);
    },
    setup:function(origin){
        var window_origin=location.protocol+"//"+location.host,self=this;
        this.origin=origin?_.str.rtrim(origin,'/'):window_origin;
        this.prefix=this.origin;
        this.server=this.origin;
        this.rpc_function=(this.origin==window_origin)?this.rpc_json:this.rpc_jsonp;
    },
    rpc:function(url,params,options){
        var self=this;
        options=options||{};
        
        if(_.isString(url)){
            url={
                url:url
            };
        
    }
    _.defaults(params,{
        context:this.user_context||{}
    });
if(this.debug)
    params.debug=1;
var payload={
    jsonrpc:'2.0',
    method:'call',
    params:params,
    id:_.uniqueId('r')
    };
    
var deferred=$.Deferred();
    if(!options.shadow)
    this.trigger('request',url,payload);
this.rpc_function(url,payload).then(function(response,textStatus,jqXHR){
    if(!options.shadow)
        self.trigger('response',response);
    if(!response.error){
        deferred.resolve(response["result"],textStatus,jqXHR);
    }else if(response.error.data.type==="session_invalid"){
        self.uid=false;
    }else{
        deferred.reject(response.error,$.Event());
    }
},function(jqXHR,textStatus,errorThrown){
    if(!options.shadow)
        self.trigger('response_failed',jqXHR);
    var error={
        code:-32098,
        message:"XmlHttpRequestError "+errorThrown,
        data:{
            type:"xhr"+textStatus,
            debug:jqXHR.responseText,
            objects:[jqXHR,errorThrown]
            }
        };
    
deferred.reject(error,$.Event());
});
deferred.fail(function(){
    deferred.fail(function(error,event){
        if(!event.isDefaultPrevented()){
            self.trigger('error',error,event);
        }
    });
});
return deferred;
},
rpc_json:function(url,payload){
    var self=this;
    var ajax=_.extend({
        type:"POST",
        dataType:'json',
        contentType:'application/json',
        data:JSON.stringify(payload),
        processData:false
    },url);
    if(this.synch)
        ajax.async=false;
    return $.ajax(ajax);
},
rpc_jsonp:function(url,payload){
    var self=this;
    var data={
        session_id:this.session_id,
        id:payload.id,
        sid:this.httpsessionid,
    };
    
    var set_sid=function(response,textStatus,jqXHR){
        if(response.httpsessionid){
            self.httpsessionid=response.httpsessionid;
        }
    };
    
url.url=this.url(url.url,null);
var ajax=_.extend({
    type:"GET",
    dataType:'jsonp',
    jsonp:'jsonp',
    cache:false,
    data:data
},url);
if(this.synch)
    ajax.async=false;
var payload_str=JSON.stringify(payload);
var payload_url=$.param({
    r:payload_str
});
if(payload_url.length<2000){
    ajax.data.r=payload_str;
    return $.ajax(ajax).done(set_sid);
}else{
    var ifid=_.uniqueId('oe_rpc_iframe');
    var display=self.debug?'block':'none';
    var $iframe=$(_.str.sprintf("<iframe src='javascript:false;' name='%s' id='%s' style='display:%s'></iframe>",ifid,ifid,display));
    var $form=$('<form>').attr('method','POST').attr('target',ifid).attr('enctype',"multipart/form-data").attr('action',ajax.url+'?jsonp=1&'+$.param(data)).append($('<input type="hidden" name="r" />').attr('value',payload_str)).hide().appendTo($('body'));
    var cleanUp=function(){
        if($iframe){
            $iframe.unbind("load").remove();
        }
        $form.remove();
    };
    
    var deferred=$.Deferred();
    $iframe.bind('load',function(){
        $iframe.unbind('load').bind('load',function(){
            $.ajax(ajax).always(function(){
                cleanUp();
            }).done(function(){
                deferred.resolve.apply(deferred,arguments);
            }).fail(function(){
                deferred.reject.apply(deferred,arguments);
            });
        });
        $form.submit();
    });
    $form.after($iframe);
    return deferred.done(set_sid);
}
},
url:function(path,params){
    var qs='';
    if(!_.isNull(params)){
        params=_.extend(params||{},{
            session_id:this.session_id
            });
        if(this.httpsessionid){
            params.sid=this.httpsessionid;
        }
        qs='?'+$.param(params);
    }
    return this.prefix+path+qs;
},
});
instance.web.py_eval=function(expr,context){
    return py.eval(expr,_.extend({},context||{},{
        "true":true,
        "false":false,
        "null":null
    }));
};

};

var console;
if(!console){
    console={};
    ('log error debug info warn assert clear dir dirxml trace group'
        +' groupCollapsed groupEnd time timeEnd profile profileEnd count'
        +' exception').split(/\s+/).forEach(function(property){
        console[property]=_.identity;
    });
}
openerp.web.coresetup=function(instance){
    instance.web.Session=instance.web.JsonRPC.extend({
        init:function(){
            this._super.apply(this,arguments);
            this.name=instance._session_id;
            this.qweb_mutex=new $.Mutex();
        },
        rpc:function(url,params,options){
            params.session_id=this.session_id;
            return this._super(url,params,options);
        },
        session_bind:function(origin){
            if(!_.isUndefined(this.origin)){
                if(this.origin===origin){
                    return $.when();
                }
                throw new Error('Session already bound to '+this.origin);
            }
            var self=this;
            this.setup(origin);
            instance.web.qweb.default_dict['_s']=this.origin;
            this.session_id=false;
            this.uid=false;
            this.username=false;
            this.user_context={};
            
            this.db=false;
            this.module_list=instance._modules.slice();
            this.module_loaded={};
            
            _(this.module_list).each(function(mod){
                self.module_loaded[mod]=true;
            });
            this.active_id=null;
            return this.session_init();
        },
        session_init:function(){
            var self=this;
            this.session_id=this.get_cookie('session_id');
            return this.session_reload().then(function(result){
                var modules=instance._modules.join(',');
                var deferred=self.rpc('/web/webclient/qweblist',{
                    mods:modules
                }).then(self.load_qweb.bind(self));
                if(self.session_is_valid()){
                    return deferred.then(function(){
                        return self.load_modules();
                    });
                }
                return $.when(deferred,self.rpc('/web/webclient/bootstrap_translations',{
                    mods:instance._modules
                    }).then(function(trans){
                    instance.web._t.database.set_bundle(trans);
                }));
            });
        },
        session_reload:function(){
            var self=this;
            return this.rpc("/web/session/get_session_info",{}).done(function(result){
                _.extend(self,result);
            });
        },
        session_is_valid:function(){
            return!!this.uid;
        },
        session_authenticate:function(db,login,password,_volatile){
            var self=this;
            var base_location=document.location.protocol+'//'+document.location.host;
            var params={
                db:db,
                login:login,
                password:password,
                base_location:base_location
            };
            
            return this.rpc("/web/session/authenticate",params).then(function(result){
                if(!result.uid){
                    return $.Deferred().reject();
                }
                _.extend(self,result);
                if(!_volatile){
                    self.set_cookie('session_id',self.session_id);
                }
                return self.load_modules();
            });
        },
        session_logout:function(){
            this.set_cookie('session_id','');
            $.bbq.removeState();
            return this.rpc("/web/session/destroy",{});
        },
        get_cookie:function(name){
            if(!this.name){
                return null;
            }
            var nameEQ=this.name+'|'+name+'=';
            var cookies=document.cookie.split(';');
            for(var i=0;i<cookies.length;++i){
                var cookie=cookies[i].replace(/^\s*/,'');
                if(cookie.indexOf(nameEQ)===0){
                    return JSON.parse(decodeURIComponent(cookie.substring(nameEQ.length)));
                }
            }
        return null;
    },
    set_cookie:function(name,value,ttl){
        if(!this.name){
            return;
        }
        ttl=ttl||24*60*60*365;
        document.cookie=[this.name+'|'+name+'='+encodeURIComponent(JSON.stringify(value)),'path=/','max-age='+ttl,'expires='+new Date(new Date().getTime()+ttl*1000).toGMTString()].join(';');
    },
    load_modules:function(){
        var self=this;
        return this.rpc('/web/session/modules',{}).then(function(result){
            var all_modules=_.uniq(self.module_list.concat(result));
            var to_load=_.difference(result,self.module_list).join(',');
            self.module_list=all_modules;
            var loaded=self.load_translations();
            var datejs_locale="/web/static/lib/datejs/globalization/"+self.user_context.lang.replace("_","-")+".js";
            var file_list=[datejs_locale];
            if(to_load.length){
                loaded=$.when(loaded,self.rpc('/web/webclient/csslist',{
                    mods:to_load
                }).done(self.load_css.bind(self)),self.rpc('/web/webclient/qweblist',{
                    mods:to_load
                }).then(self.load_qweb.bind(self)),self.rpc('/web/webclient/jslist',{
                    mods:to_load
                }).done(function(files){
                    file_list=file_list.concat(files);
                }));
            }
            return loaded.then(function(){
                return self.load_js(file_list);
            }).done(function(){
                self.on_modules_loaded();
                self.trigger('module_loaded');
                if(!Date.CultureInfo.pmDesignator){
                    Date.CultureInfo.amDesignator='AM';
                    Date.CultureInfo.pmDesignator='PM';
                }
            });
        });
    },
    load_translations:function(){
        var params={
            mods:this.module_list,
            lang:this.user_context.lang
            };
            
        return this.rpc('/web/webclient/translations',params).done(function(trans){
            instance.web._t.database.set_bundle(trans);
        });
    },
    load_css:function(files){
        var self=this;
        _.each(files,function(file){
            $('head').append($('<link>',{
                'href':self.url(file,null),
                'rel':'stylesheet',
                'type':'text/css'
            }));
        });
    },
    load_js:function(files){
        var self=this;
        var d=$.Deferred();
        if(files.length!==0){
            var file=files.shift();
            var tag=document.createElement('script');
            tag.type='text/javascript';
            tag.src=self.url(file,null);
            tag.onload=tag.onreadystatechange=function(){
                if((tag.readyState&&tag.readyState!="loaded"&&tag.readyState!="complete")||tag.onload_done)
                    return;
                tag.onload_done=true;
                self.load_js(files).done(function(){
                    d.resolve();
                });
            };
            
            var head=document.head||document.getElementsByTagName('head')[0];
            head.appendChild(tag);
        }else{
            d.resolve();
        }
        return d;
    },
    load_qweb:function(files){
        var self=this;
        _.each(files,function(file){
            self.qweb_mutex.exec(function(){
                return self.rpc('/web/proxy/load',{
                    path:file
                }).then(function(xml){
                    if(!xml){
                        return;
                    }
                    instance.web.qweb.add_template(_.str.trim(xml));
                });
            });
        });
        return self.qweb_mutex.def;
    },
    on_modules_loaded:function(){
        for(var j=0;j<this.module_list.length;j++){
            var mod=this.module_list[j];
            if(this.module_loaded[mod])
                continue;
            instance[mod]={};
            
            if(instance._openerp[mod]!=undefined){
                instance._openerp[mod](instance,instance[mod]);
                this.module_loaded[mod]=true;
            }
        }
        },
get_file:function(options){
    var timer,token=new Date().getTime(),cookie_name='fileToken',cookie_length=cookie_name.length,CHECK_INTERVAL=1000,id=_.uniqueId('get_file_frame'),remove_form=false;
    var $form,$form_data=$('<div>');
    var complete=function(){
        if(options.complete){
            options.complete();
        }
        clearTimeout(timer);
        $form_data.remove();
        $target.remove();
        if(remove_form&&$form){
            $form.remove();
        }
    };
    
var $target=$('<iframe style="display: none;">').attr({
    id:id,
    name:id
}).appendTo(document.body).load(function(){
    try{
        if(options.error){
            if(!this.contentDocument.body.childNodes[1]){
                options.error(this.contentDocument.body.childNodes);
            }
            else{
                options.error(JSON.parse(this.contentDocument.body.childNodes[1].textContent));
            }
        }
    }finally{
    complete();
}
});
if(options.form){
    $form=$(options.form);
}else{
    remove_form=true;
    $form=$('<form>',{
        action:options.url,
        method:'POST'
    }).appendTo(document.body);
}
_(_.extend({},options.data||{},{
    session_id:this.session_id,
    token:token
})).each(function(value,key){
    var $input=$form.find('[name='+key+']');
    if(!$input.length){
        $input=$('<input type="hidden" name="'+key+'">').appendTo($form_data);
    }
    $input.val(value)
    });
$form.append($form_data).attr('target',id).get(0).submit();
var waitLoop=function(){
    var cookies=document.cookie.split(';');
    timer=setTimeout(waitLoop,CHECK_INTERVAL);
    for(var i=0;i<cookies.length;++i){
        var cookie=cookies[i].replace(/^\s*/,'');
        if(!cookie.indexOf(cookie_name===0)){
            continue;
        }
        var cookie_val=cookie.substring(cookie_length+1);
        if(parseInt(cookie_val,10)!==token){
            continue;
        }
        document.cookie=_.str.sprintf("%s=;expires=%s;path=/",cookie_name,new Date().toGMTString());
        if(options.success){
            options.success();
        }
        complete();
        return;
    }
    };
    
timer=setTimeout(waitLoop,CHECK_INTERVAL);
},
synchronized_mode:function(to_execute){
    var synch=this.synch;
    this.synch=true;
    try{
        return to_execute();
    }finally{
        this.synch=synch;
    }
}
});
instance.web.Bus=instance.web.Class.extend(instance.web.EventDispatcherMixin,{
    init:function(){
        instance.web.EventDispatcherMixin.init.call(this,parent);
        var self=this;
        _.each('click,dblclick,keydown,keypress,keyup'.split(','),function(evtype){
            $('html').on(evtype,function(ev){
                self.trigger(evtype,ev);
            });
        });
        _.each('resize,scroll'.split(','),function(evtype){
            $(window).on(evtype,function(ev){
                self.trigger(evtype,ev);
            });
        });
    }
})
instance.web.bus=new instance.web.Bus();
instance.web.TranslationDataBase=instance.web.Class.extend({
    init:function(){
        this.db={};
        
        this.parameters={
            "direction":'ltr',
            "date_format":'%m/%d/%Y',
            "time_format":'%H:%M:%S',
            "grouping":[],
            "decimal_point":".",
            "thousands_sep":","
        };
    
},
set_bundle:function(translation_bundle){
    var self=this;
    this.db={};
    
    var modules=_.keys(translation_bundle.modules);
    modules.sort();
    if(_.include(modules,"web")){
        modules=["web"].concat(_.without(modules,"web"));
    }
    _.each(modules,function(name){
        self.add_module_translation(translation_bundle.modules[name]);
    });
    if(translation_bundle.lang_parameters){
        this.parameters=translation_bundle.lang_parameters;
        this.parameters.grouping=py.eval(this.parameters.grouping);
    }
},
add_module_translation:function(mod){
    var self=this;
    _.each(mod.messages,function(message){
        self.db[message.id]=message.string;
    });
},
build_translation_function:function(){
    var self=this;
    var fcnt=function(str){
        var tmp=self.get(str);
        return tmp===undefined?str:tmp;
    };
    
    fcnt.database=this;
    return fcnt;
},
get:function(key){
    if(this.db[key])
        return this.db[key];
    return undefined;
}
});
$.fn.getAttributes=function(){
    var o={};
    
    if(this.length){
        for(var attr,i=0,attrs=this[0].attributes,l=attrs.length;i<l;i++){
            attr=attrs.item(i)
            o[attr.nodeName]=attr.nodeValue;
        }
        }
return o;
}
$.fn.openerpClass=function(additionalClass){
    additionalClass=additionalClass||'';
    if(!!$.browser.msie){
        additionalClass+=' openerp_ie';
    }
    return this.each(function(){
        $(this).addClass('openerp '+additionalClass);
    });
};

$.fn.openerpBounce=function(){
    return this.each(function(){
        $(this).css('box-sizing','content-box').effect('bounce',{
            distance:18,
            times:5
        },250);
    });
};

$.Mutex=(function(){
    function Mutex(){
        this.def=$.Deferred().resolve();
    }
    Mutex.prototype.exec=function(action){
        var current=this.def;
        var next=this.def=$.Deferred();
        return current.then(function(){
            return $.when(action()).always(function(){
                next.resolve();
            });
        });
    };
    
    return Mutex;
})();
$.async_when=function(){
    var async=false;
    var def=$.Deferred();
    $.when.apply($,arguments).done(function(){
        var args=arguments;
        var action=function(){
            def.resolve.apply(def,args);
        };
        
        if(async)
            action();else
            setTimeout(action,0);
    }).fail(function(){
        var args=arguments;
        var action=function(){
            def.reject.apply(def,args);
        };
        
        if(async)
            action();else
            setTimeout(action,0);
    });
    async=true;
    return def;
};

var old_async_when=$.async_when;
$.async_when=function(){
    if(instance.session.synch)
        return $.when.apply(this,arguments);else
        return old_async_when.apply(this,arguments);
};

instance.session=new instance.web.Session();
instance.web._t=new instance.web.TranslationDataBase().build_translation_function();
instance.web._lt=function(s){
    return{
        toString:function(){
            return instance.web._t(s);
        }
    }
};

instance.web.qweb=new QWeb2.Engine();
instance.web.qweb.debug=instance.session.debug;
instance.web.qweb.default_dict={
    '_':_,
    '_t':instance.web._t,
    'JSON':JSON,
    '__debug__':instance.session.debug,
};

instance.web.qweb.preprocess_node=function(){
    switch(this.node.nodeType){
        case 3:case 4:
            var translation=this.node.parentNode.attributes['t-translation'];
            if(translation&&translation.value==='off'){
            return;
        }
        var match=/^(\s*)(.+?)(\s*)$/.exec(this.node.data);
            if(match){
            this.node.data=match[1]+instance.web._t(match[2])+match[3];
        }
        break;
        case 1:
            var attr,attrs=['label','title','alt','placeholder'];
            while(attr=attrs.pop()){
            if(this.attributes[attr]){
                this.attributes[attr]=instance.web._t(this.attributes[attr]);
            }
        }
        }
};

var _t=instance.web._t;
{
    _t('less than a minute ago');
    _t('about a minute ago');
    _t('%d minutes ago');
    _t('about an hour ago');
    _t('%d hours ago');
    _t('a day ago');
    _t('%d days ago');
    _t('about a month ago');
    _t('%d months ago');
    _t('about a year ago');
    _t('%d years ago');
}
instance.session.on('module_loaded',this,function(){
    $.timeago.settings.translator=instance.web._t;
});
if($.blockUI){
    $.blockUI.defaults.baseZ=1100;
    $.blockUI.defaults.message='<div class="openerp oe_blockui_spin_container" style="background-color: transparent;">';
    $.blockUI.defaults.css.border='0';
    $.blockUI.defaults.css["background-color"]='';
}
var messages_by_seconds=function(){
    return[[0,_t("Loading...")],[20,_t("Still loading...")],[60,_t("Still loading...<br />Please be patient.")],[120,_t("Don't leave yet,<br />it's still loading...")],[300,_t("You may not believe it,<br />but the application is actually loading...")],[420,_t("Take a minute to get a coffee,<br />because it's loading...")],[3600,_t("Maybe you should consider reloading the application by pressing F5...")]];
};

instance.web.Throbber=instance.web.Widget.extend({
    template:"Throbber",
    start:function(){
        var opts={
            lines:13,
            length:7,
            width:4,
            radius:10,
            rotate:0,
            color:'#FFF',
            speed:1,
            trail:60,
            shadow:false,
            hwaccel:false,
            className:'spinner',
            zIndex:2e9,
            top:'auto',
            left:'auto'
        };
        
        this.spin=new Spinner(opts).spin(this.$el[0]);
        this.start_time=new Date().getTime();
        this.act_message();
    },
    act_message:function(){
        var self=this;
        setTimeout(function(){
            if(self.isDestroyed())
                return;
            var seconds=(new Date().getTime()-self.start_time)/1000;
            var mes;
            _.each(messages_by_seconds(),function(el){
                if(seconds>=el[0])
                    mes=el[1];
            });
            self.$(".oe_throbber_message").html(mes);
            self.act_message();
        },1000);
    },
    destroy:function(){
        if(this.spin)
            this.spin.stop();
        this._super();
    },
});
instance.web.Throbber.throbbers=[];
instance.web.blockUI=function(){
    var tmp=$.blockUI.apply($,arguments);
    var throbber=new instance.web.Throbber();
    instance.web.Throbber.throbbers.push(throbber);
    throbber.appendTo($(".oe_blockui_spin_container"));
    return tmp;
}
instance.web.unblockUI=function(){
    _.each(instance.web.Throbber.throbbers,function(el){
        el.destroy();
    });
    return $.unblockUI.apply($,arguments);
}
instance.web.client_actions=new instance.web.Registry();
};
;

openerp.web.dates=function(instance){
    var _t=instance.web._t;
    instance.web.str_to_datetime=function(str){
        if(!str){
            return str;
        }
        var regex=/^(\d\d\d\d-\d\d-\d\d \d\d:\d\d:\d\d)(?:\.\d+)?$/;
        var res=regex.exec(str);
        if(!res){
            throw new Error(_.str.sprintf(_t("'%s' is not a valid datetime"),str));
        }
        var obj=Date.parseExact(res[1]+" UTC",'yyyy-MM-dd HH:mm:ss zzz');
        if(!obj){
            throw new Error(_.str.sprintf(_t("'%s' is not a valid datetime"),str));
        }
        return obj;
    };
    
    instance.web.str_to_date=function(str){
        if(!str){
            return str;
        }
        var regex=/^\d\d\d\d-\d\d-\d\d$/;
        var res=regex.exec(str);
        if(!res){
            throw new Error(_.str.sprintf(_t("'%s' is not a valid date"),str));
        }
        var obj=Date.parseExact(str,'yyyy-MM-dd');
        if(!obj){
            throw new Error(_.str.sprintf(_t("'%s' is not a valid date"),str));
        }
        return obj;
    };
    
    instance.web.str_to_time=function(str){
        if(!str){
            return str;
        }
        var regex=/^(\d\d:\d\d:\d\d)(?:\.\d+)?$/;
        var res=regex.exec(str);
        if(!res){
            throw new Error(_.str.sprintf(_t("'%s' is not a valid time"),str));
        }
        var obj=Date.parseExact("1970-01-01 "+res[1],'yyyy-MM-dd HH:mm:ss');
        if(!obj){
            throw new Error(_.str.sprintf(_t("'%s' is not a valid time"),str));
        }
        return obj;
    };
    
    var zpad=function(str,size){
        str=""+str;
        return new Array(size-str.length+1).join('0')+str;
    };
    
    instance.web.datetime_to_str=function(obj){
        if(!obj){
            return false;
        }
        return zpad(obj.getUTCFullYear(),4)+"-"+zpad(obj.getUTCMonth()+1,2)+"-"
        +zpad(obj.getUTCDate(),2)+" "+zpad(obj.getUTCHours(),2)+":"
        +zpad(obj.getUTCMinutes(),2)+":"+zpad(obj.getUTCSeconds(),2);
    };
    
    instance.web.date_to_str=function(obj){
        if(!obj){
            return false;
        }
        return zpad(obj.getFullYear(),4)+"-"+zpad(obj.getMonth()+1,2)+"-"
        +zpad(obj.getDate(),2);
    };
    
    instance.web.time_to_str=function(obj){
        if(!obj){
            return false;
        }
        return zpad(obj.getHours(),2)+":"+zpad(obj.getMinutes(),2)+":"
        +zpad(obj.getSeconds(),2);
    };

};
;

openerp.web.formats=function(instance){
    var _t=instance.web._t;
    instance.web.intersperse=function(str,indices,separator){
        separator=separator||'';
        var result=[],last=str.length;
        for(var i=0;i<indices.length;++i){
            var section=indices[i];
            if(section===-1||last<=0){
                break;
            }else if(section===0&&i===0){
                break;
            }else if(section===0){
                section=indices[--i];
            }
            result.push(str.substring(last-section,last));
            last-=section;
        }
        var s=str.substring(0,last);
        if(s){
            result.push(s);
        }
        return result.reverse().join(separator);
    };
    
    instance.web.insert_thousand_seps=function(num){
        var negative=num[0]==='-';
        num=(negative?num.slice(1):num);
        return(negative?'-':'')+instance.web.intersperse(num,_t.database.parameters.grouping,_t.database.parameters.thousands_sep);
    };
    
    instance.web.strip_raw_chars=function(value){
        var isletter=/[a-zA-Z]/,output=[];
        for(var index=0;index<value.length;++index){
            var character=value[index];
            if(isletter.test(character)&&(index===0||value[index-1]!=='%')){
                continue;
            }
            output.push(character);
        }
        return output.join('');
    };
    
    var normalize_format=function(format){
        return Date.normalizeFormat(instance.web.strip_raw_chars(format));
    };
    
    instance.web.binary_to_binsize=function(value){
        if(!value){
            return instance.web.human_size(0);
        }
        if(value.substr(0,10).indexOf(' ')==-1){
            return instance.web.human_size(value.length/1.37);
        }else{
            return value;
        }
    };
    
instance.web.human_size=function(size){
    var units=_t("Bytes,Kb,Mb,Gb,Tb,Pb,Eb,Zb,Yb").split(',');
    var i=0;
    while(size>=1024){
        size/=1024;
        ++i;
    }
    return size.toFixed(2)+' '+units[i];
};

instance.web.format_value=function(value,descriptor,value_if_empty){
    if(typeof value==='number'&&isNaN(value)){
        value=false;
    }
    switch(value){
        case'':
            if(descriptor.type==='char'){
            return'';
        }
        console.warn('Field',descriptor,'had an empty string as value, treating as false...');
        case false:case Infinity:case-Infinity:
            return value_if_empty===undefined?'':value_if_empty;
    }
    var l10n=_t.database.parameters;
    switch(descriptor.widget||descriptor.type||(descriptor.field&&descriptor.field.type)){
        case'id':
            return value.toString();
        case'integer':
            return instance.web.insert_thousand_seps(_.str.sprintf('%d',value));
        case'float':
            var digits=descriptor.digits?descriptor.digits:[69,2];
            digits=typeof digits==="string"?py.eval(digits):digits;
            var precision=digits[1];
            var formatted=_.str.sprintf('%.'+precision+'f',value).split('.');
            formatted[0]=instance.web.insert_thousand_seps(formatted[0]);
            return formatted.join(l10n.decimal_point);
        case'float_time':
            var pattern='%02d:%02d';
            if(value<0){
            value=Math.abs(value);
            pattern='-'+pattern;
        }
        var hour=Math.floor(value);
            var min=Math.round((value%1)*60);
            if(min==60){
            min=0;
            hour=hour+1;
        }
        return _.str.sprintf(pattern,hour,min);
        case'many2one':
            return value[1]?value[1].split("\n")[0]:value[1];
        case'one2many':case'many2many':
            if(typeof value==='string'){
            return value;
        }
        return _.str.sprintf(_t("(%d records)"),value.length);
        case'datetime':
            if(typeof(value)=="string")
            value=instance.web.auto_str_to_date(value);
        return value.toString(normalize_format(l10n.date_format)
            +' '+normalize_format(l10n.time_format));
        case'date':
            if(typeof(value)=="string")
            value=instance.web.auto_str_to_date(value);
        return value.toString(normalize_format(l10n.date_format));
        case'time':
            if(typeof(value)=="string")
            value=instance.web.auto_str_to_date(value);
        return value.toString(normalize_format(l10n.time_format));
        case'selection':case'statusbar':
            if(_.isArray(value)){
            value=value[0]
            }
        var result=_(descriptor.selection).detect(function(choice){
            return choice[0]===value;
        });
        if(result){
            return result[1];
        }
        return;
        default:
            return value;
    }
};

instance.web.parse_value=function(value,descriptor,value_if_empty){
    var date_pattern=normalize_format(_t.database.parameters.date_format),time_pattern=normalize_format(_t.database.parameters.time_format);
    switch(value){
        case false:case"":
            return value_if_empty===undefined?false:value_if_empty;
    }
    switch(descriptor.widget||descriptor.type||(descriptor.field&&descriptor.field.type)){
        case'integer':
            var tmp;
            do{
            tmp=value;
            value=value.replace(instance.web._t.database.parameters.thousands_sep,"");
        }while(tmp!==value);
            tmp=Number(value);
            if(isNaN(tmp))
            throw new Error(_.str.sprintf(_t("'%s' is not a correct integer"),value));
        return tmp;
        case'float':
            var tmp=Number(value);
            if(!isNaN(tmp))
            return tmp;
        var tmp2=value;
        do{
            tmp=tmp2;
            tmp2=tmp.replace(instance.web._t.database.parameters.thousands_sep,"");
        }while(tmp!==tmp2);
            var reformatted_value=tmp.replace(instance.web._t.database.parameters.decimal_point,".");
            var parsed=Number(reformatted_value);
            if(isNaN(parsed))
            throw new Error(_.str.sprintf(_t("'%s' is not a correct float"),value));
        return parsed;
        case'float_time':
            var factor=1;
            if(value[0]==='-'){
            value=value.slice(1);
            factor=-1;
        }
        var float_time_pair=value.split(":");
            if(float_time_pair.length!=2)
            return factor*instance.web.parse_value(value,{
                type:"float"
            });
        var hours=instance.web.parse_value(float_time_pair[0],{
            type:"integer"
        });
        var minutes=instance.web.parse_value(float_time_pair[1],{
            type:"integer"
        });
        return factor*(hours+(minutes/60));
        case'progressbar':
            return instance.web.parse_value(value,{
            type:"float"
        });
        case'datetime':
            var datetime=Date.parseExact(value,(date_pattern+' '+time_pattern));
            if(datetime!==null)
            return instance.web.datetime_to_str(datetime);
        datetime=Date.parse(value);
            if(datetime!==null)
            return instance.web.datetime_to_str(datetime);
        throw new Error(_.str.sprintf(_t("'%s' is not a correct datetime"),value));
        case'date':
            var date=Date.parseExact(value,date_pattern);
            if(date!==null)
            return instance.web.date_to_str(date);
        date=Date.parse(value);
            if(date!==null)
            return instance.web.date_to_str(date);
        throw new Error(_.str.sprintf(_t("'%s' is not a correct date"),value));
        case'time':
            var time=Date.parseExact(value,time_pattern);
            if(time!==null)
            return instance.web.time_to_str(time);
        time=Date.parse(value);
            if(time!==null)
            return instance.web.time_to_str(time);
        throw new Error(_.str.sprintf(_t("'%s' is not a correct time"),value));
    }
    return value;
};

instance.web.auto_str_to_date=function(value,type){
    try{
        return instance.web.str_to_datetime(value);
    }catch(e){}
    try{
        return instance.web.str_to_date(value);
    }catch(e){}
    try{
        return instance.web.str_to_time(value);
    }catch(e){}
    throw new Error(_.str.sprintf(_t("'%s' is not a correct date, datetime nor time"),value));
};

instance.web.auto_date_to_str=function(value,type){
    switch(type){
        case'datetime':
            return instance.web.datetime_to_str(value);
        case'date':
            return instance.web.date_to_str(value);
        case'time':
            return instance.web.time_to_str(value);
        default:
            throw new Error(_.str.sprintf(_t("'%s' is not convertible to date, datetime nor time"),type));
    }
};

};
;

openerp.web.chrome=function(instance){
    var QWeb=instance.web.qweb,_t=instance.web._t;
    instance.web.Notification=instance.web.Widget.extend({
        template:'Notification',
        init:function(){
            this._super.apply(this,arguments);
            instance.web.notification=this;
        },
        start:function(){
            this._super.apply(this,arguments);
            this.$el.notify({
                speed:500,
                expires:2500
            });
        },
        notify:function(title,text,sticky){
            sticky=!!sticky;
            var opts={};
            
            if(sticky){
                opts.expires=false;
            }
            return this.$el.notify('create',{
                title:title,
                text:text
            },opts);
        },
        warn:function(title,text,sticky){
            sticky=!!sticky;
            var opts={};
            
            if(sticky){
                opts.expires=false;
            }
            return this.$el.notify('create','oe_notification_alert',{
                title:title,
                text:text
            },opts);
        }
    });
instance.web.action_notify=function(element,action){
    element.do_notify(action.params.title,action.params.text,action.params.sticky);
};

instance.web.client_actions.add("action_notify","instance.web.action_notify");
    instance.web.action_warn=function(element,action){
    element.do_warn(action.params.title,action.params.text,action.params.sticky);
};

instance.web.client_actions.add("action_warn","instance.web.action_warn");
    instance.web.dialog=function(element){
    var result=element.dialog.apply(element,_.rest(_.toArray(arguments)));
    result.dialog("widget").openerpClass();
    return result;
};

instance.web.Dialog=instance.web.Widget.extend({
    dialog_title:"",
    init:function(parent,options,content){
        var self=this;
        this._super(parent);
        this.content_to_set=content;
        this.dialog_options={
            modal:true,
            destroy_on_close:true,
            width:900,
            min_width:0,
            max_width:'95%',
            height:'auto',
            min_height:0,
            max_height:$(window.top).height()-200,
            autoOpen:false,
            position:[false,40],
            buttons:null,
            beforeClose:function(){
                self.trigger("closing");
            },
            resizeStop:function(){
                self.trigger("resized");
            },
        };
        
        if(options){
            _.extend(this.dialog_options,options);
        }
        this.on("closing",this,this._closing);
        this.$buttons=$('<div class="ui-dialog-buttonpane ui-widget-content ui-helper-clearfix"><span class="oe_dialog_custom_buttons"/></div>');
    },
    _get_options:function(){
        var self=this;
        var o=_.extend({},this.dialog_options);
        var sizes={
            width:$(window.top).width(),
            height:$(window.top).height(),
        };
        
        _.each(sizes,function(available_size,unit){
            o[unit]=self._get_size(o[unit],available_size);
            o['min_'+unit]=self._get_size(o['min_'+unit]||0,available_size);
            o['max_'+unit]=self._get_size(o['max_'+unit]||0,available_size);
            if(o[unit]!=='auto'&&o['min_'+unit]&&o[unit]<o['min_'+unit]){
                o[unit]=o['min_'+unit];
            }
            if(o[unit]!=='auto'&&o['max_'+unit]&&o[unit]>o['max_'+unit]){
                o[unit]=o['max_'+unit];
            }
        });
    o.title=o.title||this.dialog_title;
    return o;
},
_get_size:function(val,available_size){
    val=val.toString();
    if(val==='auto'){
        return val;
    }else if(val.slice(-1)==="%"){
        return Math.round(available_size/100*parseInt(val.slice(0,-1),10));
    }else{
        return parseInt(val,10);
    }
},
renderElement:function(){
    if(this.content_to_set){
        this.setElement(this.content_to_set);
    }else if(this.template){
        this._super();
    }
},
open:function(){
    if(!this.dialog_inited){
        this.init_dialog();
    }
    this.$el.dialog('open');
    this.$el.dialog("widget").append(this.$buttons);
    return this;
},
_add_buttons:function(buttons){
    var self=this;
    var $customButons=this.$buttons.find('.oe_dialog_custom_buttons').empty();
    _.each(buttons,function(fn,text){
        if(!_.isFunction(fn)){
            text=fn.text;
            fn=fn.click;
        }
        var $but=$(QWeb.render('WidgetButton',{
            widget:{
                string:text,
                node:{
                    attrs:{}
            }
        }
        }));
$customButons.append($but);
$but.on('click',function(ev){
    fn.call(self.$el,ev);
});
});
},
init_dialog:function(){
    var options=this._get_options();
    if(options.buttons){
        this._add_buttons(options.buttons);
        delete(options.buttons);
    }
    this.renderElement();
    instance.web.dialog(this.$el,options);
    if(options.height==='auto'&&options.max_height){
        this.$el.css({
            'max-height':options.max_height,
            'overflow-y':'auto'
        });
    }
    this.dialog_inited=true;
    var res=this.start();
    return res;
},
close:function(){
    if(this.dialog_inited&&this.$el.is(":data(dialog)")){
        this.$el.dialog('close');
    }
},
_closing:function(){
    if(this.__tmp_dialog_destroying)
        return;
    if(this.dialog_options.destroy_on_close){
        this.__tmp_dialog_closing=true;
        this.destroy();
        this.__tmp_dialog_closing=undefined;
    }
},
destroy:function(){
    this.$buttons.remove();
    _.each(this.getChildren(),function(el){
        el.destroy();
    });
    if(!this.__tmp_dialog_closing){
        this.__tmp_dialog_destroying=true;
        this.close();
        this.__tmp_dialog_destroying=undefined;
    }
    if(this.dialog_inited&&!this.isDestroyed()&&this.$el.is(":data(dialog)")){
        this.$el.dialog('destroy');
    }
    this._super();
}
});
instance.web.CrashManager=instance.web.Class.extend({
    init:function(){
        this.active=true;
    },
    rpc_error:function(error){
        if(!this.active){
            return;
        }
        if(error.code===300&&error.data&&error.data.type=="client_exception"&&error.data.debug.match("SessionExpiredException")){
            this.show_warning({
                type:"Session Expired",
                data:{
                    fault_code:"Your OpenERP session expired. Please refresh the current web page."
                }
            });
        return;
    }
    if(error.data.fault_code){
        var split=(""+error.data.fault_code).split('\n')[0].split(' -- ');
        if(split.length>1){
            error.type=split.shift();
            error.data.fault_code=error.data.fault_code.substr(error.type.length+4);
        }
    }
if(error.code===200&&error.type){
    this.show_warning(error);
}else{
    this.show_error(error);
}
},
show_warning:function(error){
    if(!this.active){
        return;
    }
    instance.web.dialog($('<div>'+QWeb.render('CrashManager.warning',{
        error:error
    })+'</div>'),{
        title:"OpenERP "+_.str.capitalize(error.type),
        buttons:[{
            text:_t("Ok"),
            click:function(){
                $(this).dialog("close");
            }
        }]
    });
},
show_error:function(error){
    if(!this.active){
        return;
    }
    var buttons={};
    
    buttons[_t("Ok")]=function(){
        $(this).dialog("close");
    };
    
    var dialog=new instance.web.Dialog(this,{
        title:"OpenERP "+_.str.capitalize(error.type),
        width:'80%',
        height:'50%',
        min_width:'800px',
        min_height:'600px',
        buttons:buttons
    }).open();
    dialog.$el.html(QWeb.render('CrashManager.error',{
        session:instance.session,
        error:error
    }));
},
show_message:function(exception){
    this.show_error({
        type:_t("Client Error"),
        message:exception,
        data:{
            debug:""
        }
    });
},
});
instance.web.Loading=instance.web.Widget.extend({
    template:_t("Loading"),
    init:function(parent){
        this._super(parent);
        this.count=0;
        this.blocked_ui=false;
        this.session.on("request",this,this.request_call);
        this.session.on("response",this,this.response_call);
        this.session.on("response_failed",this,this.response_call);
    },
    destroy:function(){
        this.on_rpc_event(-this.count);
        this._super();
    },
    request_call:function(){
        this.on_rpc_event(1);
    },
    response_call:function(){
        this.on_rpc_event(-1);
    },
    on_rpc_event:function(increment){
        var self=this;
        if(!this.count&&increment===1){
            this.long_running_timer=setTimeout(function(){
                self.blocked_ui=true;
                instance.web.blockUI();
            },3000);
        }
        this.count+=increment;
        if(this.count>0){
            if(instance.session.debug){
                this.$el.text(_.str.sprintf(_t("Loading (%d)"),this.count));
            }else{
                this.$el.text(_t("Loading"));
            }
            this.$el.show();
            this.getParent().$el.addClass('oe_wait');
        }else{
            this.count=0;
            clearTimeout(this.long_running_timer);
            if(self.blocked_ui){
                this.blocked_ui=false;
                instance.web.unblockUI();
            }
            this.$el.fadeOut();
            this.getParent().$el.removeClass('oe_wait');
        }
    }
});
instance.web.DatabaseManager=instance.web.Widget.extend({
    init:function(parent){
        this._super(parent);
        this.unblockUIFunction=instance.web.unblockUI;
        $.validator.addMethod('matches',function(s,_,re){
            return new RegExp(re).test(s);
        },_t("Invalid database name"));
    },
    start:function(){
        var self=this;
        $('.oe_secondary_menus_container,.oe_user_menu_placeholder').empty();
        var fetch_db=this.rpc("/web/database/get_list",{}).then(function(result){
            self.db_list=result;
        },function(_,ev){
            ev.preventDefault();
            self.db_list=null;
        });
        var fetch_langs=this.rpc("/web/session/get_lang_list",{}).done(function(result){
            self.lang_list=result;
        });
        return $.when(fetch_db,fetch_langs).done(self.do_render);
    },
    do_render:function(){
        var self=this;
        instance.webclient.toggle_bars(true);
        self.$el.html(QWeb.render("DatabaseManager",{
            widget:self
        }));
        $('.oe_user_menu_placeholder').append(QWeb.render("DatabaseManager.user_menu",{
            widget:self
        }));
        $('.oe_secondary_menus_container').append(QWeb.render("DatabaseManager.menu",{
            widget:self
        }));
        $('ul.oe_secondary_submenu > li:first').addClass('oe_active')
        $('ul.oe_secondary_submenu > li').bind('click',function(event){
            var menuitem=$(this);
            menuitem.addClass('oe_active').siblings().removeClass('oe_active');
            var form_id=menuitem.find('a').attr('href');
            $(form_id).show().siblings().hide();
            event.preventDefault();
        });
        $('#back-to-login').click(self.do_exit);
        self.$el.find("td").addClass("oe_form_group_cell");
        self.$el.find("tr td:first-child").addClass("oe_form_group_cell_label");
        self.$el.find("label").addClass("oe_form_label");
        self.$el.find("form[name=create_db_form]").validate({
            submitHandler:self.do_create
            });
        self.$el.find("form[name=duplicate_db_form]").validate({
            submitHandler:self.do_duplicate
            });
        self.$el.find("form[name=drop_db_form]").validate({
            submitHandler:self.do_drop
            });
        self.$el.find("form[name=backup_db_form]").validate({
            submitHandler:self.do_backup
            });
        self.$el.find("form[name=restore_db_form]").validate({
            submitHandler:self.do_restore
            });
        self.$el.find("form[name=change_pwd_form]").validate({
            messages:{
                old_pwd:_t("Please enter your previous password"),
                new_pwd:_t("Please enter your new password"),
                confirm_pwd:{
                    required:_t("Please confirm your new password"),
                    equalTo:_t("The confirmation does not match the password")
                    }
                },
        submitHandler:self.do_change_password
        });
},
destroy:function(){
    this.$el.find('#db-create, #db-drop, #db-backup, #db-restore, #db-change-password, #back-to-login').unbind('click').end().empty();
    this._super();
},
to_object:function(array){
    var result={};
    
    _(array).each(function(record){
        result[record.name]=record.value;
    });
    return result;
},
blockUI:function(){
    instance.web.blockUI();
    instance.web.unblockUI=function(){};

},
unblockUI:function(){
    instance.web.unblockUI=this.unblockUIFunction;
    instance.web.unblockUI();
},
display_error:function(error){
    return instance.web.dialog($('<div>'),{
        modal:true,
        title:error.title,
        buttons:[{
            text:_t("Ok"),
            click:function(){
                $(this).dialog("close");
            }
        }]
    }).html(error.error);
},
do_create:function(form){
    var self=this;
    var fields=$(form).serializeArray();
    self.rpc("/web/database/create",{
        'fields':fields
    }).done(function(result){
        var form_obj=self.to_object(fields);
        var client_action={
            type:'ir.actions.client',
            tag:'login',
            params:{
                'db':form_obj['db_name'],
                'login':'admin',
                'password':form_obj['create_admin_pwd'],
                'login_successful':function(){
                    self.do_action("reload");
                },
            },
            _push_me:false,
        };
        
        self.do_action(client_action);
    });
},
do_duplicate:function(form){
    var self=this;
    var fields=$(form).serializeArray();
    self.rpc("/web/database/duplicate",{
        'fields':fields
    }).then(function(result){
        if(result.error){
            self.display_error(result);
            return;
        }
        self.do_notify(_t("Duplicating database"),_t("The database has been duplicated."));
        self.start();
    });
},
do_drop:function(form){
    var self=this;
    var $form=$(form),fields=$form.serializeArray(),$db_list=$form.find('[name=drop_db]'),db=$db_list.val();
    if(!db||!confirm(_.str.sprintf(_t("Do you really want to delete the database: %s ?"),db))){
        return;
    }
    self.rpc("/web/database/drop",{
        'fields':fields
    }).done(function(result){
        if(result.error){
            self.display_error(result);
            return;
        }
        self.do_notify(_t("Dropping database"),_.str.sprintf(_t("The database %s has been dropped"),db));
        self.start();
    });
},
do_backup:function(form){
    var self=this;
    self.blockUI();
    self.session.get_file({
        form:form,
        success:function(){
            self.do_notify(_t("Backed"),_t("Database backed up successfully"));
        },
        error:function(error){
            if(error){
                self.display_error({
                    title:_t("Backup Database"),
                    error:'AccessDenied'
                });
            }
        },
    complete:function(){
        self.unblockUI();
    }
    });
},
do_restore:function(form){
    var self=this;
    self.blockUI();
    $(form).ajaxSubmit({
        url:'/web/database/restore',
        type:'POST',
        resetForm:true,
        success:function(body){
            if(!body){
                return;
            }
            if(body.indexOf('403 Forbidden')!==-1){
                self.display_error({
                    title:_t("Access Denied"),
                    error:_t("Incorrect super-administrator password")
                    });
            }else{
                self.display_error({
                    title:_t("Restore Database"),
                    error:_t("Could not restore the database")
                    });
            }
        },
    complete:function(){
        self.unblockUI();
        self.do_notify(_t("Restored"),_t("Database restored successfully"));
    }
    });
},
do_change_password:function(form){
    var self=this;
    self.rpc("/web/database/change_password",{
        'fields':$(form).serializeArray()
        }).done(function(result){
        if(result.error){
            self.display_error(result);
            return;
        }
        self.unblockUI();
        self.do_notify(_t("Changed Password"),_t("Password has been changed successfully"));
    });
},
do_exit:function(){
    this.$el.remove();
    instance.webclient.show_login();
}
});
instance.web.client_actions.add("database_manager","instance.web.DatabaseManager");
instance.web.Login=instance.web.Widget.extend({
    template:"Login",
    remember_credentials:true,
    init:function(parent,action){
        this._super(parent);
        this.has_local_storage=typeof(localStorage)!='undefined';
        this.db_list=null;
        this.selected_db=null;
        this.selected_login=null;
        this.params=action.params||{};
        
        if(_.isEmpty(this.params)){
            this.params=$.bbq.getState(true);
        }
        if(this.params.login_successful){
            this.on('login_successful',this,this.params.login_successful);
        }
        if(this.has_local_storage&&this.remember_credentials){
            this.selected_db=localStorage.getItem('last_db_login_success');
            this.selected_login=localStorage.getItem('last_login_login_success');
            if(jQuery.deparam(jQuery.param.querystring()).debug!==undefined){
                this.selected_password=localStorage.getItem('last_password_login_success');
            }
        }
    },
start:function(){
    var self=this;
    self.$el.find("form").submit(self.on_submit);
    self.$el.find('.oe_login_manage_db').click(function(){
        self.do_action("database_manager");
    });
    var d=$.when();
    if($.deparam.querystring().db){
        self.params.db=$.deparam.querystring().db;
    }
    if($.param.fragment().token){
        self.params.token=$.param.fragment().token;
    }
    if(self.params.db&&self.params.login&&self.params.password){
        d=self.do_login(self.params.db,self.params.login,self.params.password);
    }else{
        if(self.params.db){
            self.on_db_loaded([self.params.db])
            }else{
            d=self.rpc("/web/database/get_list",{}).done(self.on_db_loaded).fail(self.on_db_failed);
        }
    }
return d;
},
on_db_loaded:function(result){
    this.db_list=result;
    this.$("[name=db]").replaceWith(QWeb.render('Login.dblist',{
        db_list:this.db_list,
        selected_db:this.selected_db
        }));
    if(this.db_list.length===0){
        this.do_action("database_manager");
    }else if(this.db_list.length===1){
        this.$('div.oe_login_dbpane').hide();
    }else{
        this.$('div.oe_login_dbpane').show();
    }
},
on_db_failed:function(error,event){
    if(error.data.fault_code==='AccessDenied'){
        event.preventDefault();
    }
},
on_submit:function(ev){
    if(ev){
        ev.preventDefault();
    }
    var db=this.$("form [name=db]").val();
    if(!db){
        this.do_warn(_t("Login"),_t("No database selected !"));
        return false;
    }
    var login=this.$("form input[name=login]").val();
    var password=this.$("form input[name=password]").val();
    this.do_login(db,login,password);
},
do_login:function(db,login,password){
    var self=this;
    self.hide_error();
    self.$(".oe_login_pane").fadeOut("slow");
    return this.session.session_authenticate(db,login,password).then(function(){
        if(self.has_local_storage){
            if(self.remember_credentials){
                localStorage.setItem('last_db_login_success',db);
                localStorage.setItem('last_login_login_success',login);
                if(jQuery.deparam(jQuery.param.querystring()).debug!==undefined){
                    localStorage.setItem('last_password_login_success',password);
                }
            }else{
            localStorage.setItem('last_db_login_success','');
            localStorage.setItem('last_login_login_success','');
            localStorage.setItem('last_password_login_success','');
        }
    }
    self.trigger('login_successful');
},function(){
    self.$(".oe_login_pane").fadeIn("fast",function(){
        self.show_error(_t("Invalid username or password"));
    });
});
},
show_error:function(message){
    this.$el.addClass("oe_login_invalid");
    this.$(".oe_login_error_message").text(message);
},
hide_error:function(){
    this.$el.removeClass('oe_login_invalid');
},
});
instance.web.client_actions.add("login","instance.web.Login");
instance.web.redirect=function(url,wait){
    if(instance.client&&instance.client.crashmanager){
        instance.client.crashmanager.active=false;
    }
    var wait_server=function(){
        instance.session.rpc("/web/webclient/version_info",{}).done(function(){
            window.location=url;
        }).fail(function(){
            setTimeout(wait_server,250);
        });
    };
    
    if(wait){
        setTimeout(wait_server,1000);
    }else{
        window.location=url;
    }
};

instance.web.Reload=function(parent,action){
    var params=action.params||{};
    
    var menu_id=params.menu_id||false;
    var l=window.location;
    var sobj=$.deparam(l.search.substr(1));
    sobj.ts=new Date().getTime();
    var search='?'+$.param(sobj);
    var hash=l.hash;
    if(menu_id){
        hash="#menu_id="+menu_id;
    }
    var url=l.protocol+"//"+l.host+l.pathname+search+hash;
    instance.web.redirect(url,params.wait);
};

instance.web.client_actions.add("reload","instance.web.Reload");
instance.web.HistoryBack=function(parent){
    if(!parent.history_back()){
        instance.web.Home(parent);
    }
};

instance.web.client_actions.add("history_back","instance.web.HistoryBack");
instance.web.Home=function(parent,action){
    var url='/'+(window.location.search||'');
    instance.web.redirect(url,action.params&&action.params.wait);
};

instance.web.client_actions.add("home","instance.web.Home");
instance.web.ChangePassword=instance.web.Widget.extend({
    template:"ChangePassword",
    start:function(){
        var self=this;
        this.getParent().dialog_title=_t("Change Password");
        var $button=self.$el.find('.oe_form_button');
        $button.appendTo(this.getParent().$buttons);
        $button.eq(2).click(function(){
            self.getParent().close();
        })
        $button.eq(0).click(function(){
            self.rpc("/web/session/change_password",{
                'fields':$("form[name=change_password_form]").serializeArray()
                }).done(function(result){
                if(result.error){
                    self.display_error(result);
                    return;
                }else{
                    instance.webclient.on_logout();
                }
            });
        })
    },
display_error:function(error){
    return instance.web.dialog($('<div>'),{
        modal:true,
        title:error.title,
        buttons:[{
            text:_t("Ok"),
            click:function(){
                $(this).dialog("close");
            }
        }]
    }).html(error.error);
},
})
instance.web.client_actions.add("change_password","instance.web.ChangePassword");
instance.web.Menu=instance.web.Widget.extend({
    template:'Menu',
    init:function(){
        var self=this;
        this._super.apply(this,arguments);
        this.has_been_loaded=$.Deferred();
        this.maximum_visible_links='auto';
        this.data={
            data:{
                children:[]
            }
        };
        
    this.on("menu_loaded",this,function(menu_data){
        self.reflow();
        if(!_.isEmpty(menu_data.all_menu_ids)){
            this.rpc("/web/menu/load_needaction",{
                menu_ids:menu_data.all_menu_ids
                }).done(function(r){
                self.on_needaction_loaded(r);
            });
        }
    });
var lazyreflow=_.debounce(this.reflow.bind(this),200);
    instance.web.bus.on('resize',this,function(){
    self.$el.height(0);
    lazyreflow();
});
},
start:function(){
    this._super.apply(this,arguments);
    this.$secondary_menus=this.getParent().$el.find('.oe_secondary_menus_container');
    this.$secondary_menus.on('click','a[data-menu]',this.on_menu_click);
    return this.do_reload();
},
do_reload:function(){
    var self=this;
    return this.rpc("/web/menu/load",{}).done(function(r){
        self.menu_loaded(r);
    });
},
menu_loaded:function(data){
    var self=this;
    this.data={
        data:data
    };
    
    this.renderElement();
    this.$secondary_menus.html(QWeb.render("Menu.secondary",{
        widget:this
    }));
    this.$el.on('click','a[data-menu]',this.on_menu_click);
    this.$secondary_menus.find('.oe_menu_toggler').siblings('.oe_secondary_submenu').hide();
    if(self.current_menu){
        self.open_menu(self.current_menu);
    }
    this.trigger('menu_loaded',data);
    this.has_been_loaded.resolve();
},
on_needaction_loaded:function(data){
    var self=this;
    this.needaction_data=data;
    _.each(this.needaction_data,function(item,menu_id){
        var $item=self.$secondary_menus.find('a[data-menu="'+menu_id+'"]');
        $item.find('.oe_menu_counter').remove();
        if(item.needaction_counter&&item.needaction_counter>0){
            $item.append(QWeb.render("Menu.needaction_counter",{
                widget:item
            }));
        }
    });
},
reflow:function(){
    var self=this;
    this.$el.height('auto').show();
    var $more_container=this.$('.oe_menu_more_container').hide();
    var $more=this.$('.oe_menu_more');
    $more.children('li').insertBefore($more_container);
    var $toplevel_items=this.$el.children('li').not($more_container).hide();
    $toplevel_items.each(function(){
        var remaining_space=self.$el.parent().width()-$more_container.outerWidth();
        self.$el.parent().children(':visible').each(function(){
            remaining_space-=$(this).outerWidth();
        });
        if($(this).width()>remaining_space){
            return false;
        }
        $(this).show();
    });
    $more.append($toplevel_items.filter(':hidden').show());
    $more_container.toggle(!!$more.children().length);
    var $toplevel=this.$el.children("li:visible");
    if($toplevel.length===1){
        $toplevel.hide();
    }
},
open_menu:function(id){
    this.current_menu=id;
    this.session.active_id=id;
    var $clicked_menu,$sub_menu,$main_menu;
    $clicked_menu=this.$el.add(this.$secondary_menus).find('a[data-menu='+id+']');
    this.trigger('open_menu',id,$clicked_menu);
    if(this.$secondary_menus.has($clicked_menu).length){
        $sub_menu=$clicked_menu.parents('.oe_secondary_menu');
        $main_menu=this.$el.find('a[data-menu='+$sub_menu.data('menu-parent')+']');
    }else{
        $sub_menu=this.$secondary_menus.find('.oe_secondary_menu[data-menu-parent='+$clicked_menu.attr('data-menu')+']');
        $main_menu=$clicked_menu;
    }
    this.$el.find('.oe_active').removeClass('oe_active');
    $main_menu.addClass('oe_active');
    this.$secondary_menus.find('.oe_secondary_menu').hide();
    $sub_menu.show();
    this.$secondary_menus.parent('.oe_leftbar').toggle(!!$sub_menu.children().length);
    this.$secondary_menus.find('.oe_active').removeClass('oe_active');
    if($main_menu!==$clicked_menu){
        $clicked_menu.parents().show();
        if($clicked_menu.is('.oe_menu_toggler')){
            $clicked_menu.toggleClass('oe_menu_opened').siblings('.oe_secondary_submenu:first').toggle();
        }else{
            $clicked_menu.parent().addClass('oe_active');
        }
    }
},
open_action:function(id){
    var $menu=this.$el.add(this.$secondary_menus).find('a[data-action-id="'+id+'"]');
    var menu_id=$menu.data('menu');
    if(menu_id){
        this.open_menu(menu_id);
    }
},
menu_click:function(id,needaction){
    if(!id){
        return;
    }
    var $item=this.$el.find('a[data-menu='+id+']');
    if(!$item.length){
        $item=this.$secondary_menus.find('a[data-menu='+id+']');
    }
    var action_id=$item.data('action-id');
    if(!action_id){
        if(this.$el.has($item).length){
            var $sub_menu=this.$secondary_menus.find('.oe_secondary_menu[data-menu-parent='+id+']');
            var $items=$sub_menu.find('a[data-action-id]').filter('[data-action-id!=""]');
            if($items.length){
                action_id=$items.data('action-id');
                id=$items.data('menu');
            }
        }
    }
if(action_id){
    this.trigger('menu_click',{
        action_id:action_id,
        needaction:needaction,
        id:id,
        previous_menu_id:this.current_menu
        },$item);
}
this.open_menu(id);
},
on_menu_click:function(ev){
    ev.preventDefault();
    var needaction=$(ev.target).is('div.oe_menu_counter');
    this.menu_click($(ev.currentTarget).data('menu'),needaction);
},
});
instance.web.UserMenu=instance.web.Widget.extend({
    template:"UserMenu",
    init:function(parent){
        this._super(parent);
        this.update_promise=$.Deferred().resolve();
    },
    start:function(){
        var self=this;
        this._super.apply(this,arguments);
        this.$el.on('click','.oe_dropdown_menu li a[data-menu]',function(ev){
            ev.preventDefault();
            var f=self['on_menu_'+$(this).data('menu')];
            if(f){
                f($(this));
            }
        });
},
do_update:function(){
    var self=this;
    var fct=function(){
        var $avatar=self.$el.find('.oe_topbar_avatar');
        $avatar.attr('src',$avatar.data('default-src'));
        if(!self.session.uid)
            return;
        var func=new instance.web.Model("res.users").get_func("read");
        return self.alive(func(self.session.uid,["name","company_id"])).then(function(res){
            var topbar_name=res.name;
            if(instance.session.debug)
                topbar_name=_.str.sprintf("%s (%s)",topbar_name,instance.session.db);
            if(res.company_id[0]>1)
                topbar_name=_.str.sprintf("%s (%s)",topbar_name,res.company_id[1]);
            self.$el.find('.oe_topbar_name').text(topbar_name);
            if(!instance.session.debug){
                topbar_name=_.str.sprintf("%s (%s)",topbar_name,instance.session.db);
            }
            var avatar_src=self.session.url('/web/binary/image',{
                model:'res.users',
                field:'image_small',
                id:self.session.uid
                });
            $avatar.attr('src',avatar_src);
        });
    };
    
    this.update_promise=this.update_promise.then(fct,fct);
},
on_menu_help:function(){
    window.open('http://help.openerp.com','_blank');
},
on_menu_logout:function(){
    this.trigger('user_logout');
},
on_menu_settings:function(){
    var self=this;
    if(!this.getParent().has_uncommitted_changes()){
        self.rpc("/web/action/load",{
            action_id:"base.action_res_users_my"
        }).done(function(result){
            result.res_id=instance.session.uid;
            self.getParent().action_manager.do_action(result);
        });
    }
},
on_menu_about:function(){
    var self=this;
    self.rpc("/web/webclient/version_info",{}).done(function(res){
        var $help=$(QWeb.render("UserMenu.about",{
            version_info:res
        }));
        $help.find('a.oe_activate_debug_mode').click(function(e){
            e.preventDefault();
            window.location=$.param.querystring(window.location.href,'debug');
        });
        instance.web.dialog($help,{
            autoOpen:true,
            modal:true,
            width:507,
            height:290,
            resizable:false,
            title:_t("About")
            });
    });
},
});
instance.web.Client=instance.web.Widget.extend({
    init:function(parent,origin){
        instance.client=instance.webclient=this;
        this._super(parent);
        this.origin=origin;
    },
    start:function(){
        var self=this;
        return instance.session.session_bind(this.origin).then(function(){
            var $e=$(QWeb.render(self._template,{
                widget:self
            }));
            self.replaceElement($e);
            $e.openerpClass();
            self.bind_events();
            return self.show_common();
        });
    },
    bind_events:function(){
        var self=this;
        this.$el.on('mouseenter','.oe_systray > div:not([data-tipsy=true])',function(){
            $(this).attr('data-tipsy','true').tipsy().trigger('mouseenter');
        });
        this.$el.on('click','.oe_dropdown_toggle',function(ev){
            ev.preventDefault();
            var $toggle=$(this);
            var $menu=$toggle.siblings('.oe_dropdown_menu');
            $menu=$menu.size()>=1?$menu:$toggle.find('.oe_dropdown_menu');
            var state=$menu.is('.oe_opened');
            setTimeout(function(){
                $toggle.add($menu).toggleClass('oe_opened',!state);
                if(!state){
                    var doc_width=$(document).width();
                    var offset=$menu.offset();
                    var menu_width=$menu.width();
                    var x=doc_width-offset.left-menu_width-2;
                    if(x<0){
                        $menu.offset({
                            left:offset.left+x
                            }).width(menu_width);
                    }
                }
            },0);
    });
instance.web.bus.on('click',this,function(ev){
    $.fn.tipsy.clear();
    if(!$(ev.target).is('input[type=file]')){
        self.$el.find('.oe_dropdown_menu.oe_opened, .oe_dropdown_toggle.oe_opened').removeClass('oe_opened');
    }
});
},
show_common:function(){
    var self=this;
    this.crashmanager=new instance.web.CrashManager();
    instance.session.on('error',this.crashmanager,this.crashmanager.rpc_error);
    self.notification=new instance.web.Notification(this);
    self.notification.appendTo(self.$el);
    self.loading=new instance.web.Loading(self);
    self.loading.appendTo(self.$el);
    self.action_manager=new instance.web.ActionManager(self);
    self.action_manager.appendTo(self.$('.oe_application'));
},
toggle_bars:function(value){
    this.$('tr:has(td.oe_topbar),.oe_leftbar').toggle(value);
},
has_uncommitted_changes:function(){
    return false;
},
});
instance.web.WebClient=instance.web.Client.extend({
    _template:'WebClient',
    events:{
        'click .oe_logo_edit_admin':'logo_edit'
    },
    init:function(parent){
        this._super(parent);
        this._current_state=null;
        this.menu_dm=new instance.web.DropMisordered();
        this.action_mutex=new $.Mutex();
    },
    start:function(){
        var self=this;
        return $.when(this._super()).then(function(){
            if(jQuery.param!==undefined&&jQuery.deparam(jQuery.param.querystring()).kitten!==undefined){
                $("body").addClass("kitten-mode-activated");
                $("body").css("background-image","url("+instance.session.origin+"/web/static/src/img/back-enable.jpg"+")");
                if($.blockUI){
                    $.blockUI.defaults.message='<img src="http://www.amigrave.com/kitten.gif">';
                }
            }
        if(!self.session.session_is_valid()){
            self.show_login();
        }else{
            self.show_application();
        }
        });
},
set_title:function(title){
    title=_.str.clean(title);
    var sep=_.isEmpty(title)?'':' - ';
    document.title=title+sep+'OpenERP';
},
show_common:function(){
    var self=this;
    this._super();
    window.onerror=function(message,file,line){
        self.crashmanager.show_error({
            type:_t("Client Error"),
            message:message,
            data:{
                debug:file+':'+line
                }
            });
};

},
show_login:function(){
    this.toggle_bars(false);
    var state=$.bbq.getState(true);
    var action={
        type:'ir.actions.client',
        tag:'login',
        _push_me:false,
    };
    
    this.action_manager.do_action(action);
    this.action_manager.inner_widget.on('login_successful',this,function(){
        this.show_application();
    });
},
show_application:function(){
    var self=this;
    self.toggle_bars(true);
    self.update_logo();
    self.menu=new instance.web.Menu(self);
    self.menu.replace(this.$el.find('.oe_menu_placeholder'));
    self.menu.on('menu_click',this,this.on_menu_action);
    self.user_menu=new instance.web.UserMenu(self);
    self.user_menu.replace(this.$el.find('.oe_user_menu_placeholder'));
    self.user_menu.on('user_logout',self,self.on_logout);
    self.user_menu.do_update();
    self.bind_hashchange();
    self.set_title();
    self.check_timezone();
},
update_logo:function(){
    var img=this.session.url('/web/binary/company_logo');
    this.$('.oe_logo img').attr('src','').attr('src',img);
    this.$('.oe_logo_edit').toggleClass('oe_logo_edit_admin',this.session.uid===1);
},
logo_edit:function(ev){
    var self=this;
    new self.alive(instance.web.Model("res.users").get_func("read")(this.session.uid,["company_id"])).then(function(res){
        self.rpc("/web/action/load",{
            action_id:"base.action_res_company_form"
        }).done(function(result){
            result.res_id=res['company_id'][0];
            result.target="new";
            result.views=[[false,'form']];
            result.flags={
                action_buttons:true,
            };
            
            self.action_manager.do_action(result);
            var form=self.action_manager.dialog_widget.views.form.controller;
            form.on("on_button_cancel",self.action_manager.dialog,self.action_manager.dialog.close);
            form.on('record_saved',self,function(){
                self.action_manager.dialog.close();
                self.update_logo();
            });
        });
    });
    return false;
},
check_timezone:function(){
    var self=this;
    return self.alive(new instance.web.Model('res.users').call('read',[[this.session.uid],['tz_offset']])).then(function(result){
        var user_offset=result[0]['tz_offset'];
        var offset=-(new Date().getTimezoneOffset());
        var browser_offset=(offset<0)?"-":"+";
        browser_offset+=_.str.sprintf("%02d",Math.abs(offset/60));
        browser_offset+=_.str.sprintf("%02d",Math.abs(offset%60));
        if(browser_offset!==user_offset){
            var $icon=$(QWeb.render('WebClient.timezone_systray'));
            $icon.on('click',function(){
                var notification=self.do_warn(_t("Timezone mismatch"),QWeb.render('WebClient.timezone_notification',{
                    user_timezone:instance.session.user_context.tz||'UTC',
                    user_offset:user_offset,
                    browser_offset:browser_offset,
                }),true);
                notification.element.find('.oe_webclient_timezone_notification').on('click',function(){
                    notification.close();
                }).find('a').on('click',function(){
                    notification.close();
                    self.user_menu.on_menu_settings();
                    return false;
                });
            });
            $icon.appendTo(self.$('.oe_systray'));
        }
    });
},
destroy_content:function(){
    _.each(_.clone(this.getChildren()),function(el){
        el.destroy();
    });
    this.$el.children().remove();
},
do_reload:function(){
    var self=this;
    return this.session.session_reload().then(function(){
        instance.session.load_modules(true).then(self.menu.proxy('do_reload'));
    });
},
do_notify:function(){
    var n=this.notification;
    return n.notify.apply(n,arguments);
},
do_warn:function(){
    var n=this.notification;
    return n.warn.apply(n,arguments);
},
on_logout:function(){
    var self=this;
    if(!this.has_uncommitted_changes()){
        this.session.session_logout().done(function(){
            $(window).unbind('hashchange',self.on_hashchange);
            self.do_push_state({});
            window.location.reload();
        });
    }
},
bind_hashchange:function(){
    var self=this;
    $(window).bind('hashchange',this.on_hashchange);
    var state=$.bbq.getState(true);
    if(_.isEmpty(state)||state.action=="login"){
        self.menu.has_been_loaded.done(function(){
            var first_menu_id=self.menu.$el.find("a:first").data("menu");
            if(first_menu_id){
                self.menu.menu_click(first_menu_id);
            }
        });
}else{
    $(window).trigger('hashchange');
}
},
on_hashchange:function(event){
    var self=this;
    var stringstate=event.getState(false);
    if(!_.isEqual(this._current_state,stringstate)){
        var state=event.getState(true);
        if(!state.action&&state.menu_id){
            self.menu.has_been_loaded.done(function(){
                self.menu.do_reload().done(function(){
                    self.menu.menu_click(state.menu_id);
                });
            });
        }else{
            state._push_me=false;
            this.action_manager.do_load_state(state,!!this._current_state);
        }
    }
this._current_state=stringstate;
},
do_push_state:function(state){
    this.set_title(state.title);
    delete state.title;
    var url='#'+$.param(state);
    this._current_state=$.deparam($.param(state),false);
    $.bbq.pushState(url);
    this.trigger('state_pushed',state);
},
on_menu_action:function(options){
    var self=this;
    return this.menu_dm.add(this.rpc("/web/action/load",{
        action_id:options.action_id
        })).then(function(result){
        return self.action_mutex.exec(function(){
            if(options.needaction){
                result.context=new instance.web.CompoundContext(result.context,{
                    search_default_message_unread:true,
                    search_disable_custom_filters:true,
                });
            }
            var completed=$.Deferred();
            $.when(self.action_manager.do_action(result,{
                clear_breadcrumbs:true,
                action_menu_id:self.menu.current_menu,
            })).fail(function(){
                self.menu.open_menu(options.previous_menu_id);
            }).always(function(){
                completed.resolve();
            });
            setTimeout(function(){
                completed.resolve();
            },2000);
            return completed;
        });
    });
},
set_content_full_screen:function(fullscreen){
    $(document.body).css('overflow-y',fullscreen?'hidden':'scroll');
    this.$('.oe_webclient').toggleClass('oe_content_full_screen',fullscreen);
},
has_uncommitted_changes:function(){
    var $e=$.Event('clear_uncommitted_changes');
    instance.web.bus.trigger('clear_uncommitted_changes',$e);
    if($e.isDefaultPrevented()){
        return true;
    }else{
        return this._super.apply(this,arguments);
    }
},
});
instance.web.EmbeddedClient=instance.web.Client.extend({
    _template:'EmbedClient',
    init:function(parent,origin,dbname,login,key,action_id,options){
        this._super(parent,origin);
        this.bind_credentials(dbname,login,key);
        this.action_id=action_id;
        this.options=options||{};
    
},
start:function(){
    var self=this;
    return $.when(this._super()).then(function(){
        return self.authenticate().then(function(){
            if(!self.action_id){
                return;
            }
            return self.rpc("/web/action/load",{
                action_id:self.action_id
                }).done(function(result){
                var action=result;
                action.flags=_.extend({
                    search_view:false,
                    action_buttons:false,
                    sidebar:false
                },self.options,action.flags||{});
                self.do_action(action);
            });
        });
    });
},
do_action:function(action){
    return this.action_manager.do_action(action);
},
authenticate:function(){
    var s=instance.session;
    if(s.session_is_valid()&&s.db===this.dbname&&s.login===this.login){
        return $.when();
    }
    return instance.session.session_authenticate(this.dbname,this.login,this.key,true);
},
bind_credentials:function(dbname,login,key){
    this.dbname=dbname;
    this.login=login;
    this.key=key;
},
});
instance.web.embed=function(origin,dbname,login,key,action,options){
    $('head').append($('<link>',{
        'rel':'stylesheet',
        'type':'text/css',
        'href':origin+'/web/webclient/css'
        }));
    var currentScript=document.currentScript;
    if(!currentScript){
        var sc=document.getElementsByTagName('script');
        currentScript=sc[sc.length-1];
    }
    var client=new instance.web.EmbeddedClient(null,origin,dbname,login,key,action,options);
    client.insertAfter(currentScript);
};

};
;

openerp.web.views=function(instance){
    var QWeb=instance.web.qweb,_t=instance.web._t;
    instance.web.ActionManager=instance.web.Widget.extend({
        init:function(parent){
            this._super(parent);
            this.inner_action=null;
            this.inner_widget=null;
            this.dialog=null;
            this.dialog_widget=null;
            this.breadcrumbs=[];
            this.on('history_back',this,function(){
                return this.history_back();
            });
        },
        start:function(){
            this._super.apply(this,arguments);
            this.$el.on('click','a.oe_breadcrumb_item',this.on_breadcrumb_clicked);
        },
        dialog_stop:function(){
            if(this.dialog){
                this.dialog.destroy();
            }
            this.dialog=null;
        },
        push_breadcrumb:function(item){
            var last=this.breadcrumbs.slice(-1)[0];
            if(last){
                last.hide();
            }
            var item=_.extend({
                show:function(index){
                    this.widget.$el.show();
                },
                hide:function(){
                    this.widget.$el.hide();
                },
                destroy:function(){
                    this.widget.destroy();
                },
                get_title:function(){
                    return this.title||this.widget.get('title');
                }
            },item);
        item.id=_.uniqueId('breadcrumb_');
        this.breadcrumbs.push(item);
    },
    history_back:function(){
        var last=this.breadcrumbs.slice(-1)[0];
        if(!last){
            return false;
        }
        var title=last.get_title();
        if(_.isArray(title)&&title.length>1){
            return this.select_breadcrumb(this.breadcrumbs.length-1,title.length-2);
        }else if(this.breadcrumbs.length===1){
            return false;
        }else{
            var prev=this.breadcrumbs[this.breadcrumbs.length-2];
            title=prev.get_title();
            return this.select_breadcrumb(this.breadcrumbs.length-2,_.isArray(title)?title.length-1:undefined);
        }
    },
    on_breadcrumb_clicked:function(ev){
        var $e=$(ev.target);
        var id=$e.data('id');
        var index;
        for(var i=this.breadcrumbs.length-1;i>=0;i--){
            if(this.breadcrumbs[i].id==id){
                index=i;
                break;
            }
        }
    var subindex=$e.parent().find('a.oe_breadcrumb_item[data-id='+$e.data('id')+']').index($e);
    this.select_breadcrumb(index,subindex);
},
select_breadcrumb:function(index,subindex){
    var next_item=this.breadcrumbs[index+1];
    if(next_item&&next_item.on_reverse_breadcrumb){
        next_item.on_reverse_breadcrumb(this.breadcrumbs[index].widget);
    }
    for(var i=this.breadcrumbs.length-1;i>=0;i--){
        if(i>index){
            if(this.remove_breadcrumb(i)===false){
                return false;
            }
        }
    }
var item=this.breadcrumbs[index];
item.show(subindex);
this.inner_widget=item.widget;
this.inner_action=item.action;
return true;
},
clear_breadcrumbs:function(){
    for(var i=this.breadcrumbs.length-1;i>=0;i--){
        if(this.remove_breadcrumb(0)===false){
            break;
        }
    }
    },
remove_breadcrumb:function(index){
    var item=this.breadcrumbs.splice(index,1)[0];
    if(item){
        var dups=_.filter(this.breadcrumbs,function(it){
            return item.widget===it.widget;
        });
        if(!dups.length){
            if(this.getParent().has_uncommitted_changes()){
                this.inner_widget=item.widget;
                this.inner_action=item.action;
                this.breadcrumbs.splice(index,0,item);
                return false;
            }else{
                item.destroy();
            }
        }
    }
var last_widget=this.breadcrumbs.slice(-1)[0];
if(last_widget){
    this.inner_widget=last_widget.widget;
    this.inner_action=last_widget.action;
}
},
get_title:function(){
    var titles=[];
    for(var i=0;i<this.breadcrumbs.length;i+=1){
        var item=this.breadcrumbs[i];
        var tit=item.get_title();
        if(!_.isArray(tit)){
            tit=[tit];
        }
        for(var j=0;j<tit.length;j+=1){
            var label=_.escape(tit[j]);
            if(i===this.breadcrumbs.length-1&&j===tit.length-1){
                titles.push(_.str.sprintf('<span class="oe_breadcrumb_item">%s</span>',label));
            }else{
                titles.push(_.str.sprintf('<a href="#" class="oe_breadcrumb_item" data-id="%s">%s</a>',item.id,label));
            }
        }
        }
return titles.join(' <span class="oe_fade">/</span> ');
},
do_push_state:function(state){
    state=state||{};
    
    if(this.getParent()&&this.getParent().do_push_state){
        if(this.inner_action){
            if(this.inner_action._push_me===false){
                return;
            }
            state['title']=this.inner_action.name;
            if(this.inner_action.type=='ir.actions.act_window'){
                state['model']=this.inner_action.res_model;
            }
            if(this.inner_action.menu_id){
                state['menu_id']=this.inner_action.menu_id;
            }
            if(this.inner_action.id){
                state['action']=this.inner_action.id;
            }else if(this.inner_action.type=='ir.actions.client'){
                state['action']=this.inner_action.tag;
                var params={};
                
                _.each(this.inner_action.params,function(v,k){
                    if(_.isString(v)||_.isNumber(v)){
                        params[k]=v;
                    }
                });
            state=_.extend(params||{},state);
        }
        if(this.inner_action.context){
            var active_id=this.inner_action.context.active_id;
            if(active_id){
                state["active_id"]=active_id;
            }
            var active_ids=this.inner_action.context.active_ids;
            if(active_ids&&!(active_ids.length===1&&active_ids[0]===active_id)){
                state["active_ids"]=this.inner_action.context.active_ids.join(',');
            }
        }
    }
if(!this.dialog){
    this.getParent().do_push_state(state);
}
}
},
do_load_state:function(state,warm){
    var self=this,action_loaded;
    if(state.action){
        if(_.isString(state.action)&&instance.web.client_actions.contains(state.action)){
            var action_client={
                type:"ir.actions.client",
                tag:state.action,
                params:state,
                _push_me:state._push_me,
            };
            
            this.null_action();
            action_loaded=this.do_action(action_client);
        }else{
            var run_action=(!this.inner_widget||!this.inner_widget.action)||this.inner_widget.action.id!==state.action;
            if(run_action){
                var add_context={};
                
                if(state.active_id){
                    add_context.active_id=state.active_id;
                }
                if(state.active_ids){
                    add_context.active_ids=state.active_ids.toString().split(',').map(function(id){
                        return parseInt(id,10)||id;
                    });
                }else if(state.active_id){
                    add_context.active_ids=[state.active_id];
                }
                this.null_action();
                action_loaded=this.do_action(state.action,{
                    additional_context:add_context
                });
                $.when(action_loaded||null).done(function(){
                    instance.webclient.menu.has_been_loaded.done(function(){
                        if(self.inner_action&&self.inner_action.id){
                            instance.webclient.menu.open_action(self.inner_action.id);
                        }
                    });
                });
        }
    }
}else if(state.model&&state.id){
    this.null_action();
    var action={
        res_model:state.model,
        res_id:state.id,
        type:'ir.actions.act_window',
        views:[[false,'form']]
        };
        
    action_loaded=this.do_action(action);
}else if(state.sa){
    this.null_action();
    action_loaded=this.rpc('/web/session/get_session_action',{
        key:state.sa
        }).then(function(action){
        if(action){
            return self.do_action(action);
        }
    });
}
$.when(action_loaded||null).done(function(){
    if(self.inner_widget&&self.inner_widget.do_load_state){
        self.inner_widget.do_load_state(state,warm);
    }
});
},
do_action:function(action,options){
    options=_.defaults(options||{},{
        clear_breadcrumbs:false,
        on_reverse_breadcrumb:function(){},
        on_close:function(){},
        action_menu_id:null,
        additional_context:{},
    });
    if(action===false){
        action={
            type:'ir.actions.act_window_close'
        };
    
}else if(_.isString(action)&&instance.web.client_actions.contains(action)){
    var action_client={
        type:"ir.actions.client",
        tag:action,
        params:{}
};

return this.do_action(action_client,options);
}else if(_.isNumber(action)||_.isString(action)){
    var self=this;
    return self.rpc("/web/action/load",{
        action_id:action
    }).then(function(result){
        return self.do_action(result,options);
    });
}
var ncontext=new instance.web.CompoundContext(options.additional_context,action.context||{});
action.context=instance.web.pyeval.eval('context',ncontext);
if(action.context.active_id||action.context.active_ids){
    action.context.search_disable_custom_filters=true;
}
if(action.domain){
    action.domain=instance.web.pyeval.eval('domain',action.domain,action.context||{});
}
if(!action.type){
    console.error("No type for action",action);
    return $.Deferred().reject();
}
var type=action.type.replace(/\./g,'_');
var popup=action.target==='new';
var inline=action.target==='inline'||action.target==='inlineview';
action.flags=_.defaults(action.flags||{},{
    views_switcher:!popup&&!inline,
    search_view:!popup&&!inline,
    action_buttons:!popup&&!inline,
    sidebar:!popup&&!inline,
    pager:!popup&&!inline,
    display_title:!popup,
    search_disable_custom_filters:action.context&&action.context.search_disable_custom_filters
    });
action.menu_id=options.action_menu_id;
if(!(type in this)){
    console.error("Action manager can't handle action of type "+action.type,action);
    return $.Deferred().reject();
}
return this[type](action,options);
},
null_action:function(){
    this.dialog_stop();
    this.clear_breadcrumbs();
},
ir_actions_common:function(executor,options){
    if(this.inner_widget&&executor.action.target!=='new'){
        if(this.getParent().has_uncommitted_changes()){
            return $.Deferred().reject();
        }else if(options.clear_breadcrumbs){
            this.clear_breadcrumbs();
        }
    }
var widget=executor.widget();
if(executor.action.target==='new'){
    if(this.dialog_widget&&!this.dialog_widget.isDestroyed()){
        this.dialog_widget.destroy();
    }
    this.dialog_stop();
    this.dialog=new instance.web.Dialog(this,{
        dialogClass:executor.klass,
    });
    this.dialog.on("closing",null,options.on_close);
    this.dialog.dialog_title=executor.action.name;
    if(widget instanceof instance.web.ViewManager){
        _.extend(widget.flags,{
            $buttons:this.dialog.$buttons,
            footer_to_buttons:true,
        });
    }
    this.dialog_widget=widget;
    this.dialog_widget.setParent(this.dialog);
    var initialized=this.dialog_widget.appendTo(this.dialog.$el);
    this.dialog.open();
    return initialized;
}else{
    this.dialog_stop();
    this.inner_action=executor.action;
    this.inner_widget=widget;
    executor.post_process(widget);
    return this.inner_widget.appendTo(this.$el);
}
},
ir_actions_act_window:function(action,options){
    var self=this;
    return this.ir_actions_common({
        widget:function(){
            return new instance.web.ViewManagerAction(self,action);
        },
        action:action,
        klass:'oe_act_window',
        post_process:function(widget){
            widget.add_breadcrumb(options.on_reverse_breadcrumb);
        }
    },options);
},
ir_actions_client:function(action,options){
    var self=this;
    var ClientWidget=instance.web.client_actions.get_object(action.tag);
    if(!(ClientWidget.prototype instanceof instance.web.Widget)){
        var next;
        if(next=ClientWidget(this,action)){
            return this.do_action(next,options);
        }
        return $.when();
    }
    return this.ir_actions_common({
        widget:function(){
            return new ClientWidget(self,action);
        },
        action:action,
        klass:'oe_act_client',
        post_process:function(widget){
            self.push_breadcrumb({
                widget:widget,
                title:action.name,
                on_reverse_breadcrumb:options.on_reverse_breadcrumb,
            });
            if(action.tag!=='reload'){
                self.do_push_state({});
            }
        }
    },options);
},
ir_actions_act_window_close:function(action,options){
    if(!this.dialog){
        options.on_close();
    }
    this.dialog_stop();
    return $.when();
},
ir_actions_server:function(action,options){
    var self=this;
    this.rpc('/web/action/run',{
        action_id:action.id,
        context:action.context||{}
    }).done(function(action){
    self.do_action(action,options)
    });
},
ir_actions_report_xml:function(action,options){
    var self=this;
    instance.web.blockUI();
    return instance.web.pyeval.eval_domains_and_contexts({
        contexts:[action.context],
        domains:[]
    }).then(function(res){
        action=_.clone(action);
        action.context=res.context;
        var c=instance.webclient.crashmanager;
        return $.Deferred(function(d){
            self.session.get_file({
                url:'/web/report',
                data:{
                    action:JSON.stringify(action)
                    },
                complete:instance.web.unblockUI,
                success:function(){
                    if(!self.dialog){
                        options.on_close();
                    }
                    self.dialog_stop();
                    d.resolve();
                },
                error:function(){
                    c.rpc_error.apply(c,arguments);
                    d.reject();
                }
            })
        });
    });
},
ir_actions_act_url:function(action){
    window.open(action.url,action.target==='self'?'_self':'_blank');
    return $.when();
},
});
instance.web.ViewManager=instance.web.Widget.extend({
    template:"ViewManager",
    init:function(parent,dataset,views,flags){
        this._super(parent);
        this.url_states={};
        
        this.model=dataset?dataset.model:undefined;
        this.dataset=dataset;
        this.searchview=null;
        this.active_view=null;
        this.views_src=_.map(views,function(x){
            if(x instanceof Array){
                var view_type=x[1];
                var View=instance.web.views.get_object(view_type,true);
                var view_label=View?View.prototype.display_name:(void'nope');
                return{
                    view_id:x[0],
                    view_type:view_type,
                    label:view_label,
                    button_label:View?_.str.sprintf(_t('%(view_type)s view'),{
                        'view_type':(view_label||view_type)
                        }):(void'nope'),
                };
            
        }else{
            return x;
        }
        });
this.views={};

this.flags=flags||{};

this.registry=instance.web.views;
this.views_history=[];
this.view_completely_inited=$.Deferred();
},
start:function(){
    this._super();
    var self=this;
    this.$el.find('.oe_view_manager_switch a').click(function(){
        self.switch_mode($(this).data('view-type'));
    }).tipsy();
    var views_ids={};
    
    _.each(this.views_src,function(view){
        self.views[view.view_type]=$.extend({},view,{
            deferred:$.Deferred(),
            controller:null,
            options:_.extend({
                $buttons:self.$el.find('.oe_view_manager_buttons'),
                $sidebar:self.flags.sidebar?self.$el.find('.oe_view_manager_sidebar'):undefined,
                $pager:self.$el.find('.oe_view_manager_pager'),
                action:self.action,
                action_views_ids:views_ids
            },self.flags,self.flags[view.view_type]||{},view.options||{})
            });
        views_ids[view.view_type]=view.view_id;
    });
    if(this.flags.views_switcher===false){
        this.$el.find('.oe_view_manager_switch').hide();
    }
    var default_view=this.flags.default_view||this.views_src[0].view_type;
    return this.switch_mode(default_view);
},
switch_mode:function(view_type,no_store,view_options){
    var self=this;
    var view=this.views[view_type];
    var view_promise;
    var form=this.views['form'];
    if(!view||(form&&form.controller&&!form.controller.can_be_discarded())){
        self.trigger('switch_mode',view_type,no_store,view_options);
        return $.Deferred().reject();
    }
    if(!no_store){
        this.views_history.push(view_type);
    }
    this.active_view=view_type;
    if(!view.controller){
        view_promise=this.do_create_view(view_type);
    }else if(this.searchview&&self.flags.auto_search&&view.controller.searchable!==false){
        this.searchview.ready.done(this.searchview.do_search);
    }
    if(this.searchview){
        this.searchview[(view.controller.searchable===false||this.searchview.options.hidden)?'hide':'show']();
    }
    this.$el.find('.oe_view_manager_switch a').parent().removeClass('active');
    this.$el.find('.oe_view_manager_switch a').filter('[data-view-type="'+view_type+'"]').parent().addClass('active');
    return $.when(view_promise).done(function(){
        _.each(_.keys(self.views),function(view_name){
            var controller=self.views[view_name].controller;
            if(controller){
                var container=self.$el.find("> .oe_view_manager_body > .oe_view_manager_view_"+view_name);
                if(view_name===view_type){
                    container.show();
                    controller.do_show(view_options||{});
                }else{
                    container.hide();
                    controller.do_hide();
                }
            }
        });
    self.trigger('switch_mode',view_type,no_store,view_options);
});
},
do_create_view:function(view_type){
    var self=this;
    var view=this.views[view_type];
    var viewclass=this.registry.get_object(view_type);
    var options=_.clone(view.options);
    if(view_type==="form"&&this.action&&(this.action.target=='new'||this.action.target=='inline')){
        options.initial_mode='edit';
    }
    var controller=new viewclass(this,this.dataset,view.view_id,options);
    controller.on('history_back',this,function(){
        var am=self.getParent();
        if(am&&am.trigger){
            return am.trigger('history_back');
        }
    });
controller.on("change:title",this,function(){
    if(self.active_view===view_type){
        self.set_title(controller.get('title'));
    }
});
if(view.embedded_view){
    controller.set_embedded_view(view.embedded_view);
}
controller.on('switch_mode',self,this.switch_mode);
controller.on('previous_view',self,this.prev_view);
var container=this.$el.find("> .oe_view_manager_body > .oe_view_manager_view_"+view_type);
var view_promise=controller.appendTo(container);
this.views[view_type].controller=controller;
this.views[view_type].deferred.resolve(view_type);
return $.when(view_promise).done(function(){
    if(self.searchview&&self.flags.auto_search&&view.controller.searchable!==false){
        self.searchview.ready.done(self.searchview.do_search);
    }else{
        self.view_completely_inited.resolve();
    }
    self.trigger("controller_inited",view_type,controller);
});
},
get_view_id:function(view_type){
    return this.views[view_type]&&this.views[view_type].view_id||false;
},
set_title:function(title){
    this.$el.find('.oe_view_title_text:first').text(title);
},
add_breadcrumb:function(on_reverse_breadcrumb){
    var self=this;
    var views=[this.active_view||this.views_src[0].view_type];
    this.on('switch_mode',self,function(mode){
        var last=views.slice(-1)[0];
        if(mode!==last){
            if(mode!=='form'){
                views.length=0;
            }
            views.push(mode);
        }
    });
this.getParent().push_breadcrumb({
    widget:this,
    action:this.action,
    show:function(index){
        var view_to_select=views[index];
        var state=self.url_states[view_to_select];
        self.do_push_state(state||{});
        $.when(self.switch_mode(view_to_select)).done(function(){
            self.$el.show();
        });
    },
    get_title:function(){
        var id;
        var currentIndex;
        _.each(self.getParent().breadcrumbs,function(bc,i){
            if(bc.widget===self){
                currentIndex=i;
            }
        });
    var next=self.getParent().breadcrumbs.slice(currentIndex+1)[0];
    var titles=_.map(views,function(v){
        var controller=self.views[v].controller;
        if(v==='form'){
            id=controller.datarecord.id;
        }
        return controller.get('title');
    });
    if(next&&next.action&&next.action.res_id&&self.dataset&&self.active_view==='form'&&self.dataset.model===next.action.res_model&&id===next.action.res_id){
        titles.pop();
    }
    return titles;
},
on_reverse_breadcrumb:on_reverse_breadcrumb,
});
},
prev_view:function(options){
    options=options||{};
    
    var current_view=this.views_history.pop();
    var previous_view=this.views_history[this.views_history.length-1]||options['default'];
    if(options.created&&current_view==='form'&&previous_view==='list'){
        return this.switch_mode('form');
    }else if(options.created&&!previous_view&&this.action&&this.action.flags.default_view==='form'){
        return this.switch_mode('form');
    }
    return this.switch_mode(previous_view,true);
},
setup_search_view:function(view_id,search_defaults){
    var self=this;
    if(this.searchview){
        this.searchview.destroy();
    }
    var options={
        hidden:this.flags.search_view===false,
        disable_custom_filters:this.flags.search_disable_custom_filters,
    };
    
    this.searchview=new instance.web.SearchView(this,this.dataset,view_id,search_defaults,options);
    this.searchview.on('search_data',self,this.do_searchview_search);
    return this.searchview.appendTo(this.$el.find(".oe_view_manager_view_search"));
},
do_searchview_search:function(domains,contexts,groupbys){
    var self=this,controller=this.views[this.active_view].controller,action_context=this.action.context||{};
    
    instance.web.pyeval.eval_domains_and_contexts({
        domains:[this.action.domain||[]].concat(domains||[]),
        contexts:[action_context].concat(contexts||[]),
        group_by_seq:groupbys||[]
        }).done(function(results){
        self.dataset._model=new instance.web.Model(self.dataset.model,results.context,results.domain);
        var groupby=results.group_by.length?results.group_by:action_context.group_by;
        if(_.isString(groupby)){
            groupby=[groupby];
        }
        $.when(controller.do_search(results.domain,results.context,groupby||[])).then(function(){
            self.view_completely_inited.resolve();
        });
    });
},
on_action:function(action){},
on_create:function(){},
on_remove:function(){},
on_edit:function(){},
on_action_executed:function(){},
});
instance.web.ViewManagerAction=instance.web.ViewManager.extend({
    template:"ViewManagerAction",
    init:function(parent,action){
        var flags=action.flags||{};
        
        if(!('auto_search'in flags)){
            flags.auto_search=action.auto_search!==false;
        }
        if(action.res_model=='board.board'&&action.view_mode==='form'){
            _.extend(flags,{
                views_switcher:false,
                display_title:false,
                search_view:false,
                pager:false,
                sidebar:false,
                action_buttons:false
            });
        }
        this._super(parent,null,action.views,flags);
        this.session=parent.session;
        this.action=action;
        var dataset=new instance.web.DataSetSearch(this,action.res_model,action.context,action.domain);
        if(action.res_id){
            dataset.ids.push(action.res_id);
            dataset.index=0;
        }
        this.dataset=dataset;
    },
    start:function(){
        var self=this,searchview_loaded,search_defaults={};
        
        _.each(this.action.context,function(value,key){
            var match=/^search_default_(.*)$/.exec(key);
            if(match){
                search_defaults[match[1]]=value;
            }
        });
    var searchview_id=this.action['search_view_id']&&this.action['search_view_id'][0];
    searchview_loaded=this.setup_search_view(searchview_id||false,search_defaults);
    var main_view_loaded=this._super();
    var manager_ready=$.when(searchview_loaded,main_view_loaded,this.view_completely_inited);
    this.$el.find('.oe_debug_view').change(this.on_debug_changed);
    this.$el.addClass("oe_view_manager_"+(this.action.target||'current'));
    return manager_ready;
},
on_debug_changed:function(evt){
    var self=this,$sel=$(evt.currentTarget),$option=$sel.find('option:selected'),val=$sel.val(),current_view=this.views[this.active_view].controller;
    switch(val){
        case'fvg':
            var dialog=new instance.web.Dialog(this,{
            title:_t("Fields View Get"),
            width:'95%'
        }).open();
            $('<pre>').text(instance.web.json_node_to_xml(current_view.fields_view.arch,true)).appendTo(dialog.$el);
            break;
        case'tests':
            this.do_action({
            name:_t("JS Tests"),
            target:'new',
            type:'ir.actions.act_url',
            url:'/web/tests?mod=*'
        });
        break;
        case'perm_read':
            var ids=current_view.get_selected_ids();
            if(ids.length===1){
            this.dataset.call('perm_read',[ids]).done(function(result){
                var dialog=new instance.web.Dialog(this,{
                    title:_.str.sprintf(_t("View Log (%s)"),self.dataset.model),
                    width:400
                },QWeb.render('ViewManagerDebugViewLog',{
                    perm:result[0],
                    format:instance.web.format_value
                    })).open();
            });
        }
        break;
        case'toggle_layout_outline':
            current_view.rendering_engine.toggle_layout_debugging();
            break;
        case'set_defaults':
            current_view.open_defaults_dialog();
            break;
        case'translate':
            this.do_action({
            name:_t("Technical Translation"),
            res_model:'ir.translation',
            domain:[['type','!=','object'],'|',['name','=',this.dataset.model],['name','ilike',this.dataset.model+',']],
            views:[[false,'list'],[false,'form']],
            type:'ir.actions.act_window',
            view_type:"list",
            view_mode:"list"
        });
        break;
        case'fields':
            this.dataset.call('fields_get',[false,{}]).done(function(fields){
            var $root=$('<dl>');
            _(fields).each(function(attributes,name){
                $root.append($('<dt>').append($('<h4>').text(name)));
                var $attrs=$('<dl>').appendTo($('<dd>').appendTo($root));
                _(attributes).each(function(def,name){
                    if(def instanceof Object){
                        def=JSON.stringify(def);
                    }
                    $attrs.append($('<dt>').text(name)).append($('<dd style="white-space: pre-wrap;">').text(def));
                });
            });
            new instance.web.Dialog(self,{
                title:_.str.sprintf(_t("Model %s fields"),self.dataset.model),
                width:'95%'
            },$root).open();
        });
        break;
        case'edit_workflow':
            return this.do_action({
            res_model:'workflow',
            domain:[['osv','=',this.dataset.model]],
            views:[[false,'list'],[false,'form'],[false,'diagram']],
            type:'ir.actions.act_window',
            view_type:'list',
            view_mode:'list'
        });
        break;
        case'edit':
            this.do_edit_resource($option.data('model'),$option.data('id'),{
            name:$option.text()
            });
        break;
        case'manage_filters':
            this.do_action({
            res_model:'ir.filters',
            views:[[false,'list'],[false,'form']],
            type:'ir.actions.act_window',
            context:{
                search_default_my_filters:true,
                search_default_model_id:this.dataset.model
                }
            });
        break;
    case'print_workflow':
        if(current_view.get_selected_ids&&current_view.get_selected_ids().length==1){
        instance.web.blockUI();
        var action={
            context:{
                active_ids:current_view.get_selected_ids()
                },
            report_name:"workflow.instance.graph",
            datas:{
                model:this.dataset.model,
                id:current_view.get_selected_ids()[0],
                nested:true,
            }
        };
        
    this.session.get_file({
        url:'/web/report',
        data:{
            action:JSON.stringify(action)
            },
        complete:instance.web.unblockUI
        });
    }
    break;
default:
    if(val){
    console.log("No debug handler for ",val);
}
}
evt.currentTarget.selectedIndex=0;
},
do_edit_resource:function(model,id,action){
    var action=_.extend({
        res_model:model,
        res_id:id,
        type:'ir.actions.act_window',
        view_type:'form',
        view_mode:'form',
        views:[[false,'form']],
        target:'new',
        flags:{
            action_buttons:true,
            form:{
                resize_textareas:true
            }
        }
    },action||{});
this.do_action(action);
},
switch_mode:function(view_type,no_store,options){
    var self=this;
    return $.when(this._super.apply(this,arguments)).done(function(){
        var controller=self.views[self.active_view].controller;
        self.$el.find('.oe_debug_view').html(QWeb.render('ViewManagerDebug',{
            view:controller,
            view_manager:self
        }));
        self.set_title();
    });
},
do_create_view:function(view_type){
    var self=this;
    return this._super.apply(this,arguments).then(function(){
        var view=self.views[view_type].controller;
        view.set({
            'title':self.action.name
            });
    });
},
get_action_manager:function(){
    var cur=this;
    while(cur=cur.getParent()){
        if(cur instanceof instance.web.ActionManager){
            return cur;
        }
    }
return undefined;
},
set_title:function(title){
    this.$el.find('.oe_breadcrumb_title:first').html(this.get_action_manager().get_title());
},
do_push_state:function(state){
    if(this.getParent()&&this.getParent().do_push_state){
        state["view_type"]=this.active_view;
        this.url_states[this.active_view]=state;
        this.getParent().do_push_state(state);
    }
},
do_load_state:function(state,warm){
    var self=this,defs=[];
    if(state.view_type&&state.view_type!==this.active_view){
        defs.push(this.views[this.active_view].deferred.then(function(){
            return self.switch_mode(state.view_type,true);
        }));
    }
    $.when(defs).done(function(){
        self.views[self.active_view].controller.do_load_state(state,warm);
    });
},
});
instance.web.Sidebar=instance.web.Widget.extend({
    init:function(parent){
        var self=this;
        this._super(parent);
        var view=this.getParent();
        this.sections=[{
            'name':'print',
            'label':_t('Print'),
        },{
            'name':'other',
            'label':_t('More'),
        }];
        this.items={
            'print':[],
            'other':[]
        };
        
        this.fileupload_id=_.uniqueId('oe_fileupload');
        $(window).on(this.fileupload_id,function(){
            var args=[].slice.call(arguments).slice(1);
            self.do_attachement_update(self.dataset,self.model_id,args);
            instance.web.unblockUI();
        });
    },
    start:function(){
        var self=this;
        this._super(this);
        this.redraw();
        this.$el.on('click','.oe_dropdown_menu li a',function(event){
            var section=$(this).data('section');
            var index=$(this).data('index');
            var item=self.items[section][index];
            if(item.callback){
                item.callback.apply(self,[item]);
            }else if(item.action){
                self.on_item_action_clicked(item);
            }else if(item.url){
                return true;
            }
            event.preventDefault();
        });
    },
    redraw:function(){
        var self=this;
        self.$el.html(QWeb.render('Sidebar',{
            widget:self
        }));
        this.$('.oe_form_dropdown_section').each(function(){
            $(this).toggle(!!$(this).find('li').length);
        });
        self.$("[title]").tipsy({
            'html':true,
            'delayIn':500,
        })
        },
    add_items:function(section_code,items){
        var self=this;
        if(items){
            this.items[section_code].push.apply(this.items[section_code],items);
            this.redraw();
        }
    },
add_toolbar:function(toolbar){
    var self=this;
    _.each(['print','action','relate'],function(type){
        var items=toolbar[type];
        if(items){
            for(var i=0;i<items.length;i++){
                items[i]={
                    label:items[i]['name'],
                    action:items[i],
                    classname:'oe_sidebar_'+type
                    }
                }
        self.add_items(type=='print'?'print':'other',items);
    }
    });
},
on_item_action_clicked:function(item){
    var self=this;
    self.getParent().sidebar_eval_context().done(function(sidebar_eval_context){
        var ids=self.getParent().get_selected_ids();
        if(ids.length==0){
            instance.web.dialog($("<div />").text(_t("You must choose at least one record.")),{
                title:_t("Warning"),
                modal:true
            });
            return false;
        }
        var active_ids_context={
            active_id:ids[0],
            active_ids:ids,
            active_model:self.getParent().dataset.model
            };
            
        var c=instance.web.pyeval.eval('context',new instance.web.CompoundContext(sidebar_eval_context,active_ids_context));
        self.rpc("/web/action/load",{
            action_id:item.action.id,
            context:c
        }).done(function(result){
            result.context=new instance.web.CompoundContext(result.context||{},active_ids_context).set_eval_context(c);
            result.flags=result.flags||{};
            
            result.flags.new_window=true;
            self.do_action(result,{
                on_close:function(){
                    self.getParent().reload();
                },
            });
        });
    });
},
do_attachement_update:function(dataset,model_id,args){
    var self=this;
    this.dataset=dataset;
    this.model_id=model_id;
    if(args&&args[0].error){
        this.do_warn(instance.web.qweb.render('message_error_uploading'),args[0].error);
    }
    if(!model_id){
        this.on_attachments_loaded([]);
    }else{
        var dom=[['res_model','=',dataset.model],['res_id','=',model_id],['type','in',['binary','url']]];
        var ds=new instance.web.DataSetSearch(this,'ir.attachment',dataset.get_context(),dom);
        ds.read_slice(['name','url','type','create_uid','create_date','write_uid','write_date'],{}).done(this.on_attachments_loaded);
    }
},
on_attachments_loaded:function(attachments){
    var self=this;
    var items=[];
    var prefix=this.session.url('/web/binary/saveas',{
        model:'ir.attachment',
        field:'datas',
        filename_field:'name'
    });
    _.each(attachments,function(a){
        a.label=a.name;
        if(a.type==="binary"){
            a.url=prefix+'&id='+a.id+'&t='+(new Date().getTime());
        }
    });
self.items['files']=attachments;
self.redraw();
this.$('.oe_sidebar_add_attachment .oe_form_binary_file').change(this.on_attachment_changed);
this.$el.find('.oe_sidebar_delete_item').click(this.on_attachment_delete);
},
on_attachment_changed:function(e){
    var $e=$(e.target);
    if($e.val()!==''){
        this.$el.find('form.oe_form_binary_form').submit();
        $e.parent().find('input[type=file]').prop('disabled',true);
        $e.parent().find('button').prop('disabled',true).find('img, span').toggle();
        this.$('.oe_sidebar_add_attachment span').text(_t('Uploading...'));
        instance.web.blockUI();
    }
},
on_attachment_delete:function(e){
    e.preventDefault();
    e.stopPropagation();
    var self=this;
    var $e=$(e.currentTarget);
    if(confirm(_t("Do you really want to delete this attachment ?"))){
        (new instance.web.DataSet(this,'ir.attachment')).unlink([parseInt($e.attr('data-id'),10)]).done(function(){
            self.do_attachement_update(self.dataset,self.model_id);
        });
    }
}
});
instance.web.View=instance.web.Widget.extend({
    display_name:'',
    view_type:undefined,
    init:function(parent,dataset,view_id,options){
        this._super(parent);
        this.dataset=dataset;
        this.view_id=view_id;
        this.set_default_options(options);
    },
    start:function(){
        return this.load_view();
    },
    load_view:function(context){
        var self=this;
        var view_loaded_def;
        if(this.embedded_view){
            view_loaded_def=$.Deferred();
            $.async_when().done(function(){
                view_loaded_def.resolve(self.embedded_view);
            });
        }else{
            if(!this.view_type)
                console.warn("view_type is not defined",this);
            view_loaded_def=instance.web.fields_view_get({
                "model":this.dataset._model,
                "view_id":this.view_id,
                "view_type":this.view_type,
                "toolbar":!!this.options.$sidebar,
            });
        }
        return view_loaded_def.then(function(r){
            self.fields_view=r;
            self.$el.addClass('oe_view').toggleClass('oe_cannot_create',!self.is_action_enabled('create')).toggleClass('oe_cannot_edit',!self.is_action_enabled('edit')).toggleClass('oe_cannot_delete',!self.is_action_enabled('delete'));
            return $.when(self.view_loading(r)).then(function(){
                self.trigger('view_loaded',r);
            });
        });
    },
    view_loading:function(r){},
    set_default_options:function(options){
        this.options=options||{};
        
        _.defaults(this.options,{
            $sidebar:null,
            sidebar_id:null,
            action:null,
            action_views_ids:{}
        });
},
do_execute_action:function(action_data,dataset,record_id,on_closed){
    var self=this;
    var result_handler=function(){
        if(on_closed){
            on_closed.apply(null,arguments);
        }
        if(self.getParent()&&self.getParent().on_action_executed){
            return self.getParent().on_action_executed.apply(null,arguments);
        }
    };
    
var context=new instance.web.CompoundContext(dataset.get_context(),action_data.context||{});
    var handler=function(action){
    if(action&&action.constructor==Object){
        var ncontext=new instance.web.CompoundContext(context);
        if(record_id){
            ncontext.add({
                active_id:record_id,
                active_ids:[record_id],
                active_model:dataset.model
                });
        }
        ncontext.add(action.context||{});
        action.context=ncontext;
        return self.do_action(action,{
            on_close:result_handler,
        });
    }else{
        self.do_action({
            "type":"ir.actions.act_window_close"
        });
        return result_handler();
    }
};

if(action_data.special==='cancel'){
    return handler({
        "type":"ir.actions.act_window_close"
    });
}else if(action_data.type=="object"){
    var args=[[record_id]],additional_args=[];
    if(action_data.args){
        try{
            additional_args=JSON.parse(action_data.args.replace(/'/g,'"'));
            args=args.concat(additional_args);
        }catch(e){
            console.error("Could not JSON.parse arguments",action_data.args);
        }
    }
args.push(context);
return dataset.call_button(action_data.name,args).then(handler);
}else if(action_data.type=="action"){
    return this.rpc('/web/action/load',{
        action_id:action_data.name,
        context:instance.web.pyeval.eval('context',context),
        do_not_eval:true
    }).then(handler);
}else{
    return dataset.exec_workflow(record_id,action_data.name).then(handler);
}
},
set_embedded_view:function(embedded_view){
    this.embedded_view=embedded_view;
},
do_show:function(){
    this.$el.show();
},
do_hide:function(){
    this.$el.hide();
},
is_active:function(){
    var manager=this.getParent();
    return!manager||!manager.active_view||manager.views[manager.active_view].controller===this;
},
guard_active:function(fn){
    var self=this;
    return function(){
        if(self.is_active()){
            fn.apply(self,arguments);
        }
    }
},
do_push_state:function(state){
    if(this.getParent()&&this.getParent().do_push_state){
        this.getParent().do_push_state(state);
    }
},
do_load_state:function(state,warm){},
do_switch_view:function(){
    this.trigger.apply(this,['switch_mode'].concat(_.toArray(arguments)));
},
do_search:function(view){},
on_sidebar_export:function(){
    new instance.web.DataExport(this,this.dataset).open();
},
sidebar_eval_context:function(){
    return $.when({});
},
reload:function(){
    return $.when();
},
is_action_enabled:function(action){
    var attrs=this.fields_view.arch.attrs;
    return(action in attrs)?JSON.parse(attrs[action]):true;
}
});
instance.web.fields_view_get=function(args){
    function postprocess(fvg){
        var doc=$.parseXML(fvg.arch).documentElement;
        fvg.arch=instance.web.xml_to_json(doc,(doc.nodeName.toLowerCase()!=='kanban'));
        if('id'in fvg.fields){
            var id_field=fvg.fields['id'];
            id_field.original_type=id_field.type;
            id_field.type='id';
        }
        _.each(fvg.fields,function(field){
            _.each(field.views||{},function(view){
                postprocess(view);
            });
        });
        return fvg;
    }
    args=_.defaults(args,{
        toolbar:false,
    });
    var model=args.model;
    if(typeof model==='string'){
        model=new instance.web.Model(args.model,args.context);
    }
    return args.model.call('fields_view_get',[args.view_id,args.view_type,model.context(),args.toolbar]).then(function(fvg){
        return postprocess(fvg);
    });
};

instance.web.xml_to_json=function(node,strip_whitespace){
    switch(node.nodeType){
        case 9:
            return instance.web.xml_to_json(node.documentElement,strip_whitespace);
        case 3:case 4:
            return(strip_whitespace&&node.data.trim()==='')?undefined:node.data;
        case 1:
            var attrs=$(node).getAttributes();
            _.each(['domain','filter_domain','context','default_get'],function(key){
            if(attrs[key]){
                try{
                    attrs[key]=JSON.parse(attrs[key]);
                }catch(e){}
            }
        });
    return{
        tag:node.tagName.toLowerCase(),
        attrs:attrs,
        children:_.compact(_.map(node.childNodes,function(node){
            return instance.web.xml_to_json(node,strip_whitespace);
        })),
    }
}
}
instance.web.json_node_to_xml=function(node,human_readable,indent){
    indent=indent||0;
    var sindent=(human_readable?(new Array(indent+1).join('\t')):''),r=sindent+'<'+node.tag,cr=human_readable?'\n':'';
    if(typeof(node)==='string'){
        return sindent+node;
    }else if(typeof(node.tag)!=='string'||!node.children instanceof Array||!node.attrs instanceof Object){
        throw new Error(_.str.sprintf(_t("Node [%s] is not a JSONified XML node"),JSON.stringify(node)));
    }
    for(var attr in node.attrs){
        var vattr=node.attrs[attr];
        if(typeof(vattr)!=='string'){
            vattr=JSON.stringify(vattr);
        }
        vattr=vattr.replace(/&/g,'&amp;').replace(/</g,'&lt;').replace(/>/g,'&gt;').replace(/"/g,'&quot;');
        if(human_readable){
            vattr=vattr.replace(/&quot;/g,"'");
        }
        r+=' '+attr+'="'+vattr+'"';
    }
    if(node.children&&node.children.length){
        r+='>'+cr;
        var childs=[];
        for(var i=0,ii=node.children.length;i<ii;i++){
            childs.push(instance.web.json_node_to_xml(node.children[i],human_readable,indent+1));
        }
        r+=childs.join(cr);
        r+=cr+sindent+'</'+node.tag+'>';
        return r;
    }else{
        return r+'/>';
    }
};

instance.web.xml_to_str=function(node){
    var str="";
    if(window.XMLSerializer){
        str=(new XMLSerializer()).serializeToString(node);
    }else if(window.ActiveXObject){
        str=node.xml;
    }else{
        throw new Error(_t("Could not serialize XML"));
    }
    str=str.replace(/<([a-z]+)([^<>]*)\s*\/\s*>/g,function(match,tag,attrs){
        return"<"+tag+attrs+"></"+tag+">";
    });
    return str;
};

instance.web.views=new instance.web.Registry();
};
;

openerp.web.data=function(instance){
    instance.web.serialize_sort=function(criterion){
        return _.map(criterion,function(criteria){
            if(criteria[0]==='-'){
                return criteria.slice(1)+' DESC';
            }
            return criteria+' ASC';
        }).join(', ');
    };
    
    instance.web.Query=instance.web.Class.extend({
        init:function(model,fields){
            this._model=model;
            this._fields=fields;
            this._filter=[];
            this._context={};
            
            this._limit=false;
            this._offset=0;
            this._order_by=[];
        },
        clone:function(to_set){
            to_set=to_set||{};
            
            var q=new instance.web.Query(this._model,this._fields);
            q._context=this._context;
            q._filter=this._filter;
            q._limit=this._limit;
            q._offset=this._offset;
            q._order_by=this._order_by;
            for(var key in to_set){
                if(!to_set.hasOwnProperty(key)){
                    continue;
                }
                switch(key){
                    case'filter':
                        q._filter=new instance.web.CompoundDomain(q._filter,to_set.filter);
                        break;
                    case'context':
                        q._context=new instance.web.CompoundContext(q._context,to_set.context);
                        break;
                    case'limit':case'offset':case'order_by':
                        q['_'+key]=to_set[key];
                }
            }
        return q;
    },
    _execute:function(){
        var self=this;
        return instance.session.rpc('/web/dataset/search_read',{
            model:this._model.name,
            fields:this._fields||false,
            domain:instance.web.pyeval.eval('domains',[this._model.domain(this._filter)]),
            context:instance.web.pyeval.eval('contexts',[this._model.context(this._context)]),
            offset:this._offset,
            limit:this._limit,
            sort:instance.web.serialize_sort(this._order_by)
            }).then(function(results){
            self._count=results.length;
            return results.records;
        },null);
    },
    first:function(){
        var self=this;
        return this.clone({
            limit:1
        })._execute().then(function(records){
            delete self._count;
            if(records.length){
                return records[0];
            }
            return null;
        });
    },
    all:function(){
        return this._execute();
    },
    count:function(){
        if(this._count!=undefined){
            return $.when(this._count);
        }
        return this._model.call('search_count',[this._filter],{
            context:this._model.context(this._context)
            });
    },
    group_by:function(grouping){
        if(grouping===undefined){
            return null;
        }
        if(!(grouping instanceof Array)){
            grouping=_.toArray(arguments);
        }
        if(_.isEmpty(grouping)){
            return null;
        }
        var self=this;
        var ctx=instance.web.pyeval.eval('context',this._model.context(this._context));
        return this._model.call('read_group',{
            groupby:grouping,
            fields:_.uniq(grouping.concat(this._fields||[])),
            domain:this._model.domain(this._filter),
            context:this._model.context(this._context),
            offset:this._offset,
            limit:this._limit,
            orderby:instance.web.serialize_sort(this._order_by)||false
            }).then(function(results){
            return _(results).map(function(result){
                result.__context=result.__context||{};
                
                result.__context.group_by=result.__context.group_by||[];
                _.defaults(result.__context,ctx);
                return new instance.web.QueryGroup(self._model.name,grouping[0],result);
            });
        });
    },
    context:function(context){
        if(!context){
            return this;
        }
        return this.clone({
            context:context
        });
    },
    filter:function(domain){
        if(!domain){
            return this;
        }
        return this.clone({
            filter:domain
        });
    },
    limit:function(limit){
        return this.clone({
            limit:limit
        });
    },
    offset:function(offset){
        return this.clone({
            offset:offset
        });
    },
    order_by:function(fields){
        if(fields===undefined){
            return this;
        }
        if(!(fields instanceof Array)){
            fields=_.toArray(arguments);
        }
        if(_.isEmpty(fields)){
            return this;
        }
        return this.clone({
            order_by:fields
        });
    }
    });
instance.web.QueryGroup=instance.web.Class.extend({
    init:function(model,grouping_field,read_group_group){
        var fixed_group=_.extend({
            __context:{
                group_by:[]
            },
            __domain:[]
        },read_group_group);
        var aggregates={};
        
        _(fixed_group).each(function(value,key){
            if(key.indexOf('__')===0||key===grouping_field||key===grouping_field+'_count'){
                return;
            }
            aggregates[key]=value||0;
        });
        this.model=new instance.web.Model(model,fixed_group.__context,fixed_group.__domain);
        var group_size=fixed_group[grouping_field+'_count']||fixed_group.__count||0;
        var leaf_group=fixed_group.__context.group_by.length===0;
        this.attributes={
            folded:!!(fixed_group.__fold),
            grouped_on:grouping_field,
            length:group_size,
            value:fixed_group[grouping_field],
            has_children:!(leaf_group&&fixed_group.__context['group_by_no_leaf']),
            aggregates:aggregates
        };
    
},
get:function(key){
    return this.attributes[key];
},
subgroups:function(){
    return this.model.query().group_by(this.model.context().group_by);
},
query:function(){
    return this.model.query.apply(this.model,arguments);
}
});
instance.web.Model=instance.web.Class.extend({
    init:function(model_name,context,domain){
        this.name=model_name;
        this._context=context||{};
        
        this._domain=domain||[];
    },
    get_func:function(method_name){
        var self=this;
        return function(){
            return self.call(method_name,_.toArray(arguments));
        };
    
},
call:function(method,args,kwargs,options){
    args=args||[];
    kwargs=kwargs||{};
    
    if(!_.isArray(args)){
        kwargs=args;
        args=[];
    }
    instance.web.pyeval.ensure_evaluated(args,kwargs);
    var debug=instance.session.debug?'/'+this.name+':'+method:'';
    return instance.session.rpc('/web/dataset/call_kw'+debug,{
        model:this.name,
        method:method,
        args:args,
        kwargs:kwargs
    },options);
},
query:function(fields){
    return new instance.web.Query(this,fields);
},
exec_workflow:function(id,signal){
    return instance.session.rpc('/web/dataset/exec_workflow',{
        model:this.name,
        id:id,
        signal:signal
    });
},
domain:function(domain){
    if(!domain){
        return this._domain;
    }
    return new instance.web.CompoundDomain(this._domain,domain);
},
context:function(context){
    return new instance.web.CompoundContext(instance.session.user_context,this._context,context||{});
},
call_button:function(method,args){
    instance.web.pyeval.ensure_evaluated(args,{});
    return instance.session.rpc('/web/dataset/call_button',{
        model:this.name,
        method:method,
        domain_id:null,
        context_id:args.length-1,
        args:args||[]
        });
},
});
instance.web.DataSet=instance.web.Class.extend(instance.web.PropertiesMixin,{
    init:function(parent,model,context){
        instance.web.PropertiesMixin.init.call(this);
        this.model=model;
        this.context=context||{};
        
        this.index=null;
        this._sort=[];
        this._model=new instance.web.Model(model,context);
    },
    previous:function(){
        this.index-=1;
        if(!this.ids.length){
            this.index=null;
        }else if(this.index<0){
            this.index=this.ids.length-1;
        }
        return this;
    },
    next:function(){
        this.index+=1;
        if(!this.ids.length){
            this.index=null;
        }else if(this.index>=this.ids.length){
            this.index=0;
        }
        return this;
    },
    select_id:function(id){
        var idx=this.get_id_index(id);
        if(idx===null){
            return false;
        }else{
            this.index=idx;
            return true;
        }
    },
get_id_index:function(id){
    for(var i=0,ii=this.ids.length;i<ii;i++){
        if(id==this.ids[i]){
            return i;
        }
    }
return null;
},
read_ids:function(ids,fields,options){
    options=options||{};
    
    return this._model.call('read',[ids,fields||false],{
        context:this._model.context(options.context)
        });
},
read_slice:function(fields,options){
    var self=this;
    options=options||{};
    
    return this._model.query(fields).limit(options.limit||false).offset(options.offset||0).all().done(function(records){
        self.ids=_(records).pluck('id');
    });
},
read_index:function(fields,options){
    options=options||{};
    
    return this.read_ids([this.ids[this.index]],fields,options).then(function(records){
        if(_.isEmpty(records)){
            return $.Deferred().reject().promise();
        }
        return records[0];
    });
},
default_get:function(fields,options){
    options=options||{};
    
    return this._model.call('default_get',[fields],{
        context:this.get_context(options.context)
        });
},
create:function(data){
    return this._model.call('create',[data],{
        context:this.get_context()
        });
},
write:function(id,data,options){
    options=options||{};
    
    return this._model.call('write',[[id],data],{
        context:this.get_context(options.context)
        }).done(this.trigger('dataset_changed',id,data,options));
},
unlink:function(ids){
    return this._model.call('unlink',[ids],{
        context:this.get_context()
        }).done(this.trigger('dataset_changed',ids));
},
call:function(method,args){
    return this._model.call(method,args);
},
call_button:function(method,args){
    return this._model.call_button(method,args);
},
name_get:function(ids){
    return this._model.call('name_get',[ids],{
        context:this.get_context()
        });
},
name_search:function(name,domain,operator,limit){
    return this._model.call('name_search',{
        name:name||'',
        args:domain||false,
        operator:operator||'ilike',
        context:this._model.context(),
        limit:limit||0
        });
},
name_create:function(name){
    return this._model.call('name_create',[name],{
        context:this.get_context()
        });
},
exec_workflow:function(id,signal){
    return this._model.exec_workflow(id,signal);
},
get_context:function(request_context){
    return this._model.context(request_context);
},
sort:function(field,force_reverse){
    if(!field){
        return instance.web.serialize_sort(this._sort);
    }
    var reverse=force_reverse||(this._sort[0]===field);
    this._sort.splice.apply(this._sort,[0,this._sort.length].concat(_.without(this._sort,field,'-'+field)));
    this._sort.unshift((reverse?'-':'')+field);
    return undefined;
},
size:function(){
    return this.ids.length;
},
alter_ids:function(n_ids){
    this.ids=n_ids;
},
resequence:function(ids,options){
    options=options||{};
    
    return instance.session.rpc('/web/dataset/resequence',{
        model:this.model,
        ids:ids,
        context:instance.web.pyeval.eval('context',this.get_context(options.context)),
    }).then(function(results){
        return results;
    });
},
});
instance.web.DataSetStatic=instance.web.DataSet.extend({
    init:function(parent,model,context,ids){
        var self=this;
        this._super(parent,model,context);
        this.ids=ids||[];
    },
    read_slice:function(fields,options){
        options=options||{};
        
        fields=fields||{};
        
        var offset=options.offset||0,limit=options.limit||false;
        var end_pos=limit&&limit!==-1?offset+limit:this.ids.length;
        return this.read_ids(this.ids.slice(offset,end_pos),fields);
    },
    set_ids:function(ids){
        this.ids=ids;
        if(ids.length===0){
            this.index=null;
        }else if(this.index>=ids.length-1){
            this.index=ids.length-1;
        }
    },
unlink:function(ids){
    this.set_ids(_.without.apply(null,[this.ids].concat(ids)));
    this.trigger('unlink',ids);
    return $.Deferred().resolve({
        result:true
    });
},
});
instance.web.DataSetSearch=instance.web.DataSet.extend({
    init:function(parent,model,context,domain){
        this._super(parent,model,context);
        this.domain=domain||[];
        this._length=null;
        this.ids=[];
        this._model=new instance.web.Model(model,context,domain);
    },
    read_slice:function(fields,options){
        options=options||{};
        
        var self=this;
        var q=this._model.query(fields||false).filter(options.domain).context(options.context).offset(options.offset||0).limit(options.limit||false);
        q=q.order_by.apply(q,this._sort);
        return q.all().done(function(records){
            q.count().done(function(count){
                self._length=count;
            });
            self.ids=_(records).pluck('id');
        });
    },
    get_domain:function(other_domain){
        this._model.domain(other_domain);
    },
    unlink:function(ids,callback,error_callback){
        var self=this;
        return this._super(ids).done(function(result){
            self.ids=_(self.ids).difference(ids);
            if(self._length){
                self._length-=1;
            }
            if(self.index!==null){
                self.index=self.index<=self.ids.length-1?self.index:(self.ids.length>0?self.ids.length-1:0);
            }
            self.trigger("dataset_changed",ids,callback,error_callback);
        });
    },
    size:function(){
        if(this._length!==undefined){
            return this._length;
        }
        return this._super();
    }
});
instance.web.BufferedDataSet=instance.web.DataSetStatic.extend({
    virtual_id_prefix:"one2many_v_id_",
    debug_mode:true,
    init:function(){
        this._super.apply(this,arguments);
        this.reset_ids([]);
        this.last_default_get={};
    
},
default_get:function(fields,options){
    var self=this;
    return this._super(fields,options).done(function(res){
        self.last_default_get=res;
    });
},
create:function(data){
    var cached={
        id:_.uniqueId(this.virtual_id_prefix),
        values:data,
        defaults:this.last_default_get
        };
        
    this.to_create.push(_.extend(_.clone(cached),{
        values:_.clone(cached.values)
        }));
    this.cache.push(cached);
    return $.Deferred().resolve(cached.id).promise();
},
write:function(id,data,options){
    var self=this;
    var record=_.detect(this.to_create,function(x){
        return x.id===id;
    });
    record=record||_.detect(this.to_write,function(x){
        return x.id===id;
    });
    var dirty=false;
    if(record){
        for(var k in data){
            if(record.values[k]===undefined||record.values[k]!==data[k]){
                dirty=true;
                break;
            }
        }
    $.extend(record.values,data);
}else{
    dirty=true;
    record={
        id:id,
        values:data
    };
    
    self.to_write.push(record);
}
var cached=_.detect(this.cache,function(x){
    return x.id===id;
});
if(!cached){
    cached={
        id:id,
        values:{}
};

this.cache.push(cached);
}
$.extend(cached.values,record.values);
if(dirty)
    this.trigger("dataset_changed",id,data,options);
return $.Deferred().resolve(true).promise();
},
unlink:function(ids,callback,error_callback){
    var self=this;
    _.each(ids,function(id){
        if(!_.detect(self.to_create,function(x){
            return x.id===id;
        })){
            self.to_delete.push({
                id:id
            })
            }
        });
this.to_create=_.reject(this.to_create,function(x){
    return _.include(ids,x.id);
});
this.to_write=_.reject(this.to_write,function(x){
    return _.include(ids,x.id);
});
this.cache=_.reject(this.cache,function(x){
    return _.include(ids,x.id);
});
this.set_ids(_.without.apply(_,[this.ids].concat(ids)));
this.trigger("dataset_changed",ids,callback,error_callback);
return $.async_when({
    result:true
}).done(callback);
},
reset_ids:function(ids){
    this.set_ids(ids);
    this.to_delete=[];
    this.to_create=[];
    this.to_write=[];
    this.cache=[];
    this.delete_all=false;
},
read_ids:function(ids,fields,options){
    var self=this;
    var to_get=[];
    _.each(ids,function(id){
        var cached=_.detect(self.cache,function(x){
            return x.id===id;
        });
        var created=_.detect(self.to_create,function(x){
            return x.id===id;
        });
        if(created){
            _.each(fields,function(x){
                if(cached.values[x]===undefined)
                    cached.values[x]=created.defaults[x]||false;
            });
        }else{
            if(!cached||!_.all(fields,function(x){
                return cached.values[x]!==undefined
                }))
                to_get.push(id);
        }
    });
var completion=$.Deferred();
var return_records=function(){
    var records=_.map(ids,function(id){
        return _.extend({},_.detect(self.cache,function(c){
            return c.id===id;
        }).values,{
            "id":id
        });
    });
    if(self.debug_mode){
        if(_.include(records,undefined)){
            throw"Record not correctly loaded";
        }
    }
var sort_fields=self._sort,compare=function(v1,v2){
    return(v1<v2)?-1:(v1>v2)?1:0;
};

if(sort_fields.length){
    records.sort(function(a,b){
        return _.reduce(sort_fields,function(acc,field){
            if(acc){
                return acc;
            }
            var sign=1;
            if(field[0]==='-'){
                sign=-1;
                field=field.slice(1);
            }
            return sign*compare(a[field],b[field]);
        },0);
    });
}
completion.resolve(records);
};

if(to_get.length>0){
    var rpc_promise=this._super(to_get,fields,options).done(function(records){
        _.each(records,function(record,index){
            var id=to_get[index];
            var cached=_.detect(self.cache,function(x){
                return x.id===id;
            });
            if(!cached){
                self.cache.push({
                    id:id,
                    values:record
                });
            }else{
                cached.values=_.defaults(_.clone(cached.values),record);
            }
        });
    return_records();
    });
$.when(rpc_promise).fail(function(){
    completion.reject();
});
}else{
    return_records();
}
return completion.promise();
},
evict_record:function(id){
    for(var i=0,len=this.cache.length;i<len;++i){
        var record=this.cache[i];
        if(record.id===id){
            this.cache.splice(i,1);
            break;
        }
    }
    },
call_button:function(method,args){
    this.evict_record(args[0][0]);
    return this._super(method,args);
},
exec_workflow:function(id,signal){
    this.evict_record(id);
    return this._super(id,signal);
},
alter_ids:function(n_ids){
    this._super(n_ids);
    this.trigger("dataset_changed",n_ids);
},
});
instance.web.BufferedDataSet.virtual_id_regex=/^one2many_v_id_.*$/;
instance.web.ProxyDataSet=instance.web.DataSetSearch.extend({
    init:function(){
        this._super.apply(this,arguments);
        this.create_function=null;
        this.write_function=null;
        this.read_function=null;
        this.default_get_function=null;
        this.unlink_function=null;
    },
    read_ids:function(ids,fields,options){
        if(this.read_function){
            return this.read_function(ids,fields,options,this._super);
        }else{
            return this._super.apply(this,arguments);
        }
    },
default_get:function(fields,options){
    if(this.default_get_function){
        return this.default_get_function(fields,options,this._super);
    }else{
        return this._super.apply(this,arguments);
    }
},
create:function(data){
    if(this.create_function){
        return this.create_function(data,this._super);
    }else{
        return this._super.apply(this,arguments);
    }
},
write:function(id,data,options){
    if(this.write_function){
        return this.write_function(id,data,options,this._super);
    }else{
        return this._super.apply(this,arguments);
    }
},
unlink:function(ids){
    if(this.unlink_function){
        return this.unlink_function(ids,this._super);
    }else{
        return this._super.apply(this,arguments);
    }
},
});
instance.web.CompoundContext=instance.web.Class.extend({
    init:function(){
        this.__ref="compound_context";
        this.__contexts=[];
        this.__eval_context=null;
        var self=this;
        _.each(arguments,function(x){
            self.add(x);
        });
    },
    add:function(context){
        this.__contexts.push(context);
        return this;
    },
    set_eval_context:function(eval_context){
        this.__eval_context=eval_context;
        return this;
    },
    get_eval_context:function(){
        return this.__eval_context;
    }
});
instance.web.CompoundDomain=instance.web.Class.extend({
    init:function(){
        this.__ref="compound_domain";
        this.__domains=[];
        this.__eval_context=null;
        var self=this;
        _.each(arguments,function(x){
            self.add(x);
        });
    },
    add:function(domain){
        this.__domains.push(domain);
        return this;
    },
    set_eval_context:function(eval_context){
        this.__eval_context=eval_context;
        return this;
    },
    get_eval_context:function(){
        return this.__eval_context;
    }
});
instance.web.DropMisordered=instance.web.Class.extend({
    init:function(failMisordered){
        this.lsn=0;
        this.rsn=-1;
        this.failMisordered=failMisordered||false;
    },
    add:function(deferred){
        var res=$.Deferred();
        var self=this,seq=this.lsn++;
        deferred.done(function(){
            if(seq>self.rsn){
                self.rsn=seq;
                res.resolve.apply(res,arguments);
            }else if(self.failMisordered){
                res.reject();
            }
        }).fail(function(){
        res.reject.apply(res,arguments);
    });
    return res.promise();
}
});
};
;

openerp.web.data_export=function(instance){
    var QWeb=instance.web.qweb,_t=instance.web._t;
    instance.web.DataExport=instance.web.Dialog.extend({
        template:'ExportTreeView',
        dialog_title:{
            toString:function(){
                return _t("Export Data");
            }
        },
    init:function(parent,dataset){
        var self=this;
        options={
            buttons:[{
                text:_t("Close"),
                click:function(){
                    self.close();
                }
            },{
            text:_t("Export To File"),
            click:function(){
                self.on_click_export_data();
            }
        }],
    close:function(event,ui){
        self.close();
    }
    }
this._super(parent,options);
    this.records={};
    
    this.dataset=dataset;
    this.exports=new instance.web.DataSetSearch(this,'ir.exports',this.dataset.get_context());
},
start:function(){
    var self=this;
    this._super.apply(this,arguments);
    self.$el.removeClass('ui-dialog-content ui-widget-content');
    self.$el.find('#add_field').click(function(){
        if($('#field-tree-structure tr.ui-selected')){
            var fld=self.$el.find('#field-tree-structure tr.ui-selected').find('a');
            for(var i=0;i<fld.length;i++){
                var id=$(fld[i]).attr('id').split('-')[1];
                var string=$(fld[i]).attr('string');
                self.add_field(id,string);
            }
            self.$el.find('#field-tree-structure tr').removeClass('ui-selected');
        }
    });
self.$el.find('#remove_field').click(function(){
    self.$el.find('#fields_list option:selected').remove();
});
self.$el.find('#remove_all_field').click(function(){
    self.$el.find('#fields_list').empty();
});
this.$el.find('#export_new_list').click(this.on_show_save_list);
var got_fields=new $.Deferred();
this.$el.find('#import_compat').change(function(){
    self.$el.find('#fields_list').empty();
    self.$el.find('#field-tree-structure').remove();
    var import_comp=self.$el.find("#import_compat").val();
    self.rpc("/web/export/get_fields",{
        model:self.dataset.model,
        import_compat:Boolean(import_comp)
        }).done(function(records){
        got_fields.resolve();
        self.on_show_data(records);
    });
}).change();
return $.when(got_fields,this.rpc('/web/export/formats',{}).done(this.do_setup_export_formats),this.show_exports_list());
},
do_setup_export_formats:function(formats){
    var $fmts=this.$el.find('#export_format');
    _(formats).each(function(format){
        var opt=new Option(format.label,format.tag);
        if(format.error){
            opt.disabled=true;
            opt.replaceChild(document.createTextNode(_.str.sprintf("%s — %s",format.label,format.error)),opt.childNodes[0])
            }
        $fmts.append(opt);
    });
},
show_exports_list:function(){
    var self=this;
    if(self.$el.find('#saved_export_list').is(':hidden')){
        self.$el.find('#ExistsExportList').show();
        return;
    }
    return this.exports.read_slice(['name'],{
        domain:[['resource','=',this.dataset.model]]
        }).done(function(export_list){
        if(!export_list.length){
            return;
        }
        self.$el.find('#ExistsExportList').append(QWeb.render('Exists.ExportList',{
            'existing_exports':export_list
        }));
        self.$el.find('#saved_export_list').change(function(){
            self.$el.find('#fields_list option').remove();
            var export_id=self.$el.find('#saved_export_list option:selected').val();
            if(export_id){
                self.rpc('/web/export/namelist',{
                    'model':self.dataset.model,
                    export_id:parseInt(export_id)
                    }).done(self.do_load_export_field);
            }
        });
    self.$el.find('#delete_export_list').click(function(){
        var select_exp=self.$el.find('#saved_export_list option:selected');
        if(select_exp.val()){
            self.exports.unlink([parseInt(select_exp.val(),10)]);
            select_exp.remove();
            if(self.$el.find('#saved_export_list option').length<=1){
                self.$el.find('#ExistsExportList').hide();
            }
        }
    });
});
},
do_load_export_field:function(field_list){
    var export_node=this.$el.find("#fields_list");
    _(field_list).each(function(field){
        export_node.append(new Option(field.label,field.name));
    });
},
on_show_save_list:function(){
    var self=this;
    var current_node=self.$el.find("#savenewlist");
    if(!(current_node.find("label")).length){
        current_node.append(QWeb.render('ExportNewList'));
        current_node.find("#add_export_list").click(function(){
            var value=current_node.find("#savelist_name").val();
            if(value){
                self.do_save_export_list(value);
            }else{
                alert(_t("Please enter save field list name"));
            }
        });
}else{
    if(current_node.is(':hidden')){
        current_node.show();
        current_node.find("#savelist_name").val("");
    }else{
        current_node.hide();
    }
}
},
do_save_export_list:function(value){
    var self=this;
    var fields=self.get_fields();
    if(!fields.length){
        return;
    }
    this.exports.create({
        name:value,
        resource:this.dataset.model,
        export_fields:_(fields).map(function(field){
            return[0,0,{
                name:field
            }];
        })
        },function(export_list_id){
        if(!export_list_id.result){
            return;
        }
        self.$el.find("#saved_export_list").append(new Option(value,export_list_id.result));
        if(self.$el.find("#saved_export_list").is(":hidden")){
            self.show_exports_list();
        }
    });
this.on_show_save_list();
this.$el.find("#fields_list option").remove();
},
on_click:function(id,record){
    var self=this;
    if(!record['children']){
        return;
    }
    var model=record['params']['model'],prefix=record['params']['prefix'],name=record['params']['name'],exclude_fields=[];
    if(record['relation_field']){
        exclude_fields.push(record['relation_field']);
    }
    if(!record.loaded){
        var import_comp=self.$el.find("#import_compat").val();
        self.rpc("/web/export/get_fields",{
            model:model,
            prefix:prefix,
            parent_name:name,
            import_compat:Boolean(import_comp),
            parent_field_type:record['field_type'],
            exclude:exclude_fields
        }).done(function(results){
            record.loaded=true;
            self.on_show_data(results,record.id);
        });
    }else{
        self.showcontent(record.id);
    }
},
on_show_data:function(result,after){
    var self=this;
    var imp_cmpt=Boolean(self.$el.find("#import_compat").val());
    if(after){
        var current_tr=self.$el.find("tr[id='treerow-"+after+"']");
        current_tr.addClass('open');
        current_tr.find('img').attr('src','/web/static/src/img/collapse.gif');
        current_tr.after(QWeb.render('ExportTreeView-Secondary.children',{
            'fields':result
        }));
    }else{
        self.$el.find('#left_field_panel').append(QWeb.render('ExportTreeView-Secondary',{
            'fields':result
        }));
    }
    _.each(result,function(record){
        self.records[record.id]=record.value;
        if(record.required){
            var required_fld=self.$el.find("tr[id='treerow-"+record.id+"']").find('#tree-column');
            required_fld.addClass("oe_export_requiredfield");
        }
        self.$el.find("img[id='parentimg-"+record.id+"']").click(function(){
            self.on_click(this.id,record);
        });
        self.$el.find("tr[id='treerow-"+record.id+"']").click(function(e){
            if(e.shiftKey){
                var frst_click,scnd_click='';
                if(self.row_index==0){
                    self.row_index=this.rowIndex;
                    frst_click=self.$el.find("tr[id^='treerow-']")[self.row_index-1];
                    $(frst_click).addClass("ui-selected");
                }else{
                    if(this.rowIndex>=self.row_index){
                        for(var i=(self.row_index-1);i<this.rowIndex;i++){
                            scnd_click=self.$el.find("tr[id^='treerow-']")[i];
                            if(!$(scnd_click).find('#tree-column').hasClass("oe_export_readonlyfield")){
                                $(scnd_click).addClass("ui-selected");
                            }
                        }
                        }else{
                for(var i=(self.row_index-1);i>=(this.rowIndex-1);i--){
                    scnd_click=self.$el.find("tr[id^='treerow-']")[i];
                    if(!$(scnd_click).find('#tree-column').hasClass("oe_export_readonlyfield")){
                        $(scnd_click).addClass("ui-selected");
                    }
                }
                }
        }
    }
self.row_index=this.rowIndex;
self.$el.find("tr[id='treerow-"+record.id+"']").keyup(function(){
    self.row_index=0;
});
var o2m_selection=self.$el.find("tr[id='treerow-"+record.id+"']").find('#tree-column');
if($(o2m_selection).hasClass("oe_export_readonlyfield")){
    return false;
}
if(e.ctrlKey){
    if($(this).hasClass('ui-selected')){
        $(this).removeClass('ui-selected').find('a').blur();
    }else{
        $(this).addClass('ui-selected').find('a').focus();
    }
}else if(!e.shiftKey){
    self.$el.find("tr.ui-selected").removeClass("ui-selected").find('a').blur();
    $(this).addClass("ui-selected").find('a').focus();
}
return false;
});
self.$el.find("tr[id='treerow-"+record.id+"']").keydown(function(e){
    var keyCode=e.keyCode||e.which;
    var arrow={
        left:37,
        up:38,
        right:39,
        down:40
    };
    
    switch(keyCode){
        case arrow.left:
            if($(this).hasClass('open')){
            self.on_click(this.id,record);
        }
        break;
        case arrow.right:
            if(!$(this).hasClass('open')){
            self.on_click(this.id,record);
        }
        break;
        case arrow.up:
            var elem=this;
            $(elem).removeClass("ui-selected");
            while(!$(elem).prev().is(":visible")){
            elem=$(elem).prev();
        }
        if(!$(elem).prev().find('#tree-column').hasClass("oe_export_readonlyfield")){
            $(elem).prev().addClass("ui-selected");
        }
        $(elem).prev().find('a').focus();
            break;
        case arrow.down:
            var elem=this;
            $(elem).removeClass("ui-selected");
            while(!$(elem).next().is(":visible")){
            elem=$(elem).next();
        }
        if(!$(elem).next().find('#tree-column').hasClass("oe_export_readonlyfield")){
            $(elem).next().addClass("ui-selected");
        }
        $(elem).next().find('a').focus();
            break;
    }
});
self.$el.find("tr[id='treerow-"+record.id+"']").dblclick(function(){
    var $o2m_selection=self.$el.find("tr[id^='treerow-"+record.id+"']").find('#tree-column');
    if(!$o2m_selection.hasClass("oe_export_readonlyfield")){
        self.add_field(record.id,$(this).find("a").attr("string"));
    }
});
});
self.$el.find('#fields_list').mouseover(function(event){
    if(event.relatedTarget){
        if(event.relatedTarget.attributes['id']&&event.relatedTarget.attributes['string']){
            var field_id=event.relatedTarget.attributes["id"]["value"];
            if(field_id&&field_id.split("-")[0]==='export'){
                if(!self.$el.find("tr[id='treerow-"+field_id.split("-")[1]+"']").find('#tree-column').hasClass("oe_export_readonlyfield")){
                    self.add_field(field_id.split("-")[1],event.relatedTarget.attributes["string"]["value"]);
                }
            }
        }
}
});
},
showcontent:function(id){
    var $this=this.$el.find("tr[id='treerow-"+id+"']");
    var is_open=$this.hasClass('open');
    $this.toggleClass('open');
    var first_child=$this.find('img');
    if(is_open){
        first_child.attr('src','/web/static/src/img/expand.gif');
    }else{
        first_child.attr('src','/web/static/src/img/collapse.gif');
    }
    var child_field=this.$el.find("tr[id^='treerow-"+id+"/']");
    var child_len=(id.split("/")).length+1;
    for(var i=0;i<child_field.length;i++){
        var $child=$(child_field[i]);
        if(is_open){
            $child.hide();
        }else if(child_len==(child_field[i].id.split("/")).length){
            if($child.hasClass('open')){
                $child.removeClass('open');
                $child.find('img').attr('src','/web/static/src/img/expand.gif');
            }
            $child.show();
        }
    }
    },
add_field:function(field_id,string){
    var field_list=this.$el.find('#fields_list');
    if(this.$el.find("#fields_list option[value='"+field_id+"']")&&!this.$el.find("#fields_list option[value='"+field_id+"']").length){
        field_list.append(new Option(string,field_id));
    }
},
get_fields:function(){
    var export_field=[];
    this.$el.find("#fields_list option").each(function(){
        export_field.push($(this).val());
    });
    if(!export_field.length){
        alert(_t("Please select fields to save export list..."));
    }
    return export_field;
},
on_click_export_data:function(){
    var self=this;
    var exported_fields=this.$el.find('#fields_list option').map(function(){
        return{
            name:self.records[this.value]||this.value,
            label:this.textContent||this.innerText
            };
        
    }).get();
if(_.isEmpty(exported_fields)){
    alert(_t("Please select fields to export..."));
    return;
}
exported_fields.unshift({
    name:'id',
    label:'External ID'
});
var export_format=this.$el.find("#export_format").val();
instance.web.blockUI();
this.session.get_file({
    url:'/web/export/'+export_format,
    data:{
        data:JSON.stringify({
            model:this.dataset.model,
            fields:exported_fields,
            ids:this.dataset.ids,
            domain:this.dataset.domain,
            import_compat:Boolean(this.$el.find("#import_compat").val())
            })
        },
    complete:instance.web.unblockUI
    });
},
close:function(){
    this.$el.remove();
    this._super();
}
});
};
;

openerp.web.search=function(instance){
    var QWeb=instance.web.qweb,_t=instance.web._t,_lt=instance.web._lt;
    _.mixin({
        sum:function(obj){
            return _.reduce(obj,function(a,b){
                return a+b;
            },0);
        }
    });
var my=instance.web.search={};

var B=Backbone;
my.FacetValue=B.Model.extend({});
    my.FacetValues=B.Collection.extend({
    model:my.FacetValue
    });
my.Facet=B.Model.extend({
    initialize:function(attrs){
        var values=attrs.values;
        delete attrs.values;
        B.Model.prototype.initialize.apply(this,arguments);
        this.values=new my.FacetValues(values||[]);
        this.values.on('add remove change reset',function(){
            this.trigger('change',this);
        },this);
    },
    get:function(key){
        if(key!=='values'){
            return B.Model.prototype.get.call(this,key);
        }
        return this.values.toJSON();
    },
    set:function(key,value){
        if(key!=='values'){
            return B.Model.prototype.set.call(this,key,value);
        }
        this.values.reset(value);
    },
    toJSON:function(){
        var out={};
        
        var attrs=this.attributes;
        for(var att in attrs){
            if(!attrs.hasOwnProperty(att)||att==='field'){
                continue;
            }
            out[att]=attrs[att];
        }
        out.values=this.values.toJSON();
        return out;
    }
});
my.SearchQuery=B.Collection.extend({
    model:my.Facet,
    initialize:function(){
        B.Collection.prototype.initialize.apply(this,arguments);
        this.on('change',function(facet){
            if(!facet.values.isEmpty()){
                return;
            }
            this.remove(facet,{
                silent:true
            });
        },this);
    },
    add:function(values,options){
        options||(options={});
        if(!(values instanceof Array)){
            values=[values];
        }
        _(values).each(function(value){
            var model=this._prepareModel(value,options);
            var previous=this.detect(function(facet){
                return facet.get('category')===model.get('category')&&facet.get('field')===model.get('field');
            });
            if(previous){
                previous.values.add(model.get('values'));
                return;
            }
            B.Collection.prototype.add.call(this,model,options);
        },this);
        return this;
    },
    toggle:function(value,options){
        options||(options={});
        var facet=this.detect(function(facet){
            return facet.get('category')===value.category&&facet.get('field')===value.field;
        });
        if(!facet){
            return this.add(value,options);
        }
        var changed=false;
        _(value.values).each(function(val){
            var already_value=facet.values.detect(function(v){
                return v.get('value')===val.value&&v.get('label')===val.label;
            });
            if(already_value){
                facet.values.remove(already_value,{
                    silent:true
                });
            }else{
                facet.values.add(val,{
                    silent:true
                });
            }
            changed=true;
        });
        facet.trigger('change',facet);
        return this;
    }
});
function assert(condition,message){
    if(!condition){
        throw new Error(message);
    }
}
my.InputView=instance.web.Widget.extend({
    template:'SearchView.InputView',
    events:{
        focus:function(){
            this.trigger('focused',this);
        },
        blur:function(){
            this.$el.text('');
            this.trigger('blurred',this);
        },
        keydown:'onKeydown',
        paste:'onPaste',
    },
    getSelection:function(){
        var root=this.el.childNodes[0];
        if(!root||!root.textContent){
            return{
                start:0,
                end:0
            };
        
    }
    var range=window.getSelection().getRangeAt(0);
    assert(range.startContainer===root,"selection should be in the input view");
    assert(range.endContainer===root,"selection should be in the input view");
    return{
        start:range.startOffset,
        end:range.endOffset
        }
    },
onKeydown:function(e){
    var sel;
    switch(e.which){
        case $.ui.keyCode.ENTER:
            e.preventDefault();
            break;
        case $.ui.keyCode.BACKSPACE:
            sel=this.getSelection();
            if(sel.start===0&&sel.start===sel.end){
            e.preventDefault();
            var preceding=this.getParent().siblingSubview(this,-1);
            if(preceding&&(preceding instanceof my.FacetView)){
                preceding.model.destroy();
            }
        }
        break;
    case $.ui.keyCode.LEFT:
        sel=this.getSelection();
        if(sel.start!==0||sel.start!==sel.end){
        e.stopPropagation();
    }
    break;
    case $.ui.keyCode.RIGHT:
        sel=this.getSelection();
        var len=this.$el.text().length;
        if(sel.start!==len||sel.start!==sel.end){
        e.stopPropagation();
    }
    break;
}
},
setCursorAtEnd:function(){
    var sel=window.getSelection();
    sel.removeAllRanges();
    var range=document.createRange();
    range.selectNode(this.el.childNodes[0]);
    range.collapse(false);
    sel.addRange(range);
},
onPaste:function(){
    setTimeout(function(){
        var data=this.$el.text();
        this.$el.empty().text(data);
        this.setCursorAtEnd();
    }.bind(this),0);
}
});
my.FacetView=instance.web.Widget.extend({
    template:'SearchView.FacetView',
    events:{
        'focus':function(){
            this.trigger('focused',this);
        },
        'blur':function(){
            this.trigger('blurred',this);
        },
        'click':function(e){
            if($(e.target).is('.oe_facet_remove')){
                this.model.destroy();
                return false;
            }
            this.$el.focus();
            e.stopPropagation();
        },
        'keydown':function(e){
            var keys=$.ui.keyCode;
            switch(e.which){
                case keys.BACKSPACE:case keys.DELETE:
                    this.model.destroy();
                    return false;
            }
        }
    },
init:function(parent,model){
    this._super(parent);
    this.model=model;
    this.model.on('change',this.model_changed,this);
},
destroy:function(){
    this.model.off('change',this.model_changed,this);
    this._super();
},
start:function(){
    var self=this;
    var $e=this.$('> span:last-child');
    return $.when(this._super()).then(function(){
        return $.when.apply(null,self.model.values.map(function(value){
            return new my.FacetValueView(self,value).appendTo($e);
        }));
    });
},
model_changed:function(){
    this.$el.text(this.$el.text()+'*');
}
});
my.FacetValueView=instance.web.Widget.extend({
    template:'SearchView.FacetView.Value',
    init:function(parent,model){
        this._super(parent);
        this.model=model;
        this.model.on('change',this.model_changed,this);
    },
    destroy:function(){
        this.model.off('change',this.model_changed,this);
        this._super();
    },
    model_changed:function(){
        this.$el.text(this.$el.text()+'*');
    }
});
instance.web.SearchView=instance.web.Widget.extend({
    template:"SearchView",
    events:{
        'click':function(e){
            if(e.target===this.$('.oe_searchview_facets')[0]){
                this.$('.oe_searchview_input:last').focus();
            }
        },
    'click button.oe_searchview_search':function(e){
        e.stopImmediatePropagation();
        this.do_search();
    },
    'click .oe_searchview_clear':function(e){
        e.stopImmediatePropagation();
        this.query.reset();
    },
    'click .oe_searchview_unfold_drawer':function(e){
        e.stopImmediatePropagation();
        this.$el.toggleClass('oe_searchview_open_drawer');
    },
    'keydown .oe_searchview_input, .oe_searchview_facet':function(e){
        switch(e.which){
            case $.ui.keyCode.LEFT:
                this.focusPreceding(this);
                e.preventDefault();
                break;
            case $.ui.keyCode.RIGHT:
                this.focusFollowing(this);
                e.preventDefault();
                break;
        }
    }
},
init:function(parent,dataset,view_id,defaults,options){
    if(Object(options)!==options){
        options={
            hidden:!!options
            };
        
}
this.options=_.defaults(options||{},{
    hidden:false,
    disable_custom_filters:false,
});
this._super(parent);
this.dataset=dataset;
this.model=dataset.model;
this.view_id=view_id;
this.defaults=defaults||{};

this.has_defaults=!_.isEmpty(this.defaults);
this.inputs=[];
this.controls={};

this.headless=this.options.hidden&&!this.has_defaults;
this.input_subviews=[];
this.ready=$.Deferred();
},
start:function(){
    var self=this;
    var p=this._super();
    this.setup_global_completion();
    this.query=new my.SearchQuery().on('add change reset remove',this.proxy('do_search')).on('add change reset remove',this.proxy('renderFacets'));
    if(this.options.hidden){
        this.$el.hide();
    }
    if(this.headless){
        this.ready.resolve();
    }else{
        var load_view=instance.web.fields_view_get({
            model:this.dataset._model,
            view_id:this.view_id,
            view_type:'search',
        });
        $.when(load_view).then(function(r){
            return self.search_view_loaded(r)
            }).fail(function(){
            self.ready.reject.apply(null,arguments);
        });
    }
    instance.web.bus.on('click',this,function(ev){
        if($(ev.target).parents('.oe_searchview').length===0){
            self.$el.removeClass('oe_searchview_open_drawer');
        }
    });
return $.when(p,this.ready);
},
show:function(){
    this.$el.show();
},
hide:function(){
    this.$el.hide();
},
subviewForRoot:function(subview_root){
    return _(this.input_subviews).detect(function(subview){
        return subview.$el[0]===subview_root;
    });
},
siblingSubview:function(subview,direction,wrap_around){
    var index=_(this.input_subviews).indexOf(subview)+direction;
    if(wrap_around&&index<0){
        index=this.input_subviews.length-1;
    }else if(wrap_around&&index>=this.input_subviews.length){
        index=0;
    }
    return this.input_subviews[index];
},
focusPreceding:function(subview_root){
    return this.siblingSubview(this.subviewForRoot(subview_root),-1,true).$el.focus();
},
focusFollowing:function(subview_root){
    return this.siblingSubview(this.subviewForRoot(subview_root),+1,true).$el.focus();
},
select_for_drawer:function(){
    return _(this.inputs).filter(function(input){
        return input.in_drawer();
    });
},
setup_global_completion:function(){
    var self=this;
    var autocomplete=this.$el.autocomplete({
        source:this.proxy('complete_global_search'),
        select:this.proxy('select_completion'),
        focus:function(e){
            e.preventDefault();
        },
        html:true,
        autoFocus:true,
        minLength:1,
        delay:0
    }).data('autocomplete');
    _.extend(autocomplete,{
        _renderItem:function(ul,item){
            var $item=$("<li></li>").data("item.autocomplete",item).appendTo(ul);
            if(item.facet!==undefined){
                return $item.append((item.label)?$('<a>').html(item.label):$('<a>').text(item.value));
            }
            return $item.text(item.label).css({
                borderTop:'1px solid #cccccc',
                margin:0,
                padding:0,
                zoom:1,
                'float':'left',
                clear:'left',
                width:'100%'
            });
        },
        _value:function(){
            return self.$('div.oe_searchview_input').text();
        },
    });
},
complete_global_search:function(req,resp){
    $.when.apply(null,_(this.inputs).chain().invoke('complete',req.term).value()).then(function(){
        resp(_(_(arguments).compact()).flatten(true));
    });
},
select_completion:function(e,ui){
    e.preventDefault();
    var input_index=_(this.input_subviews).indexOf(this.subviewForRoot(this.$('div.oe_searchview_input:focus')[0]));
    this.query.add(ui.item.facet,{
        at:input_index/2
        });
},
childFocused:function(){
    this.$el.addClass('oe_focused');
},
childBlurred:function(){
    var val=this.$el.val();
    this.$el.val('');
    var complete=this.$el.data('autocomplete');
    if((val&&complete.term===undefined)||complete.previous!==undefined){
        throw new Error("new jquery.ui version altering implementation"+" details relied on");
    }
    delete complete.term;
    this.$el.removeClass('oe_focused').trigger('blur');
},
renderFacets:function(_1,_2,options){
    var self=this;
    var started=[];
    var $e=this.$('div.oe_searchview_facets');
    _.invoke(this.input_subviews,'destroy');
    this.input_subviews=[];
    var i=new my.InputView(this);
    started.push(i.appendTo($e));
    this.input_subviews.push(i);
    this.query.each(function(facet){
        var f=new my.FacetView(this,facet);
        started.push(f.appendTo($e));
        self.input_subviews.push(f);
        var i=new my.InputView(this);
        started.push(i.appendTo($e));
        self.input_subviews.push(i);
    },this);
    _.each(this.input_subviews,function(childView){
        childView.on('focused',self,self.proxy('childFocused'));
        childView.on('blurred',self,self.proxy('childBlurred'));
    });
    $.when.apply(null,started).then(function(){
        var input_to_focus;
        if(!options||typeof options.at!=='number'){
            input_to_focus=_.last(self.input_subviews);
        }else{
            input_to_focus=self.input_subviews[(options.at+1)*2];
        }
        input_to_focus.$el.focus();
    });
},
make_widgets:function(items,fields,group_name){
    group_name=group_name||null;
    if(!(group_name in this.controls)){
        this.controls[group_name]=[];
    }
    var self=this,group=this.controls[group_name];
    var filters=[];
    _.each(items,function(item){
        if(filters.length&&item.tag!=='filter'){
            group.push(new instance.web.search.FilterGroup(filters,this));
            filters=[];
        }
        switch(item.tag){
            case'separator':case'newline':
                break;
            case'filter':
                filters.push(new instance.web.search.Filter(item,this));
                break;
            case'group':
                self.make_widgets(item.children,fields,item.attrs.string);
                break;
            case'field':
                group.push(this.make_field(item,fields[item['attrs'].name]));
                self.make_widgets(item.children,fields,group_name);
                break;
        }
    },this);
if(filters.length){
    group.push(new instance.web.search.FilterGroup(filters,this));
}
},
make_field:function(item,field){
    var obj=instance.web.search.fields.get_any([item.attrs.widget,field.type]);
    if(obj){
        return new(obj)(item,field,this);
    }else{
        console.group('Unknown field type '+field.type);
        console.error('View node',item);
        console.info('View field',field);
        console.info('In view',this);
        console.groupEnd();
        return null;
    }
},
add_common_inputs:function(){
    (new instance.web.search.Filters(this));
    this.custom_filters=new instance.web.search.CustomFilters(this);
    (new instance.web.search.Advanced(this));
},
search_view_loaded:function(data){
    var self=this;
    this.fields_view=data;
    if(data.type!=='search'||data.arch.tag!=='search'){
        throw new Error(_.str.sprintf("Got non-search view after asking for a search view: type %s, arch root %s",data.type,data.arch.tag));
    }
    this.make_widgets(data['arch'].children,data.fields);
    this.add_common_inputs();
    var drawer_started=$.when.apply(null,_(this.select_for_drawer()).invoke('appendTo',this.$('.oe_searchview_drawer')));
    var defaults_fetched=$.when.apply(null,_(this.inputs).invoke('facet_for_defaults',this.defaults)).then(this.proxy('setup_default_query'));
    return $.when(drawer_started,defaults_fetched).then(function(){
        self.trigger("search_view_loaded",data);
        self.ready.resolve();
    });
},
setup_default_query:function(){
    var custom_filters=this.custom_filters.filters;
    if(!this.options.disable_custom_filters&&!_(custom_filters).isEmpty()){
        var personal_filter=_(custom_filters).find(function(filter){
            return filter.user_id&&filter.is_default;
        });
        if(personal_filter){
            this.custom_filters.toggle_filter(personal_filter,true);
            return;
        }
        var global_filter=_(custom_filters).find(function(filter){
            return!filter.user_id&&filter.is_default;
        });
        if(global_filter){
            this.custom_filters.toggle_filter(global_filter,true);
            return;
        }
    }
this.query.reset(_(arguments).compact(),{
    preventSearch:true
});
},
build_search_data:function(){
    var domains=[],contexts=[],groupbys=[],errors=[];
    this.query.each(function(facet){
        var field=facet.get('field');
        try{
            var domain=field.get_domain(facet);
            if(domain){
                domains.push(domain);
            }
            var context=field.get_context(facet);
            if(context){
                contexts.push(context);
            }
            var group_by=field.get_groupby(facet);
            if(group_by){
                groupbys.push.apply(groupbys,group_by);
            }
        }catch(e){
        if(e instanceof instance.web.search.Invalid){
            errors.push(e);
        }else{
            throw e;
        }
    }
    });
return{
    domains:domains,
    contexts:contexts,
    groupbys:groupbys,
    errors:errors
};

},
do_search:function(_query,options){
    if(options&&options.preventSearch){
        return;
    }
    var search=this.build_search_data();
    if(!_.isEmpty(search.errors)){
        this.on_invalid(search.errors);
        return;
    }
    this.trigger('search_data',search.domains,search.contexts,search.groupbys);
},
on_invalid:function(errors){
    this.do_notify(_t("Invalid Search"),_t("triggered from search view"));
    this.trigger('invalid_search',errors);
}
});
instance.web.search.fields=new instance.web.Registry({
    'char':'instance.web.search.CharField',
    'text':'instance.web.search.CharField',
    'html':'instance.web.search.CharField',
    'boolean':'instance.web.search.BooleanField',
    'integer':'instance.web.search.IntegerField',
    'id':'instance.web.search.IntegerField',
    'float':'instance.web.search.FloatField',
    'selection':'instance.web.search.SelectionField',
    'datetime':'instance.web.search.DateTimeField',
    'date':'instance.web.search.DateField',
    'many2one':'instance.web.search.ManyToOneField',
    'many2many':'instance.web.search.CharField',
    'one2many':'instance.web.search.CharField'
});
instance.web.search.Invalid=instance.web.Class.extend({
    init:function(field,value,message){
        this.field=field;
        this.value=value;
        this.message=message;
    },
    toString:function(){
        return _.str.sprintf(_t("Incorrect value for field %(fieldname)s: [%(value)s] is %(message)s"),{
            fieldname:this.field,
            value:this.value,
            message:this.message
            });
    }
});
instance.web.search.Widget=instance.web.Widget.extend({
    template:null,
    init:function(view){
        this._super(view);
        this.view=view;
    }
});
instance.web.search.add_expand_listener=function($root){
    $root.find('a.searchview_group_string').click(function(e){
        $root.toggleClass('folded expanded');
        e.stopPropagation();
        e.preventDefault();
    });
};

instance.web.search.Group=instance.web.search.Widget.extend({
    template:'SearchView.group',
    init:function(view_section,view,fields){
        this._super(view);
        this.attrs=view_section.attrs;
        this.lines=view.make_widgets(view_section.children,fields);
    }
});
instance.web.search.Input=instance.web.search.Widget.extend({
    _in_drawer:false,
    init:function(view){
        this._super(view);
        this.view.inputs.push(this);
        this.style=undefined;
    },
    complete:function(value){
        return $.when(null)
        },
    facet_for_defaults:function(defaults){
        if(!this.attrs||!(this.attrs.name in defaults&&defaults[this.attrs.name])){
            return $.when(null);
        }
        return this.facet_for(defaults[this.attrs.name]);
    },
    in_drawer:function(){
        return!!this._in_drawer;
    },
    get_context:function(){
        throw new Error("get_context not implemented for widget "+this.attrs.type);
    },
    get_groupby:function(){
        throw new Error("get_groupby not implemented for widget "+this.attrs.type);
    },
    get_domain:function(){
        throw new Error("get_domain not implemented for widget "+this.attrs.type);
    },
    load_attrs:function(attrs){
        if(attrs.modifiers){
            attrs.modifiers=JSON.parse(attrs.modifiers);
            attrs.invisible=attrs.modifiers.invisible||false;
            if(attrs.invisible){
                this.style='display: none;'
                }
            }
    this.attrs=attrs;
}
});
instance.web.search.FilterGroup=instance.web.search.Input.extend({
    template:'SearchView.filters',
    icon:'q',
    completion_label:_lt("Filter on: %s"),
    init:function(filters,view){
        if(!(this instanceof instance.web.search.GroupbyGroup)&&_(filters).all(function(f){
            return f.attrs.context&&f.attrs.context.group_by;
        })){
            return new instance.web.search.GroupbyGroup(filters,view);
        }
        this._super(view);
        this.filters=filters;
        this.view.query.on('add remove change reset',this.proxy('search_change'));
    },
    start:function(){
        this.$el.on('click','li',this.proxy('toggle_filter'));
        return $.when(null);
    },
    search_change:function(){
        var self=this;
        var $filters=this.$('> li').removeClass('oe_selected');
        var facet=this.view.query.find(_.bind(this.match_facet,this));
        if(!facet){
            return;
        }
        facet.values.each(function(v){
            var i=_(self.filters).indexOf(v.get('value'));
            if(i===-1){
                return;
            }
            $filters.eq(i).addClass('oe_selected');
        });
    },
    match_facet:function(facet){
        return facet.get('field')===this;
    },
    make_facet:function(values){
        return{
            category:_t("Filter"),
            icon:this.icon,
            values:values,
            field:this
        }
    },
make_value:function(filter){
    return{
        label:filter.attrs.string||filter.attrs.help||filter.attrs.name,
        value:filter
    };

},
facet_for_defaults:function(defaults){
    var self=this;
    var fs=_(this.filters).chain().filter(function(f){
        return f.attrs&&f.attrs.name&&!!defaults[f.attrs.name];
    }).map(function(f){
        return self.make_value(f);
    }).value();
    if(_.isEmpty(fs)){
        return $.when(null);
    }
    return $.when(this.make_facet(fs));
},
get_context:function(facet){
    var contexts=facet.values.chain().map(function(f){
        return f.get('value').attrs.context;
    }).without('{}').reject(_.isEmpty).value();
    if(!contexts.length){
        return;
    }
    if(contexts.length===1){
        return contexts[0];
    }
    return _.extend(new instance.web.CompoundContext,{
        __contexts:contexts
    });
},
get_groupby:function(facet){
    return facet.values.chain().map(function(f){
        return f.get('value').attrs.context;
    }).without('{}').reject(_.isEmpty).value();
},
get_domain:function(facet){
    var domains=facet.values.chain().map(function(f){
        return f.get('value').attrs.domain;
    }).without('[]').reject(_.isEmpty).value();
    if(!domains.length){
        return;
    }
    if(domains.length===1){
        return domains[0];
    }
    for(var i=domains.length;--i;){
        domains.unshift(['|']);
    }
    return _.extend(new instance.web.CompoundDomain(),{
        __domains:domains
    });
},
toggle_filter:function(e){
    this.toggle(this.filters[$(e.target).index()]);
},
toggle:function(filter){
    this.view.query.toggle(this.make_facet([this.make_value(filter)]));
},
complete:function(item){
    var self=this;
    item=item.toLowerCase();
    var facet_values=_(this.filters).chain().filter(function(filter){
        var at={
            string:filter.attrs.string||'',
            help:filter.attrs.help||'',
            name:filter.attrs.name||''
            };
            
        var include=_.str.include;
        return include(at.string.toLowerCase(),item)||include(at.help.toLowerCase(),item)||include(at.name.toLowerCase(),item);
    }).map(this.make_value).value();
    if(_(facet_values).isEmpty()){
        return $.when(null);
    }
    return $.when(_.map(facet_values,function(facet_value){
        return{
            label:_.str.sprintf(self.completion_label.toString(),facet_value.label),
            facet:self.make_facet([facet_value])
            }
        }));
}
});
instance.web.search.GroupbyGroup=instance.web.search.FilterGroup.extend({
    icon:'w',
    completion_label:_lt("Group by: %s"),
    init:function(filters,view){
        this._super(filters,view);
        if(!this.getParent()._s_groupby){
            this.getParent()._s_groupby={
                help:"See GroupbyGroup#init",
                get_context:this.proxy('get_context'),
                get_domain:this.proxy('get_domain'),
                get_groupby:this.proxy('get_groupby')
                }
            }
    },
match_facet:function(facet){
    return facet.get('field')===this.getParent()._s_groupby;
},
make_facet:function(values){
    return{
        category:_t("GroupBy"),
        icon:this.icon,
        values:values,
        field:this.getParent()._s_groupby
        };
    
}
});
instance.web.search.Filter=instance.web.search.Input.extend({
    template:'SearchView.filter',
    init:function(node,view){
        this._super(view);
        this.load_attrs(node.attrs);
    },
    facet_for:function(){
        return $.when(null);
    },
    get_context:function(){},
    get_domain:function(){},
});
instance.web.search.Field=instance.web.search.Input.extend({
    template:'SearchView.field',
    default_operator:'=',
    init:function(view_section,field,view){
        this._super(view);
        this.load_attrs(_.extend({},field,view_section.attrs));
    },
    facet_for:function(value){
        return $.when({
            field:this,
            category:this.attrs.string||this.attrs.name,
            values:[{
                label:String(value),
                value:value
            }]
            });
    },
    value_from:function(facetValue){
        return facetValue.get('value');
    },
    get_context:function(facet){
        var self=this;
        var context=this.attrs.context;
        if(_.isEmpty(context)||!facet.values.length){
            return;
        }
        var contexts=facet.values.map(function(facetValue){
            return new instance.web.CompoundContext(context).set_eval_context({
                self:self.value_from(facetValue)
                });
        });
        if(contexts.length===1){
            return contexts[0];
        }
        return _.extend(new instance.web.CompoundContext,{
            __contexts:contexts
        });
    },
    get_groupby:function(){},
    make_domain:function(name,operator,facet){
        return[[name,operator,this.value_from(facet)]];
    },
    get_domain:function(facet){
        if(!facet.values.length){
            return;
        }
        var value_to_domain;
        var self=this;
        var domain=this.attrs['filter_domain'];
        if(domain){
            value_to_domain=function(facetValue){
                return new instance.web.CompoundDomain(domain).set_eval_context({
                    self:self.value_from(facetValue)
                    });
            };
        
    }else{
        value_to_domain=function(facetValue){
            return self.make_domain(self.attrs.name,self.attrs.operator||self.default_operator,facetValue);
        };
    
}
var domains=facet.values.map(value_to_domain);
    if(domains.length===1){
    return domains[0];
}
for(var i=domains.length;--i;){
    domains.unshift(['|']);
}
return _.extend(new instance.web.CompoundDomain,{
    __domains:domains
});
}
});
instance.web.search.CharField=instance.web.search.Field.extend({
    default_operator:'ilike',
    complete:function(value){
        if(_.isEmpty(value)){
            return $.when(null);
        }
        var label=_.str.sprintf(_.str.escapeHTML(_t("Search %(field)s for: %(value)s")),{
            field:'<em>'+this.attrs.string+'</em>',
            value:'<strong>'+_.str.escapeHTML(value)+'</strong>'
            });
        return $.when([{
            label:label,
            facet:{
                category:this.attrs.string,
                field:this,
                values:[{
                    label:value,
                    value:value
                }]
                }
            }]);
}
});
instance.web.search.NumberField=instance.web.search.Field.extend({
    value_from:function(){
        if(!this.$el.val()){
            return null;
        }
        var val=this.parse(this.$el.val()),check=Number(this.$el.val());
        if(isNaN(val)||val!==check){
            this.$el.addClass('error');
            throw new instance.web.search.Invalid(this.attrs.name,this.$el.val(),this.error_message);
        }
        this.$el.removeClass('error');
        return val;
    }
});
instance.web.search.IntegerField=instance.web.search.NumberField.extend({
    error_message:_t("not a valid integer"),
    parse:function(value){
        try{
            return instance.web.parse_value(value,{
                'widget':'integer'
            });
        }catch(e){
            return NaN;
        }
    }
});
instance.web.search.FloatField=instance.web.search.NumberField.extend({
    error_message:_t("not a valid number"),
    parse:function(value){
        try{
            return instance.web.parse_value(value,{
                'widget':'float'
            });
        }catch(e){
            return NaN;
        }
    }
});
function facet_from(field,pair){
    return{
        field:field,
        category:field['attrs'].string,
        values:[{
            label:pair[1],
            value:pair[0]
            }]
        };
    
}
instance.web.search.SelectionField=instance.web.search.Field.extend({
    template:'SearchView.field.selection',
    init:function(){
        this._super.apply(this,arguments);
        this.prepend_empty=!_(this.attrs.selection).detect(function(item){
            return!item[1];
        });
    },
    complete:function(needle){
        var self=this;
        var results=_(this.attrs.selection).chain().filter(function(sel){
            var value=sel[0],label=sel[1];
            if(!value){
                return false;
            }
            return label.toLowerCase().indexOf(needle.toLowerCase())!==-1;
        }).map(function(sel){
            return{
                label:sel[1],
                facet:facet_from(self,sel)
                };
            
        }).value();
    if(_.isEmpty(results)){
        return $.when(null);
    }
    return $.when.call(null,[{
        label:this.attrs.string
        }].concat(results));
},
facet_for:function(value){
    var match=_(this.attrs.selection).detect(function(sel){
        return sel[0]===value;
    });
    if(!match){
        return $.when(null);
    }
    return $.when(facet_from(this,match));
}
});
instance.web.search.BooleanField=instance.web.search.SelectionField.extend({
    init:function(){
        this._super.apply(this,arguments);
        this.attrs.selection=[[true,_t("Yes")],[false,_t("No")]];
    }
});
instance.web.search.DateField=instance.web.search.Field.extend({
    value_from:function(facetValue){
        return instance.web.date_to_str(facetValue.get('value'));
    },
    complete:function(needle){
        var d=Date.parse(needle);
        if(!d){
            return $.when(null);
        }
        var date_string=instance.web.format_value(d,this.attrs);
        var label=_.str.sprintf(_.str.escapeHTML(_t("Search %(field)s at: %(value)s")),{
            field:'<em>'+this.attrs.string+'</em>',
            value:'<strong>'+date_string+'</strong>'
            });
        return $.when([{
            label:label,
            facet:{
                category:this.attrs.string,
                field:this,
                values:[{
                    label:date_string,
                    value:d
                }]
                }
            }]);
}
});
instance.web.search.DateTimeField=instance.web.search.DateField.extend({
    value_from:function(facetValue){
        return instance.web.datetime_to_str(facetValue.get('value'));
    }
});
instance.web.search.ManyToOneField=instance.web.search.CharField.extend({
    default_operator:{},
    init:function(view_section,field,view){
        this._super(view_section,field,view);
        this.model=new instance.web.Model(this.attrs.relation);
    },
    complete:function(needle){
        var self=this;
        var context=instance.web.pyeval.eval('contexts',[this.view.dataset.get_context()]);
        return this.model.call('name_search',[],{
            name:needle,
            args:instance.web.pyeval.eval('domains',this.attrs.domain?[this.attrs.domain]:[],context),
            limit:8,
            context:context
        }).then(function(results){
            if(_.isEmpty(results)){
                return null;
            }
            return[{
                label:self.attrs.string
                }].concat(_(results).map(function(result){
                return{
                    label:result[1],
                    facet:facet_from(self,result)
                    };
                
            }));
        });
},
facet_for:function(value){
    var self=this;
    if(value instanceof Array){
        if(value.length===2&&_.isString(value[1])){
            return $.when(facet_from(this,value));
        }
        assert(value.length<=1,_t("M2O search fields do not currently handle multiple default values"));
        value=value[0];
    }
    return this.model.call('name_get',[value]).then(function(names){
        if(_(names).isEmpty()){
            return null;
        }
        return facet_from(self,names[0]);
    })
    },
value_from:function(facetValue){
    return facetValue.get('label');
},
make_domain:function(name,operator,facetValue){
    if(operator===this.default_operator){
        return[[name,'=',facetValue.get('value')]];
    }
    return this._super(name,operator,facetValue);
},
get_context:function(facet){
    var values=facet.values;
    if(_.isEmpty(this.attrs.context)&&values.length===1){
        var c={};
        
        c['default_'+this.attrs.name]=values.at(0).get('value');
        return c;
    }
    return this._super(facet);
}
});
instance.web.search.CustomFilters=instance.web.search.Input.extend({
    template:'SearchView.CustomFilters',
    _in_drawer:true,
    init:function(){
        this.is_ready=$.Deferred();
        this._super.apply(this,arguments);
    },
    start:function(){
        var self=this;
        this.model=new instance.web.Model('ir.filters');
        this.filters={};
        
        this.$filters={};
        
        this.view.query.on('remove',function(facet){
            if(!facet.get('is_custom_filter')){
                return;
            }
            self.clear_selection();
        }).on('reset',this.proxy('clear_selection'));
        this.$el.on('submit','form',this.proxy('save_current'));
        this.$el.on('click','input[type=checkbox]',function(){
            $(this).siblings('input[type=checkbox]').prop('checked',false);
        });
        this.$el.on('click','h4',function(){
            self.$el.toggleClass('oe_opened');
        });
        return this.model.call('get_filters',[this.view.model]).then(this.proxy('set_filters')).done(function(){
            self.is_ready.resolve();
        }).fail(function(){
            self.is_ready.reject.apply(self.is_ready,arguments);
        });
    },
    facet_for_defaults:function(){
        return this.is_ready;
    },
    key_for:function(filter){
        var user_id=filter.user_id;
        var uid=(user_id instanceof Array)?user_id[0]:user_id;
        return _.str.sprintf('(%s)%s',uid,filter.name);
    },
    facet_for:function(filter){
        return{
            category:_t("Custom Filter"),
            icon:'M',
            field:{
                get_context:function(){
                    return filter.context;
                },
                get_groupby:function(){
                    return[filter.context];
                },
                get_domain:function(){
                    return filter.domain;
                }
            },
        _id:filter['id'],
        is_custom_filter:true,
        values:[{
            label:filter.name,
            value:null
        }]
        };
    
},
clear_selection:function(){
    this.$('li.oe_selected').removeClass('oe_selected');
},
append_filter:function(filter){
    var self=this;
    var key=this.key_for(filter);
    var warning=_t("This filter is global and will be removed for everybody if you continue.");
    var $filter;
    if(key in this.$filters){
        $filter=this.$filters[key];
    }else{
        var id=filter.id;
        this.filters[key]=filter;
        $filter=this.$filters[key]=$('<li></li>').appendTo(this.$('.oe_searchview_custom_list')).addClass(filter.user_id?'oe_searchview_custom_private':'oe_searchview_custom_public').toggleClass('oe_searchview_custom_default',filter.is_default).text(filter.name);
        $('<a class="oe_searchview_custom_delete">x</a>').click(function(e){
            e.stopPropagation();
            if(!(filter.user_id||confirm(warning))){
                return;
            }
            self.model.call('unlink',[id]).done(function(){
                $filter.remove();
                delete self.$filters[key];
                delete self.filters[key];
            });
        }).appendTo($filter);
    }
    $filter.unbind('click').click(function(){
        self.toggle_filter(filter);
    });
},
toggle_filter:function(filter,preventSearch){
    var current=this.view.query.find(function(facet){
        return facet.get('_id')===filter.id;
    });
    if(current){
        this.view.query.remove(current);
        this.$filters[this.key_for(filter)].removeClass('oe_selected');
        return;
    }
    this.view.query.reset([this.facet_for(filter)],{
        preventSearch:preventSearch||false
        });
    this.$filters[this.key_for(filter)].addClass('oe_selected');
},
set_filters:function(filters){
    _(filters).map(_.bind(this.append_filter,this));
},
save_current:function(){
    var self=this;
    var $name=this.$('input:first');
    var private_filter=!this.$('#oe_searchview_custom_public').prop('checked');
    var set_as_default=this.$('#oe_searchview_custom_default').prop('checked');
    var search=this.view.build_search_data();
    instance.web.pyeval.eval_domains_and_contexts({
        domains:search.domains,
        contexts:search.contexts,
        group_by_seq:search.groupbys||[]
        }).done(function(results){
        if(!_.isEmpty(results.group_by)){
            results.context.group_by=results.group_by;
        }
        var filter={
            name:$name.val(),
            user_id:private_filter?instance.session.uid:false,
            model_id:self.view.model,
            context:results.context,
            domain:results.domain,
            is_default:set_as_default
        };
        
        return self.model.call('create_or_replace',[filter]).done(function(id){
            filter.id=id;
            self.append_filter(filter);
            self.$el.removeClass('oe_opened').find('form')[0].reset();
        });
    });
    return false;
}
});
instance.web.search.Filters=instance.web.search.Input.extend({
    template:'SearchView.Filters',
    _in_drawer:true,
    start:function(){
        var self=this;
        var running_count=0;
        var is_group=function(i){
            return i instanceof instance.web.search.FilterGroup;
        };
        
        var filters_count=_(this.view.controls).chain().flatten().filter(is_group).map(function(i){
            return i.filters.length;
        }).sum().value();
        var col1=[],col2=_(this.view.controls).map(function(inputs,group){
            var filters=_(inputs).filter(is_group);
            return{
                name:group==='null'?"<span class='oe_i'>q</span> "+_t("Filters"):"<span class='oe_i'>w</span> "+group,
                filters:filters,
                length:_(filters).chain().map(function(i){
                    return i.filters.length;
                }).sum().value()
                };
            
        });
    while(col2.length){
        if((running_count+col2[0].length)<=(filters_count-running_count)){
            running_count+=col2[0].length;
            col1.push(col2.shift());
        }else{
            break;
        }
    }
return $.when(this.render_column(col1,$('<div>').appendTo(this.$el)),this.render_column(col2,$('<div>').appendTo(this.$el)));
},
render_column:function(column,$el){
    return $.when.apply(null,_(column).map(function(group){
        $('<h3>').html(group.name).appendTo($el);
        return $.when.apply(null,_(group.filters).invoke('appendTo',$el));
    }));
}
});
instance.web.search.Advanced=instance.web.search.Input.extend({
    template:'SearchView.advanced',
    _in_drawer:true,
    start:function(){
        var self=this;
        this.$el.on('keypress keydown keyup',function(e){
            e.stopPropagation();
        }).on('click','h4',function(){
            self.$el.toggleClass('oe_opened');
        }).on('click','button.oe_add_condition',function(){
            self.append_proposition();
        }).on('submit','form',function(e){
            e.preventDefault();
            self.commit_search();
        });
        return $.when(this._super(),new instance.web.Model(this.view.model).call('fields_get',{
            context:this.view.dataset.context
            }).done(function(data){
            self.fields=_.extend({
                id:{
                    string:'ID',
                    type:'id'
                }
            },data);
        })).done(function(){
        self.append_proposition();
    });
},
append_proposition:function(){
    var self=this;
    return(new instance.web.search.ExtendedSearchProposition(this,this.fields)).appendTo(this.$('ul')).done(function(){
        self.$('button.oe_apply').prop('disabled',false);
    });
},
remove_proposition:function(prop){
    if(this.getChildren().length<=1){
        this.$('button.oe_apply').prop('disabled',true);
    }
    prop.destroy();
},
commit_search:function(){
    var children=this.getChildren();
    var propositions=_.invoke(children,'get_proposition');
    var domain=_(propositions).pluck('value');
    for(var i=domain.length;--i;){
        domain.unshift('|');
    }
    this.view.query.add({
        category:_t("Advanced"),
        values:propositions,
        field:{
            get_context:function(){},
            get_domain:function(){
                return domain;
            },
            get_groupby:function(){}
        }
    });
_.invoke(children,'destroy');
this.append_proposition();
this.view.$el.removeClass('oe_searchview_open_drawer');
}
});
instance.web.search.ExtendedSearchProposition=instance.web.Widget.extend({
    template:'SearchView.extended_search.proposition',
    events:{
        'change .searchview_extended_prop_field':'changed',
        'change .searchview_extended_prop_op':'operator_changed',
        'click .searchview_extended_delete_prop':function(e){
            e.stopPropagation();
            this.getParent().remove_proposition(this);
        }
    },
init:function(parent,fields){
    this._super(parent);
    this.fields=_(fields).chain().map(function(val,key){
        return _.extend({},val,{
            'name':key
        });
    }).filter(function(field){
        return!field.deprecated;
    }).sortBy(function(field){
        return field.string;
    }).value();
    this.attrs={
        _:_,
        fields:this.fields,
        selected:null
    };
    
    this.value=null;
},
start:function(){
    return this._super().done(this.proxy('changed'));
},
changed:function(){
    var nval=this.$(".searchview_extended_prop_field").val();
    if(this.attrs.selected==null||nval!=this.attrs.selected.name){
        this.select_field(_.detect(this.fields,function(x){
            return x.name==nval;
        }));
    }
},
operator_changed:function(e){
    var $value=this.$('.searchview_extended_prop_value');
    switch($(e.target).val()){
        case'∃':case'∄':
            $value.hide();
            break;
        default:
            $value.show();
    }
},
select_field:function(field){
    var self=this;
    if(this.attrs.selected!=null){
        this.value.destroy();
        this.value=null;
        this.$('.searchview_extended_prop_op').html('');
    }
    this.attrs.selected=field;
    if(field==null){
        return;
    }
    var type=field.type;
    var Field=instance.web.search.custom_filters.get_object(type);
    if(!Field){
        Field=instance.web.search.custom_filters.get_object("char");
    }
    this.value=new Field(this,field);
    _.each(this.value.operators,function(operator){
        $('<option>',{
            value:operator.value
            }).text(String(operator.text)).appendTo(self.$('.searchview_extended_prop_op'));
    });
    var $value_loc=this.$('.searchview_extended_prop_value').show().empty();
    this.value.appendTo($value_loc);
},
get_proposition:function(){
    if(this.attrs.selected==null)
        return null;
    var field=this.attrs.selected;
    var op_select=this.$('.searchview_extended_prop_op')[0];
    var operator=op_select.options[op_select.selectedIndex];
    return{
        label:this.value.get_label(field,operator),
        value:this.value.get_domain(field,operator),
    };

}
});
instance.web.search.ExtendedSearchProposition.Field=instance.web.Widget.extend({
    init:function(parent,field){
        this._super(parent);
        this.field=field;
    },
    get_label:function(field,operator){
        var format;
        switch(operator.value){
            case'∃':case'∄':
                format=_t('%(field)s %(operator)s');
                break;
            default:
                format=_t('%(field)s %(operator)s "%(value)s"');
                break;
        }
        return this.format_label(format,field,operator);
    },
    format_label:function(format,field,operator){
        return _.str.sprintf(format,{
            field:field.string,
            operator:operator.label||operator.text,
            value:this
        });
    },
    get_domain:function(field,operator){
        switch(operator.value){
            case'∃':
                return this.make_domain(field.name,'!=',false);
            case'∄':
                return this.make_domain(field.name,'=',false);
            default:
                return this.make_domain(field.name,operator.value,this.get_value());
        }
    },
make_domain:function(field,operator,value){
    return[field,operator,value];
},
toString:function(){
    return this.get_value();
}
});
instance.web.search.ExtendedSearchProposition.Char=instance.web.search.ExtendedSearchProposition.Field.extend({
    template:'SearchView.extended_search.proposition.char',
    operators:[{
        value:"ilike",
        text:_lt("contains")
        },{
        value:"not ilike",
        text:_lt("doesn't contain")
        },{
        value:"=",
        text:_lt("is equal to")
        },{
        value:"!=",
        text:_lt("is not equal to")
        },{
        value:"∃",
        text:_lt("is set")
        },{
        value:"∄",
        text:_lt("is not set")
        }],
    get_value:function(){
        return this.$el.val();
    }
});
instance.web.search.ExtendedSearchProposition.DateTime=instance.web.search.ExtendedSearchProposition.Field.extend({
    template:'SearchView.extended_search.proposition.empty',
    operators:[{
        value:"=",
        text:_lt("is equal to")
        },{
        value:"!=",
        text:_lt("is not equal to")
        },{
        value:">",
        text:_lt("greater than")
        },{
        value:"<",
        text:_lt("less than")
        },{
        value:">=",
        text:_lt("greater or equal than")
        },{
        value:"<=",
        text:_lt("less or equal than")
        },{
        value:"∃",
        text:_lt("is set")
        },{
        value:"∄",
        text:_lt("is not set")
        }],
    widget:function(){
        return instance.web.DateTimeWidget;
    },
    get_value:function(){
        return this.datewidget.get_value();
    },
    toString:function(){
        return instance.web.format_value(this.get_value(),{
            type:"datetime"
        });
    },
    start:function(){
        var ready=this._super();
        this.datewidget=new(this.widget())(this);
        this.datewidget.appendTo(this.$el);
        return ready;
    }
});
instance.web.search.ExtendedSearchProposition.Date=instance.web.search.ExtendedSearchProposition.DateTime.extend({
    widget:function(){
        return instance.web.DateWidget;
    },
    toString:function(){
        return instance.web.format_value(this.get_value(),{
            type:"date"
        });
    }
});
instance.web.search.ExtendedSearchProposition.Integer=instance.web.search.ExtendedSearchProposition.Field.extend({
    template:'SearchView.extended_search.proposition.integer',
    operators:[{
        value:"=",
        text:_lt("is equal to")
        },{
        value:"!=",
        text:_lt("is not equal to")
        },{
        value:">",
        text:_lt("greater than")
        },{
        value:"<",
        text:_lt("less than")
        },{
        value:">=",
        text:_lt("greater or equal than")
        },{
        value:"<=",
        text:_lt("less or equal than")
        },{
        value:"∃",
        text:_lt("is set")
        },{
        value:"∄",
        text:_lt("is not set")
        }],
    toString:function(){
        return this.$el.val();
    },
    get_value:function(){
        try{
            var val=this.$el.val();
            return instance.web.parse_value(val==""?0:val,{
                'widget':'integer'
            });
        }catch(e){
            return"";
        }
    }
});
instance.web.search.ExtendedSearchProposition.Id=instance.web.search.ExtendedSearchProposition.Integer.extend({
    operators:[{
        value:"=",
        text:_lt("is")
        }]
    });
instance.web.search.ExtendedSearchProposition.Float=instance.web.search.ExtendedSearchProposition.Field.extend({
    template:'SearchView.extended_search.proposition.float',
    operators:[{
        value:"=",
        text:_lt("is equal to")
        },{
        value:"!=",
        text:_lt("is not equal to")
        },{
        value:">",
        text:_lt("greater than")
        },{
        value:"<",
        text:_lt("less than")
        },{
        value:">=",
        text:_lt("greater or equal than")
        },{
        value:"<=",
        text:_lt("less or equal than")
        },{
        value:"∃",
        text:_lt("is set")
        },{
        value:"∄",
        text:_lt("is not set")
        }],
    toString:function(){
        return this.$el.val();
    },
    get_value:function(){
        try{
            var val=this.$el.val();
            return instance.web.parse_value(val==""?0.0:val,{
                'widget':'float'
            });
        }catch(e){
            return"";
        }
    }
});
instance.web.search.ExtendedSearchProposition.Selection=instance.web.search.ExtendedSearchProposition.Field.extend({
    template:'SearchView.extended_search.proposition.selection',
    operators:[{
        value:"=",
        text:_lt("is")
        },{
        value:"!=",
        text:_lt("is not")
        },{
        value:"∃",
        text:_lt("is set")
        },{
        value:"∄",
        text:_lt("is not set")
        }],
    toString:function(){
        var select=this.$el[0];
        var option=select.options[select.selectedIndex];
        return option.label||option.text;
    },
    get_value:function(){
        return this.$el.val();
    }
});
instance.web.search.ExtendedSearchProposition.Boolean=instance.web.search.ExtendedSearchProposition.Field.extend({
    template:'SearchView.extended_search.proposition.empty',
    operators:[{
        value:"=",
        text:_lt("is true")
        },{
        value:"!=",
        text:_lt("is false")
        }],
    get_label:function(field,operator){
        return this.format_label(_t('%(field)s %(operator)s'),field,operator);
    },
    get_value:function(){
        return true;
    }
});
instance.web.search.custom_filters=new instance.web.Registry({
    'char':'instance.web.search.ExtendedSearchProposition.Char',
    'text':'instance.web.search.ExtendedSearchProposition.Char',
    'one2many':'instance.web.search.ExtendedSearchProposition.Char',
    'many2one':'instance.web.search.ExtendedSearchProposition.Char',
    'many2many':'instance.web.search.ExtendedSearchProposition.Char',
    'datetime':'instance.web.search.ExtendedSearchProposition.DateTime',
    'date':'instance.web.search.ExtendedSearchProposition.Date',
    'integer':'instance.web.search.ExtendedSearchProposition.Integer',
    'float':'instance.web.search.ExtendedSearchProposition.Float',
    'boolean':'instance.web.search.ExtendedSearchProposition.Boolean',
    'selection':'instance.web.search.ExtendedSearchProposition.Selection',
    'id':'instance.web.search.ExtendedSearchProposition.Id'
});
};
;

openerp.web.form=function(instance){
    var _t=instance.web._t,_lt=instance.web._lt;
    var QWeb=instance.web.qweb;
    instance.web.form={};
    
    instance.web.form.FieldManagerMixin={
        get_field_desc:function(field_name){},
        get_field_value:function(field_name){},
        set_values:function(values){},
        compute_domain:function(expression){},
        build_eval_context:function(){},
    };
    
    instance.web.views.add('form','instance.web.FormView');
    instance.web.FormView=instance.web.View.extend(instance.web.form.FieldManagerMixin,{
        searchable:false,
        template:"FormView",
        display_name:_lt('Form'),
        view_type:"form",
        init:function(parent,dataset,view_id,options){
            var self=this;
            this._super(parent);
            this.set_default_options(options);
            this.dataset=dataset;
            this.model=dataset.model;
            this.view_id=view_id||false;
            this.fields_view={};
            
            this.fields={};
            
            this.fields_order=[];
            this.datarecord={};
            
            this.default_focus_field=null;
            this.default_focus_button=null;
            this.fields_registry=instance.web.form.widgets;
            this.tags_registry=instance.web.form.tags;
            this.widgets_registry=instance.web.form.custom_widgets;
            this.has_been_loaded=$.Deferred();
            this.translatable_fields=[];
            _.defaults(this.options,{
                "not_interactible_on_create":false,
                "initial_mode":"view",
                "disable_autofocus":false,
                "footer_to_buttons":false,
            });
            this.is_initialized=$.Deferred();
            this.mutating_mutex=new $.Mutex();
            this.on_change_list=[];
            this.save_list=[];
            this.reload_mutex=new $.Mutex();
            this.__clicked_inside=false;
            this.__blur_timeout=null;
            this.rendering_engine=new instance.web.form.FormRenderingEngine(this);
            self.set({
                actual_mode:self.options.initial_mode
                });
            this.has_been_loaded.done(function(){
                self.on("change:actual_mode",self,self.check_actual_mode);
                self.check_actual_mode();
                self.on("change:actual_mode",self,self.init_pager);
                self.init_pager();
            });
            self.on("load_record",self,self.load_record);
            instance.web.bus.on('clear_uncommitted_changes',this,function(e){
                if(!this.can_be_discarded()){
                    e.preventDefault();
                }
            });
    },
    view_loading:function(r){
        return this.load_form(r);
    },
    destroy:function(){
        _.each(this.get_widgets(),function(w){
            w.off('focused blurred');
            w.destroy();
        });
        if(this.$el){
            this.$el.off('.formBlur');
        }
        this._super();
    },
    load_form:function(data){
        var self=this;
        if(!data){
            throw new Error(_t("No data provided."));
        }
        if(this.arch){
            throw"Form view does not support multiple calls to load_form";
        }
        this.fields_order=[];
        this.fields_view=data;
        this.rendering_engine.set_fields_registry(this.fields_registry);
        this.rendering_engine.set_tags_registry(this.tags_registry);
        this.rendering_engine.set_widgets_registry(this.widgets_registry);
        this.rendering_engine.set_fields_view(data);
        var $dest=this.$el.hasClass("oe_form_container")?this.$el:this.$el.find('.oe_form_container');
        this.rendering_engine.render_to($dest);
        this.$el.on('mousedown.formBlur',function(){
            self.__clicked_inside=true;
        });
        this.$buttons=$(QWeb.render("FormView.buttons",{
            'widget':self
        }));
        if(this.options.$buttons){
            this.$buttons.appendTo(this.options.$buttons);
        }else{
            this.$el.find('.oe_form_buttons').replaceWith(this.$buttons);
        }
        this.$buttons.on('click','.oe_form_button_create',this.guard_active(this.on_button_create));
        this.$buttons.on('click','.oe_form_button_edit',this.guard_active(this.on_button_edit));
        this.$buttons.on('click','.oe_form_button_save',this.guard_active(this.on_button_save));
        this.$buttons.on('click','.oe_form_button_cancel',this.guard_active(this.on_button_cancel));
        if(this.options.footer_to_buttons){
            this.$el.find('footer').appendTo(this.$buttons);
        }
        this.$sidebar=this.options.$sidebar||this.$el.find('.oe_form_sidebar');
        if(!this.sidebar&&this.options.$sidebar){
            this.sidebar=new instance.web.Sidebar(this);
            this.sidebar.appendTo(this.$sidebar);
            if(this.fields_view.toolbar){
                this.sidebar.add_toolbar(this.fields_view.toolbar);
            }
            this.sidebar.add_items('other',_.compact([self.is_action_enabled('delete')&&{
                label:_t('Delete'),
                callback:self.on_button_delete
                },self.is_action_enabled('create')&&{
                label:_t('Duplicate'),
                callback:self.on_button_duplicate
                }]));
        }
        this.has_been_loaded.resolve();
        this.$el.find(".oe_form_group_row,.oe_form_field,label").on('click',function(e){
            if(self.get("actual_mode")=="view"){
                var $button=self.options.$buttons.find(".oe_form_button_edit");
                $button.openerpBounce();
                e.stopPropagation();
                instance.web.bus.trigger('click',e);
            }
        });
    this.$el.find(".oe_form_field_status:not(.oe_form_status_clickable)").on('click',function(e){
        if((self.get("actual_mode")=="view")){
            var $button=self.$el.find(".oe_highlight:not(.oe_form_invisible)").css({
                'float':'left',
                'clear':'none'
            });
            $button.openerpBounce();
            e.stopPropagation();
        }
    });
    this.trigger('form_view_loaded',data);
    return $.when();
},
widgetFocused:function(){
    this.__clicked_inside=false;
    if(this.__blur_timeout){
        clearTimeout(this.__blur_timeout);
        this.__blur_timeout=null;
    }
},
widgetBlurred:function(){
    if(this.__clicked_inside){
        this.__clicked_inside=false;
        return;
    }
    var self=this;
    this.widgetFocused();
    this.__blur_timeout=setTimeout(function(){
        self.trigger('blurred');
    },0);
},
do_load_state:function(state,warm){
    if(state.id&&this.datarecord.id!=state.id){
        if(this.dataset.get_id_index(state.id)===null){
            this.dataset.ids.push(state.id);
        }
        this.dataset.select_id(state.id);
        this.do_show({
            reload:warm
        });
    }
},
do_show:function(options){
    var self=this;
    options=options||{};
    
    if(this.sidebar){
        this.sidebar.$el.show();
    }
    if(this.$buttons){
        this.$buttons.show();
    }
    this.$el.show().css({
        opacity:'0',
        filter:'alpha(opacity = 0)'
    });
    this.$el.add(this.$buttons).removeClass('oe_form_dirty');
    var shown=this.has_been_loaded;
    if(options.reload!==false){
        shown=shown.then(function(){
            if(self.dataset.index===null){
                return self.on_button_new();
            }
            var fields=_.keys(self.fields_view.fields);
            fields.push('display_name');
            return self.dataset.read_index(fields,{
                context:{
                    'bin_size':true,
                    'future_display_name':true
                }
            }).then(function(r){
            self.trigger('load_record',r);
        });
        });
}
return shown.then(function(){
    self._actualize_mode(options.mode||self.options.initial_mode);
    self.$el.css({
        opacity:'1',
        filter:'alpha(opacity = 100)'
    });
});
},
do_hide:function(){
    if(this.sidebar){
        this.sidebar.$el.hide();
    }
    if(this.$buttons){
        this.$buttons.hide();
    }
    if(this.$pager){
        this.$pager.hide();
    }
    this._super();
},
load_record:function(record){
    var self=this,set_values=[];
    if(!record){
        this.set({
            'title':undefined
        });
        this.do_warn(_t("Form"),_t("The record could not be found in the database."),true);
        return $.Deferred().reject();
    }
    this.datarecord=record;
    this._actualize_mode();
    this.set({
        'title':record.id?record.display_name:_t("New")
        });
    _(this.fields).each(function(field,f){
        field._dirty_flag=false;
        field._inhibit_on_change_flag=true;
        var result=field.set_value(self.datarecord[f]||false);
        field._inhibit_on_change_flag=false;
        set_values.push(result);
    });
    return $.when.apply(null,set_values).then(function(){
        if(!record.id){
            _.each(self.fields_order,function(field_name){
                if(record[field_name]!==undefined){
                    var field=self.fields[field_name];
                    field._dirty_flag=true;
                    self.do_onchange(field);
                }
            });
    }
    self.on_form_changed();
        self.rendering_engine.init_fields();
        self.is_initialized.resolve();
        self.do_update_pager(record.id==null);
        if(self.sidebar){
        self.sidebar.do_attachement_update(self.dataset,self.datarecord.id);
    }
    if(record.id){
        self.do_push_state({
            id:record.id
            });
    }else{
        self.do_push_state({});
    }
    self.$el.add(self.$buttons).removeClass('oe_form_dirty');
        self.autofocus();
    });
},
load_defaults:function(){
    var self=this;
    var keys=_.keys(this.fields_view.fields);
    if(keys.length){
        return this.dataset.default_get(keys).then(function(r){
            self.trigger('load_record',r);
        });
    }
    return self.trigger('load_record',{});
},
on_form_changed:function(){
    this.trigger("view_content_has_changed");
},
do_notify_change:function(){
    this.$el.add(this.$buttons).addClass('oe_form_dirty');
},
execute_pager_action:function(action){
    if(this.can_be_discarded()){
        switch(action){
            case'first':
                this.dataset.index=0;
                break;
            case'previous':
                this.dataset.previous();
                break;
            case'next':
                this.dataset.next();
                break;
            case'last':
                this.dataset.index=this.dataset.ids.length-1;
                break;
        }
        this.reload();
        this.trigger('pager_action_executed');
    }
},
init_pager:function(){
    var self=this;
    if(this.$pager)
        this.$pager.remove();
    if(this.get("actual_mode")==="create")
        return;
    this.$pager=$(QWeb.render("FormView.pager",{
        'widget':self
    })).hide();
    if(this.options.$pager){
        this.$pager.appendTo(this.options.$pager);
    }else{
        this.$el.find('.oe_form_pager').replaceWith(this.$pager);
    }
    this.$pager.on('click','a[data-pager-action]',function(){
        var action=$(this).data('pager-action');
        self.execute_pager_action(action);
    });
    this.do_update_pager();
},
do_update_pager:function(hide_index){
    this.$pager.toggle(this.dataset.ids.length>1);
    if(hide_index){
        $(".oe_form_pager_state",this.$pager).html("");
    }else{
        $(".oe_form_pager_state",this.$pager).html(_.str.sprintf(_t("%d / %d"),this.dataset.index+1,this.dataset.ids.length));
    }
},
parse_on_change:function(on_change,widget){
    var self=this;
    var onchange=_.str.trim(on_change);
    var call=onchange.match(/^\s?(.*?)\((.*?)\)\s?$/);
    if(!call){
        throw new Error(_.str.sprintf(_t("Wrong on change format: %s"),onchange));
    }
    var method=call[1];
    if(!_.str.trim(call[2])){
        return{
            method:method,
            args:[]
        }
    }
var argument_replacement={
    'False':function(){
        return false;
    },
    'True':function(){
        return true;
    },
    'None':function(){
        return null;
    },
    'context':function(){
        return new instance.web.CompoundContext(self.dataset.get_context(),widget.build_context()?widget.build_context():{});
    }
};

var parent_fields=null;
var args=_.map(call[2].split(','),function(a,i){
    var field=_.str.trim(a);
    if(field in argument_replacement){
        return argument_replacement[field]();
    }
    if(/^-?\d+(\.\d+)?$/.test(field)){
        return Number(field);
    }
    if(self.fields[field]){
        var value_=self.fields[field].get_value();
        return value_==null?false:value_;
    }
    var splitted=field.split('.');
    if(splitted.length>1&&_.str.trim(splitted[0])==="parent"&&self.dataset.parent_view){
        if(parent_fields===null){
            parent_fields=self.dataset.parent_view.get_fields_values();
        }
        var p_val=parent_fields[_.str.trim(splitted[1])];
        if(p_val!==undefined){
            return p_val==null?false:p_val;
        }
    }
var first_char=field[0],last_char=field[field.length-1];
if((first_char==='"'&&last_char==='"')||(first_char==="'"&&last_char==="'")){
    return field.slice(1,-1);
}
throw new Error("Could not get field with name '"+field+"' for onchange '"+onchange+"'");
});
return{
    method:method,
    args:args
};

},
do_onchange:function(widget,processed){
    var self=this;
    this.on_change_list=[{
        widget:widget,
        processed:processed
    }].concat(this.on_change_list);
    return this._process_operations();
},
_process_onchange:function(on_change_obj){
    var self=this;
    var widget=on_change_obj.widget;
    var processed=on_change_obj.processed;
    try{
        var def;
        processed=processed||[];
        processed.push(widget.name);
        var on_change=widget.node.attrs.on_change;
        if(on_change){
            var change_spec=self.parse_on_change(on_change,widget);
            var ids=[];
            if(self.datarecord.id&&!instance.web.BufferedDataSet.virtual_id_regex.test(self.datarecord.id)){
                ids.push(self.datarecord.id);
            }
            def=self.alive(new instance.web.Model(self.dataset.model).call(change_spec.method,[ids].concat(change_spec.args)));
        }else{
            def=$.when({});
        }
        return def.then(function(response){
            if(widget.field['change_default']){
                var fieldname=widget.name;
                var value_;
                if(response.value&&(fieldname in response.value)){
                    value_=response.value[fieldname];
                }else{
                    value_=self.fields[fieldname].get_value();
                }
                var condition=fieldname+'='+value_;
                if(value_){
                    return self.alive(new instance.web.Model('ir.values').call('get_defaults',[self.model,condition])).then(function(results){
                        if(!results.length){
                            return response;
                        }
                        if(!response.value){
                            response.value={};
                        
                    }
                    for(var i=0;i<results.length;++i){
                        var triplet=results[i];
                        response.value[triplet[1]]=triplet[2];
                    }
                    return response;
                    });
            }
        }
        return response;
    }).then(function(response){
    return self.on_processed_onchange(response,processed);
});
}catch(e){
    console.error(e);
    instance.webclient.crashmanager.show_message(e);
    return $.Deferred().reject();
}
},
on_processed_onchange:function(result,processed){
    try{
        if(result.value){
            this._internal_set_values(result.value,processed);
        }
        if(!_.isEmpty(result.warning)){
            instance.web.dialog($(QWeb.render("CrashManager.warning",result.warning)),{
                title:result.warning.title,
                modal:true,
                buttons:[{
                    text:_t("Ok"),
                    click:function(){
                        $(this).dialog("close");
                    }
                }]
            });
    }
    var fields=this.fields;
    _(result.domain).each(function(domain,fieldname){
        var field=fields[fieldname];
        if(!field){
            return;
        }
        field.node.attrs.domain=domain;
    });
    return $.Deferred().resolve();
}catch(e){
    console.error(e);
    instance.webclient.crashmanager.show_message(e);
    return $.Deferred().reject();
}
},
_process_operations:function(){
    var self=this;
    return this.mutating_mutex.exec(function(){
        function iterate(){
            var on_change_obj=self.on_change_list.shift();
            if(on_change_obj){
                return self._process_onchange(on_change_obj).then(function(){
                    return iterate();
                });
            }
            var defs=[];
            _.each(self.fields,function(field){
                defs.push(field.commit_value());
            });
            var args=_.toArray(arguments);
            return $.when.apply($,defs).then(function(){
                if(self.on_change_list.length!==0){
                    return iterate();
                }
                var save_obj=self.save_list.pop();
                if(save_obj){
                    return self._process_save(save_obj).then(function(){
                        save_obj.ret=_.toArray(arguments);
                        return iterate();
                    },function(){
                        save_obj.error=true;
                    });
                }
                return $.when();
            });
        };
        
        return iterate();
    });
},
_internal_set_values:function(values,exclude){
    exclude=exclude||[];
    for(var f in values){
        if(!values.hasOwnProperty(f)){
            continue;
        }
        var field=this.fields[f];
        if(field){
            var value_=values[f];
            if(field.get_value()!=value_){
                field._inhibit_on_change_flag=true;
                field.set_value(value_);
                field._inhibit_on_change_flag=false;
                field._dirty_flag=true;
                if(!_.contains(exclude,field.name)){
                    this.do_onchange(field,exclude);
                }
            }
        }
    }
this.on_form_changed();
},
set_values:function(values){
    var self=this;
    return this.mutating_mutex.exec(function(){
        self._internal_set_values(values);
    });
},
to_view_mode:function(){
    this._actualize_mode("view");
},
to_edit_mode:function(){
    this._actualize_mode("edit");
},
_actualize_mode:function(switch_to){
    var mode=switch_to||this.get("actual_mode");
    if(!this.datarecord.id){
        mode="create";
    }else if(mode==="create"){
        mode="edit";
    }
    this.set({
        actual_mode:mode
    });
},
check_actual_mode:function(source,options){
    var self=this;
    if(this.get("actual_mode")==="view"){
        self.$el.removeClass('oe_form_editable').addClass('oe_form_readonly');
        self.$buttons.find('.oe_form_buttons_edit').hide();
        self.$buttons.find('.oe_form_buttons_view').show();
        self.$sidebar.show();
    }else{
        self.$el.removeClass('oe_form_readonly').addClass('oe_form_editable');
        self.$buttons.find('.oe_form_buttons_edit').show();
        self.$buttons.find('.oe_form_buttons_view').hide();
        self.$sidebar.hide();
        this.autofocus();
    }
},
autofocus:function(){
    if(this.get("actual_mode")!=="view"&&!this.options.disable_autofocus){
        var fields_order=this.fields_order.slice(0);
        if(this.default_focus_field){
            fields_order.unshift(this.default_focus_field.name);
        }
        for(var i=0;i<fields_order.length;i+=1){
            var field=this.fields[fields_order[i]];
            if(!field.get('effective_invisible')&&!field.get('effective_readonly')&&field.$label){
                if(field.focus()!==false){
                    break;
                }
            }
        }
    }
},
on_button_save:function(){
    var self=this;
    return this.save().done(function(result){
        self.trigger("save",result);
        self.to_view_mode();
    });
},
on_button_cancel:function(event){
    if(this.can_be_discarded()){
        if(this.get('actual_mode')==='create'){
            this.trigger('history_back');
        }else{
            this.to_view_mode();
            this.trigger('load_record',this.datarecord);
        }
    }
this.trigger('on_button_cancel');
return false;
},
on_button_new:function(){
    var self=this;
    this.to_edit_mode();
    return $.when(this.has_been_loaded).then(function(){
        if(self.can_be_discarded()){
            return self.load_defaults();
        }
    });
},
on_button_edit:function(){
    return this.to_edit_mode();
},
on_button_create:function(){
    this.dataset.index=null;
    this.do_show();
},
on_button_duplicate:function(){
    var self=this;
    return this.has_been_loaded.then(function(){
        return self.dataset.call('copy',[self.datarecord.id,{},self.dataset.context]).then(function(new_id){
            self.record_created(new_id);
            self.to_edit_mode();
        });
    });
},
on_button_delete:function(){
    var self=this;
    var def=$.Deferred();
    this.has_been_loaded.done(function(){
        if(self.datarecord.id&&confirm(_t("Do you really want to delete this record?"))){
            self.dataset.unlink([self.datarecord.id]).done(function(){
                self.execute_pager_action('next');
                def.resolve();
            });
        }else{
            $.async_when().done(function(){
                def.reject();
            })
            }
        });
return def.promise();
},
can_be_discarded:function(){
    if(this.$el.is('.oe_form_dirty')){
        if(!confirm(_t("Warning, the record has been modified, your changes will be discarded.\n\nAre you sure you want to leave this page ?"))){
            return false;
        }
        this.$el.removeClass('oe_form_dirty');
    }
    return true;
},
save:function(prepend_on_create){
    var self=this;
    var save_obj={
        prepend_on_create:prepend_on_create,
        ret:null
    };
    
    this.save_list.push(save_obj);
    return this._process_operations().then(function(){
        if(save_obj.error)
            return $.Deferred().reject();
        return $.when.apply($,save_obj.ret);
    });
},
_process_save:function(save_obj){
    var self=this;
    var prepend_on_create=save_obj.prepend_on_create;
    try{
        var form_invalid=false,values={},first_invalid_field=null;
        for(var f in self.fields){
            if(!self.fields.hasOwnProperty(f)){
                continue;
            }
            f=self.fields[f];
            if(!f.is_valid()){
                form_invalid=true;
                if(!first_invalid_field){
                    first_invalid_field=f;
                }
            }else if(f.name!=='id'&&!f.get("readonly")&&(!self.datarecord.id||f._dirty_flag)){
            values[f.name]=f.get_value();
        }
        }
if(form_invalid){
    self.set({
        'display_invalid_fields':true
    });
    first_invalid_field.focus();
    self.on_invalid();
    return $.Deferred().reject();
}else{
    self.set({
        'display_invalid_fields':false
    });
    var save_deferral;
    if(!self.datarecord.id){
        save_deferral=self.dataset.create(values).then(function(r){
            return self.record_created(r,prepend_on_create);
        },null);
    }else if(_.isEmpty(values)){
        save_deferral=$.Deferred().resolve({}).promise();
    }else{
        save_deferral=self.dataset.write(self.datarecord.id,values,{}).then(function(r){
            return self.record_saved(r);
        },null);
    }
    return save_deferral;
}
}catch(e){
    console.error(e);
    return $.Deferred().reject();
}
},
on_invalid:function(){
    var warnings=_(this.fields).chain().filter(function(f){
        return!f.is_valid();
    }).map(function(f){
        return _.str.sprintf('<li>%s</li>',_.escape(f.string));
    }).value();
    warnings.unshift('<ul>');
    warnings.push('</ul>');
    this.do_warn(_t("The following fields are invalid:"),warnings.join(''));
},
record_saved:function(r){
    var self=this;
    if(!r){
        this.trigger('record_saved',r);
        return $.Deferred().reject();
    }else{
        return $.when(this.reload()).then(function(){
            self.trigger('record_saved',r);
            return r;
        });
    }
},
record_created:function(r,prepend_on_create){
    var self=this;
    if(!r){
        this.trigger('record_created',r);
        return $.Deferred().reject();
    }else{
        this.datarecord.id=r;
        if(!prepend_on_create){
            this.dataset.alter_ids(this.dataset.ids.concat([this.datarecord.id]));
            this.dataset.index=this.dataset.ids.length-1;
        }else{
            this.dataset.alter_ids([this.datarecord.id].concat(this.dataset.ids));
            this.dataset.index=0;
        }
        this.do_update_pager();
        if(this.sidebar){
            this.sidebar.do_attachement_update(this.dataset,this.datarecord.id);
        }
        return $.when(this.reload()).then(function(){
            self.trigger('record_created',r);
            return _.extend(r,{
                created:true
            });
        });
    }
},
on_action:function(action){
    console.debug('Executing action',action);
},
reload:function(){
    var self=this;
    return this.reload_mutex.exec(function(){
        if(self.dataset.index==null){
            self.trigger("previous_view");
            return $.Deferred().reject().promise();
        }
        if(self.dataset.index==null||self.dataset.index<0){
            return $.when(self.on_button_new());
        }else{
            var fields=_.keys(self.fields_view.fields);
            fields.push('display_name');
            return self.dataset.read_index(fields,{
                context:{
                    'bin_size':true,
                    'future_display_name':true
                }
            }).then(function(r){
            self.trigger('load_record',r);
        });
    }
    });
},
get_widgets:function(){
    return _.filter(this.getChildren(),function(obj){
        return obj instanceof instance.web.form.FormWidget;
    });
},
get_fields_values:function(){
    var values={};
    
    var ids=this.get_selected_ids();
    values["id"]=ids.length>0?ids[0]:false;
    _.each(this.fields,function(value_,key){
        values[key]=value_.get_value();
    });
    return values;
},
get_selected_ids:function(){
    var id=this.dataset.ids[this.dataset.index];
    return id?[id]:[];
},
recursive_save:function(){
    var self=this;
    return $.when(this.save()).then(function(res){
        if(self.dataset.parent_view)
            return self.dataset.parent_view.recursive_save();
    });
},
recursive_reload:function(){
    var self=this;
    var pre=$.when();
    if(self.dataset.parent_view)
        pre=self.dataset.parent_view.recursive_reload();
    return pre.then(function(){
        return self.reload();
    });
},
is_dirty:function(){
    return _.any(this.fields,function(value_){
        return value_._dirty_flag;
    });
},
is_interactible_record:function(){
    var id=this.datarecord.id;
    if(!id){
        if(this.options.not_interactible_on_create)
            return false;
    }else if(typeof(id)==="string"){
        if(instance.web.BufferedDataSet.virtual_id_regex.test(id))
            return false;
    }
    return true;
},
sidebar_eval_context:function(){
    return $.when(this.build_eval_context());
},
open_defaults_dialog:function(){
    var self=this;
    var display=function(field,value){
        if(field instanceof instance.web.form.FieldSelection){
            return _(field.values).find(function(option){
                return option[0]===value;
            })[1];
        }else if(field instanceof instance.web.form.FieldMany2One){
            return field.get_displayed();
        }
        return value;
    }
    var fields=_.chain(this.fields).map(function(field,name){
        var value=field.get_value();
        if(!value||field.get('invisible')||field.get("readonly")||field.field.type==='one2many'||field.field.type==='many2many'||field.field.type==='binary'||field.password){
            return false;
        }
        return{
            name:name,
            string:field.string,
            value:value,
            displayed:display(field,value),
        }
    }).compact().sortBy(function(field){
    return field.string;
}).value();
var conditions=_.chain(self.fields).filter(function(field){
    return field.field.change_default;
}).map(function(field,name){
    var value=field.get_value();
    return{
        name:name,
        string:field.string,
        value:value,
        displayed:display(field,value),
    }
}).value();
var d=new instance.web.Dialog(this,{
    title:_t("Set Default"),
    args:{
        fields:fields,
        conditions:conditions
    },
    buttons:[{
        text:_t("Close"),
        click:function(){
            d.close();
        }
    },{
    text:_t("Save default"),
    click:function(){
        var $defaults=d.$el.find('#formview_default_fields');
        var field_to_set=$defaults.val();
        if(!field_to_set){
            $defaults.parent().addClass('oe_form_invalid');
            return;
        }
        var condition=d.$el.find('#formview_default_conditions').val(),all_users=d.$el.find('#formview_default_all').is(':checked');
        new instance.web.DataSet(self,'ir.values').call('set_default',[self.dataset.model,field_to_set,self.fields[field_to_set].get_value(),all_users,true,condition||false]).done(function(){
            d.close();
        });
    }
}]
});
d.template='FormView.set_default';
d.open();
},
register_field:function(field,name){
    this.fields[name]=field;
    this.fields_order.push(name);
    if(JSON.parse(field.node.attrs.default_focus||"0")){
        this.default_focus_field=field;
    }
    field.on('focused',null,this.proxy('widgetFocused')).on('blurred',null,this.proxy('widgetBlurred'));
    if(this.get_field_desc(name).translate){
        this.translatable_fields.push(field);
    }
    field.on('changed_value',this,function(){
        if(field.is_syntax_valid()){
            this.trigger('field_changed:'+name);
        }
        if(field._inhibit_on_change_flag){
            return;
        }
        field._dirty_flag=true;
        if(field.is_syntax_valid()){
            this.do_onchange(field);
            this.on_form_changed(true);
            this.do_notify_change();
        }
    });
},
get_field_desc:function(field_name){
    return this.fields_view.fields[field_name];
},
get_field_value:function(field_name){
    return this.fields[field_name].get_value();
},
compute_domain:function(expression){
    return instance.web.form.compute_domain(expression,this.fields);
},
_build_view_fields_values:function(){
    var a_dataset=this.dataset;
    var fields_values=this.get_fields_values();
    var active_id=a_dataset.ids[a_dataset.index];
    _.extend(fields_values,{
        active_id:active_id||false,
        active_ids:active_id?[active_id]:[],
        active_model:a_dataset.model,
        parent:{}
    });
if(a_dataset.parent_view){
    fields_values.parent=a_dataset.parent_view.get_fields_values();
}
return fields_values;
},
build_eval_context:function(){
    var a_dataset=this.dataset;
    return new instance.web.CompoundContext(a_dataset.get_context(),this._build_view_fields_values());
},
});
instance.web.form.FormRenderingEngineInterface=instance.web.Class.extend({
    set_fields_view:function(fields_view){},
    set_fields_registry:function(fields_registry){},
    render_to:function($el){},
});
instance.web.form.FormRenderingEngine=instance.web.form.FormRenderingEngineInterface.extend({
    init:function(view){
        this.view=view;
    },
    set_fields_view:function(fvg){
        this.fvg=fvg;
        this.version=parseFloat(this.fvg.arch.attrs.version);
        if(isNaN(this.version)){
            this.version=6.1;
        }
    },
set_tags_registry:function(tags_registry){
    this.tags_registry=tags_registry;
},
set_fields_registry:function(fields_registry){
    this.fields_registry=fields_registry;
},
set_widgets_registry:function(widgets_registry){
    this.widgets_registry=widgets_registry;
},
process_version:function(){
    if(this.version<7.0){
        this.$form.find('form:first').wrapInner('<group col="4"/>');
        this.$form.find('page').each(function(){
            if(!$(this).parents('field').length){
                $(this).wrapInner('<group col="4"/>');
            }
        });
}
},
get_arch_fragment:function(){
    var doc=$.parseXML(instance.web.json_node_to_xml(this.fvg.arch)).documentElement;
    $('button',doc).each(function(){
        $(this).attr('data-button-type',$(this).attr('type')).attr('type','button');
    });
    $('board',doc).each(function(){
        $(this).attr('layout',$(this).attr('style'));
    });
    return $('<div class="oe_form"/>').append(instance.web.xml_to_str(doc));
},
render_to:function($target){
    var self=this;
    this.$target=$target;
    this.$form=this.get_arch_fragment();
    this.process_version();
    this.fields_to_init=[];
    this.tags_to_init=[];
    this.widgets_to_init=[];
    this.labels={};
    
    this.process(this.$form);
    this.$form.appendTo(this.$target);
    this.to_replace=[];
    _.each(this.fields_to_init,function($elem){
        var name=$elem.attr("name");
        if(!self.fvg.fields[name]){
            throw new Error(_.str.sprintf(_t("Field '%s' specified in view could not be found."),name));
        }
        var obj=self.fields_registry.get_any([$elem.attr('widget'),self.fvg.fields[name].type]);
        if(!obj){
            throw new Error(_.str.sprintf(_t("Widget type '%s' is not implemented"),$elem.attr('widget')));
        }
        var w=new(obj)(self.view,instance.web.xml_to_json($elem[0]));
        var $label=self.labels[$elem.attr("name")];
        if($label){
            w.set_input_id($label.attr("for"));
        }
        self.alter_field(w);
        self.view.register_field(w,$elem.attr("name"));
        self.to_replace.push([w,$elem]);
    });
    _.each(this.tags_to_init,function($elem){
        var tag_name=$elem[0].tagName.toLowerCase();
        var obj=self.tags_registry.get_object(tag_name);
        var w=new(obj)(self.view,instance.web.xml_to_json($elem[0]));
        self.to_replace.push([w,$elem]);
    });
    _.each(this.widgets_to_init,function($elem){
        var widget_type=$elem.attr("type");
        var obj=self.widgets_registry.get_object(widget_type);
        var w=new(obj)(self.view,instance.web.xml_to_json($elem[0]));
        self.to_replace.push([w,$elem]);
    });
},
init_fields:function(){
    var defs=[];
    _.each(this.to_replace,function(el){
        defs.push(el[0].replace(el[1]));
    });
    this.to_replace=[];
    return $.when.apply($,defs);
},
render_element:function(template){
    var dicts=[].slice.call(arguments).slice(1);
    var dict=_.extend.apply(_,dicts);
    dict['classnames']=dict['class']||'';
    return $(QWeb.render(template,dict));
},
alter_field:function(field){},
toggle_layout_debugging:function(){
    if(!this.$target.has('.oe_layout_debug_cell:first').length){
        this.$target.find('[title]').removeAttr('title');
        this.$target.find('.oe_form_group_cell').each(function(){
            var text='W:'+($(this).attr('width')||'')+' - C:'+$(this).attr('colspan');
            $(this).attr('title',text);
        });
    }
    this.$target.toggleClass('oe_layout_debugging');
},
process:function($tag){
    var self=this;
    var tagname=$tag[0].nodeName.toLowerCase();
    if(this.tags_registry.contains(tagname)){
        this.tags_to_init.push($tag);
        return $tag;
    }
    var fn=self['process_'+tagname];
    if(fn){
        var args=[].slice.call(arguments);
        args[0]=$tag;
        return fn.apply(self,args);
    }else{
        $tag.children().each(function(){
            self.process($(this));
        });
        self.handle_common_properties($tag,$tag);
        $tag.removeAttr("modifiers");
        return $tag;
    }
},
process_widget:function($widget){
    this.widgets_to_init.push($widget);
    return $widget;
},
process_sheet:function($sheet){
    var $new_sheet=this.render_element('FormRenderingSheet',$sheet.getAttributes());
    this.handle_common_properties($new_sheet,$sheet);
    var $dst=$new_sheet.find('.oe_form_sheet');
    $sheet.contents().appendTo($dst);
    $sheet.before($new_sheet).remove();
    this.process($new_sheet);
},
process_form:function($form){
    if($form.find('> sheet').length===0){
        $form.addClass('oe_form_nosheet');
    }
    var $new_form=this.render_element('FormRenderingForm',$form.getAttributes());
    this.handle_common_properties($new_form,$form);
    $form.contents().appendTo($new_form);
    if($form[0]===this.$form[0]){
        this.$form=$new_form;
    }else{
        $form.before($new_form).remove();
    }
    this.process($new_form);
},
preprocess_field:function($field){
    var self=this;
    var name=$field.attr('name'),field_colspan=parseInt($field.attr('colspan'),10),field_modifiers=JSON.parse($field.attr('modifiers')||'{}');
    if($field.attr('nolabel')==='1')
        return;
    $field.attr('nolabel','1');
    var found=false;
    this.$form.find('label[for="'+name+'"]').each(function(i,el){
        $(el).parents().each(function(unused,tag){
            var name=tag.tagName.toLowerCase();
            if(name==="field"||name in self.tags_registry.map)
                found=true;
        });
    });
    if(found)
        return;
    var $label=$('<label/>').attr({
        'for':name,
        "modifiers":JSON.stringify({
            invisible:field_modifiers.invisible
            }),
        "string":$field.attr('string'),
        "help":$field.attr('help'),
        "class":$field.attr('class'),
    });
    $label.insertBefore($field);
    if(field_colspan>1){
        $field.attr('colspan',field_colspan-1);
    }
    return $label;
},
process_field:function($field){
    if($field.parent().is('group')){
        var $label=this.preprocess_field($field);
        if($label){
            this.process($label);
        }
    }
this.fields_to_init.push($field);
return $field;
},
process_group:function($group){
    var self=this;
    $group.children('field').each(function(){
        self.preprocess_field($(this));
    });
    var $new_group=this.render_element('FormRenderingGroup',$group.getAttributes());
    var $table;
    if($new_group.first().is('table.oe_form_group')){
        $table=$new_group;
    }else if($new_group.filter('table.oe_form_group').length){
        $table=$new_group.filter('table.oe_form_group').first();
    }else{
        $table=$new_group.find('table.oe_form_group').first();
    }
    var $tr,$td,cols=parseInt($group.attr('col')||2,10),row_cols=cols;
    var children=[];
    $group.children().each(function(a,b,c){
        var $child=$(this);
        var colspan=parseInt($child.attr('colspan')||1,10);
        var tagName=$child[0].tagName.toLowerCase();
        var $td=$('<td/>').addClass('oe_form_group_cell').attr('colspan',colspan);
        var newline=tagName==='newline';
        if($tr&&row_cols>0&&(newline||row_cols<colspan)){
            $tr.addClass('oe_form_group_row_incomplete');
            if(newline){
                $tr.addClass('oe_form_group_row_newline');
            }
        }
    if(newline){
        $tr=null;
        return;
    }
    if(!$tr||row_cols<colspan){
        $tr=$('<tr/>').addClass('oe_form_group_row').appendTo($table);
        row_cols=cols;
    }else if(tagName==='group'){
        $td.addClass('oe_group_right')
        }
    row_cols-=colspan;
    var field_modifiers=JSON.parse($child.attr('modifiers')||'{}');
        var invisible=field_modifiers.invisible;
        self.handle_common_properties($td,$("<dummy>").attr("modifiers",JSON.stringify({
        invisible:invisible
    })));
    $tr.append($td.append($child));
        children.push($child[0]);
    });
if(row_cols&&$td){
    $td.attr('colspan',parseInt($td.attr('colspan'),10)+row_cols);
}
$group.before($new_group).remove();
$table.find('> tbody > tr').each(function(){
    var to_compute=[],row_cols=cols,total=100;
    $(this).children().each(function(){
        var $td=$(this),$child=$td.children(':first');
        switch($child[0].tagName.toLowerCase()){
            case'separator':
                break;
            case'label':
                if($child.attr('for')){
                $td.attr('width','1%').addClass('oe_form_group_cell_label');
                row_cols-=$td.attr('colspan')||1;
                total--;
            }
            break;
            default:
                var width=_.str.trim($child.attr('width')||''),iwidth=parseInt(width,10);
                if(iwidth){
                if(width.substr(-1)==='%'){
                    total-=iwidth;
                    width=iwidth+'%';
                }else{
                    $td.css('min-width',width+'px');
                }
                $td.attr('width',width);
                $child.removeAttr('width');
                row_cols-=$td.attr('colspan')||1;
            }else{
                to_compute.push($td);
            }
            }
        });
if(row_cols){
    var unit=Math.floor(total/row_cols);
    if(!$(this).is('.oe_form_group_row_incomplete')){
        _.each(to_compute,function($td,i){
            var width=parseInt($td.attr('colspan'),10)*unit;
            $td.attr('width',width+'%');
            total-=width;
        });
    }
}
});
_.each(children,function(el){
    self.process($(el));
});
this.handle_common_properties($new_group,$group);
return $new_group;
},
process_notebook:function($notebook){
    var self=this;
    var pages=[];
    $notebook.find('> page').each(function(){
        var $page=$(this);
        var page_attrs=$page.getAttributes();
        page_attrs.id=_.uniqueId('notebook_page_');
        var $new_page=self.render_element('FormRenderingNotebookPage',page_attrs);
        $page.contents().appendTo($new_page);
        $page.before($new_page).remove();
        var ic=self.handle_common_properties($new_page,$page).invisibility_changer;
        page_attrs.__page=$new_page;
        page_attrs.__ic=ic;
        pages.push(page_attrs);
        $new_page.children().each(function(){
            self.process($(this));
        });
    });
    var $new_notebook=this.render_element('FormRenderingNotebook',{
        pages:pages
    });
    $notebook.contents().appendTo($new_notebook);
    $notebook.before($new_notebook).remove();
    self.process($($new_notebook.children()[0]));
    $new_notebook.tabs();
    _.each(pages,function(page,i){
        if(!page.__ic)
            return;
        page.__ic.on("change:effective_invisible",null,function(){
            if(!page.__ic.get('effective_invisible')){
                $new_notebook.tabs('select',i);
                return;
            }
            var current=$new_notebook.tabs("option","selected");
            if(!pages[current].__ic||!pages[current].__ic.get("effective_invisible"))
                return;
            var first_visible=_.find(_.range(pages.length),function(i2){
                return(!pages[i2].__ic)||(!pages[i2].__ic.get("effective_invisible"));
            });
            if(first_visible!==undefined){
                $new_notebook.tabs('select',first_visible);
            }
        });
    });
this.handle_common_properties($new_notebook,$notebook);
return $new_notebook;
},
process_separator:function($separator){
    var $new_separator=this.render_element('FormRenderingSeparator',$separator.getAttributes());
    $separator.before($new_separator).remove();
    this.handle_common_properties($new_separator,$separator);
    return $new_separator;
},
process_label:function($label){
    var name=$label.attr("for"),field_orm=this.fvg.fields[name];
    var dict={
        string:$label.attr('string')||(field_orm||{}).string||'',
        help:$label.attr('help')||(field_orm||{}).help||'',
        _for:name?_.uniqueId('oe-field-input-'):undefined,
    };
    
    var align=parseFloat(dict.align);
    if(isNaN(align)||align===1){
        align='right';
    }else if(align===0){
        align='left';
    }else{
        align='center';
    }
    dict.align=align;
    var $new_label=this.render_element('FormRenderingLabel',dict);
    $label.before($new_label).remove();
    this.handle_common_properties($new_label,$label);
    if(name){
        this.labels[name]=$new_label;
    }
    return $new_label;
},
handle_common_properties:function($new_element,$node){
    var str_modifiers=$node.attr("modifiers")||"{}";
    var modifiers=JSON.parse(str_modifiers);
    var ic=null;
    if(modifiers.invisible!==undefined)
        ic=new instance.web.form.InvisibilityChanger(this.view,this.view,modifiers.invisible,$new_element);
    $new_element.addClass($node.attr("class")||"");
    $new_element.attr('style',$node.attr('style'));
    return{
        invisibility_changer:ic,
    };

},
});
instance.web.form.DefaultFieldManager=instance.web.Widget.extend({
    init:function(parent,eval_context){
        this._super(parent);
        this.field_descs={};
        
        this.eval_context=eval_context||{};
        
        this.set({
            display_invalid_fields:false,
            actual_mode:'create',
        });
    },
    get_field_desc:function(field_name){
        if(this.field_descs[field_name]===undefined){
            this.field_descs[field_name]={
                string:field_name,
            };
        
    }
    return this.field_descs[field_name];
},
extend_field_desc:function(fields){
    var self=this;
    _.each(fields,function(v,k){
        _.extend(self.get_field_desc(k),v);
    });
},
get_field_value:function(field_name){
    return false;
},
set_values:function(values){},
    compute_domain:function(expression){
    return instance.web.form.compute_domain(expression,{});
},
build_eval_context:function(){
    return new instance.web.CompoundContext(this.eval_context);
},
});
instance.web.form.compute_domain=function(expr,fields){
    if(!(expr instanceof Array))
        return!!expr;
    var stack=[];
    for(var i=expr.length-1;i>=0;i--){
        var ex=expr[i];
        if(ex.length==1){
            var top=stack.pop();
            switch(ex){
                case'|':
                    stack.push(stack.pop()||top);
                    continue;
                case'&':
                    stack.push(stack.pop()&&top);
                    continue;
                case'!':
                    stack.push(!top);
                    continue;
                default:
                    throw new Error(_.str.sprintf(_t("Unknown operator %s in domain %s"),ex,JSON.stringify(expr)));
            }
        }
    var field=fields[ex[0]];
    if(!field){
        throw new Error(_.str.sprintf(_t("Unknown field %s in domain %s"),ex[0],JSON.stringify(expr)));
    }
    var field_value=field.get_value?field.get_value():field.value;
        var op=ex[1];
        var val=ex[2];
        switch(op.toLowerCase()){
        case'=':case'==':
            stack.push(_.isEqual(field_value,val));
            break;
        case'!=':case'<>':
            stack.push(!_.isEqual(field_value,val));
            break;
        case'<':
            stack.push(field_value<val);
            break;
        case'>':
            stack.push(field_value>val);
            break;
        case'<=':
            stack.push(field_value<=val);
            break;
        case'>=':
            stack.push(field_value>=val);
            break;
        case'in':
            if(!_.isArray(val))val=[val];
            stack.push(_(val).contains(field_value));
            break;
        case'not in':
            if(!_.isArray(val))val=[val];
            stack.push(!_(val).contains(field_value));
            break;
        default:
            console.warn(_t("Unsupported operator %s in domain %s"),op,JSON.stringify(expr));
    }
    }
return _.all(stack,_.identity);
};

instance.web.form.is_bin_size=function(v){
    return/^\d+(\.\d*)? \w+$/.test(v);
};

instance.web.form.InvisibilityChangerMixin={
    init:function(field_manager,invisible_domain){
        var self=this;
        this._ic_field_manager=field_manager;
        this._ic_invisible_modifier=invisible_domain;
        this._ic_field_manager.on("view_content_has_changed",this,function(){
            var result=self._ic_invisible_modifier===undefined?false:self._ic_field_manager.compute_domain(self._ic_invisible_modifier);
            self.set({
                "invisible":result
            });
        });
        this.set({
            invisible:this._ic_invisible_modifier===true,
            force_invisible:false
        });
        var check=function(){
            if(self.get("invisible")||self.get('force_invisible')){
                self.set({
                    "effective_invisible":true
                });
            }else{
                self.set({
                    "effective_invisible":false
                });
            }
        };
        
    this.on('change:invisible',this,check);
    this.on('change:force_invisible',this,check);
    check.call(this);
},
start:function(){
    this.on("change:effective_invisible",this,this._check_visibility);
    this._check_visibility();
},
_check_visibility:function(){
    this.$el.toggleClass('oe_form_invisible',this.get("effective_invisible"));
},
};

instance.web.form.InvisibilityChanger=instance.web.Class.extend(instance.web.PropertiesMixin,instance.web.form.InvisibilityChangerMixin,{
    init:function(parent,field_manager,invisible_domain,$el){
        this.setParent(parent);
        instance.web.PropertiesMixin.init.call(this);
        instance.web.form.InvisibilityChangerMixin.init.call(this,field_manager,invisible_domain);
        this.$el=$el;
        this.start();
    },
});
instance.web.form.FormWidget=instance.web.Widget.extend(instance.web.form.InvisibilityChangerMixin,{
    init:function(field_manager,node){
        this._super(field_manager);
        this.field_manager=field_manager;
        if(this.field_manager instanceof instance.web.FormView)
            this.view=this.field_manager;
        this.node=node;
        this.modifiers=JSON.parse(this.node.attrs.modifiers||'{}');
        instance.web.form.InvisibilityChangerMixin.init.call(this,this.field_manager,this.modifiers.invisible);
        this.field_manager.on("view_content_has_changed",this,this.process_modifiers);
        this.set({
            required:false,
            readonly:false,
        });
        var self=this;
        var test_effective_readonly=function(){
            self.set({
                "effective_readonly":self.get("readonly")||self.field_manager.get("actual_mode")==="view"
                });
        };
        
        this.on("change:readonly",this,test_effective_readonly);
        this.field_manager.on("change:actual_mode",this,test_effective_readonly);
        test_effective_readonly.call(this);
    },
    renderElement:function(){
        this.process_modifiers();
        this._super();
        this.$el.addClass(this.node.attrs["class"]||"");
    },
    destroy:function(){
        $.fn.tipsy.clear();
        this._super.apply(this,arguments);
    },
    setupFocus:function($e){
        var self=this;
        $e.on({
            focus:function(){
                self.trigger('focused');
            },
            blur:function(){
                self.trigger('blurred');
            }
        });
},
process_modifiers:function(){
    var to_set={};
    
    for(var a in this.modifiers){
        if(!this.modifiers.hasOwnProperty(a)){
            continue;
        }
        if(!_.include(["invisible"],a)){
            var val=this.field_manager.compute_domain(this.modifiers[a]);
            to_set[a]=val;
        }
    }
this.set(to_set);
},
do_attach_tooltip:function(widget,trigger,options){
    widget=widget||this;
    trigger=trigger||this.$el;
    options=_.extend({
        delayIn:500,
        delayOut:0,
        fade:true,
        title:function(){
            var template=widget.template+'.tooltip';
            if(!QWeb.has_template(template)){
                template='WidgetLabel.tooltip';
            }
            return QWeb.render(template,{
                debug:instance.session.debug,
                widget:widget
            })
            },
        gravity:$.fn.tipsy.autoBounds(50,'nw'),
        html:true,
        opacity:0.85,
        trigger:'hover'
    },options||{});
    $(trigger).tipsy(options);
},
build_context:function(){
    var v_context=this.node.attrs.context;
    if(!v_context){
        v_context=(this.field||{}).context||{};
    
}
if(v_context.__ref||true){
    var fields_values=this.field_manager.build_eval_context();
    v_context=new instance.web.CompoundContext(v_context).set_eval_context(fields_values);
}
return v_context;
},
build_domain:function(){
    var f_domain=this.field.domain||[];
    var n_domain=this.node.attrs.domain||null;
    var final_domain=n_domain!==null?n_domain:f_domain;
    if(!(final_domain instanceof Array)||true){
        var fields_values=this.field_manager.build_eval_context();
        final_domain=new instance.web.CompoundDomain(final_domain).set_eval_context(fields_values);
    }
    return final_domain;
}
});
instance.web.form.WidgetButton=instance.web.form.FormWidget.extend({
    template:'WidgetButton',
    init:function(field_manager,node){
        node.attrs.type=node.attrs['data-button-type'];
        this._super(field_manager,node);
        this.force_disabled=false;
        this.string=(this.node.attrs.string||'').replace(/_/g,'');
        if(JSON.parse(this.node.attrs.default_focus||"0")){
            this.view.default_focus_button=this;
        }
        if(this.node.attrs.icon&&(!/\//.test(this.node.attrs.icon))){
            this.node.attrs.icon='/web/static/src/img/icons/'+this.node.attrs.icon+'.png';
        }
        this.view.on('view_content_has_changed',this,this.check_disable);
    },
    start:function(){
        this._super.apply(this,arguments);
        this.$el.click(this.on_click);
        if(this.node.attrs.help||instance.session.debug){
            this.do_attach_tooltip();
        }
        this.setupFocus(this.$el);
    },
    on_click:function(){
        var self=this;
        this.force_disabled=true;
        this.check_disable();
        this.execute_action().always(function(){
            self.force_disabled=false;
            self.check_disable();
        });
    },
    execute_action:function(){
        var self=this;
        var exec_action=function(){
            if(self.node.attrs.confirm){
                var def=$.Deferred();
                var dialog=instance.web.dialog($('<div/>').text(self.node.attrs.confirm),{
                    title:_t('Confirm'),
                    modal:true,
                    buttons:[{
                        text:_t("Cancel"),
                        click:function(){
                            $(this).dialog("close");
                        }
                    },{
                    text:_t("Ok"),
                    click:function(){
                        var self2=this;
                        self.on_confirmed().always(function(){
                            $(self2).dialog("close");
                        });
                    }
                },],
                beforeClose:function(){
                    def.resolve();
                },
            });
        return def.promise();
    }else{
        return self.on_confirmed();
    }
};

if(!this.node.attrs.special){
    return this.view.recursive_save().then(exec_action);
}else{
    return exec_action();
}
},
on_confirmed:function(){
    var self=this;
    var context=this.build_context();
    return this.view.do_execute_action(_.extend({},this.node.attrs,{
        context:context
    }),this.view.dataset,this.view.datarecord.id,function(){
        self.view.recursive_reload();
    });
},
check_disable:function(){
    var disabled=(this.force_disabled||!this.view.is_interactible_record());
    this.$el.prop('disabled',disabled);
    this.$el.css('color',disabled?'grey':'');
}
});
instance.web.form.FieldInterface={
    init:function(field_manager,node){},
    set_value:function(value_){},
    get_value:function(){},
    set_input_id:function(id){},
    is_valid:function(){},
    is_syntax_valid:function(){},
    focus:function(){},
    on_translate:function(){},
    commit_value:function(){},
};

instance.web.form.AbstractField=instance.web.form.FormWidget.extend(instance.web.form.FieldInterface,{
    init:function(field_manager,node){
        var self=this
        this._super(field_manager,node);
        this.name=this.node.attrs.name;
        this.field=this.field_manager.get_field_desc(this.name);
        this.widget=this.node.attrs.widget;
        this.string=this.node.attrs.string||this.field.string||this.name;
        this.options=instance.web.py_eval(this.node.attrs.options||'{}');
        this.set({
            'value':false
        });
        this.on("change:value",this,function(){
            this.trigger('changed_value');
            this._check_css_flags();
        });
    },
    renderElement:function(){
        var self=this;
        this._super();
        if(this.field.translate&&this.view){
            this.$el.addClass('oe_form_field_translatable');
            this.$el.find('.oe_field_translate').click(this.on_translate);
        }
        this.$label=this.view?this.view.$el.find('label[for='+this.id_for_label+']'):$();
        if(instance.session.debug){
            this.do_attach_tooltip(this,this.$label[0]||this.$el);
            this.$label.off('dblclick').on('dblclick',function(){
                console.log("Field '%s' of type '%s' in View: %o",self.name,(self.node.attrs.widget||self.field.type),self.view);
                window.w=self;
                console.log("window.w =",window.w);
            });
        }
        if(!this.disable_utility_classes){
            this.off("change:required",this,this._set_required);
            this.on("change:required",this,this._set_required);
            this._set_required();
        }
        this._check_visibility();
        this.field_manager.off("change:display_invalid_fields",this,this._check_css_flags);
        this.field_manager.on("change:display_invalid_fields",this,this._check_css_flags);
        this._check_css_flags();
    },
    start:function(){
        var tmp=this._super();
        this.on("change:value",this,function(){
            if(!this.no_rerender)
                this.render_value();
        });
        this.render_value();
    },
    _set_required:function(){
        this.$el.toggleClass('oe_form_required',this.get("required"));
    },
    set_value:function(value_){
        this.set({
            'value':value_
        });
    },
    get_value:function(){
        return this.get('value');
    },
    internal_set_value:function(value_){
        var tmp=this.no_render;
        this.no_rerender=true;
        this.set({
            'value':value_
        });
        this.no_rerender=tmp;
    },
    render_value:function(){},
    is_valid:function(){
        return this.is_syntax_valid()&&!(this.get('required')&&this.is_false());
    },
    is_syntax_valid:function(){
        return true;
    },
    is_false:function(){
        return this.get('value')===false;
    },
    _check_css_flags:function(){
        if(this.field.translate){
            this.$el.find('.oe_field_translate').toggle(this.field_manager.get('actual_mode')!=="create");
        }
        if(!this.disable_utility_classes){
            if(this.field_manager.get('display_invalid_fields')){
                this.$el.toggleClass('oe_form_invalid',!this.is_valid());
            }
        }
    },
focus:function(){
    return false;
},
set_input_id:function(id){
    this.id_for_label=id;
},
on_translate:function(){
    var self=this;
    var trans=new instance.web.DataSet(this,'ir.translation');
    return trans.call_button('translate_fields',[this.view.dataset.model,this.view.datarecord.id,this.name,this.view.dataset.get_context()]).done(function(r){
        self.do_action(r);
    });
},
set_dimensions:function(height,width){
    this.$el.css({
        width:width,
        minHeight:height
    });
},
commit_value:function(){
    return $.when();
},
});
instance.web.form.ReinitializeWidgetMixin={
    start:function(){
        this.initialize_field();
        this._super();
    },
    initialize_field:function(){
        this.on("change:effective_readonly",this,this.reinitialize);
        this.initialize_content();
    },
    reinitialize:function(){
        this.destroy_content();
        this.renderElement();
        this.initialize_content();
    },
    destroy_content:function(){},
    initialize_content:function(){},
};

instance.web.form.ReinitializeFieldMixin=_.extend({},instance.web.form.ReinitializeWidgetMixin,{
    reinitialize:function(){
        instance.web.form.ReinitializeWidgetMixin.reinitialize.call(this);
        this.render_value();
    },
});
if($.browser.msie&&$.browser.version==="9.0"){
    document.addEventListener("DOMNodeInserted",function(event){
        var nodename=event.target.nodeName.toLowerCase();
        if(nodename==="input"||nodename=="textarea"){
            $(event.target).placeholder();
        }
    });
}
instance.web.form.FieldChar=instance.web.form.AbstractField.extend(instance.web.form.ReinitializeFieldMixin,{
    template:'FieldChar',
    widget_class:'oe_form_field_char',
    events:{
        'change input':'store_dom_value',
    },
    init:function(field_manager,node){
        this._super(field_manager,node);
        this.password=this.node.attrs.password==='True'||this.node.attrs.password==='1';
    },
    initialize_content:function(){
        this.setupFocus(this.$('input'));
    },
    store_dom_value:function(){
        if(!this.get('effective_readonly')&&this.$('input').length&&this.is_syntax_valid()){
            this.internal_set_value(this.parse_value(this.$('input').val()));
        }
    },
commit_value:function(){
    this.store_dom_value();
    return this._super();
},
render_value:function(){
    var show_value=this.format_value(this.get('value'),'');
    if(!this.get("effective_readonly")){
        this.$el.find('input').val(show_value);
    }else{
        if(this.password){
            show_value=new Array(show_value.length+1).join('*');
        }
        this.$(".oe_form_char_content").text(show_value);
    }
},
is_syntax_valid:function(){
    if(!this.get("effective_readonly")&&this.$("input").size()>0){
        try{
            this.parse_value(this.$('input').val(),'');
            return true;
        }catch(e){
            return false;
        }
    }
return true;
},
parse_value:function(val,def){
    return instance.web.parse_value(val,this,def);
},
format_value:function(val,def){
    return instance.web.format_value(val,this,def);
},
is_false:function(){
    return this.get('value')===''||this._super();
},
focus:function(){
    this.$('input:first')[0].focus();
},
set_dimensions:function(height,width){
    this._super(height,width);
    this.$('input').css({
        height:height,
        width:width
    });
}
});
instance.web.form.FieldID=instance.web.form.FieldChar.extend({
    process_modifiers:function(){
        this._super();
        this.set({
            readonly:true
        });
    },
});
instance.web.form.FieldEmail=instance.web.form.FieldChar.extend({
    template:'FieldEmail',
    initialize_content:function(){
        this._super();
        var $button=this.$el.find('button');
        $button.click(this.on_button_clicked);
        this.setupFocus($button);
    },
    render_value:function(){
        if(!this.get("effective_readonly")){
            this._super();
        }else{
            this.$el.find('a').attr('href','mailto:'+this.get('value')).text(this.get('value')||'');
        }
    },
on_button_clicked:function(){
    if(!this.get('value')||!this.is_syntax_valid()){
        this.do_warn(_t("E-mail error"),_t("Can't send email to invalid e-mail address"));
    }else{
        location.href='mailto:'+this.get('value');
    }
}
});
instance.web.form.FieldUrl=instance.web.form.FieldChar.extend({
    template:'FieldUrl',
    initialize_content:function(){
        this._super();
        var $button=this.$el.find('button');
        $button.click(this.on_button_clicked);
        this.setupFocus($button);
    },
    render_value:function(){
        if(!this.get("effective_readonly")){
            this._super();
        }else{
            var tmp=this.get('value');
            var s=/(\w+):(.+)|^\.{0,2}\//.exec(tmp);
            if(!s){
                tmp="http://"+this.get('value');
            }
            this.$el.find('a').attr('href',tmp).text(this.get('value')?tmp:'');
        }
    },
on_button_clicked:function(){
    if(!this.get('value')){
        this.do_warn(_t("Resource error"),_t("This resource is empty"));
    }else{
        var url=$.trim(this.get('value'));
        if(/^www\./i.test(url))
            url='http://'+url;
        window.open(url);
    }
}
});
instance.web.form.FieldFloat=instance.web.form.FieldChar.extend({
    is_field_number:true,
    widget_class:'oe_form_field_float',
    init:function(field_manager,node){
        this._super(field_manager,node);
        this.internal_set_value(0);
        if(this.node.attrs.digits){
            this.digits=this.node.attrs.digits;
        }else{
            this.digits=this.field.digits;
        }
    },
set_value:function(value_){
    if(value_===false||value_===undefined){
        value_=0;
    }
    this._super.apply(this,[value_]);
},
focus:function(){
    this.$('input:first').select();
}
});
instance.web.DateTimeWidget=instance.web.Widget.extend({
    template:"web.datepicker",
    jqueryui_object:'datetimepicker',
    type_of_date:"datetime",
    events:{
        'change .oe_datepicker_master':'change_datetime',
        'dragstart img.oe_datepicker_trigger':function(){
            return false;
        },
    },
    init:function(parent){
        this._super(parent);
        this.name=parent.name;
    },
    start:function(){
        var self=this;
        this.$input=this.$el.find('input.oe_datepicker_master');
        this.$input_picker=this.$el.find('input.oe_datepicker_container');
        this.picker({
            onClose:this.on_picker_select,
            onSelect:this.on_picker_select,
            changeMonth:true,
            changeYear:true,
            showWeek:true,
            showButtonPanel:true,
            firstDay:Date.CultureInfo.firstDayOfWeek
            });
        this.picker('widget').click(function(e){
            e.stopPropagation();
        });
        this.$el.find('img.oe_datepicker_trigger').click(function(){
            if(self.get("effective_readonly")||self.picker('widget').is(':visible')){
                self.$input.focus();
                return;
            }
            self.picker('setDate',self.get('value')?instance.web.auto_str_to_date(self.get('value')):new Date());
            self.$input_picker.show();
            self.picker('show');
            self.$input_picker.hide();
        });
        this.set_readonly(false);
        this.set({
            'value':false
        });
    },
    picker:function(){
        return $.fn[this.jqueryui_object].apply(this.$input_picker,arguments);
    },
    on_picker_select:function(text,instance_){
        var date=this.picker('getDate');
        this.$input.val(date?this.format_client(date):'').change().focus();
    },
    set_value:function(value_){
        this.set({
            'value':value_
        });
        this.$input.val(value_?this.format_client(value_):'');
    },
    get_value:function(){
        return this.get('value');
    },
    set_value_from_ui_:function(){
        var value_=this.$input.val()||false;
        this.set({
            'value':this.parse_client(value_)
            });
    },
    set_readonly:function(readonly){
        this.readonly=readonly;
        this.$input.prop('readonly',this.readonly);
        this.$el.find('img.oe_datepicker_trigger').toggleClass('oe_input_icon_disabled',readonly);
    },
    is_valid_:function(){
        var value_=this.$input.val();
        if(value_===""){
            return true;
        }else{
            try{
                this.parse_client(value_);
                return true;
            }catch(e){
                return false;
            }
        }
    },
parse_client:function(v){
    return instance.web.parse_value(v,{
        "widget":this.type_of_date
        });
},
format_client:function(v){
    return instance.web.format_value(v,{
        "widget":this.type_of_date
        });
},
change_datetime:function(){
    if(this.is_valid_()){
        this.set_value_from_ui_();
        this.trigger("datetime_changed");
    }
},
commit_value:function(){
    this.change_datetime();
},
});
instance.web.DateWidget=instance.web.DateTimeWidget.extend({
    jqueryui_object:'datepicker',
    type_of_date:"date"
});
instance.web.form.FieldDatetime=instance.web.form.AbstractField.extend(instance.web.form.ReinitializeFieldMixin,{
    template:"FieldDatetime",
    build_widget:function(){
        return new instance.web.DateTimeWidget(this);
    },
    destroy_content:function(){
        if(this.datewidget){
            this.datewidget.destroy();
            this.datewidget=undefined;
        }
    },
initialize_content:function(){
    if(!this.get("effective_readonly")){
        this.datewidget=this.build_widget();
        this.datewidget.on('datetime_changed',this,_.bind(function(){
            this.internal_set_value(this.datewidget.get_value());
        },this));
        this.datewidget.appendTo(this.$el);
        this.setupFocus(this.datewidget.$input);
    }
},
render_value:function(){
    if(!this.get("effective_readonly")){
        this.datewidget.set_value(this.get('value'));
    }else{
        this.$el.text(instance.web.format_value(this.get('value'),this,''));
    }
},
is_syntax_valid:function(){
    if(!this.get("effective_readonly")&&this.datewidget){
        return this.datewidget.is_valid_();
    }
    return true;
},
is_false:function(){
    return this.get('value')===''||this._super();
},
focus:function(){
    if(this.datewidget&&this.datewidget.$input){
        this.datewidget.$input[0].focus();
    }
},
set_dimensions:function(height,width){
    this._super(height,width);
    this.datewidget.$input.css('height',height);
}
});
instance.web.form.FieldDate=instance.web.form.FieldDatetime.extend({
    template:"FieldDate",
    build_widget:function(){
        return new instance.web.DateWidget(this);
    }
});
instance.web.form.FieldText=instance.web.form.AbstractField.extend(instance.web.form.ReinitializeFieldMixin,{
    template:'FieldText',
    events:{
        'keyup':function(e){
            if(e.which===$.ui.keyCode.ENTER){
                e.stopPropagation();
            }
        },
    'change textarea':'store_dom_value',
},
init:function(field_manager,node){
    this._super(field_manager,node);
},
initialize_content:function(){
    var self=this;
    this.$textarea=this.$el.find('textarea');
    this.auto_sized=false;
    this.default_height=this.$textarea.css('height');
    if(this.get("effective_readonly")){
        this.$textarea.attr('disabled','disabled');
    }
    this.setupFocus(this.$textarea);
},
commit_value:function(){
    this.store_dom_value();
    return this._super();
},
store_dom_value:function(){
    if(!this.get('effective_readonly')&&this.$('textarea').length){
        this.internal_set_value(instance.web.parse_value(this.$textarea.val(),this));
    }
},
render_value:function(){
    var show_value=instance.web.format_value(this.get('value'),this,'');
    if(show_value===''){
        this.$textarea.css('height',parseInt(this.default_height)+"px");
    }
    this.$textarea.val(show_value);
    if(!this.auto_sized){
        this.auto_sized=true;
        this.$textarea.autosize();
    }else{
        this.$textarea.trigger("autosize");
    }
},
is_syntax_valid:function(){
    if(!this.get("effective_readonly")&&this.$textarea){
        try{
            instance.web.parse_value(this.$textarea.val(),this,'');
            return true;
        }catch(e){
            return false;
        }
    }
return true;
},
is_false:function(){
    return this.get('value')===''||this._super();
},
focus:function($el){
    this.$textarea[0].focus();
},
set_dimensions:function(height,width){
    this._super(height,width);
    this.$textarea.css({
        width:width,
        minHeight:height
    });
},
});
instance.web.form.FieldTextHtml=instance.web.form.AbstractField.extend(instance.web.form.ReinitializeFieldMixin,{
    template:'FieldTextHtml',
    init:function(){
        this._super.apply(this,arguments);
    },
    initialize_content:function(){
        var self=this;
        if(!this.get("effective_readonly")){
            self._updating_editor=false;
            this.$textarea=this.$el.find('textarea');
            var width=((this.node.attrs||{}).editor_width||'100%');
            var height=((this.node.attrs||{}).editor_height||250);
            this.$textarea.cleditor({
                width:width,
                height:height,
                controls:"bold italic underline strikethrough "+"| removeformat | bullets numbering | outdent "+"indent | link unlink | source",
                bodyStyle:"margin:4px; color:#4c4c4c; font-size:13px; font-family:\"Lucida Grande\",Helvetica,Verdana,Arial,sans-serif; cursor:text"
            });
            this.$cleditor=this.$textarea.cleditor()[0];
            this.$cleditor.change(function(){
                if(!self._updating_editor){
                    self.$cleditor.updateTextArea();
                    self.internal_set_value(self.$textarea.val());
                }
            });
    }
},
render_value:function(){
    if(!this.get("effective_readonly")){
        this.$textarea.val(this.get('value')||'');
        this._updating_editor=true;
        this.$cleditor.updateFrame();
        this._updating_editor=false;
    }else{
        this.$el.html(this.get('value'));
    }
},
});
instance.web.form.FieldBoolean=instance.web.form.AbstractField.extend({
    template:'FieldBoolean',
    start:function(){
        var self=this;
        this.$checkbox=$("input",this.$el);
        this.setupFocus(this.$checkbox);
        this.$el.click(_.bind(function(){
            this.internal_set_value(this.$checkbox.is(':checked'));
        },this));
        var check_readonly=function(){
            self.$checkbox.prop('disabled',self.get("effective_readonly"));
        };
        
        this.on("change:effective_readonly",this,check_readonly);
        check_readonly.call(this);
        this._super.apply(this,arguments);
    },
    render_value:function(){
        this.$checkbox[0].checked=this.get('value');
    },
    focus:function(){
        this.$checkbox[0].focus();
    }
});
instance.web.form.FieldProgressBar=instance.web.form.AbstractField.extend({
    template:'FieldProgressBar',
    render_value:function(){
        this.$el.progressbar({
            value:this.get('value')||0,
            disabled:this.get("effective_readonly")
            });
        var formatted_value=instance.web.format_value(this.get('value')||0,{
            type:'float'
        });
        this.$('span').html(formatted_value+'%');
    }
});
instance.web.form.FieldSelection=instance.web.form.AbstractField.extend(instance.web.form.ReinitializeFieldMixin,{
    template:'FieldSelection',
    events:{
        'change select':'store_dom_value',
    },
    init:function(field_manager,node){
        var self=this;
        this._super(field_manager,node);
        this.values=_(this.field.selection).chain().reject(function(v){
            return v[0]===false&&v[1]==='';
        }).unshift([false,'']).value();
    },
    initialize_content:function(){
        var ischanging=false;
        var $select=this.$el.find('select').change(function(){
            ischanging=true;
        }).click(function(){
            ischanging=false;
        }).keyup(function(e){
            if(e.which!==13||!ischanging){
                return;
            }
            e.stopPropagation();
            ischanging=false;
        });
        this.setupFocus($select);
    },
    commit_value:function(){
        this.store_dom_value();
        return this._super();
    },
    store_dom_value:function(){
        if(!this.get('effective_readonly')&&this.$('select').length){
            this.internal_set_value(this.values[this.$('select')[0].selectedIndex][0]);
        }
    },
set_value:function(value_){
    value_=value_===null?false:value_;
    value_=value_ instanceof Array?value_[0]:value_;
    this._super(value_);
},
render_value:function(){
    if(!this.get("effective_readonly")){
        var index=0;
        for(var i=0,ii=this.values.length;i<ii;i++){
            if(this.values[i][0]===this.get('value'))index=i;
        }
        this.$el.find('select')[0].selectedIndex=index;
    }else{
        var self=this;
        var option=_(this.values).detect(function(record){
            return record[0]===self.get('value');
        });
        this.$el.text(option?option[1]:this.values[0][1]);
    }
},
focus:function(){
    this.$('select:first')[0].focus();
},
set_dimensions:function(height,width){
    this._super(height,width);
    this.$('select').css({
        height:height,
        width:width
    });
}
});
(function(){
    var proto=$.ui.autocomplete.prototype,initSource=proto._initSource;
    function filter(array,term){
        var matcher=new RegExp($.ui.autocomplete.escapeRegex(term),"i");
        return $.grep(array,function(value_){
            return matcher.test($("<div>").html(value_.label||value_.value||value_).text());
        });
    }
    $.extend(proto,{
        _initSource:function(){
            if(this.options.html&&$.isArray(this.options.source)){
                this.source=function(request,response){
                    response(filter(this.options.source,request.term));
                };
            
        }else{
            initSource.call(this);
        }
    },
    _renderItem:function(ul,item){
        return $("<li></li>").data("item.autocomplete",item).append($("<a></a>")[this.options.html?"html":"text"](item.label)).appendTo(ul).addClass(item.classname);
    }
});
})();
instance.web.form.CompletionFieldMixin={
    init:function(){
        this.limit=7;
        this.orderer=new instance.web.DropMisordered();
    },
    get_search_result:function(search_val){
        var self=this;
        var dataset=new instance.web.DataSet(this,this.field.relation,self.build_context());
        var blacklist=this.get_search_blacklist();
        this.last_query=search_val;
        return this.orderer.add(dataset.name_search(search_val,new instance.web.CompoundDomain(self.build_domain(),[["id","not in",blacklist]]),'ilike',this.limit+1,self.build_context())).then(function(data){
            self.last_search=data;
            var values=_.map(data,function(x){
                x[1]=x[1].split("\n")[0];
                return{
                    label:_.str.escapeHTML(x[1]),
                    value:x[1],
                    name:x[1],
                    id:x[0],
                };
            
            });
        if(values.length>self.limit){
            values=values.slice(0,self.limit);
            values.push({
                label:_t("Search More..."),
                action:function(){
                    dataset.name_search(search_val,self.build_domain(),'ilike',false).done(function(data){
                        self._search_create_popup("search",data);
                    });
                },
                classname:'oe_m2o_dropdown_option'
            });
        }
        var raw_result=_(data.result).map(function(x){
            return x[1];
        });
        if(search_val.length>0&&!_.include(raw_result,search_val)){
            values.push({
                label:_.str.sprintf(_t('Create "<strong>%s</strong>"'),$('<span />').text(search_val).html()),
                action:function(){
                    self._quick_create(search_val);
                },
                classname:'oe_m2o_dropdown_option'
            });
        }
        values.push({
            label:_t("Create and Edit..."),
            action:function(){
                self._search_create_popup("form",undefined,self._create_context(search_val));
            },
            classname:'oe_m2o_dropdown_option'
        });
        return values;
        });
},
get_search_blacklist:function(){
    return[];
},
_quick_create:function(name){
    var self=this;
    var slow_create=function(){
        self._search_create_popup("form",undefined,self._create_context(name));
    };
    
    if(self.options.quick_create===undefined||self.options.quick_create){
        new instance.web.DataSet(this,this.field.relation,self.build_context()).name_create(name).done(function(data){
            self.add_id(data[0]);
        }).fail(function(error,event){
            event.preventDefault();
            slow_create();
        });
    }else
        slow_create();
},
_search_create_popup:function(view,ids,context){
    var self=this;
    var pop=new instance.web.form.SelectCreatePopup(this);
    pop.select_element(self.field.relation,{
        title:(view==='search'?_t("Search: "):_t("Create: "))+this.string,
        initial_ids:ids?_.map(ids,function(x){
            return x[0]
            }):undefined,
        initial_view:view,
        disable_multiple_selection:true
    },self.build_domain(),new instance.web.CompoundContext(self.build_context(),context||{}));
    pop.on("elements_selected",self,function(element_ids){
        self.add_id(element_ids[0]);
        self.focus();
    });
},
add_id:function(id){},
_create_context:function(name){
    var tmp={};
    
    var field=(this.options||{}).create_name_field;
    if(field===undefined)
        field="name";
    if(field!==false&&name&&(this.options||{}).quick_create!==false)
        tmp["default_"+field]=name;
    return tmp;
},
};

instance.web.form.M2ODialog=instance.web.Dialog.extend({
    template:"M2ODialog",
    init:function(parent){
        this._super(parent,{
            title:_.str.sprintf(_t("Add %s"),parent.string),
            width:312,
        });
    },
    start:function(){
        var self=this;
        this.$buttons.html(QWeb.render("M2ODialog.buttons"));
        this.$("input").val(this.getParent().last_query);
        this.$buttons.find(".oe_form_m2o_qc_button").click(function(){
            self.getParent()._quick_create(self.$("input").val());
            self.destroy();
        });
        this.$buttons.find(".oe_form_m2o_sc_button").click(function(){
            self.getParent()._search_create_popup("form",undefined,self.getParent()._create_context(self.$("input").val()));
            self.destroy();
        });
        this.$buttons.find(".oe_form_m2o_cancel_button").click(function(){
            self.destroy();
        });
    },
});
instance.web.form.FieldMany2One=instance.web.form.AbstractField.extend(instance.web.form.CompletionFieldMixin,instance.web.form.ReinitializeFieldMixin,{
    template:"FieldMany2One",
    events:{
        'keydown input':function(e){
            switch(e.which){
                case $.ui.keyCode.UP:case $.ui.keyCode.DOWN:
                    e.stopPropagation();
            }
        },
    'dragstart .oe_m2o_drop_down_button img':function(){
        return false;
    },
    'dragstart .oe_m2o_cm_button':function(){
        return false;
    }
},
init:function(field_manager,node){
    this._super(field_manager,node);
    instance.web.form.CompletionFieldMixin.init.call(this);
    this.set({
        'value':false
    });
    this.display_value={};
    
    this.last_search=[];
    this.floating=false;
    this.current_display=null;
    this.is_started=false;
},
reinit_value:function(val){
    this.internal_set_value(val);
    this.floating=false;
    if(this.is_started)
        this.render_value();
},
initialize_field:function(){
    this.is_started=true;
    instance.web.bus.on('click',this,function(){
        if(!this.get("effective_readonly")&&this.$input&&this.$input.autocomplete('widget').is(':visible')){
            this.$input.autocomplete("close");
        }
    });
instance.web.form.ReinitializeFieldMixin.initialize_field.call(this);
},
initialize_content:function(){
    if(!this.get("effective_readonly"))
        this.render_editable();
},
init_error_displayer:function(){},
hide_error_displayer:function(){},
show_error_displayer:function(){
    new instance.web.form.M2ODialog(this).open();
},
render_editable:function(){
    var self=this;
    this.$input=this.$el.find("input");
    this.init_error_displayer();
    self.$input.on('focus',function(){
        self.hide_error_displayer();
    });
    this.$drop_down=this.$el.find(".oe_m2o_drop_down_button");
    this.$follow_button=$(".oe_m2o_cm_button",this.$el);
    this.$follow_button.click(function(ev){
        ev.preventDefault();
        if(!self.get('value')){
            self.focus();
            return;
        }
        var pop=new instance.web.form.FormOpenPopup(self);
        pop.show_element(self.field.relation,self.get("value"),self.build_context(),{
            title:_t("Open: ")+self.string
            });
        pop.on('write_completed',self,function(){
            self.display_value={};
            
            self.render_value();
            self.focus();
        });
    });
    var input_changed=function(){
        if(self.current_display!==self.$input.val()){
            self.current_display=self.$input.val();
            if(self.$input.val()===""){
                self.internal_set_value(false);
                self.floating=false;
            }else{
                self.floating=true;
            }
        }
    };

this.$input.keydown(input_changed);
this.$input.change(input_changed);
this.$drop_down.click(function(){
    if(self.$input.autocomplete("widget").is(":visible")){
        self.$input.autocomplete("close");
        self.$input.focus();
    }else{
        if(self.get("value")&&!self.floating){
            self.$input.autocomplete("search","");
        }else{
            self.$input.autocomplete("search");
        }
    }
});
var close_autocomplete=_.debounce(function(){
    if(self.$input.autocomplete("widget").is(":visible")){
        self.$input.autocomplete("close");
    }
},50);
this.$input.closest(".ui-dialog .ui-dialog-content").on('scroll',this,close_autocomplete);
self.ed_def=$.Deferred();
self.uned_def=$.Deferred();
var ed_delay=200;
var ed_duration=15000;
var anyoneLoosesFocus=function(e){
    var used=false;
    if(self.floating){
        if(self.last_search.length>0){
            if(self.last_search[0][0]!=self.get("value")){
                self.display_value={};
                
                self.display_value[""+self.last_search[0][0]]=self.last_search[0][1];
                self.reinit_value(self.last_search[0][0]);
            }else{
                used=true;
                self.render_value();
            }
        }else{
        used=true;
        self.reinit_value(false);
    }
    self.floating=false;
}
if(used&&self.get("value")===false&&!self.no_ed){
    self.ed_def.reject();
    self.uned_def.reject();
    self.ed_def=$.Deferred();
    self.ed_def.done(function(){
        self.show_error_displayer();
        ignore_blur=false;
        self.trigger('focused');
    });
    ignore_blur=true;
    setTimeout(function(){
        self.ed_def.resolve();
        self.uned_def.reject();
        self.uned_def=$.Deferred();
        self.uned_def.done(function(){
            self.hide_error_displayer();
        });
        setTimeout(function(){
            self.uned_def.resolve();
        },ed_duration);
    },ed_delay);
}else{
    self.no_ed=false;
    self.ed_def.reject();
}
};

var ignore_blur=false;
this.$input.on({
    focusout:anyoneLoosesFocus,
    focus:function(){
        self.trigger('focused');
    },
    autocompleteopen:function(){
        ignore_blur=true;
    },
    autocompleteclose:function(){
        ignore_blur=false;
    },
    blur:function(){
        if(ignore_blur){
            return;
        }
        if(_(self.getChildren()).any(function(child){
            return child instanceof instance.web.form.AbstractFormPopup;
        })){
            return;
        }
        self.trigger('blurred');
    }
});
var isSelecting=false;
this.$input.autocomplete({
    source:function(req,resp){
        self.get_search_result(req.term).done(function(result){
            resp(result);
        });
    },
    select:function(event,ui){
        isSelecting=true;
        var item=ui.item;
        if(item.id){
            self.display_value={};
            
            self.display_value[""+item.id]=item.name;
            self.reinit_value(item.id);
        }else if(item.action){
            item.action();
            self.trigger('focused');
            return false;
        }
    },
focus:function(e,ui){
    e.preventDefault();
},
html:true,
minLength:0,
delay:0
});
this.$input.autocomplete("widget").openerpClass();
this.$input.keyup(function(e){
    if(e.which===13){
        if(isSelecting)
            e.stopPropagation();
    }
    isSelecting=false;
});
this.setupFocus(this.$follow_button);
},
render_value:function(no_recurse){
    var self=this;
    if(!this.get("value")){
        this.display_string("");
        return;
    }
    var display=this.display_value[""+this.get("value")];
    if(display){
        this.display_string(display);
        return;
    }
    if(!no_recurse){
        var dataset=new instance.web.DataSetStatic(this,this.field.relation,self.build_context());
        dataset.name_get([self.get("value")]).done(function(data){
            self.display_value[""+self.get("value")]=data[0][1];
            self.render_value(true);
        });
    }
},
display_string:function(str){
    var self=this;
    if(!this.get("effective_readonly")){
        this.$input.val(str.split("\n")[0]);
        this.current_display=this.$input.val();
        if(this.is_false()){
            this.$('.oe_m2o_cm_button').css({
                'display':'none'
            });
        }else{
            this.$('.oe_m2o_cm_button').css({
                'display':'inline'
            });
        }
    }else{
    var lines=_.escape(str).split("\n");
    var link="";
    var follow="";
    link=lines[0];
    follow=_.rest(lines).join("<br />");
    if(follow)
        link+="<br />";
    var $link=this.$el.find('.oe_form_uri').unbind('click').html(link);
    if(!this.options.no_open)
        $link.click(function(){
            self.do_action({
                type:'ir.actions.act_window',
                res_model:self.field.relation,
                res_id:self.get("value"),
                views:[[false,'form']],
                target:'current'
            });
            return false;
        });
    $(".oe_form_m2o_follow",this.$el).html(follow);
}
},
set_value:function(value_){
    var self=this;
    if(value_ instanceof Array){
        this.display_value={};
        
        if(!this.options.always_reload){
            this.display_value[""+value_[0]]=value_[1];
        }
        value_=value_[0];
    }
    value_=value_||false;
    this.reinit_value(value_);
},
get_displayed:function(){
    return this.display_value[""+this.get("value")];
},
add_id:function(id){
    this.display_value={};
    
    this.reinit_value(id);
},
is_false:function(){
    return!this.get("value");
},
focus:function(){
    if(!this.get('effective_readonly')){
        this.$input[0].focus();
    }
},
_quick_create:function(){
    this.no_ed=true;
    this.ed_def.reject();
    return instance.web.form.CompletionFieldMixin._quick_create.apply(this,arguments);
},
_search_create_popup:function(){
    this.no_ed=true;
    this.ed_def.reject();
    return instance.web.form.CompletionFieldMixin._search_create_popup.apply(this,arguments);
},
set_dimensions:function(height,width){
    this._super(height,width);
    this.$input.css('height',height);
}
});
instance.web.form.Many2OneButton=instance.web.form.AbstractField.extend({
    template:'Many2OneButton',
    init:function(field_manager,node){
        this._super.apply(this,arguments);
    },
    start:function(){
        this._super.apply(this,arguments);
        this.set_button();
    },
    set_button:function(){
        var self=this;
        if(this.$button){
            this.$button.remove();
        }
        this.string='';
        this.node.attrs.icon=this.get('value')?'/web/static/src/img/icons/gtk-yes.png':'/web/static/src/img/icons/gtk-no.png';
        this.$button=$(QWeb.render('WidgetButton',{
            'widget':this
        }));
        this.$button.addClass('oe_link').css({
            'padding':'4px'
        });
        this.$el.append(this.$button);
        this.$button.on('click',self.on_click);
    },
    on_click:function(ev){
        var self=this;
        this.popup=new instance.web.form.FormOpenPopup(this);
        this.popup.show_element(this.field.relation,this.get('value'),this.build_context(),{
            title:this.string
            });
        this.popup.on('create_completed',self,function(r){
            self.set_value(r);
        });
    },
    set_value:function(value_){
        var self=this;
        if(value_ instanceof Array){
            value_=value_[0];
        }
        value_=value_||false;
        this.set('value',value_);
        this.set_button();
    },
});
var commands={
    CREATE:0,
    'create':function(values){
        return[commands.CREATE,false,values];
    },
    UPDATE:1,
    'update':function(id,values){
        return[commands.UPDATE,id,values];
    },
    DELETE:2,
    'delete':function(id){
        return[commands.DELETE,id,false];
    },
    FORGET:3,
    'forget':function(id){
        return[commands.FORGET,id,false];
    },
    LINK_TO:4,
    'link_to':function(id){
        return[commands.LINK_TO,id,false];
    },
    DELETE_ALL:5,
    'delete_all':function(){
        return[5,false,false];
    },
    REPLACE_WITH:6,
    'replace_with':function(ids){
        return[6,false,ids];
    }
};

instance.web.form.FieldOne2Many=instance.web.form.AbstractField.extend({
    multi_selection:false,
    disable_utility_classes:true,
    init:function(field_manager,node){
        this._super(field_manager,node);
        lazy_build_o2m_kanban_view();
        this.is_loaded=$.Deferred();
        this.initial_is_loaded=this.is_loaded;
        this.form_last_update=$.Deferred();
        this.init_form_last_update=this.form_last_update;
        this.is_started=false;
        this.dataset=new instance.web.form.One2ManyDataSet(this,this.field.relation);
        this.dataset.o2m=this;
        this.dataset.parent_view=this.view;
        this.dataset.child_name=this.name;
        var self=this;
        this.dataset.on('dataset_changed',this,function(){
            self.trigger_on_change();
        });
        this.set_value([]);
    },
    start:function(){
        this._super.apply(this,arguments);
        this.$el.addClass('oe_form_field oe_form_field_one2many');
        var self=this;
        self.load_views();
        this.is_loaded.done(function(){
            self.on("change:effective_readonly",self,function(){
                self.is_loaded=self.is_loaded.then(function(){
                    self.viewmanager.destroy();
                    return $.when(self.load_views()).done(function(){
                        self.reload_current_view();
                    });
                });
            });
        });
        this.is_started=true;
        this.reload_current_view();
    },
    trigger_on_change:function(){
        this.trigger('changed_value');
    },
    load_views:function(){
        var self=this;
        var modes=this.node.attrs.mode;
        modes=!!modes?modes.split(","):["tree"];
        var views=[];
        _.each(modes,function(mode){
            if(!_.include(["list","tree","graph","kanban"],mode)){
                throw new Error(_.str.sprintf(_t("View type '%s' is not supported in One2Many."),mode));
            }
            var view={
                view_id:false,
                view_type:mode=="tree"?"list":mode,
                options:{}
        };
        
        if(self.field.views&&self.field.views[mode]){
            view.embedded_view=self.field.views[mode];
        }
        if(view.view_type==="list"){
            _.extend(view.options,{
                addable:null,
                selectable:self.multi_selection,
                sortable:false,
                import_enabled:false,
                deletable:true
            });
            if(self.get("effective_readonly")){
                _.extend(view.options,{
                    deletable:null,
                    reorderable:false,
                });
            }
        }else if(view.view_type==="form"){
            if(self.get("effective_readonly")){
                view.view_type='form';
            }
            _.extend(view.options,{
                not_interactible_on_create:true,
            });
        }else if(view.view_type==="kanban"){
            _.extend(view.options,{
                confirm_on_delete:false,
            });
            if(self.get("effective_readonly")){
                _.extend(view.options,{
                    action_buttons:false,
                    quick_creatable:false,
                    creatable:false,
                    read_only_mode:true,
                });
            }
        }
    views.push(view);
});
this.views=views;
this.viewmanager=new instance.web.form.One2ManyViewManager(this,this.dataset,views,{});
this.viewmanager.o2m=self;
var once=$.Deferred().done(function(){
    self.init_form_last_update.resolve();
});
var def=$.Deferred().done(function(){
    self.initial_is_loaded.resolve();
});
this.viewmanager.on("controller_inited",self,function(view_type,controller){
    controller.o2m=self;
    if(view_type=="list"){
        if(self.get("effective_readonly")){
            controller.on('edit:before',self,function(e){
                e.cancel=true;
            });
            _(controller.columns).find(function(column){
                if(!(column instanceof instance.web.list.Handle)){
                    return false;
                }
                column.modifiers.invisible=true;
                return true;
            });
        }
    }else if(view_type==="form"){
    if(self.get("effective_readonly")){
        $(".oe_form_buttons",controller.$el).children().remove();
    }
    controller.on("load_record",self,function(){
        once.resolve();
    });
    controller.on('pager_action_executed',self,self.save_any_view);
}else if(view_type=="graph"){
    self.reload_current_view()
    }
def.resolve();
});
this.viewmanager.on("switch_mode",self,function(n_mode,b,c,d,e){
    $.when(self.save_any_view()).done(function(){
        if(n_mode==="list"){
            $.async_when().done(function(){
                self.reload_current_view();
            });
        }
    });
});
$.async_when().done(function(){
    self.viewmanager.appendTo(self.$el);
});
return def;
},
reload_current_view:function(){
    var self=this;
    return self.is_loaded=self.is_loaded.then(function(){
        var active_view=self.viewmanager.active_view;
        var view=self.viewmanager.views[active_view].controller;
        if(active_view==="list"){
            return view.reload_content();
        }else if(active_view==="form"){
            if(self.dataset.index===null&&self.dataset.ids.length>=1){
                self.dataset.index=0;
            }
            var act=function(){
                return view.do_show();
            };
            
            self.form_last_update=self.form_last_update.then(act,act);
            return self.form_last_update;
        }else if(view.do_search){
            return view.do_search(self.build_domain(),self.dataset.get_context(),[]);
        }
    },undefined);
},
set_value:function(value_){
    value_=value_||[];
    var self=this;
    this.dataset.reset_ids([]);
    if(value_.length>=1&&value_[0]instanceof Array){
        var ids=[];
        _.each(value_,function(command){
            var obj={
                values:command[2]
                };
                
            switch(command[0]){
                case commands.CREATE:
                    obj['id']=_.uniqueId(self.dataset.virtual_id_prefix);
                    obj.defaults={};
                    
                    self.dataset.to_create.push(obj);
                    self.dataset.cache.push(_.extend(_.clone(obj),{
                    values:_.clone(command[2])
                    }));
                ids.push(obj.id);
                    return;
                case commands.UPDATE:
                    obj['id']=command[1];
                    self.dataset.to_write.push(obj);
                    self.dataset.cache.push(_.extend(_.clone(obj),{
                    values:_.clone(command[2])
                    }));
                ids.push(obj.id);
                    return;
                case commands.DELETE:
                    self.dataset.to_delete.push({
                    id:command[1]
                    });
                return;
                case commands.LINK_TO:
                    ids.push(command[1]);
                    return;
                case commands.DELETE_ALL:
                    self.dataset.delete_all=true;
                    return;
            }
        });
    this._super(ids);
    this.dataset.set_ids(ids);
}else if(value_.length>=1&&typeof(value_[0])==="object"){
    var ids=[];
    this.dataset.delete_all=true;
    _.each(value_,function(command){
        var obj={
            values:command
        };
        
        obj['id']=_.uniqueId(self.dataset.virtual_id_prefix);
        obj.defaults={};
        
        self.dataset.to_create.push(obj);
        self.dataset.cache.push(_.clone(obj));
        ids.push(obj.id);
    });
    this._super(ids);
    this.dataset.set_ids(ids);
}else{
    this._super(value_);
    this.dataset.reset_ids(value_);
}
if(this.dataset.index===null&&this.dataset.ids.length>0){
    this.dataset.index=0;
}
this.trigger_on_change();
if(this.is_started){
    return self.reload_current_view();
}else{
    return $.when();
}
},
get_value:function(){
    var self=this;
    if(!this.dataset)
        return[];
    var val=this.dataset.delete_all?[commands.delete_all()]:[];
    val=val.concat(_.map(this.dataset.ids,function(id){
        var alter_order=_.detect(self.dataset.to_create,function(x){
            return x.id===id;
        });
        if(alter_order){
            return commands.create(alter_order.values);
        }
        alter_order=_.detect(self.dataset.to_write,function(x){
            return x.id===id;
        });
        if(alter_order){
            return commands.update(alter_order.id,alter_order.values);
        }
        return commands.link_to(id);
    }));
    return val.concat(_.map(this.dataset.to_delete,function(x){
        return commands['delete'](x.id);
    }));
},
commit_value:function(){
    return this.save_any_view();
},
save_any_view:function(){
    if(this.viewmanager&&this.viewmanager.views&&this.viewmanager.active_view&&this.viewmanager.views[this.viewmanager.active_view]&&this.viewmanager.views[this.viewmanager.active_view].controller){
        var view=this.viewmanager.views[this.viewmanager.active_view].controller;
        if(this.viewmanager.active_view==="form"){
            if(!view.is_initialized.state()==='resolved'){
                return $.when(false);
            }
            return $.when(view.save());
        }else if(this.viewmanager.active_view==="list"){
            return $.when(view.ensure_saved());
        }
    }
return $.when(false);
},
is_syntax_valid:function(){
    if(!this.viewmanager||!this.viewmanager.views[this.viewmanager.active_view])
        return true;
    var view=this.viewmanager.views[this.viewmanager.active_view].controller;
    switch(this.viewmanager.active_view){
        case'form':
            return _(view.fields).chain().invoke('is_valid').all(_.identity).value();
            break;
        case'list':
            return view.is_valid();
    }
    return true;
},
});
instance.web.form.One2ManyViewManager=instance.web.ViewManager.extend({
    template:'One2Many.viewmanager',
    init:function(parent,dataset,views,flags){
        this._super(parent,dataset,views,_.extend({},flags,{
            $sidebar:false
        }));
        this.registry=this.registry.extend({
            list:'instance.web.form.One2ManyListView',
            form:'instance.web.form.One2ManyFormView',
            kanban:'instance.web.form.One2ManyKanbanView',
        });
        this.__ignore_blur=false;
    },
    switch_mode:function(mode,unused){
        if(mode!=='form'){
            return this._super(mode,unused);
        }
        var self=this;
        var id=self.o2m.dataset.index!==null?self.o2m.dataset.ids[self.o2m.dataset.index]:null;
        var pop=new instance.web.form.FormOpenPopup(this);
        pop.show_element(self.o2m.field.relation,id,self.o2m.build_context(),{
            title:_t("Open: ")+self.o2m.string,
            create_function:function(data){
                return self.o2m.dataset.create(data).done(function(r){
                    self.o2m.dataset.set_ids(self.o2m.dataset.ids.concat([r]));
                    self.o2m.dataset.trigger("dataset_changed",r);
                });
            },
            write_function:function(id,data,options){
                return self.o2m.dataset.write(id,data,{}).done(function(){
                    self.o2m.reload_current_view();
                });
            },
            alternative_form_view:self.o2m.field.views?self.o2m.field.views["form"]:undefined,
            parent_view:self.o2m.view,
            child_name:self.o2m.name,
            read_function:function(){
                return self.o2m.dataset.read_ids.apply(self.o2m.dataset,arguments);
            },
            form_view_options:{
                'not_interactible_on_create':true
            },
            readonly:self.o2m.get("effective_readonly")
            });
        pop.on("elements_selected",self,function(){
            self.o2m.reload_current_view();
        });
    },
});
instance.web.form.One2ManyDataSet=instance.web.BufferedDataSet.extend({
    get_context:function(){
        this.context=this.o2m.build_context();
        return this.context;
    }
});
instance.web.form.One2ManyListView=instance.web.ListView.extend({
    _template:'One2Many.listview',
    init:function(parent,dataset,view_id,options){
        this._super(parent,dataset,view_id,_.extend(options||{},{
            GroupsType:instance.web.form.One2ManyGroups,
            ListType:instance.web.form.One2ManyList
            }));
        this.on('edit:before',this,this.proxy('_before_edit'));
        this.on('edit:after',this,this.proxy('_after_edit'));
        this.on('save:before cancel:before',this,this.proxy('_before_unedit'));
        this.records.bind('add',this.proxy("changed_records")).bind('edit',this.proxy("changed_records")).bind('remove',this.proxy("changed_records"));
    },
    start:function(){
        var ret=this._super();
        this.$el.off('mousedown.handleButtons').on('mousedown.handleButtons','table button',this.proxy('_button_down'));
        return ret;
    },
    changed_records:function(){
        this.o2m.trigger_on_change();
    },
    is_valid:function(){
        var form=this.editor.form;
        if(!form.$el.is('.oe_form_dirty')){
            return true;
        }
        this.o2m._dirty_flag=true;
        return _(form.fields).chain().invoke(function(){
            this._check_css_flags();
            return this.is_valid();
        }).all(_.identity).value();
    },
    do_add_record:function(){
        if(this.editable()){
            this._super.apply(this,arguments);
        }else{
            var self=this;
            var pop=new instance.web.form.SelectCreatePopup(this);
            pop.select_element(self.o2m.field.relation,{
                title:_t("Create: ")+self.o2m.string,
                initial_view:"form",
                alternative_form_view:self.o2m.field.views?self.o2m.field.views["form"]:undefined,
                create_function:function(data,callback,error_callback){
                    return self.o2m.dataset.create(data).done(function(r){
                        self.o2m.dataset.set_ids(self.o2m.dataset.ids.concat([r]));
                        self.o2m.dataset.trigger("dataset_changed",r);
                    }).done(callback).fail(error_callback);
                },
                read_function:function(){
                    return self.o2m.dataset.read_ids.apply(self.o2m.dataset,arguments);
                },
                parent_view:self.o2m.view,
                child_name:self.o2m.name,
                form_view_options:{
                    'not_interactible_on_create':true
                }
            },self.o2m.build_domain(),self.o2m.build_context());
        pop.on("elements_selected",self,function(){
            self.o2m.reload_current_view();
        });
    }
},
do_activate_record:function(index,id){
    var self=this;
    var pop=new instance.web.form.FormOpenPopup(self);
    pop.show_element(self.o2m.field.relation,id,self.o2m.build_context(),{
        title:_t("Open: ")+self.o2m.string,
        write_function:function(id,data){
            return self.o2m.dataset.write(id,data,{}).done(function(){
                self.o2m.reload_current_view();
            });
        },
        alternative_form_view:self.o2m.field.views?self.o2m.field.views["form"]:undefined,
        parent_view:self.o2m.view,
        child_name:self.o2m.name,
        read_function:function(){
            return self.o2m.dataset.read_ids.apply(self.o2m.dataset,arguments);
        },
        form_view_options:{
            'not_interactible_on_create':true
        },
        readonly:!this.is_action_enabled('edit')||self.o2m.get("effective_readonly")
        });
},
do_button_action:function(name,id,callback){
    if(!_.isNumber(id)){
        instance.webclient.notification.warn(_t("Action Button"),_t("The o2m record must be saved before an action can be used"));
        return;
    }
    var parent_form=this.o2m.view;
    var self=this;
    this.ensure_saved().then(function(){
        if(parent_form)
            return parent_form.save();else
            return $.when();
    }).done(function(){
        self.handle_button(name,id,callback);
    });
},
_before_edit:function(){
    this.__ignore_blur=false;
    this.editor.form.on('blurred',this,this._on_form_blur);
},
_after_edit:function(){
    this.editor.form.widgetFocused();
},
_before_unedit:function(){
    this.editor.form.off('blurred',this,this._on_form_blur);
},
_button_down:function(){
    this.__ignore_blur=true;
},
_on_form_blur:function(){
    if(this.__ignore_blur){
        this.__ignore_blur=false;
        return;
    }
    if(this.editor.form.$el.hasClass('oe_form_dirty')){
        this.ensure_saved();
        return;
    }
    this.cancel_edition();
},
keyup_ENTER:function(){
    this.__ignore_blur=true;
    this._super.apply(this,arguments);
},
do_delete:function(ids){
    var confirm=window.confirm;
    window.confirm=function(){
        return true;
    };
    
    try{
        return this._super(ids);
    }finally{
        window.confirm=confirm;
    }
}
});
instance.web.form.One2ManyGroups=instance.web.ListView.Groups.extend({
    setup_resequence_rows:function(){
        if(!this.view.o2m.get('effective_readonly')){
            this._super.apply(this,arguments);
        }
    }
});
instance.web.form.One2ManyList=instance.web.ListView.List.extend({
    pad_table_to:function(count){
        if(!this.view.is_action_enabled('create')){
            this._super(count);
        }else{
            this._super(count>0?count-1:0);
        }
        if(this.view.o2m.get('effective_readonly')){
            return;
        }
        var self=this;
        var columns=_(this.columns).filter(function(column){
            return column.invisible!=='1';
        }).length;
        if(this.options.selectable){
            columns++;
        }
        if(this.options.deletable){
            columns++;
        }
        if(!this.view.is_action_enabled('create')){
            return;
        }
        var $cell=$('<td>',{
            colspan:columns,
            'class':'oe_form_field_one2many_list_row_add'
        }).append($('<a>',{
            href:'#'
        }).text(_t("Add an item")).mousedown(function(){
            if(self.view.editor.is_editing()){
                self.view.__ignore_blur=true;
            }
        }).click(function(e){
            e.preventDefault();
            e.stopPropagation();
            if(self.view.editor.form.__blur_timeout){
                clearTimeout(self.view.editor.form.__blur_timeout);
                self.view.editor.form.__blur_timeout=false;
            }
            self.view.ensure_saved().done(function(){
                self.view.do_add_record();
            });
        }));
    var $padding=this.$current.find('tr:not([data-id]):first');
    var $newrow=$('<tr>').append($cell);
    if($padding.length){
        $padding.before($newrow);
    }else{
        this.$current.append($newrow)
        }
    }
});
instance.web.form.One2ManyFormView=instance.web.FormView.extend({
    form_template:'One2Many.formview',
    load_form:function(data){
        this._super(data);
        var self=this;
        this.$buttons.find('button.oe_form_button_create').click(function(){
            self.save().done(self.on_button_new);
        });
    },
    do_notify_change:function(){
        if(this.dataset.parent_view){
            this.dataset.parent_view.do_notify_change();
        }else{
            this._super.apply(this,arguments);
        }
    }
});
var lazy_build_o2m_kanban_view=function(){
    if(!instance.web_kanban||instance.web.form.One2ManyKanbanView)
        return;
    instance.web.form.One2ManyKanbanView=instance.web_kanban.KanbanView.extend({});
};

instance.web.form.FieldMany2ManyTags=instance.web.form.AbstractField.extend(instance.web.form.CompletionFieldMixin,instance.web.form.ReinitializeFieldMixin,{
    template:"FieldMany2ManyTags",
    init:function(){
        this._super.apply(this,arguments);
        instance.web.form.CompletionFieldMixin.init.call(this);
        this.set({
            "value":[]
        });
        this._display_orderer=new instance.web.DropMisordered();
        this._drop_shown=false;
    },
    initialize_content:function(){
        if(this.get("effective_readonly"))
            return;
        var self=this;
        self.$text=this.$("textarea");
        self.$text.textext({
            plugins:'tags arrow autocomplete',
            autocomplete:{
                render:function(suggestion){
                    return $('<span class="text-label"/>').data('index',suggestion['index']).html(suggestion['label']);
                }
            },
        ext:{
            autocomplete:{
                selectFromDropdown:function(){
                    $(this).trigger('hideDropdown');
                    var index=Number(this.selectedSuggestionElement().children().children().data('index'));
                    var data=self.search_result[index];
                    if(data.id){
                        self.add_id(data.id);
                    }else{
                        data.action();
                    }
                },
        },
        tags:{
            isTagAllowed:function(tag){
                return!!tag.name;
            },
            removeTag:function(tag){
                var id=tag.data("id");
                self.set({
                    "value":_.without(self.get("value"),id)
                    });
            },
            renderTag:function(stuff){
                return $.fn.textext.TextExtTags.prototype.renderTag.call(this,stuff).data("id",stuff.id);
            },
        },
        itemManager:{
            itemToString:function(item){
                return item.name;
            },
        },
        core:{
            onSetInputData:function(e,data){
                if(data==''){
                    this._plugins.autocomplete._suggestions=null;
                }
                this.input().val(data);
            },
        },
        },
    }).bind('getSuggestions',function(e,data){
    var _this=this;
    var str=!!data?data.query||'':'';
    self.get_search_result(str).done(function(result){
        self.search_result=result;
        $(_this).trigger('setSuggestions',{
            result:_.map(result,function(el,i){
                return _.extend(el,{
                    index:i
                });
            })
            });
    });
}).bind('hideDropdown',function(){
    self._drop_shown=false;
}).bind('showDropdown',function(){
    self._drop_shown=true;
});
self.tags=self.$text.textext()[0].tags();
    self.$text.focusin(function(){
    self.trigger('focused');
}).focusout(function(){
    self.$text.trigger("setInputData","");
    self.trigger('blurred');
}).keydown(function(e){
    if(e.which===$.ui.keyCode.TAB&&self._drop_shown){
        self.$text.textext()[0].autocomplete().selectFromDropdown();
    }
});
},
set_value:function(value_){
    value_=value_||[];
    if(value_.length>=1&&value_[0]instanceof Array){
        value_=value_[0][2];
    }
    this._super(value_);
},
is_false:function(){
    return _(this.get("value")).isEmpty();
},
get_value:function(){
    var tmp=[commands.replace_with(this.get("value"))];
    return tmp;
},
get_search_blacklist:function(){
    return this.get("value");
},
render_value:function(){
    var self=this;
    var dataset=new instance.web.DataSetStatic(this,this.field.relation,self.build_context());
    var values=self.get("value");
    var handle_names=function(data){
        if(self.isDestroyed())
            return;
        var indexed={};
        
        _.each(data,function(el){
            indexed[el[0]]=el;
        });
        data=_.map(values,function(el){
            return indexed[el];
        });
        if(!self.get("effective_readonly")){
            self.tags.containerElement().children().remove();
            self.$('textarea').css("padding-left","3px");
            self.tags.addTags(_.map(data,function(el){
                return{
                    name:el[1],
                    id:el[0]
                    };
                
            }));
    }else{
        self.$el.html(QWeb.render("FieldMany2ManyTag",{
            elements:data
        }));
    }
};

if(!values||values.length>0){
    this._display_orderer.add(dataset.name_get(values)).done(handle_names);
}else{
    handle_names([]);
}
},
add_id:function(id){
    this.set({
        'value':_.uniq(this.get('value').concat([id]))
        });
},
focus:function(){
    this.$text[0].focus();
},
});
instance.web.form.FieldMany2Many=instance.web.form.AbstractField.extend(instance.web.form.ReinitializeFieldMixin,{
    multi_selection:false,
    disable_utility_classes:true,
    init:function(field_manager,node){
        this._super(field_manager,node);
        this.is_loaded=$.Deferred();
        this.dataset=new instance.web.form.Many2ManyDataSet(this,this.field.relation);
        this.dataset.m2m=this;
        var self=this;
        this.dataset.on('unlink',self,function(ids){
            self.dataset_changed();
        });
        this.set_value([]);
        this.list_dm=new instance.web.DropMisordered();
        this.render_value_dm=new instance.web.DropMisordered();
    },
    initialize_content:function(){
        var self=this;
        this.$el.addClass('oe_form_field oe_form_field_many2many');
        this.list_view=new instance.web.form.Many2ManyListView(this,this.dataset,false,{
            'addable':this.get("effective_readonly")?null:_t("Add"),
            'deletable':this.get("effective_readonly")?false:true,
            'selectable':this.multi_selection,
            'sortable':false,
            'reorderable':false,
            'import_enabled':false,
        });
        var embedded=(this.field.views||{}).tree;
        if(embedded){
            this.list_view.set_embedded_view(embedded);
        }
        this.list_view.m2m_field=this;
        var loaded=$.Deferred();
        this.list_view.on("list_view_loaded",this,function(){
            loaded.resolve();
        });
        this.list_view.appendTo(this.$el);
        var old_def=self.is_loaded;
        self.is_loaded=$.Deferred().done(function(){
            old_def.resolve();
        });
        this.list_dm.add(loaded).then(function(){
            self.is_loaded.resolve();
        });
    },
    destroy_content:function(){
        this.list_view.destroy();
        this.list_view=undefined;
    },
    set_value:function(value_){
        value_=value_||[];
        if(value_.length>=1&&value_[0]instanceof Array){
            value_=value_[0][2];
        }
        this._super(value_);
    },
    get_value:function(){
        return[commands.replace_with(this.get('value'))];
    },
    is_false:function(){
        return _(this.get("value")).isEmpty();
    },
    render_value:function(){
        var self=this;
        this.dataset.set_ids(this.get("value"));
        this.render_value_dm.add(this.is_loaded).then(function(){
            return self.list_view.reload_content();
        });
    },
    dataset_changed:function(){
        this.internal_set_value(this.dataset.ids);
    },
});
instance.web.form.Many2ManyDataSet=instance.web.DataSetStatic.extend({
    get_context:function(){
        this.context=this.m2m.build_context();
        return this.context;
    }
});
instance.web.form.Many2ManyListView=instance.web.ListView.extend({
    do_add_record:function(){
        var pop=new instance.web.form.SelectCreatePopup(this);
        pop.select_element(this.model,{
            title:_t("Add: ")+this.m2m_field.string
            },new instance.web.CompoundDomain(this.m2m_field.build_domain(),["!",["id","in",this.m2m_field.dataset.ids]]),this.m2m_field.build_context());
        var self=this;
        pop.on("elements_selected",self,function(element_ids){
            var reload=false;
            _(element_ids).each(function(id){
                if(!_.detect(self.dataset.ids,function(x){
                    return x==id;
                })){
                    self.dataset.set_ids(self.dataset.ids.concat([id]));
                    self.m2m_field.dataset_changed();
                    reload=true;
                }
            });
        if(reload){
            self.reload_content();
        }
        });
},
do_activate_record:function(index,id){
    var self=this;
    var pop=new instance.web.form.FormOpenPopup(this);
    pop.show_element(this.dataset.model,id,this.m2m_field.build_context(),{
        title:_t("Open: ")+this.m2m_field.string,
        readonly:this.getParent().get("effective_readonly")
        });
    pop.on('write_completed',self,self.reload_content);
},
do_button_action:function(name,id,callback){
    var self=this;
    var _sup=_.bind(this._super,this);
    if(!this.m2m_field.options.reload_on_button){
        return _sup(name,id,callback);
    }else{
        return this.m2m_field.view.save().then(function(){
            return _sup(name,id,function(){
                self.m2m_field.view.reload();
            });
        });
    }
},
});
instance.web.form.FieldMany2ManyKanban=instance.web.form.AbstractField.extend(instance.web.form.CompletionFieldMixin,{
    disable_utility_classes:true,
    init:function(field_manager,node){
        this._super(field_manager,node);
        instance.web.form.CompletionFieldMixin.init.call(this);
        m2m_kanban_lazy_init();
        this.is_loaded=$.Deferred();
        this.initial_is_loaded=this.is_loaded;
        var self=this;
        this.dataset=new instance.web.form.Many2ManyDataSet(this,this.field.relation);
        this.dataset.m2m=this;
        this.dataset.on('unlink',self,function(ids){
            self.dataset_changed();
        });
    },
    start:function(){
        this._super.apply(this,arguments);
        var self=this;
        self.load_view();
        self.on("change:effective_readonly",self,function(){
            self.is_loaded=self.is_loaded.then(function(){
                self.kanban_view.destroy();
                return $.when(self.load_view()).done(function(){
                    self.render_value();
                });
            });
        });
    },
    set_value:function(value_){
        value_=value_||[];
        if(value_.length>=1&&value_[0]instanceof Array){
            value_=value_[0][2];
        }
        this._super(value_);
    },
    get_value:function(){
        return[commands.replace_with(this.get('value'))];
    },
    load_view:function(){
        var self=this;
        this.kanban_view=new instance.web.form.Many2ManyKanbanView(this,this.dataset,false,{
            'create_text':_t("Add"),
            'creatable':self.get("effective_readonly")?false:true,
            'quick_creatable':self.get("effective_readonly")?false:true,
            'read_only_mode':self.get("effective_readonly")?true:false,
            'confirm_on_delete':false,
        });
        var embedded=(this.field.views||{}).kanban;
        if(embedded){
            this.kanban_view.set_embedded_view(embedded);
        }
        this.kanban_view.m2m=this;
        var loaded=$.Deferred();
        this.kanban_view.on("kanban_view_loaded",self,function(){
            self.initial_is_loaded.resolve();
            loaded.resolve();
        });
        this.kanban_view.on('switch_mode',this,this.open_popup);
        $.async_when().done(function(){
            self.kanban_view.appendTo(self.$el);
        });
        return loaded;
    },
    render_value:function(){
        var self=this;
        this.dataset.set_ids(this.get("value"));
        this.is_loaded=this.is_loaded.then(function(){
            return self.kanban_view.do_search(self.build_domain(),self.dataset.get_context(),[]);
        });
    },
    dataset_changed:function(){
        this.set({
            'value':this.dataset.ids
            });
    },
    open_popup:function(type,unused){
        if(type!=="form")
            return;
        var self=this;
        if(this.dataset.index===null){
            var pop=new instance.web.form.SelectCreatePopup(this);
            pop.select_element(this.field.relation,{
                title:_t("Add: ")+this.string
                },new instance.web.CompoundDomain(this.build_domain(),["!",["id","in",this.dataset.ids]]),this.build_context());
            pop.on("elements_selected",self,function(element_ids){
                _.each(element_ids,function(one_id){
                    if(!_.detect(self.dataset.ids,function(x){
                        return x==one_id;
                    })){
                        self.dataset.set_ids([].concat(self.dataset.ids,[one_id]));
                        self.dataset_changed();
                        self.render_value();
                    }
                });
            });
    }else{
        var id=self.dataset.ids[self.dataset.index];
        var pop=new instance.web.form.FormOpenPopup(this);
        pop.show_element(self.field.relation,id,self.build_context(),{
            title:_t("Open: ")+self.string,
            write_function:function(id,data,options){
                return self.dataset.write(id,data,{}).done(function(){
                    self.render_value();
                });
            },
            alternative_form_view:self.field.views?self.field.views["form"]:undefined,
            parent_view:self.view,
            child_name:self.name,
            readonly:self.get("effective_readonly")
            });
    }
},
add_id:function(id){
    this.quick_create.add_id(id);
},
});
function m2m_kanban_lazy_init(){
    if(instance.web.form.Many2ManyKanbanView)
        return;
    instance.web.form.Many2ManyKanbanView=instance.web_kanban.KanbanView.extend({
        quick_create_class:'instance.web.form.Many2ManyQuickCreate',
        _is_quick_create_enabled:function(){
            return this._super()&&!this.group_by;
        },
    });
    instance.web.form.Many2ManyQuickCreate=instance.web.Widget.extend({
        template:'Many2ManyKanban.quick_create',
        init:function(parent,dataset,context,buttons){
            this._super(parent);
            this.m2m=this.getParent().view.m2m;
            this.m2m.quick_create=this;
            this._dataset=dataset;
            this._buttons=buttons||false;
            this._context=context||{};
        
    },
    start:function(){
        var self=this;
        self.$text=this.$el.find('input').css("width","200px");
        self.$text.textext({
            plugins:'arrow autocomplete',
            autocomplete:{
                render:function(suggestion){
                    return $('<span class="text-label"/>').data('index',suggestion['index']).html(suggestion['label']);
                }
            },
        ext:{
            autocomplete:{
                selectFromDropdown:function(){
                    $(this).trigger('hideDropdown');
                    var index=Number(this.selectedSuggestionElement().children().children().data('index'));
                    var data=self.search_result[index];
                    if(data.id){
                        self.add_id(data.id);
                    }else{
                        data.action();
                    }
                },
        },
        itemManager:{
            itemToString:function(item){
                return item.name;
            },
        },
        },
    }).bind('getSuggestions',function(e,data){
        var _this=this;
        var str=!!data?data.query||'':'';
        self.m2m.get_search_result(str).done(function(result){
            self.search_result=result;
            $(_this).trigger('setSuggestions',{
                result:_.map(result,function(el,i){
                    return _.extend(el,{
                        index:i
                    });
                })
                });
        });
    });
    self.$text.focusout(function(){
        self.$text.val("");
    });
},
focus:function(){
    this.$text[0].focus();
},
add_id:function(id){
    var self=this;
    self.$text.val("");
    self.trigger('added',id);
    this.m2m.dataset_changed();
},
});
}
instance.web.form.AbstractFormPopup=instance.web.Widget.extend({
    template:"AbstractFormPopup.render",
    init_popup:function(model,row_id,domain,context,options){
        this.row_id=row_id;
        this.model=model;
        this.domain=domain||[];
        this.context=context||{};
        
        this.options=options;
        _.defaults(this.options,{});
    },
    init_dataset:function(){
        var self=this;
        this.created_elements=[];
        this.dataset=new instance.web.ProxyDataSet(this,this.model,this.context);
        this.dataset.read_function=this.options.read_function;
        this.dataset.create_function=function(data,sup){
            var fct=self.options.create_function||sup;
            return fct.call(this,data).done(function(r){
                self.trigger('create_completed saved',r);
                self.created_elements.push(r);
            });
        };
        
        this.dataset.write_function=function(id,data,options,sup){
            var fct=self.options.write_function||sup;
            return fct.call(this,id,data,options).done(function(r){
                self.trigger('write_completed saved',r);
            });
        };
        
        this.dataset.parent_view=this.options.parent_view;
        this.dataset.child_name=this.options.child_name;
    },
    display_popup:function(){
        var self=this;
        this.renderElement();
        var dialog=new instance.web.Dialog(this,{
            min_width:'800px',
            dialogClass:'oe_act_window',
            close:function(){
                self.check_exit(true);
            },
            title:this.options.title||"",
        },this.$el).open();
        this.$buttonpane=dialog.$buttons;
        this.start();
    },
    setup_form_view:function(){
        var self=this;
        if(this.row_id){
            this.dataset.ids=[this.row_id];
            this.dataset.index=0;
        }else{
            this.dataset.index=null;
        }
        var options=_.clone(self.options.form_view_options)||{};
        
        if(this.row_id!==null){
            options.initial_mode=this.options.readonly?"view":"edit";
        }
        _.extend(options,{
            $buttons:this.$buttonpane,
        });
        this.view_form=new instance.web.FormView(this,this.dataset,this.options.view_id||false,options);
        if(this.options.alternative_form_view){
            this.view_form.set_embedded_view(this.options.alternative_form_view);
        }
        this.view_form.appendTo(this.$el.find(".oe_popup_form"));
        this.view_form.on("form_view_loaded",self,function(){
            var multi_select=self.row_id===null&&!self.options.disable_multiple_selection;
            self.$buttonpane.html(QWeb.render("AbstractFormPopup.buttons",{
                multi_select:multi_select,
                readonly:self.row_id!==null&&self.options.readonly,
            }));
            var $snbutton=self.$buttonpane.find(".oe_abstractformpopup-form-save-new");
            $snbutton.click(function(){
                $.when(self.view_form.save()).done(function(){
                    self.view_form.reload_mutex.exec(function(){
                        self.view_form.on_button_new();
                    });
                });
            });
            var $sbutton=self.$buttonpane.find(".oe_abstractformpopup-form-save");
            $sbutton.click(function(){
                $.when(self.view_form.save()).done(function(){
                    self.view_form.reload_mutex.exec(function(){
                        self.check_exit();
                    });
                });
            });
            var $cbutton=self.$buttonpane.find(".oe_abstractformpopup-form-close");
            $cbutton.click(function(){
                self.view_form.trigger('on_button_cancel');
                self.check_exit();
            });
            self.view_form.do_show();
        });
    },
    select_elements:function(element_ids){
        this.trigger("elements_selected",element_ids);
    },
    check_exit:function(no_destroy){
        if(this.created_elements.length>0){
            this.select_elements(this.created_elements);
            this.created_elements=[];
        }
        this.trigger('closed');
        this.destroy();
    },
    destroy:function(){
        this.trigger('closed');
        if(this.$el.is(":data(dialog)")){
            this.$el.dialog('close');
        }
        this._super();
    },
});
instance.web.form.FormOpenPopup=instance.web.form.AbstractFormPopup.extend({
    show_element:function(model,row_id,context,options){
        this.init_popup(model,row_id,[],context,options);
        _.defaults(this.options,{});
        this.display_popup();
    },
    start:function(){
        this._super();
        this.init_dataset();
        this.setup_form_view();
    },
});
instance.web.form.SelectCreatePopup=instance.web.form.AbstractFormPopup.extend({
    select_element:function(model,options,domain,context){
        this.init_popup(model,null,domain,context,options);
        var self=this;
        _.defaults(this.options,{
            initial_view:"search",
        });
        this.initial_ids=this.options.initial_ids;
        this.display_popup();
    },
    start:function(){
        var self=this;
        this.init_dataset();
        if(this.options.initial_view=="search"){
            instance.web.pyeval.eval_domains_and_contexts({
                domains:[],
                contexts:[this.context]
                }).done(function(results){
                var search_defaults={};
                
                _.each(results.context,function(value_,key){
                    var match=/^search_default_(.*)$/.exec(key);
                    if(match){
                        search_defaults[match[1]]=value_;
                    }
                });
            self.setup_search_view(search_defaults);
            });
    }else{
        this.new_object();
    }
},
setup_search_view:function(search_defaults){
    var self=this;
    if(this.searchview){
        this.searchview.destroy();
    }
    this.searchview=new instance.web.SearchView(this,this.dataset,false,search_defaults);
    this.searchview.on('search_data',self,function(domains,contexts,groupbys){
        if(self.initial_ids){
            self.do_search(domains.concat([[["id","in",self.initial_ids]],self.domain]),contexts,groupbys);
            self.initial_ids=undefined;
        }else{
            self.do_search(domains.concat([self.domain]),contexts.concat(self.context),groupbys);
        }
    });
this.searchview.on("search_view_loaded",self,function(){
    self.view_list=new instance.web.form.SelectCreateListView(self,self.dataset,false,_.extend({
        'deletable':false,
        'selectable':!self.options.disable_multiple_selection,
        'import_enabled':false,
        '$buttons':self.$buttonpane,
        'disable_editable_mode':true,
        '$pager':self.$('.oe_popup_list_pager'),
    },self.options.list_view_options||{}));
    self.view_list.on('edit:before',self,function(e){
        e.cancel=true;
    });
    self.view_list.popup=self;
    self.view_list.appendTo($(".oe_popup_list",self.$el)).then(function(){
        self.view_list.do_show();
    }).then(function(){
        self.searchview.do_search();
    });
    self.view_list.on("list_view_loaded",self,function(){
        self.$buttonpane.html(QWeb.render("SelectCreatePopup.search.buttons",{
            widget:self
        }));
        var $cbutton=self.$buttonpane.find(".oe_selectcreatepopup-search-close");
        $cbutton.click(function(){
            self.destroy();
        });
        var $sbutton=self.$buttonpane.find(".oe_selectcreatepopup-search-select");
        $sbutton.click(function(){
            self.select_elements(self.selected_ids);
            self.destroy();
        });
        var $cbutton=self.$buttonpane.find(".oe_selectcreatepopup-search-create");
        $cbutton.click(function(){
            self.new_object();
        });
    });
});
this.searchview.appendTo($(".oe_popup_search",self.$el));
},
do_search:function(domains,contexts,groupbys){
    var self=this;
    instance.web.pyeval.eval_domains_and_contexts({
        domains:domains||[],
        contexts:contexts||[],
        group_by_seq:groupbys||[]
        }).done(function(results){
        self.view_list.do_search(results.domain,results.context,results.group_by);
    });
},
on_click_element:function(ids){
    var self=this;
    this.selected_ids=ids||[];
    if(this.selected_ids.length>0){
        self.$buttonpane.find(".oe_selectcreatepopup-search-select").removeAttr('disabled');
    }else{
        self.$buttonpane.find(".oe_selectcreatepopup-search-select").attr('disabled',"disabled");
    }
},
new_object:function(){
    if(this.searchview){
        this.searchview.hide();
    }
    if(this.view_list){
        this.view_list.$el.hide();
    }
    this.setup_form_view();
},
});
instance.web.form.SelectCreateListView=instance.web.ListView.extend({
    do_add_record:function(){
        this.popup.new_object();
    },
    select_record:function(index){
        this.popup.select_elements([this.dataset.ids[index]]);
        this.popup.destroy();
    },
    do_select:function(ids,records){
        this._super(ids,records);
        this.popup.on_click_element(ids);
    }
});
instance.web.form.FieldReference=instance.web.form.AbstractField.extend(instance.web.form.ReinitializeFieldMixin,{
    template:'FieldReference',
    init:function(field_manager,node){
        this._super(field_manager,node);
        this.reference_ready=true;
    },
    destroy_content:function(){
        if(this.fm){
            this.fm.destroy();
            this.fm=undefined;
        }
    },
initialize_content:function(){
    var self=this;
    var fm=new instance.web.form.DefaultFieldManager(this);
    this.fm=fm;
    fm.extend_field_desc({
        "selection":{
            selection:this.field_manager.get_field_desc(this.name).selection,
            type:"selection",
        },
        "m2o":{
            relation:null,
            type:"many2one",
        },
    });
    this.selection=new instance.web.form.FieldSelection(fm,{
        attrs:{
            name:'selection',
            modifiers:JSON.stringify({
                readonly:this.get('effective_readonly')
                }),
        }
    });
this.selection.on("change:value",this,this.on_selection_changed);
    this.selection.appendTo(this.$(".oe_form_view_reference_selection"));
    this.selection.on('focused',null,function(){
    self.trigger('focused')
    }).on('blurred',null,function(){
    self.trigger('blurred')
    });
this.m2o=new instance.web.form.FieldMany2One(fm,{
    attrs:{
        name:'m2o',
        modifiers:JSON.stringify({
            readonly:this.get('effective_readonly')
            }),
    }
});
this.m2o.on("change:value",this,this.data_changed);
this.m2o.appendTo(this.$(".oe_form_view_reference_m2o"));
this.m2o.on('focused',null,function(){
    self.trigger('focused')
    }).on('blurred',null,function(){
    self.trigger('blurred')
    });
},
on_selection_changed:function(){
    if(this.reference_ready){
        this.internal_set_value([this.selection.get_value(),false]);
        this.render_value();
    }
},
data_changed:function(){
    if(this.reference_ready){
        this.internal_set_value([this.selection.get_value(),this.m2o.get_value()]);
    }
},
set_value:function(val){
    if(val){
        val=val.split(',');
        val[0]=val[0]||false;
        val[1]=val[0]?(val[1]?parseInt(val[1],10):val[1]):false;
    }
    this._super(val||[false,false]);
},
get_value:function(){
    return this.get('value')[0]&&this.get('value')[1]?(this.get('value')[0]+','+this.get('value')[1]):false;
},
render_value:function(){
    this.reference_ready=false;
    if(!this.get("effective_readonly")){
        this.selection.set_value(this.get('value')[0]);
    }
    this.m2o.field.relation=this.get('value')[0];
    this.m2o.set_value(this.get('value')[1]);
    this.m2o.$el.toggle(!!this.get('value')[0]);
    this.reference_ready=true;
},
});
instance.web.form.FieldBinary=instance.web.form.AbstractField.extend(instance.web.form.ReinitializeFieldMixin,{
    init:function(field_manager,node){
        var self=this;
        this._super(field_manager,node);
        this.binary_value=false;
        this.useFileAPI=!!window.FileReader;
        this.max_upload_size=25*1024*1024;
        if(!this.useFileAPI){
            this.fileupload_id=_.uniqueId('oe_fileupload');
            $(window).on(this.fileupload_id,function(){
                var args=[].slice.call(arguments).slice(1);
                self.on_file_uploaded.apply(self,args);
            });
        }
    },
stop:function(){
    if(!this.useFileAPI){
        $(window).off(this.fileupload_id);
    }
    this._super.apply(this,arguments);
},
initialize_content:function(){
    this.$el.find('input.oe_form_binary_file').change(this.on_file_change);
    this.$el.find('button.oe_form_binary_file_save').click(this.on_save_as);
    this.$el.find('.oe_form_binary_file_clear').click(this.on_clear);
},
on_file_change:function(e){
    var self=this;
    var file_node=e.target;
    if((this.useFileAPI&&file_node.files.length)||(!this.useFileAPI&&$(file_node).val()!=='')){
        if(this.useFileAPI){
            var file=file_node.files[0];
            if(file.size>this.max_upload_size){
                var msg=_t("The selected file exceed the maximum file size of %s.");
                instance.webclient.notification.warn(_t("File upload"),_.str.sprintf(msg,instance.web.human_size(this.max_upload_size)));
                return false;
            }
            var filereader=new FileReader();
            filereader.readAsDataURL(file);
            filereader.onloadend=function(upload){
                var data=upload.target.result;
                data=data.split(',')[1];
                self.on_file_uploaded(file.size,file.name,file.type,data);
            };
        
    }else{
        this.$el.find('form.oe_form_binary_form input[name=session_id]').val(this.session.session_id);
        this.$el.find('form.oe_form_binary_form').submit();
    }
    this.$el.find('.oe_form_binary_progress').show();
    this.$el.find('.oe_form_binary').hide();
}
},
on_file_uploaded:function(size,name,content_type,file_base64){
    if(size===false){
        this.do_warn(_t("File Upload"),_t("There was a problem while uploading your file"));
        console.warn("Error while uploading file : ",name);
    }else{
        this.filename=name;
        this.on_file_uploaded_and_valid.apply(this,arguments);
    }
    this.$el.find('.oe_form_binary_progress').hide();
    this.$el.find('.oe_form_binary').show();
},
on_file_uploaded_and_valid:function(size,name,content_type,file_base64){},
on_save_as:function(ev){
    var value=this.get('value');
    if(!value){
        this.do_warn(_t("Save As..."),_t("The field is empty, there's nothing to save !"));
        ev.stopPropagation();
    }else{
        instance.web.blockUI();
        var c=instance.webclient.crashmanager;
        this.session.get_file({
            url:'/web/binary/saveas_ajax',
            data:{
                data:JSON.stringify({
                    model:this.view.dataset.model,
                    id:(this.view.datarecord.id||''),
                    field:this.name,
                    filename_field:(this.node.attrs.filename||''),
                    data:instance.web.form.is_bin_size(value)?null:value,
                    context:this.view.dataset.get_context()
                    })
                },
            complete:instance.web.unblockUI,
            error:c.rpc_error.bind(c)
            });
        ev.stopPropagation();
        return false;
    }
},
set_filename:function(value){
    var filename=this.node.attrs.filename;
    if(filename){
        var tmp={};
        
        tmp[filename]=value;
        this.field_manager.set_values(tmp);
    }
},
on_clear:function(){
    if(this.get('value')!==false){
        this.binary_value=false;
        this.internal_set_value(false);
    }
    return false;
}
});
instance.web.form.FieldBinaryFile=instance.web.form.FieldBinary.extend({
    template:'FieldBinaryFile',
    initialize_content:function(){
        this._super();
        if(this.get("effective_readonly")){
            var self=this;
            this.$el.find('a').click(function(ev){
                if(self.get('value')){
                    self.on_save_as(ev);
                }
                return false;
            });
        }
    },
render_value:function(){
    if(!this.get("effective_readonly")){
        var show_value;
        if(this.node.attrs.filename){
            show_value=this.view.datarecord[this.node.attrs.filename]||'';
        }else{
            show_value=(this.get('value')!=null&&this.get('value')!==false)?this.get('value'):'';
        }
        this.$el.find('input').eq(0).val(show_value);
    }else{
        this.$el.find('a').toggle(!!this.get('value'));
        if(this.get('value')){
            var show_value=_t("Download")
            if(this.view)
                show_value+=" "+(this.view.datarecord[this.node.attrs.filename]||'');
            this.$el.find('a').text(show_value);
        }
    }
},
on_file_uploaded_and_valid:function(size,name,content_type,file_base64){
    this.binary_value=true;
    this.internal_set_value(file_base64);
    var show_value=name+" ("+instance.web.human_size(size)+")";
    this.$el.find('input').eq(0).val(show_value);
    this.set_filename(name);
},
on_clear:function(){
    this._super.apply(this,arguments);
    this.$el.find('input').eq(0).val('');
    this.set_filename('');
}
});
instance.web.form.FieldBinaryImage=instance.web.form.FieldBinary.extend({
    template:'FieldBinaryImage',
    placeholder:"/web/static/src/img/placeholder.png",
    render_value:function(){
        var self=this;
        var url;
        if(this.get('value')&&!instance.web.form.is_bin_size(this.get('value'))){
            url='data:image/png;base64,'+this.get('value');
        }else if(this.get('value')){
            var id=JSON.stringify(this.view.datarecord.id||null);
            var field=this.name;
            if(this.options.preview_image)
                field=this.options.preview_image;
            url=this.session.url('/web/binary/image',{
                model:this.view.dataset.model,
                id:id,
                field:field,
                t:(new Date().getTime()),
            });
        }else{
            url=this.placeholder;
        }
        var $img=$(QWeb.render("FieldBinaryImage-img",{
            widget:this,
            url:url
        }));
        this.$el.find('> img').remove();
        this.$el.prepend($img);
        $img.load(function(){
            if(!self.options.size)
                return;
            $img.css("max-width",""+self.options.size[0]+"px");
            $img.css("max-height",""+self.options.size[1]+"px");
            $img.css("margin-left",""+(self.options.size[0]-$img.width())/2+"px");
            $img.css("margin-top",""+(self.options.size[1]-$img.height())/2+"px");
        });
        $img.on('error',function(){
            $img.attr('src',self.placeholder);
            instance.webclient.notification.warn(_t("Image"),_t("Could not display the selected image."));
        });
    },
    on_file_uploaded_and_valid:function(size,name,content_type,file_base64){
        this.internal_set_value(file_base64);
        this.binary_value=true;
        this.render_value();
        this.set_filename(name);
    },
    on_clear:function(){
        this._super.apply(this,arguments);
        this.render_value();
        this.set_filename('');
    }
});
instance.web.form.FieldMany2ManyBinaryMultiFiles=instance.web.form.AbstractField.extend({
    template:"FieldBinaryFileUploader",
    init:function(field_manager,node){
        this._super(field_manager,node);
        this.field_manager=field_manager;
        this.node=node;
        if(this.field.type!="many2many"||this.field.relation!='ir.attachment'){
            throw _.str.sprintf(_t("The type of the field '%s' must be a many2many field with a relation to 'ir.attachment' model."),this.field.string);
        }
        this.ds_file=new instance.web.DataSetSearch(this,'ir.attachment');
        this.fileupload_id=_.uniqueId('oe_fileupload_temp');
        $(window).on(this.fileupload_id,_.bind(this.on_file_loaded,this));
    },
    start:function(){
        this._super(this);
        this.$el.on('change','input.oe_form_binary_file',this.on_file_change);
    },
    set_value:function(value_){
        var value_=value_||[];
        var self=this;
        var ids=[];
        _.each(value_,function(command){
            if(isNaN(command)&&command.id==undefined){
                switch(command[0]){
                    case commands.CREATE:
                        ids=ids.concat(command[2]);
                        return;
                    case commands.REPLACE_WITH:
                        ids=ids.concat(command[2]);
                        return;
                    case commands.UPDATE:
                        ids=ids.concat(command[2]);
                        return;
                    case commands.LINK_TO:
                        ids=ids.concat(command[1]);
                        return;
                    case commands.DELETE:
                        ids=_.filter(ids,function(id){
                        return id!=command[1];
                    });
                    return;
                    case commands.DELETE_ALL:
                        ids=[];
                        return;
                }
            }else{
            ids.push(command);
        }
        });
this._super(ids);
},
get_value:function(){
    return _.map(this.get('value'),function(value){
        return commands.link_to(isNaN(value)?value.id:value);
    });
},
get_file_url:function(attachment){
    return this.session.url('/web/binary/saveas',{
        model:'ir.attachment',
        field:'datas',
        filename_field:'datas_fname',
        id:attachment['id']
        });
},
read_name_values:function(){
    var self=this;
    var values=[];
    _.each(this.get('value'),function(val){
        if(typeof val!='object'){
            values.push(val);
        }
    });
if(values.length){
    return this.ds_file.call('read',[values,['id','name','datas_fname']]).done(function(datas){
        _.each(datas,function(data){
            data.no_unlink=true;
            data.url=self.session.url('/web/binary/saveas',{
                model:'ir.attachment',
                field:'datas',
                filename_field:'datas_fname',
                id:data.id
                });
            _.each(self.get('value'),function(val,key){
                if(val==data.id){
                    self.get('value')[key]=data;
                }
            });
        });
    });
}else{
    return $.when(this.get('value'));
}
},
render_value:function(){
    var self=this;
    this.read_name_values().then(function(datas){
        var render=$(instance.web.qweb.render('FieldBinaryFileUploader.files',{
            'widget':self
        }));
        render.on('click','.oe_delete',_.bind(self.on_file_delete,self));
        self.$('.oe_placeholder_files, .oe_attachments').replaceWith(render);
        var $input=self.$('input.oe_form_binary_file');
        $input.after($input.clone(true)).remove();
        self.$(".oe_fileupload").show();
    });
},
on_file_change:function(event){
    event.stopPropagation();
    var self=this;
    var $target=$(event.target);
    if($target.val()!==''){
        var filename=$target.val().replace(/.*[\\\/]/,'');
        if(!isNaN(_.find(this.get('value'),function(file){
            return(file.filename||file.name)==filename&&file.upload;
        }))){
            return false;
        }
        if(this.node.attrs.blockui>0){
            instance.web.blockUI();
        }
        var files=_.filter(this.get('value'),function(file){
            if((file.filename||file.name)==filename){
                self.ds_file.unlink([file.id]);
                return false;
            }else{
                return true;
            }
        });
    this.$('form.oe_form_binary_form').submit();
    this.$(".oe_fileupload").hide();
    files.push({
        'id':0,
        'name':filename,
        'filename':filename,
        'url':'',
        'upload':true
    });
    this.set({
        'value':files
    });
}
},
on_file_loaded:function(event,result){
    var files=this.get('value');
    if(this.node.attrs.blockui>0){
        instance.web.unblockUI();
    }
    if(result.error||!result.id){
        this.do_warn(_t('Uploading error'),result.error);
        files=_.filter(files,function(val){
            return!val.upload;
        });
    }else{
        for(var i in files){
            if(files[i].filename==result.filename&&files[i].upload){
                files[i]={
                    'id':result.id,
                    'name':result.name,
                    'filename':result.filename,
                    'url':this.get_file_url(result)
                    };
                
        }
        }
        }
this.set({
    'value':files
});
this.render_value()
},
on_file_delete:function(event){
    event.stopPropagation();
    var file_id=$(event.target).data("id");
    if(file_id){
        var files=[];
        for(var i in this.get('value')){
            if(file_id!=this.get('value')[i].id){
                files.push(this.get('value')[i]);
            }
            else if(!this.get('value')[i].no_unlink){
                this.ds_file.unlink([file_id]);
            }
        }
    this.set({
        'value':files
    });
}
},
});
instance.web.form.FieldStatus=instance.web.form.AbstractField.extend({
    template:"FieldStatus",
    init:function(field_manager,node){
        this._super(field_manager,node);
        this.options.clickable=this.options.clickable||(this.node.attrs||{}).clickable||false;
        this.options.visible=this.options.visible||(this.node.attrs||{}).statusbar_visible||false;
        this.set({
            value:false
        });
        this.selection=[];
        this.set("selection",[]);
        this.selection_dm=new instance.web.DropMisordered();
    },
    start:function(){
        this.field_manager.on("view_content_has_changed",this,this.calc_domain);
        this.calc_domain();
        this.on("change:value",this,this.get_selection);
        this.on("change:evaluated_selection_domain",this,this.get_selection);
        this.get_selection();
        this.on("change:selection",this,function(){
            this.selection=this.get("selection");
            this.render_value();
        });
        if(this.options.clickable){
            this.$el.on('click','li',this.on_click_stage);
        }
        if(this.$el.parent().is('header')){
            this.$el.after('<div class="oe_clear"/>');
        }
        this._super();
    },
    set_value:function(value_){
        if(value_ instanceof Array){
            value_=value_[0];
        }
        this._super(value_);
    },
    render_value:function(){
        var self=this;
        var content=QWeb.render("FieldStatus.content",{
            widget:self
        });
        self.$el.html(content);
        var colors=JSON.parse((self.node.attrs||{}).statusbar_colors||"{}");
        var color=colors[self.get('value')];
        if(color){
            self.$("oe_active").css("color",color);
        }
    },
calc_domain:function(){
    var d=instance.web.pyeval.eval('domain',this.build_domain());
    domain=['|',['id','=',this.get('value')]].concat(d);
    if(!_.isEqual(domain,this.get("evaluated_selection_domain"))){
        this.set("evaluated_selection_domain",domain);
    }
},
get_selection:function(){
    var self=this;
    var selection=[];
    var calculation=_.bind(function(){
        if(this.field.type=="many2one"){
            var domain=[];
            var ds=new instance.web.DataSetSearch(this,this.field.relation,self.build_context(),this.get("evaluated_selection_domain"));
            return ds.read_slice(['name'],{}).then(function(records){
                for(var i=0;i<records.length;i++){
                    selection.push([records[i].id,records[i].name]);
                }
                });
    }else{
        var select=this.field.selection;
        for(var i=0;i<select.length;i++){
            var key=select[i][0];
            if(key==this.get('value')||!this.options.visible||this.options.visible.indexOf(key)!=-1){
                selection.push(select[i]);
            }
        }
    return $.when();
    }
},this);
this.selection_dm.add(calculation()).then(function(){
    if(!_.isEqual(selection,self.get("selection"))){
        self.set("selection",selection);
    }
});
},
on_click_stage:function(ev){
    var self=this;
    var $li=$(ev.currentTarget);
    var val=parseInt($li.data("id"));
    if(val!=self.get('value')){
        this.view.recursive_save().done(function(){
            var change={};
            
            change[self.name]=val;
            self.view.dataset.write(self.view.datarecord.id,change).done(function(){
                self.view.reload();
            });
        });
    }
},
});
instance.web.form.FieldMonetary=instance.web.form.FieldFloat.extend({
    template:"FieldMonetary",
    widget_class:'oe_form_field_float oe_form_field_monetary',
    init:function(){
        this._super.apply(this,arguments);
        this.set({
            "currency":false
        });
        if(this.options.currency_field){
            this.field_manager.on("field_changed:"+this.options.currency_field,this,function(){
                this.set({
                    "currency":this.field_manager.get_field_value(this.options.currency_field)
                    });
            });
        }
        this.on("change:currency",this,this.get_currency_info);
        this.get_currency_info();
        this.ci_dm=new instance.web.DropMisordered();
    },
    start:function(){
        var tmp=this._super();
        this.on("change:currency_info",this,this.reinitialize);
        return tmp;
    },
    get_currency_info:function(){
        var self=this;
        if(this.get("currency")===false){
            this.set({
                "currency_info":null
            });
            return;
        }
        return this.ci_dm.add(self.alive(new instance.web.Model("res.currency").query(["symbol","position"]).filter([["id","=",self.get("currency")]]).first())).then(function(res){
            self.set({
                "currency_info":res
            });
        });
    },
    parse_value:function(val,def){
        return instance.web.parse_value(val,{
            type:"float",
            digits:(this.node.attrs||{}).digits||this.field.digits
            },def);
    },
    format_value:function(val,def){
        return instance.web.format_value(val,{
            type:"float",
            digits:(this.node.attrs||{}).digits||this.field.digits
            },def);
    },
});
instance.web.form.widgets=new instance.web.Registry({
    'char':'instance.web.form.FieldChar',
    'id':'instance.web.form.FieldID',
    'email':'instance.web.form.FieldEmail',
    'url':'instance.web.form.FieldUrl',
    'text':'instance.web.form.FieldText',
    'html':'instance.web.form.FieldTextHtml',
    'date':'instance.web.form.FieldDate',
    'datetime':'instance.web.form.FieldDatetime',
    'selection':'instance.web.form.FieldSelection',
    'many2one':'instance.web.form.FieldMany2One',
    'many2onebutton':'instance.web.form.Many2OneButton',
    'many2many':'instance.web.form.FieldMany2Many',
    'many2many_tags':'instance.web.form.FieldMany2ManyTags',
    'many2many_kanban':'instance.web.form.FieldMany2ManyKanban',
    'one2many':'instance.web.form.FieldOne2Many',
    'one2many_list':'instance.web.form.FieldOne2Many',
    'reference':'instance.web.form.FieldReference',
    'boolean':'instance.web.form.FieldBoolean',
    'float':'instance.web.form.FieldFloat',
    'integer':'instance.web.form.FieldFloat',
    'float_time':'instance.web.form.FieldFloat',
    'progressbar':'instance.web.form.FieldProgressBar',
    'image':'instance.web.form.FieldBinaryImage',
    'binary':'instance.web.form.FieldBinaryFile',
    'many2many_binary':'instance.web.form.FieldMany2ManyBinaryMultiFiles',
    'statusbar':'instance.web.form.FieldStatus',
    'monetary':'instance.web.form.FieldMonetary',
});
instance.web.form.tags=new instance.web.Registry({
    'button':'instance.web.form.WidgetButton',
});
instance.web.form.custom_widgets=new instance.web.Registry({});
};
;

openerp.web.list=function(instance){
    var _t=instance.web._t,_lt=instance.web._lt;
    var QWeb=instance.web.qweb;
    instance.web.views.add('list','instance.web.ListView');
    instance.web.ListView=instance.web.View.extend({
        _template:'ListView',
        display_name:_lt('List'),
        defaults:{
            'selectable':true,
            'deletable':false,
            'header':true,
            'addable':_lt("Create"),
            'sortable':true,
            'reorderable':true,
            'action_buttons':true,
            'disable_editable_mode':false,
        },
        view_type:'tree',
        events:{
            'click thead th.oe_sortable[data-id]':'sort_by_column'
        },
        init:function(parent,dataset,view_id,options){
            var self=this;
            this._super(parent);
            this.set_default_options(_.extend({},this.defaults,options||{}));
            this.dataset=dataset;
            this.model=dataset.model;
            this.view_id=view_id;
            this.previous_colspan=null;
            this.colors=null;
            this.fonts=null;
            this.columns=[];
            this.records=new Collection();
            this.set_groups(new(this.options.GroupsType)(this));
            if(this.dataset instanceof instance.web.DataSetStatic){
                this.groups.datagroup=new StaticDataGroup(this.dataset);
            }else{
                this.groups.datagroup=new DataGroup(this,this.model,dataset.get_domain(),dataset.get_context());
                this.groups.datagroup.sort=this.dataset._sort;
            }
            this.page=0;
            this.records.bind('change',function(event,record,key){
                if(!_(self.aggregate_columns).chain().pluck('name').contains(key).value()){
                    return;
                }
                self.compute_aggregates();
            });
            this.no_leaf=false;
            this.grouped=false;
        },
        view_loading:function(r){
            return this.load_list(r);
        },
        set_default_options:function(options){
            this._super(options);
            _.defaults(this.options,{
                GroupsType:instance.web.ListView.Groups,
                ListType:instance.web.ListView.List
                });
        },
        limit:function(){
            if(this._limit===undefined){
                this._limit=(this.options.limit||this.defaults.limit||(this.getParent().action||{}).limit||80);
            }
            return this._limit;
        },
        set_groups:function(groups){
            var self=this;
            if(this.groups){
                $(this.groups).unbind("selected deleted action row_link");
                delete this.groups;
            }
            this.groups=groups;
            $(this.groups).bind({
                'selected':function(e,ids,records){
                    self.do_select(ids,records);
                },
                'deleted':function(e,ids){
                    self.do_delete(ids);
                },
                'action':function(e,action_name,id,callback){
                    self.do_button_action(action_name,id,callback);
                },
                'row_link':function(e,id,dataset,view){
                    self.do_activate_record(dataset.index,id,dataset,view);
                }
            });
    },
    start:function(){
        this.$el.addClass('oe_list');
        return this._super();
    },
    style_for:function(record){
        var style='';
        var context=_.extend({},record.attributes,{
            uid:this.session.uid,
            current_date:new Date().toString('yyyy-MM-dd')
            });
        if(this.fonts){
            for(var i=0,len=this.fonts.length;i<len;++i){
                var pair=this.fonts[i],font=pair[0],expression=pair[1];
                if(py.evaluate(expression,context).toJSON()){
                    switch(font){
                        case'bold':
                            style+='font-weight: bold;';
                            break;
                        case'italic':
                            style+='font-style: italic;';
                            break;
                        case'underline':
                            style+='text-decoration: underline;';
                            break;
                    }
                }
            }
        }
if(!this.colors){
    return style;
}
for(var i=0,len=this.colors.length;i<len;++i){
    var pair=this.colors[i],color=pair[0],expression=pair[1];
    if(py.evaluate(expression,context).toJSON()){
        return style+='color: '+color+';';
    }
}
return style;
},
load_list:function(data){
    var self=this;
    this.fields_view=data;
    this.name=""+this.fields_view.arch.attrs.string;
    if(this.fields_view.arch.attrs.colors){
        this.colors=_(this.fields_view.arch.attrs.colors.split(';')).chain().compact().map(function(color_pair){
            var pair=color_pair.split(':'),color=pair[0],expr=pair[1];
            return[color,py.parse(py.tokenize(expr)),expr];
        }).value();
    }
    if(this.fields_view.arch.attrs.fonts){
        this.fonts=_(this.fields_view.arch.attrs.fonts.split(';')).chain().compact().map(function(font_pair){
            var pair=font_pair.split(':'),font=pair[0],expr=pair[1];
            return[font,py.parse(py.tokenize(expr)),expr];
        }).value();
    }
    this.setup_columns(this.fields_view.fields,this.grouped);
    this.$el.html(QWeb.render(this._template,this));
    this.$el.addClass(this.fields_view.arch.attrs['class']);
    this.$el.find('.oe_list_record_selector').click(function(){
        self.$el.find('.oe_list_record_selector input').prop('checked',self.$el.find('.oe_list_record_selector').prop('checked')||false);
        var selection=self.groups.get_selection();
        $(self.groups).trigger('selected',[selection.ids,selection.records]);
    });
    if(!this.$buttons){
        this.$buttons=$(QWeb.render("ListView.buttons",{
            'widget':self
        }));
        if(this.options.$buttons){
            this.$buttons.appendTo(this.options.$buttons);
        }else{
            this.$el.find('.oe_list_buttons').replaceWith(this.$buttons);
        }
        this.$buttons.find('.oe_list_add').click(this.proxy('do_add_record')).prop('disabled',this.grouped);
    }
    if(!this.$pager){
        this.$pager=$(QWeb.render("ListView.pager",{
            'widget':self
        }));
        if(this.options.$buttons){
            this.$pager.appendTo(this.options.$pager);
        }else{
            this.$el.find('.oe_list_pager').replaceWith(this.$pager);
        }
        this.$pager.on('click','a[data-pager-action]',function(){
            var $this=$(this);
            var max_page=Math.floor(self.dataset.size()/self.limit());
            switch($this.data('pager-action')){
                case'first':
                    self.page=0;
                    break;
                case'last':
                    self.page=max_page-1;
                    break;
                case'next':
                    self.page+=1;
                    break;
                case'previous':
                    self.page-=1;
                    break;
            }
            if(self.page<0){
                self.page=max_page;
            }else if(self.page>max_page){
                self.page=0;
            }
            self.reload_content();
        }).find('.oe_list_pager_state').click(function(e){
            e.stopPropagation();
            var $this=$(this);
            var $select=$('<select>').appendTo($this.empty()).click(function(e){
                e.stopPropagation();
            }).append('<option value="80">80</option>'+'<option value="200">200</option>'+'<option value="500">500</option>'+'<option value="2000">2000</option>'+'<option value="NaN">'+_t("Unlimited")+'</option>').change(function(){
                var val=parseInt($select.val(),10);
                self._limit=(isNaN(val)?null:val);
                self.page=0;
                self.reload_content();
            }).blur(function(){
                $(this).trigger('change');
            }).val(self._limit||'NaN');
        });
    }
    if(!this.sidebar&&this.options.$sidebar){
        this.sidebar=new instance.web.Sidebar(this);
        this.sidebar.appendTo(this.options.$sidebar);
        this.sidebar.add_items('other',_.compact([{
            label:_t("Export"),
            callback:this.on_sidebar_export
            },self.is_action_enabled('delete')&&{
            label:_t('Delete'),
            callback:this.do_delete_selected
            }]));
        this.sidebar.add_toolbar(this.fields_view.toolbar);
        this.sidebar.$el.hide();
    }
    if(this.dataset._sort.length){
        if(this.dataset._sort[0].indexOf('-')==-1){
            this.$el.find('th[data-id='+this.dataset._sort[0]+']').addClass("sortdown");
        }else{
            this.$el.find('th[data-id='+this.dataset._sort[0].split('-')[1]+']').addClass("sortup");
        }
    }
this.trigger('list_view_loaded',data,this.grouped);
},
sort_by_column:function(e){
    e.stopPropagation();
    var $column=$(e.currentTarget);
    var col_name=$column.data('id')
    var field=this.fields_view.fields[col_name];
    if(field&&field.store===false){
        return false;
    }
    this.dataset.sort(col_name);
    if($column.hasClass("sortdown")||$column.hasClass("sortup")){
        $column.toggleClass("sortup sortdown");
    }else{
        $column.addClass("sortdown");
    }
    $column.siblings('.oe_sortable').removeClass("sortup sortdown");
    this.reload_content();
},
configure_pager:function(dataset){
    this.dataset.ids=dataset.ids;
    if(dataset._length){
        this.dataset._length=dataset._length;
    }
    var total=dataset.size();
    var limit=this.limit()||total;
    if(total==0)
        this.$pager.hide();else
        this.$pager.css("display","");
    this.$pager.toggleClass('oe_list_pager_single_page',(total<=limit));
    var spager='-';
    if(total){
        var range_start=this.page*limit+1;
        var range_stop=range_start-1+limit;
        if(range_stop>total){
            range_stop=total;
        }
        spager=_.str.sprintf(_t("%d-%d of %d"),range_start,range_stop,total);
    }
    this.$pager.find('.oe_list_pager_state').text(spager);
},
setup_columns:function(fields,grouped){
    var registry=instance.web.list.columns;
    this.columns.splice(0,this.columns.length);
    this.columns.push.apply(this.columns,_(this.fields_view.arch.children).map(function(field){
        var id=field.attrs.name;
        return registry.for_(id,fields[id],field);
    }));
    if(grouped){
        this.columns.unshift(new instance.web.list.MetaColumn('_group',_t("Group")));
    }
    this.visible_columns=_.filter(this.columns,function(column){
        return column.invisible!=='1';
    });
    this.aggregate_columns=_(this.visible_columns).invoke('to_aggregate');
},
select_record:function(index,view){
    view=view||index==null?'form':'form';
    this.dataset.index=index;
    _.delay(_.bind(function(){
        this.do_switch_view(view);
    },this));
},
do_show:function(){
    this._super();
    if(this.$buttons){
        this.$buttons.show();
    }
    if(this.$pager){
        this.$pager.show();
    }
},
do_hide:function(){
    if(this.sidebar){
        this.sidebar.$el.hide();
    }
    if(this.$buttons){
        this.$buttons.hide();
    }
    if(this.$pager){
        this.$pager.hide();
    }
    this._super();
},
reload_view:function(grouped,context,initial){
    return this.load_view(context);
},
reload_content:function(){
    var self=this;
    self.$el.find('.oe_list_record_selector').prop('checked',false);
    this.records.reset();
    var reloaded=$.Deferred();
    this.$el.find('.oe_list_content').append(this.groups.render(function(){
        if(self.dataset.index==null){
            var has_one=false;
            self.records.each(function(){
                has_one=true;
            });
            if(has_one){
                self.dataset.index=0;
            }
        }
    self.compute_aggregates();
        reloaded.resolve();
        }));
this.do_push_state({
    page:this.page,
    limit:this._limit
    });
return reloaded.promise();
},
reload:function(){
    return this.reload_content();
},
reload_record:function(record){
    var self=this;
    return this.dataset.read_ids([record.get('id')],_.pluck(_(this.columns).filter(function(r){
        return r.tag==='field';
    }),'name')).done(function(records){
        if(!records[0]){
            self.records.remove(record);
            return;
        }
        _(records[0]).each(function(value,key){
            record.set(key,value,{
                silent:true
            });
        });
        record.trigger('change',record);
    });
},
do_load_state:function(state,warm){
    var reload=false;
    if(state.page&&this.page!==state.page){
        this.page=state.page;
        reload=true;
    }
    if(state.limit){
        if(_.isString(state.limit)){
            state.limit=null;
        }
        if(state.limit!==this._limit){
            this._limit=state.limit;
            reload=true;
        }
    }
if(reload){
    this.reload_content();
}
},
do_search:function(domain,context,group_by){
    this.page=0;
    this.groups.datagroup=new DataGroup(this,this.model,domain,context,group_by);
    this.groups.datagroup.sort=this.dataset._sort;
    if(_.isEmpty(group_by)&&!context['group_by_no_leaf']){
        group_by=null;
    }
    this.no_leaf=!!context['group_by_no_leaf'];
    this.grouped=!!group_by;
    return this.load_view(context).then(this.proxy('reload_content'));
},
do_delete:function(ids){
    if(!(ids.length&&confirm(_t("Do you really want to remove these records?")))){
        return;
    }
    var self=this;
    return $.when(this.dataset.unlink(ids)).done(function(){
        _(ids).each(function(id){
            self.records.remove(self.records.get(id));
        });
        self.configure_pager(self.dataset);
        self.compute_aggregates();
    });
},
do_select:function(ids,records){
    if(!ids.length){
        this.dataset.index=0;
        if(this.sidebar){
            this.sidebar.$el.hide();
        }
        this.compute_aggregates();
        return;
    }
    this.dataset.index=_(this.dataset.ids).indexOf(ids[0]);
    if(this.sidebar){
        this.options.$sidebar.show();
        this.sidebar.$el.show();
    }
    this.compute_aggregates(_(records).map(function(record){
        return{
            count:1,
            values:record
        };
    
    }));
},
do_button_action:function(name,id,callback){
    this.handle_button(name,id,callback);
},
handle_button:function(name,id,callback){
    var action=_.detect(this.columns,function(field){
        return field.name===name;
    });
    if(!action){
        return;
    }
    if('confirm'in action&&!window.confirm(action.confirm)){
        return;
    }
    var c=new instance.web.CompoundContext();
    c.set_eval_context(_.extend({
        active_id:id,
        active_ids:[id],
        active_model:this.dataset.model
        },this.records.get(id).toContext()));
    if(action.context){
        c.add(action.context);
    }
    action.context=c;
    this.do_execute_action(action,this.dataset,id,_.bind(callback,null,id));
},
do_activate_record:function(index,id,dataset,view){
    this.dataset.ids=dataset.ids;
    this.select_record(index,view);
},
do_add_record:function(){
    this.select_record(null);
},
do_delete_selected:function(){
    var ids=this.groups.get_selection().ids;
    if(ids.length){
        this.do_delete(this.groups.get_selection().ids);
    }else{
        this.do_warn(_t("Warning"),_t("You must select at least one record."));
    }
},
compute_aggregates:function(records){
    var columns=_(this.aggregate_columns).filter(function(column){
        return column['function'];
    });
    if(_.isEmpty(columns)){
        return;
    }
    if(_.isEmpty(records)){
        records=this.groups.get_records();
    }
    records=_(records).compact();
    var count=0,sums={};
    
    _(columns).each(function(column){
        switch(column['function']){
            case'max':
                sums[column.id]=-Infinity;
                break;
            case'min':
                sums[column.id]=Infinity;
                break;
            default:
                sums[column.id]=0;
        }
    });
_(records).each(function(record){
    count+=record.count||1;
    _(columns).each(function(column){
        var field=column.id,value=record.values[field];
        switch(column['function']){
            case'sum':
                sums[field]+=value;
                break;
            case'avg':
                sums[field]+=record.count*value;
                break;
            case'min':
                if(sums[field]>value){
                sums[field]=value;
            }
            break;
            case'max':
                if(sums[field]<value){
                sums[field]=value;
            }
            break;
        }
    });
});
var aggregates={};

_(columns).each(function(column){
    var field=column.id;
    switch(column['function']){
        case'avg':
            aggregates[field]={
            value:sums[field]/count
            };
            
        break;
        default:
            aggregates[field]={
            value:sums[field]
            };
        
}
});
this.display_aggregates(aggregates);
},
display_aggregates:function(aggregation){
    var self=this;
    var $footer_cells=this.$el.find('.oe_list_footer');
    _(this.aggregate_columns).each(function(column){
        if(!column['function']){
            return;
        }
        $footer_cells.filter(_.str.sprintf('[data-field=%s]',column.id)).html(column.format(aggregation,{
            process_modifiers:false
        }));
    });
},
get_selected_ids:function(){
    var ids=this.groups.get_selection().ids;
    return ids;
},
pad_columns:function(count,options){
    options=options||{};
    
    var $first_header=this.$el.find('thead tr:first th');
    var colspan=$first_header.attr('colspan');
    if(colspan){
        if(!this.previous_colspan){
            this.previous_colspan=colspan;
        }
        $first_header.attr('colspan',parseInt(colspan,10)+count);
    }
    var $rows=this.$el.find('.oe_list_header_columns, tr:not(thead tr)').not(options['except']);
    var newcols=new Array(count+1).join('<td class="oe_list_padding"></td>');
    if(options.position==='before'){
        $rows.prepend(newcols);
    }else{
        $rows.append(newcols);
    }
},
unpad_columns:function(){
    this.$el.find('.oe_list_padding').remove();
    if(this.previous_colspan){
        this.$el.find('thead tr:first th').attr('colspan',this.previous_colspan);
        this.previous_colspan=null;
    }
},
no_result:function(){
    this.$el.find('.oe_view_nocontent').remove();
    if(this.groups.group_by||!this.options.action||!this.options.action.help){
        return;
    }
    this.$el.find('table:first').hide();
    this.$el.prepend($('<div class="oe_view_nocontent">').html(this.options.action.help));
    var create_nocontent=this.$buttons;
    this.$el.find('.oe_view_nocontent').click(function(){
        create_nocontent.openerpBounce();
    });
}
});
instance.web.ListView.List=instance.web.Class.extend({
    init:function(group,opts){
        var self=this;
        this.group=group;
        this.view=group.view;
        this.session=this.view.session;
        this.options=opts.options;
        this.columns=opts.columns;
        this.dataset=opts.dataset;
        this.records=opts.records;
        this.record_callbacks={
            'remove':function(event,record){
                var $row=self.$current.children('[data-id='+record.get('id')+']');
                var index=$row.data('index');
                $row.remove();
            },
            'reset':function(){
                return self.on_records_reset();
            },
            'change':function(event,record,attribute,value,old_value){
                var $row;
                if(attribute==='id'){
                    if(old_value){
                        throw new Error(_.str.sprintf(_t("Setting 'id' attribute on existing record %s"),JSON.stringify(record.attributes)));
                    }
                    if(!_.contains(self.dataset.ids,value)){
                        self.dataset.ids.splice(self.records.indexOf(record),0,value);
                    }
                    $row=self.$current.children('[data-id=false]');
                }else{
                    $row=self.$current.children('[data-id='+record.get('id')+']');
                }
                $row.replaceWith(self.render_record(record));
            },
            'add':function(ev,records,record,index){
                var $new_row=$(self.render_record(record));
                if(index===0){
                    $new_row.prependTo(self.$current);
                }else{
                    var previous_record=records.at(index-1),$previous_sibling=self.$current.children('[data-id='+previous_record.get('id')+']');
                    $new_row.insertAfter($previous_sibling);
                }
            }
        };
    
_(this.record_callbacks).each(function(callback,event){
    this.records.bind(event,callback);
},this);
this.$current=$('<tbody>').delegate('input[readonly=readonly]','click',function(e){
    e.preventDefault();
}).delegate('th.oe_list_record_selector','click',function(e){
    e.stopPropagation();
    var selection=self.get_selection();
    $(self).trigger('selected',[selection.ids,selection.records]);
}).delegate('td.oe_list_record_delete button','click',function(e){
    e.stopPropagation();
    var $row=$(e.target).closest('tr');
    $(self).trigger('deleted',[[self.row_id($row)]]);
}).delegate('td.oe_list_field_cell button','click',function(e){
    e.stopPropagation();
    var $target=$(e.currentTarget),field=$target.closest('td').data('field'),$row=$target.closest('tr'),record_id=self.row_id($row);
    if($target.attr('disabled')){
        return;
    }
    $target.attr('disabled','disabled');
    $(self).trigger('action',[field.toString(),record_id,function(id){
        $target.removeAttr('disabled');
        return self.reload_record(self.records.get(id));
    }]);
}).delegate('a','click',function(e){
    e.stopPropagation();
}).delegate('tr','click',function(e){
    var row_id=self.row_id(e.currentTarget);
    if(row_id){
        e.stopPropagation();
        if(!self.dataset.select_id(row_id)){
            throw new Error(_t("Could not find id in dataset"));
        }
        self.row_clicked(e);
    }
});
},
row_clicked:function(e,view){
    $(this).trigger('row_link',[this.dataset.ids[this.dataset.index],this.dataset,view]);
},
render_cell:function(record,column){
    var value;
    if(column.type==='reference'){
        value=record.get(column.id);
        var ref_match;
        if(value&&(ref_match=/^([\w\.]+),(\d+)$/.exec(value))){
            var model=ref_match[1],id=parseInt(ref_match[2],10);
            new instance.web.DataSet(this.view,model).name_get([id]).done(function(names){
                if(!names.length){
                    return;
                }
                record.set(column.id,names[0][1]);
            });
        }
    }else if(column.type==='many2one'){
    value=record.get(column.id);
    if(typeof value==='number'||value instanceof Number){
        new instance.web.DataSet(this.view,column.relation).name_get([value]).done(function(names){
            if(!names.length){
                return;
            }
            record.set(column.id,names[0]);
        });
    }
}else if(column.type==='many2many'){
    value=record.get(column.id);
    if(value instanceof Array&&!_.isEmpty(value)&&!record.get(column.id+'__display')){
        var ids;
        if(value[0]instanceof Array){
            var command=value[0];
            if(command[0]!==6){
                throw new Error(_.str.sprintf(_t("Unknown m2m command %s"),command[0]));
            }
            ids=command[2];
        }else{
            ids=value;
        }
        new instance.web.Model(column.relation).call('name_get',[ids]).done(function(names){
            record.set(column.id+'__display',_(names).pluck(1).join(', '));
            record.set(column.id,ids);
        });
        record.set(column.id,false);
    }
}
return column.format(record.toForm().data,{
    model:this.dataset.model,
    id:record.get('id')
    });
},
render:function(){
    this.$current.empty().append(QWeb.render('ListView.rows',_.extend({
        render_cell:function(){
            return self.render_cell.apply(self,arguments);
        }
    },this)));
this.pad_table_to(4);
},
pad_table_to:function(count){
    if(this.records.length>=count||_(this.columns).any(function(column){
        return column.meta;
    })){
        return;
    }
    var cells=[];
    if(this.options.selectable){
        cells.push('<th class="oe_list_record_selector"></td>');
    }
    _(this.columns).each(function(column){
        if(column.invisible==='1'){
            return;
        }
        if(column.tag==='button'){
            cells.push('<td class="oe_button" title="'+column.string+'">&nbsp;</td>');
        }else{
            cells.push('<td title="'+column.string+'">&nbsp;</td>');
        }
    });
if(this.options.deletable){
    cells.push('<td class="oe_list_record_delete"><button type="button" style="visibility: hidden"> </button></td>');
}
cells.unshift('<tr>');
cells.push('</tr>');
var row=cells.join('');
this.$current.children('tr:not([data-id])').remove().end().append(new Array(count-this.records.length+1).join(row));
},
get_selection:function(){
    var result={
        ids:[],
        records:[]
    };
    
    if(!this.options.selectable){
        return result;
    }
    var records=this.records;
    this.$current.find('th.oe_list_record_selector input:checked').closest('tr').each(function(){
        var record=records.get($(this).data('id'));
        result.ids.push(record.get('id'));
        result.records.push(record.attributes);
    });
    return result;
},
row_id:function(row){
    return $(row).data('id');
},
on_records_reset:function(){
    _(this.record_callbacks).each(function(callback,event){
        this.records.unbind(event,callback);
    },this);
    if(!this.$current){
        return;
    }
    this.$current.remove();
},
get_records:function(){
    return this.records.map(function(record){
        return{
            count:1,
            values:record.attributes
            };
        
    });
},
reload_record:function(record){
    return this.view.reload_record(record);
},
render_record:function(record){
    var self=this;
    var index=this.records.indexOf(record);
    return QWeb.render('ListView.row',{
        columns:this.columns,
        options:this.options,
        record:record,
        row_parity:(index%2===0)?'even':'odd',
        view:this.view,
        render_cell:function(){
            return self.render_cell.apply(self,arguments);
        }
    });
}
});
instance.web.ListView.Groups=instance.web.Class.extend({
    passthrough_events:'action deleted row_link',
    init:function(view,options){
        options=options||{};
        
        this.view=view;
        this.records=options.records||view.records;
        this.options=options.options||view.options;
        this.columns=options.columns||view.columns;
        this.datagroup=null;
        this.$row=null;
        this.children={};
        
        this.page=0;
        var self=this;
        this.records.bind('reset',function(){
            return self.on_records_reset();
        });
    },
    make_fragment:function(){
        return document.createDocumentFragment();
    },
    point_insertion:function(row){
        var $row=$(row);
        var red_letter_tboday=$row.closest('tbody')[0];
        var $next_siblings=$row.nextAll();
        if($next_siblings.length){
            var $root_kanal=$('<tbody>').insertAfter(red_letter_tboday);
            $root_kanal.append($next_siblings);
            this.elements.splice(_.indexOf(this.elements,red_letter_tboday),0,$root_kanal[0]);
        }
        return red_letter_tboday;
    },
    make_paginator:function(){
        var self=this;
        var $prev=$('<button type="button" data-pager-action="previous">&lt;</button>').click(function(e){
            e.stopPropagation();
            self.page-=1;
            self.$row.closest('tbody').next().replaceWith(self.render());
        });
        var $next=$('<button type="button" data-pager-action="next">&gt;</button>').click(function(e){
            e.stopPropagation();
            self.page+=1;
            self.$row.closest('tbody').next().replaceWith(self.render());
        });
        this.$row.children().last().addClass('oe_list_group_pagination').append($prev).append('<span class="oe_list_pager_state"></span>').append($next);
    },
    open:function(point_insertion){
        this.render().insertAfter(point_insertion);
        var no_subgroups=_(this.datagroup.group_by).isEmpty(),records_terminated=!this.datagroup.context['group_by_no_leaf'];
        if(no_subgroups&&records_terminated){
            this.make_paginator();
        }
    },
close:function(){
    this.$row.children().last().empty();
    this.records.reset();
},
indent:function($node,level){
    return $('<span>').css({
        'float':'left',
        'white-space':'pre'
    }).text(new Array(level).join('   ')).prependTo($node);
},
render_groups:function(datagroups){
    var self=this;
    var placeholder=this.make_fragment();
    _(datagroups).each(function(group){
        if(self.children[group.value]){
            self.records.proxy(group.value).reset();
            delete self.children[group.value];
        }
        var child=self.children[group.value]=new(self.view.options.GroupsType)(self.view,{
            records:self.records.proxy(group.value),
            options:self.options,
            columns:self.columns
            });
        self.bind_child_events(child);
        child.datagroup=group;
        var $row=child.$row=$('<tr class="oe_group_header">');
        if(group.openable&&group.length){
            $row.click(function(e){
                if(!$row.data('open')){
                    $row.data('open',true).find('span.ui-icon').removeClass('ui-icon-triangle-1-e').addClass('ui-icon-triangle-1-s');
                    child.open(self.point_insertion(e.currentTarget));
                }else{
                    $row.removeData('open').find('span.ui-icon').removeClass('ui-icon-triangle-1-s').addClass('ui-icon-triangle-1-e');
                    child.close();
                }
            });
    }
    placeholder.appendChild($row[0]);
        var $group_column=$('<th class="oe_list_group_name">').appendTo($row);
        if(group.grouped_on){
        var row_data={};
        
        row_data[group.grouped_on]=group;
        var group_column=_(self.columns).detect(function(column){
            return column.id===group.grouped_on;
        });
        if(!group_column){
            throw new Error(_.str.sprintf(_t("Grouping on field '%s' is not possible because that field does not appear in the list view."),group.grouped_on));
        }
        var group_label;
        try{
            group_label=group_column.format(row_data,{
                value_if_empty:_t("Undefined"),
                process_modifiers:false
            });
        }catch(e){
            group_label=_.str.escapeHTML(row_data[group_column.id].value);
        }
        $group_column.html(_.str.sprintf(_t("%s (%d)"),group_label,group.length));
        if(group.length&&group.openable){
            $group_column.prepend('<span class="ui-icon ui-icon-triangle-1-e" style="float: left;">');
        }else{
            $group_column.prepend('<span class="ui-icon" style="float: left; background-position: 150px 150px">');
        }
    }
    self.indent($group_column,group.level);
    if(self.options.selectable){
        $row.append('<td>');
    }
    _(self.columns).chain().filter(function(column){
        return column.invisible!=='1';
    }).each(function(column){
        if(column.meta){}else if(column.id in group.aggregates){
            var r={};
            
            r[column.id]={
                value:group.aggregates[column.id]
                };
                
            $('<td class="oe_number">').html(column.format(r,{
                process_modifiers:false
            })).appendTo($row);
        }else{
            $row.append('<td>');
        }
    });
if(self.options.deletable){
    $row.append('<td class="oe_list_group_pagination">');
}
});
return placeholder;
},
bind_child_events:function(child){
    var $this=$(this),self=this;
    $(child).bind('selected',function(e){
        var selection=self.get_selection();
        $this.trigger(e,[selection.ids,selection.records]);
    }).bind(this.passthrough_events,function(e){
        var args=Array.prototype.slice.call(arguments,1);
        $this.trigger.call($this,e,args);
    });
},
render_dataset:function(dataset){
    var self=this,list=new(this.view.options.ListType)(this,{
        options:this.options,
        columns:this.columns,
        dataset:dataset,
        records:this.records
        });
    this.bind_child_events(list);
    var view=this.view,limit=view.limit(),d=new $.Deferred(),page=this.datagroup.openable?this.page:view.page;
    var fields=_.pluck(_.select(this.columns,function(x){
        return x.tag=="field"
        }),'name');
    var options={
        offset:page*limit,
        limit:limit,
        context:{
            bin_size:true
        }
    };
    
$.async_when().done(function(){
    dataset.read_slice(fields,options).done(function(records){
        if(self.records.length){
            self.records.reset(null,{
                silent:true
            });
        }
        if(!self.datagroup.openable){
            view.configure_pager(dataset);
        }else{
            if(dataset.size()==records.length){
                self.$row.find('td.oe_list_group_pagination').empty();
            }else{
                var pages=Math.ceil(dataset.size()/limit);
                self.$row.find('.oe_list_pager_state').text(_.str.sprintf(_t("%(page)d/%(page_count)d"),{
                    page:page+1,
                    page_count:pages
                })).end().find('button[data-pager-action=previous]').css('visibility',page===0?'hidden':'').end().find('button[data-pager-action=next]').css('visibility',page===pages-1?'hidden':'');
            }
        }
    self.records.add(records,{
        silent:true
    });
    list.render();
        d.resolve(list);
        if(_.isEmpty(records)){
        view.no_result();
    }
    });
});
return d.promise();
},
setup_resequence_rows:function(list,dataset){
    if((dataset.sort&&dataset.sort())||!_(this.columns).any(function(column){
        return column.widget==='handle'||column.name==='sequence';
    })){
        return;
    }
    var sequence_field=_(this.columns).find(function(c){
        return c.widget==='handle';
    });
    var seqname=sequence_field?sequence_field.name:'sequence';
    list.$current.sortable({
        axis:'y',
        items:'> tr[data-id]',
        helper:'clone'
    });
    if(sequence_field){
        list.$current.sortable('option','handle','.oe_list_field_handle');
    }
    list.$current.sortable('option',{
        start:function(e,ui){
            ui.placeholder.height(ui.item.height());
        },
        stop:function(event,ui){
            var to_move=list.records.get(ui.item.data('id')),target_id=ui.item.prev().data('id'),from_index=list.records.indexOf(to_move),target=list.records.get(target_id);
            if(list.records.at(from_index-1)==target){
                return;
            }
            list.records.remove(to_move);
            var to=target_id?list.records.indexOf(target)+1:0;
            list.records.add(to_move,{
                at:to
            });
            var record,index=to,seq=to?list.records.at(to-1).get(seqname):0;
            while(++seq,record=list.records.at(index++)){
                (function(dataset,id,seq){
                    $.async_when().done(function(){
                        var attrs={};
                        
                        attrs[seqname]=seq;
                        dataset.write(id,attrs);
                    });
                }(dataset,record.get('id'),seq));
                record.set(seqname,seq);
            }
        }
    });
},
render:function(post_render){
    var self=this;
    var $el=$('<tbody>');
    this.elements=[$el[0]];
    this.datagroup.list(_(this.view.visible_columns).chain().filter(function(column){
        return column.tag==='field'
        }).pluck('name').value(),function(groups){
        $el[0].appendChild(self.render_groups(groups));
        if(post_render){
            post_render();
        }
    },function(dataset){
        self.render_dataset(dataset).done(function(list){
            self.children[null]=list;
            self.elements=[list.$current.replaceAll($el)[0]];
            self.setup_resequence_rows(list,dataset);
            if(post_render){
                post_render();
            }
        });
});
return $el;
},
get_selection:function(){
    var ids=[],records=[];
    _(this.children).each(function(child){
        var selection=child.get_selection();
        ids.push.apply(ids,selection.ids);
        records.push.apply(records,selection.records);
    });
    return{
        ids:ids,
        records:records
    };

},
on_records_reset:function(){
    this.children={};
    
    $(this.elements).remove();
},
get_records:function(){
    if(_(this.children).isEmpty()){
        if(!this.datagroup.length){
            return;
        }
        return{
            count:this.datagroup.length,
            values:this.datagroup.aggregates
            }
        }
return _(this.children).chain().map(function(child){
    return child.get_records();
}).flatten().value();
}
});
var DataGroup=instance.web.Class.extend({
    init:function(parent,model,domain,context,group_by,level){
        this.model=new instance.web.Model(model,context,domain);
        this.group_by=group_by;
        this.context=context;
        this.domain=domain;
        this.level=level||0;
    },
    list:function(fields,ifGroups,ifRecords){
        var self=this;
        var query=this.model.query(fields).order_by(this.sort).group_by(this.group_by);
        $.when(query).done(function(querygroups){
            if(!querygroups){
                var ds=new instance.web.DataSetSearch(self,self.model.name,self.model.context(),self.model.domain());
                ds._sort=self.sort;
                ifRecords(ds);
                return;
            }
            var child_datagroups=_(querygroups).map(function(group){
                var child_context=_.extend({},self.model.context(),group.model.context());
                var child_dg=new DataGroup(self,self.model.name,group.model.domain(),child_context,group.model._context.group_by,self.level+1);
                child_dg.sort=self.sort;
                child_dg.__context=child_context;
                child_dg.__domain=group.model.domain();
                child_dg.folded=group.get('folded');
                child_dg.grouped_on=group.get('grouped_on');
                child_dg.length=group.get('length');
                child_dg.value=group.get('value');
                child_dg.openable=group.get('has_children');
                child_dg.aggregates=group.get('aggregates');
                return child_dg;
            });
            ifGroups(child_datagroups);
        });
    }
});
var StaticDataGroup=DataGroup.extend({
    init:function(dataset){
        this.dataset=dataset;
    },
    list:function(fields,ifGroups,ifRecords){
        ifRecords(this.dataset);
    }
});
var Events={
    bind:function(event,handler){
        var calls=this['_callbacks']||(this._callbacks={});
        if(event in calls){
            calls[event].push(handler);
        }else{
            calls[event]=[handler];
        }
        return this;
    },
    unbind:function(event,handler){
        var calls=this._callbacks||{};
        
        if(!(event in calls)){
            return this;
        }
        if(!handler){
            delete calls[event];
        }else{
            var handlers=calls[event];
            handlers.splice(_(handlers).indexOf(handler),1);
        }
        return this;
    },
    trigger:function(event){
        var calls;
        if(!(calls=this._callbacks)){
            return this;
        }
        var callbacks=(calls[event]||[]).concat(calls[null]||[]);
        for(var i=0,length=callbacks.length;i<length;++i){
            callbacks[i].apply(this,arguments);
        }
        return this;
    }
};

var Record=instance.web.Class.extend({
    init:function(data){
        this.attributes=data||{};
    
},
get:function(key){
    return this.attributes[key];
},
set:function(key,value,options){
    options=options||{};
    
    var old_value=this.attributes[key];
    if(old_value===value){
        return this;
    }
    this.attributes[key]=value;
    if(!options.silent){
        this.trigger('change:'+key,this,value,old_value);
        this.trigger('change',this,key,value,old_value);
    }
    return this;
},
toForm:function(){
    var form_data={},attrs=this.attributes;
    for(var k in attrs){
        form_data[k]={
            value:attrs[k]
            };
        
    }
return{
    data:form_data
};

},
toContext:function(){
    var output={},attrs=this.attributes;
    for(var k in attrs){
        var val=attrs[k];
        if(typeof val!=='object'){
            output[k]=val;
        }else if(val instanceof Array){
            output[k]=val[0];
        }else{
            throw new Error(_.str.sprintf(_t("Can't convert value %s to context"),val));
        }
    }
return output;
}
});
Record.include(Events);
var Collection=instance.web.Class.extend({
    init:function(records,options){
        options=options||{};
        
        _.bindAll(this,'_onRecordEvent');
        this.length=0;
        this.records=[];
        this._byId={};
        
        this._proxies={};
        
        this._key=options.key;
        this._parent=options.parent;
        if(records){
            this.add(records);
        }
    },
add:function(record,options){
    options=options||{};
    
    var records=record instanceof Array?record:[record];
    for(var i=0,length=records.length;i<length;++i){
        var instance_=(records[i]instanceof Record)?records[i]:new Record(records[i]);
        instance_.bind(null,this._onRecordEvent);
        this._byId[instance_.get('id')]=instance_;
        if(options.at==undefined){
            this.records.push(instance_);
            if(!options.silent){
                this.trigger('add',this,instance_,this.records.length-1);
            }
        }else{
        var insertion_index=options.at+i;
        this.records.splice(insertion_index,0,instance_);
        if(!options.silent){
            this.trigger('add',this,instance_,insertion_index);
        }
    }
    this.length++;
}
return this;
},
at:function(index,group){
    if(group){
        var groups=group.split('.');
        return this._proxies[groups[0]].at(index,groups.join('.'));
    }
    return this.records[index];
},
get:function(id){
    if(!_(this._proxies).isEmpty()){
        var record=null;
        _(this._proxies).detect(function(proxy){
            return record=proxy.get(id);
        });
        return record;
    }
    return this._byId[id];
},
proxy:function(section){
    return this._proxies[section]=new Collection(null,{
        parent:this,
        key:section
    }).bind(null,this._onRecordEvent);
},
reset:function(records,options){
    options=options||{};
    
    _(this._proxies).each(function(proxy){
        proxy.reset();
    });
    this._proxies={};
    
    _(this.records).invoke('unbind',null,this._onRecordEvent);
    this.length=0;
    this.records=[];
    this._byId={};
    
    if(records){
        this.add(records);
    }
    if(!options.silent){
        this.trigger('reset',this);
    }
    return this;
},
remove:function(record){
    var index=this.indexOf(record);
    if(index===-1){
        _(this._proxies).each(function(proxy){
            proxy.remove(record);
        });
        return this;
    }
    record.unbind(null,this._onRecordEvent);
    this.records.splice(index,1);
    delete this._byId[record.get('id')];
    this.length--;
    this.trigger('remove',record,this);
    return this;
},
_onRecordEvent:function(event){
    switch(event){
        case'reset':
            return;
        case'change:id':
            var record=arguments[1];
            var new_value=arguments[2];
            var old_value=arguments[3];
            if(this._byId[old_value]===record){
            delete this._byId[old_value];
            this._byId[new_value]=record;
        }
        break;
    }
    this.trigger.apply(this,arguments);
},
find:function(callback){
    var record;
    for(var section in this._proxies){
        if(!this._proxies.hasOwnProperty(section)){
            continue
        }
        if((record=this._proxies[section].find(callback))){
            return record;
        }
    }
for(var i=0;i<this.length;++i){
    record=this.records[i];
    if(callback(record)){
        return record;
    }
}
},
each:function(callback){
    for(var section in this._proxies){
        if(this._proxies.hasOwnProperty(section)){
            this._proxies[section].each(callback);
        }
    }
for(var i=0;i<this.length;++i){
    callback(this.records[i]);
}
},
map:function(callback){
    var results=[];
    this.each(function(record){
        results.push(callback(record));
    });
    return results;
},
pluck:function(fieldname){
    return this.map(function(record){
        return record.get(fieldname);
    });
},
indexOf:function(record){
    return _(this.records).indexOf(record);
},
succ:function(record,options){
    options=options||{
        wraparound:false
    };
    
    var result;
    for(var section in this._proxies){
        if(!this._proxies.hasOwnProperty(section)){
            continue;
        }
        if((result=this._proxies[section].succ(record,options))){
            return result;
        }
    }
var index=this.indexOf(record);
if(index===-1){
    return null;
}
var next_index=index+1;
if(options.wraparound&&(next_index===this.length)){
    return this.at(0);
}
return this.at(next_index);
},
pred:function(record,options){
    options=options||{
        wraparound:false
    };
    
    var result;
    for(var section in this._proxies){
        if(!this._proxies.hasOwnProperty(section)){
            continue;
        }
        if((result=this._proxies[section].pred(record,options))){
            return result;
        }
    }
var index=this.indexOf(record);
if(index===-1){
    return null;
}
var next_index=index-1;
if(options.wraparound&&(next_index===-1)){
    return this.at(this.length-1);
}
return this.at(next_index);
}
});
Collection.include(Events);
instance.web.list={
    Events:Events,
    Record:Record,
    Collection:Collection
};

instance.web.list.columns=new instance.web.Registry({
    'field':'instance.web.list.Column',
    'field.boolean':'instance.web.list.Boolean',
    'field.binary':'instance.web.list.Binary',
    'field.progressbar':'instance.web.list.ProgressBar',
    'field.handle':'instance.web.list.Handle',
    'button':'instance.web.list.Button',
    'field.many2onebutton':'instance.web.list.Many2OneButton',
    'field.many2many':'instance.web.list.Many2Many'
});
instance.web.list.columns.for_=function(id,field,node){
    var description=_.extend({
        tag:node.tag
        },field,node.attrs);
    var tag=description.tag;
    var Type=this.get_any([tag+'.'+description.widget,tag+'.'+description.type,tag]);
    return new Type(id,node.tag,description)
    };
    
instance.web.list.Column=instance.web.Class.extend({
    init:function(id,tag,attrs){
        _.extend(attrs,{
            id:id,
            tag:tag
        });
        this.modifiers=attrs.modifiers?JSON.parse(attrs.modifiers):{};
        
        delete attrs.modifiers;
        _.extend(this,attrs);
        if(this.modifiers['tree_invisible']){
            this.invisible='1';
        }else{
            delete this.invisible;
        }
    },
modifiers_for:function(fields){
    var out={};
    
    var domain_computer=instance.web.form.compute_domain;
    for(var attr in this.modifiers){
        if(!this.modifiers.hasOwnProperty(attr)){
            continue;
        }
        var modifier=this.modifiers[attr];
        out[attr]=_.isBoolean(modifier)?modifier:domain_computer(modifier,fields);
    }
    return out;
},
to_aggregate:function(){
    if(this.type!=='integer'&&this.type!=='float'){
        return{};
    
}
var aggregation_func=this['group_operator']||'sum';
if(!(aggregation_func in this)){
    return{};

}
var C=function(fn,label){
    this['function']=fn;
    this.label=label;
};

C.prototype=this;
return new C(aggregation_func,this[aggregation_func]);
},
format:function(row_data,options){
    options=options||{};
    
    var attrs={};
    
    if(options.process_modifiers!==false){
        attrs=this.modifiers_for(row_data);
    }
    if(attrs.invisible){
        return'';
    }
    if(!row_data[this.id]){
        return options.value_if_empty===undefined?'':options.value_if_empty;
    }
    return this._format(row_data,options);
},
_format:function(row_data,options){
    return _.escape(instance.web.format_value(row_data[this.id].value,this,options.value_if_empty));
}
});
instance.web.list.MetaColumn=instance.web.list.Column.extend({
    meta:true,
    init:function(id,string){
        this._super(id,'',{
            string:string
        });
    }
});
instance.web.list.Button=instance.web.list.Column.extend({
    format:function(row_data,options){
        options=options||{};
        
        var attrs={};
        
        if(options.process_modifiers!==false){
            attrs=this.modifiers_for(row_data);
        }
        if(attrs.invisible){
            return'';
        }
        return QWeb.render('ListView.row.button',{
            widget:this,
            prefix:instance.session.prefix,
            disabled:attrs.readonly||isNaN(row_data.id.value)||instance.web.BufferedDataSet.virtual_id_regex.test(row_data.id.value)
            });
    }
});
instance.web.list.Boolean=instance.web.list.Column.extend({
    _format:function(row_data,options){
        return _.str.sprintf('<input type="checkbox" %s readonly="readonly"/>',row_data[this.id].value?'checked="checked"':'');
    }
});
instance.web.list.Binary=instance.web.list.Column.extend({
    _format:function(row_data,options){
        var text=_t("Download");
        var value=row_data[this.id].value;
        var download_url;
        if(value&&value.substr(0,10).indexOf(' ')==-1){
            download_url="data:application/octet-stream;base64,"+value;
        }else{
            download_url=instance.session.url('/web/binary/saveas',{
                model:options.model,
                field:this.id,
                id:options.id
                });
            if(this.filename){
                download_url+='&filename_field='+this.filename;
            }
        }
    if(this.filename&&row_data[this.filename]){
        text=_.str.sprintf(_t("Download \"%s\""),instance.web.format_value(row_data[this.filename].value,{
            type:'char'
        }));
    }
    return _.template('<a href="<%-href%>"><%-text%></a> (<%-size%>)',{
        text:text,
        href:download_url,
        size:instance.web.binary_to_binsize(value),
    });
}
});
instance.web.list.ProgressBar=instance.web.list.Column.extend({
    _format:function(row_data,options){
        return _.template('<progress value="<%-value%>" max="100"><%-value%>%</progress>',{
            value:_.str.sprintf("%.0f",row_data[this.id].value||0)
            });
    }
});
instance.web.list.Handle=instance.web.list.Column.extend({
    init:function(){
        this._super.apply(this,arguments);
        this.modifiers.readonly=true;
    },
    _format:function(row_data,options){
        return'<div class="oe_list_handle">';
    }
});
instance.web.list.Many2OneButton=instance.web.list.Column.extend({
    _format:function(row_data,options){
        this.has_value=!!row_data[this.id].value;
        this.icon=this.has_value?'gtk-yes':'gtk-no';
        this.string=this.has_value?_t('View'):_t('Create');
        return QWeb.render('Many2OneButton.cell',{
            'widget':this,
            'prefix':instance.session.prefix,
        });
    },
});
instance.web.list.Many2Many=instance.web.list.Column.extend({
    _format:function(row_data,options){
        if(!_.isEmpty(row_data[this.id].value)){
            row_data[this.id]=row_data[this.id+'__display'];
        }
        return this._super(row_data,options);
    }
});
};
;

openerp.web.list_editable=function(instance){
    var _t=instance.web._t;
    instance.web.ListView.prototype.defaults.editable=null;
    instance.web.ListView.include({
        init:function(){
            var self=this;
            this._super.apply(this,arguments);
            this.saving_mutex=new $.Mutex();
            this._force_editability=null;
            this._context_editable=false;
            this.editor=this.make_editor();
            this.fields_for_resize=[];
            instance.web.bus.on('resize',this,this.resize_fields);
            $(this.groups).bind({
                'edit':function(e,id,dataset){
                    self.do_edit(dataset.index,id,dataset);
                },
                'saved':function(){
                    if(self.groups.get_selection().length){
                        return;
                    }
                    self.configure_pager(self.dataset);
                    self.compute_aggregates();
                }
            });
        this.records.bind('remove',function(){
            if(self.editor.is_editing()){
                self.cancel_edition();
            }
        });
    this.on('edit:before',this,function(event){
        if(!self.editable()||self.editor.is_editing()){
            event.cancel=true;
        }
    });
    this.on('edit:after',this,function(){
        self.$el.add(self.$buttons).addClass('oe_editing');
    });
    this.on('save:after cancel:after',this,function(){
        self.$el.add(self.$buttons).removeClass('oe_editing');
    });
},
destroy:function(){
    instance.web.bus.off('resize',this,this.resize_fields);
    this._super();
},
do_hide:function(){
    if(this.editor.is_editing()){
        this.cancel_edition(true);
    }
    this._super();
},
sort_by_column:function(e){
    e.stopPropagation();
    if(!this.editor.is_editing()){
        this._super.apply(this,arguments);
    }
},
do_edit:function(index,id,dataset){
    _.extend(this.dataset,dataset);
},
do_delete:function(ids){
    var nonfalse=_.compact(ids);
    var _super=this._super.bind(this);
    var next=this.editor.is_editing()?this.cancel_edition(true):$.when();
    return next.then(function(){
        return _super(nonfalse);
    });
},
editable:function(){
    return!this.options.disable_editable_mode&&(this.fields_view.arch.attrs.editable||this._context_editable||this.options.editable);
},
do_search:function(domain,context,group_by){
    var self=this,_super=self._super,args=arguments;
    var ready=this.editor.is_editing()?this.cancel_edition(true):$.when();
    return ready.then(function(){
        self._context_editable=!!context.set_editable;
        return _super.apply(self,args);
    });
},
do_add_record:function(){
    if(this.editable()){
        this.$el.find('table:first').show();
        this.$el.find('.oe_view_nocontent').remove();
        this.start_edition();
    }else{
        this._super();
    }
},
load_list:function(data,grouped){
    var self=this;
    var result=this._super(data,grouped);
    this.editor.destroy();
    this.editor=this.make_editor();
    if(this.editable()){
        this.$el.addClass('oe_list_editable');
        this.$buttons.off('click','.oe_list_save').on('click','.oe_list_save',this.proxy('save_edition')).off('click','.oe_list_discard').on('click','.oe_list_discard',function(e){
            e.preventDefault();
            self.cancel_edition();
        });
        var editor_ready=this.editor.prependTo(this.$el).done(this.proxy('setup_events'));
        return $.when(result,editor_ready);
    }else{
        this.$el.removeClass('oe_list_editable');
    }
    return result;
},
make_editor:function(){
    return new instance.web.list.Editor(this);
},
do_button_action:function(name,id,callback){
    var self=this,args=arguments;
    this.ensure_saved().done(function(done){
        if(!id&&done.created){
            id=done.record.get('id');
        }
        self.handle_button(name,id,callback);
    });
},
ensure_saved:function(){
    return this.save_edition();
},
make_empty_record:function(id){
    var attrs={
        id:id
    };
    
    _(this.columns).chain().filter(function(x){
        return x.tag==='field'
        }).pluck('name').each(function(field){
        attrs[field]=false;
    });
    return new instance.web.list.Record(attrs);
},
start_edition:function(record,options){
    var self=this;
    var item=false;
    if(record){
        item=record.attributes;
    }else{
        record=this.make_empty_record(false);
        this.records.add(record,{
            at:this.prepends_on_create()?0:null
            });
    }
    return this.ensure_saved().then(function(){
        var $recordRow=self.groups.get_row_for(record);
        var cells=self.get_cells_for($recordRow);
        self.fields_for_resize.splice(0,self.fields_for_resize.length);
        return self.with_event('edit',{
            record:record.attributes,
            cancel:false
        },function(){
            return self.editor.edit(item,function(field_name,field){
                var cell=cells[field_name];
                if(!cell){
                    return;
                }
                field.$el.attr('data-fieldname',field_name);
                self.fields_for_resize.push({
                    field:field,
                    cell:cell
                });
            },options).then(function(){
                $recordRow.addClass('oe_edition');
                self.resize_fields();
                return record.attributes;
            });
        }).fail(function(){
            if(!record.get('id')){
                self.records.remove(record);
            }
        });
    });
},
get_cells_for:function($row){
    var cells={};
    
    $row.children('td').each(function(index,el){
        cells[el.getAttribute('data-field')]=el
        });
    return cells;
},
resize_fields:function(){
    if(!this.editor.is_editing()){
        return;
    }
    for(var i=0,len=this.fields_for_resize.length;i<len;++i){
        var item=this.fields_for_resize[i];
        if(!item.field.get('invisible')){
            this.resize_field(item.field,item.cell);
        }
    }
    },
resize_field:function(field,cell){
    var $cell=$(cell);
    field.set_dimensions($cell.outerHeight(),$cell.outerWidth());
    field.$el.position({
        my:'left top',
        at:'left top',
        of:$cell
    });
},
save_edition:function(){
    var self=this;
    return self.saving_mutex.exec(function(){
        if(!self.editor.is_editing()){
            return $.when();
        }
        return self.with_event('save',{
            editor:self.editor,
            form:self.editor.form,
            cancel:false
        },function(){
            return self.editor.save().then(function(attrs){
                var created=false;
                var record=self.records.get(attrs.id);
                if(!record){
                    created=true;
                    record=self.records.find(function(r){
                        return!r.get('id');
                    }).set('id',attrs.id);
                }
                return self.handle_onwrite(record).then(function(){
                    return self.reload_record(record);
                }).then(function(){
                    return{
                        created:created,
                        record:record
                    };
                
                });
            });
        });
    });
},
cancel_edition:function(force){
    var self=this;
    return this.with_event('cancel',{
        editor:this.editor,
        form:this.editor.form,
        cancel:false
    },function(){
        return this.editor.cancel(force).then(function(attrs){
            if(attrs.id){
                var record=self.records.get(attrs.id);
                if(!record){
                    return
                }
                return self.reload_record(record);
            }
            var to_delete=self.records.find(function(r){
                return!r.get('id');
            });
            if(to_delete){
                self.records.remove(to_delete);
            }
        });
    });
},
with_event:function(event_name,event,action){
    var self=this;
    event=event||{};
    
    this.trigger(event_name+':before',event);
    if(event.cancel){
        return $.Deferred().reject({
            message:_.str.sprintf("Event %s:before cancelled",event_name)
            });
    }
    return $.when(action.call(this)).done(function(){
        self.trigger.apply(self,[event_name+':after'].concat(_.toArray(arguments)));
    });
},
edition_view:function(editor){
    var view=$.extend(true,{},this.fields_view);
    view.arch.tag='form';
    _.extend(view.arch.attrs,{
        'class':'oe_form_container',
        version:'7.0'
    });
    _(view.arch.children).chain().zip(_(this.columns).filter(function(c){
        return!(c instanceof instance.web.list.MetaColumn);
    })).each(function(ar){
        var widget=ar[0],column=ar[1];
        var modifiers=_.extend({},column.modifiers);
        widget.attrs.nolabel=true;
        if(modifiers['tree_invisible']||widget.tag==='button'){
            modifiers.invisible=true;
        }
        widget.attrs.modifiers=JSON.stringify(modifiers);
    });
    return view;
},
handle_onwrite:function(source_record){
    var self=this;
    var on_write_callback=self.fields_view.arch.attrs.on_write;
    if(!on_write_callback){
        return $.when();
    }
    return this.dataset.call(on_write_callback,[source_record.get('id')]).then(function(ids){
        return $.when.apply(null,_(ids).map(_.bind(self.handle_onwrite_record,self,source_record)));
    });
},
handle_onwrite_record:function(source_record,id){
    var record=this.records.get(id);
    if(!record){
        var index=this.records.indexOf(source_record)+1;
        record=this.make_empty_record(id);
        this.records.add(record,{
            at:index
        });
        this.dataset.ids.splice(index,0,id);
    }
    return this.reload_record(record);
},
prepends_on_create:function(){
    return this.editable()==='top';
},
setup_events:function(){
    var self=this;
    _.each(this.editor.form.fields,function(field,field_name){
        var setting=false;
        var set_invisible=function(){
            if(!setting&&field.get("effective_readonly")){
                setting=true;
                field.set({
                    invisible:true
                });
                setting=false;
            }
        };
        
    field.on("change:effective_readonly",self,set_invisible);
        field.on("change:invisible",self,set_invisible);
        set_invisible();
    });
this.editor.$el.on('keyup keydown',function(e){
    if(!self.editor.is_editing()){
        return true;
    }
    var key=_($.ui.keyCode).chain().map(function(v,k){
        return{
            name:k,
            code:v
        };
    
    }).find(function(o){
    return o.code===e.which;
}).value();
    if(!key){
    return true;
}
var method=e.type+'_'+key.name;
if(!(method in self)){
    return true;
}
return self[method](e);
});
},
_next:function(next_record,options){
    next_record=next_record||'succ';
    var self=this;
    return this.save_edition().then(function(saveInfo){
        if(saveInfo.created){
            return self.start_edition();
        }
        var record=self.records[next_record](saveInfo.record,{
            wraparound:true
        });
        return self.start_edition(record,options);
    });
},
keyup_ENTER:function(){
    return this._next();
},
keydown_ESCAPE:function(e){
    return false;
},
keyup_ESCAPE:function(e){
    return this.cancel_edition();
},
_text_selection_range:function(el){
    var selectionStart;
    try{
        selectionStart=el.selectionStart;
    }catch(e){
        return null;
    }
    if(selectionStart!==undefined){
        return{
            start:selectionStart,
            end:el.selectionEnd
            };
        
}else if(document.body.createTextRange){
    throw new Error("Implement text range handling for MSIE");
    var sel=document.body.createTextRange();
    if(sel.parentElement()===el){}
}
return null;
},
_text_cursor:function(el){
    var selection=this._text_selection_range(el);
    if(!selection){
        return null;
    }
    if(selection.start!==selection.end){
        return{
            position:null,
            collapsed:false
        };
    
}
return{
    position:selection.start,
    collapsed:true
};

},
_at_start:function(cursor,el){
    return cursor.collapsed&&(cursor.position===0);
},
_at_end:function(cursor,el){
    return cursor.collapsed&&(cursor.position===el.value.length);
},
_key_move_record:function(event,record_direction,is_valid_move){
    if(!this.editor.is_editing('edit')){
        return $.when();
    }
    var cursor=this._text_cursor(event.target);
    if(cursor&&!is_valid_move(event.target,cursor)){
        return $.when();
    }
    event.preventDefault();
    var source_field=$(event.target).closest('[data-fieldname]').attr('data-fieldname');
    return this._next(record_direction,{
        focus_field:source_field
    });
},
keydown_UP:function(e){
    var self=this;
    return this._key_move_record(e,'pred',function(el,cursor){
        return self._at_start(cursor,el);
    });
},
keydown_DOWN:function(e){
    var self=this;
    return this._key_move_record(e,'succ',function(el,cursor){
        return self._at_end(cursor,el);
    });
},
keydown_LEFT:function(e){
    var source_field=$(e.target).closest('[data-fieldname]').attr('data-fieldname');
    var cursor=this._text_cursor(e.target);
    if(cursor&&!this._at_start(cursor,e.target)){
        return $.when();
    }
    var fields_order=this.editor.form.fields_order;
    var field_index=_(fields_order).indexOf(source_field);
    var fields=this.editor.form.fields;
    var field;
    do{
        if(--field_index<0){
            return $.when();
        }
        field=fields[fields_order[field_index]];
    }while(!field.$el.is(':visible'));
    field.focus();
    return $.when();
},
keydown_RIGHT:function(e){
    var source_field=$(e.target).closest('[data-fieldname]').attr('data-fieldname');
    var cursor=this._text_cursor(e.target);
    if(cursor&&!this._at_end(cursor,e.target)){
        return $.when();
    }
    var fields_order=this.editor.form.fields_order;
    var field_index=_(fields_order).indexOf(source_field);
    var fields=this.editor.form.fields;
    var field;
    do{
        if(++field_index>=fields_order.length){
            return $.when();
        }
        field=fields[fields_order[field_index]];
    }while(!field.$el.is(':visible'));
    field.focus();
    return $.when();
},
keydown_TAB:function(e){
    var form=this.editor.form;
    var last_field=_(form.fields_order).chain().map(function(name){
        return form.fields[name];
    }).filter(function(field){
        return field.$el.is(':visible');
    }).last().value();
    if(last_field&&last_field.$el.has(e.target).length){
        e.preventDefault();
        return this._next();
    }
    return $.when();
}
});
instance.web.list.Editor=instance.web.Widget.extend({
    init:function(parent,options){
        this._super(parent);
        this.options=options||{};
        
        _.defaults(this.options,{
            formView:instance.web.FormView,
            delegate:this.getParent()
            });
        this.delegate=this.options.delegate;
        this.record=null;
        this.form=new(this.options.formView)(this,this.delegate.dataset,false,{
            initial_mode:'edit',
            disable_autofocus:true,
            $buttons:$(),
            $pager:$()
            });
    },
    start:function(){
        var self=this;
        var _super=this._super();
        this.form.embedded_view=this._validate_view(this.delegate.edition_view(this));
        var form_ready=this.form.appendTo(this.$el).done(self.form.proxy('do_hide'));
        return $.when(_super,form_ready);
    },
    _validate_view:function(edition_view){
        if(!edition_view){
            throw new Error("editor delegate's #edition_view must return "
                +"a view descriptor");
        }
        var arch=edition_view.arch;
        if(!(arch&&arch.children instanceof Array)){
            throw new Error("Editor delegate's #edition_view must have a"+" non-empty arch")
            }
        if(!(arch.tag==="form")){
            throw new Error("Editor delegate's #edition_view must have a"+" 'form' root node");
        }
        if(!(arch.attrs&&arch.attrs.version==="7.0")){
            throw new Error("Editor delegate's #edition_view must be a"+" version 7 view");
        }
        if(!/\boe_form_container\b/.test(arch.attrs['class'])){
            throw new Error("Editor delegate's #edition_view must have the"+" class 'oe_form_container' on its root"+" element");
        }
        return edition_view;
    },
    is_editing:function(state){
        if(!this.record){
            return false;
        }
        switch(state){
            case null:case undefined:
                return true;
            case'new':
                return!this.record.id;
            case'edit':
                return!!this.record.id;
        }
        throw new Error("is_editing's state filter must be either `new` or"+" `edit` if provided");
    },
    _focus_setup:function(focus_field){
        var form=this.form;
        var field;
        if(focus_field&&(field=form.fields[focus_field])&&field.$el.is(':visible')){
            field.focus();
            return;
        }
        _(form.fields_order).detect(function(name){
            var field=form.fields[name];
            if(!field.$el.is(':visible')){
                return false;
            }
            return field.focus()!==false;
        });
    },
    edit:function(record,configureField,options){
        var self=this;
        var form=self.form;
        var loaded=record?form.trigger('load_record',_.extend({},record)):form.load_defaults();
        return $.when(loaded).then(function(){
            return form.do_show({
                reload:false
            });
        }).then(function(){
            self.record=form.datarecord;
            _(form.fields).each(function(field,name){
                configureField(name,field);
            });
            self._focus_setup(options&&options.focus_field);
            return form;
        });
    },
    save:function(){
        var self=this;
        return this.form.save(this.delegate.prepends_on_create()).then(function(result){
            var created=result.created&&!self.record.id;
            if(created){
                self.record.id=result.result;
            }
            return self.cancel();
        });
    },
    cancel:function(force){
        if(!(force||this.form.can_be_discarded())){
            return $.Deferred().reject({
                message:_t("The form's data can not be discarded")
                }).promise();
        }
        var record=this.record;
        this.record=null;
        this.form.do_hide();
        return $.when(record);
    }
});
instance.web.ListView.Groups.include({
    passthrough_events:instance.web.ListView.Groups.prototype.passthrough_events+" edit saved",
    get_row_for:function(record){
        return _(this.children).chain().invoke('get_row_for',record).compact().first().value();
    }
});
instance.web.ListView.List.include({
    row_clicked:function(event){
        if(!this.view.editable()||!this.view.is_action_enabled('edit')){
            return this._super.apply(this,arguments);
        }
        var record_id=$(event.currentTarget).data('id');
        return this.view.start_edition(record_id?this.records.get(record_id):null,{
            focus_field:$(event.target).data('field')
            });
    },
    get_row_for:function(record){
        var id;
        var $row=this.$current.children('[data-id='+record.get('id')+']');
        if($row.length){
            return $row;
        }
        return null;
    }
});
};
;

openerp.web.view_tree=function(instance){
    var QWeb=instance.web.qweb,_lt=instance.web._lt;
    instance.web.views.add('tree','instance.web.TreeView');
    instance.web.TreeView=instance.web.View.extend({
        display_name:_lt('Tree'),
        view_type:'tree',
        searchable:false,
        init:function(parent,dataset,view_id,options){
            this._super(parent);
            this.dataset=dataset;
            this.model=dataset.model;
            this.view_id=view_id;
            this.records={};
            
            this.options=_.extend({},this.defaults,options||{});
            _.bindAll(this,'color_for');
        },
        view_loading:function(r){
            return this.load_tree(r);
        },
        fields_list:function(){
            var fields=_.keys(this.fields);
            if(!_(fields).contains(this.children_field)){
                fields.push(this.children_field);
            }
            return fields;
        },
        load_tree:function(fields_view){
            var self=this;
            var has_toolbar=!!fields_view.arch.attrs.toolbar;
            this.children_field=fields_view['field_parent'];
            this.fields_view=fields_view;
            _(this.fields_view.arch.children).each(function(field){
                if(field.attrs.modifiers){
                    field.attrs.modifiers=JSON.parse(field.attrs.modifiers);
                }
            });
        this.fields=fields_view.fields;
        this.hook_row_click();
        this.$el.html(QWeb.render('TreeView',{
            'title':this.fields_view.arch.attrs.string,
            'fields_view':this.fields_view.arch.children,
            'fields':this.fields,
            'toolbar':has_toolbar
        }));
        this.$el.addClass(this.fields_view.arch.attrs['class']);
        this.dataset.read_slice(this.fields_list()).done(function(records){
            if(!has_toolbar){
                self.getdata(null,_(records).pluck('id'));
                return;
            }
            var $select=self.$el.find('select').change(function(){
                var $option=$(this).find(':selected');
                self.getdata($option.val(),$option.data('children'));
            });
            _(records).each(function(record){
                self.records[record.id]=record;
                $('<option>').val(record.id).text(record.name).data('children',record[self.children_field]).appendTo($select);
            });
            if(!_.isEmpty(records)){
                $select.change();
            }
        });
    this.do_push_state({});
        if(!this.fields_view.arch.attrs.colors){
        return;
    }
    this.colors=_(this.fields_view.arch.attrs.colors.split(';')).chain().compact().map(function(color_pair){
        var pair=color_pair.split(':'),color=pair[0],expr=pair[1];
        return[color,py.parse(py.tokenize(expr)),expr];
    }).value();
    },
    color_for:function(record){
        if(!this.colors){
            return'';
        }
        var context=_.extend({},record,{
            uid:this.session.uid,
            current_date:new Date().toString('yyyy-MM-dd')
            });
        for(var i=0,len=this.colors.length;i<len;++i){
            var pair=this.colors[i],color=pair[0],expression=pair[1];
            if(py.evaluate(expression,context).toJSON()){
                return'color: '+color+';';
            }
        }
    return'';
},
hook_row_click:function(){
    var self=this;
    this.$el.delegate('.treeview-td span, .treeview-tr span','click',function(e){
        e.stopImmediatePropagation();
        self.activate($(this).closest('tr').data('id'));
    });
    this.$el.delegate('.treeview-tr','click',function(){
        var is_loaded=0,$this=$(this),record_id=$this.data('id'),record=self.records[record_id],children_ids=record[self.children_field];
        _(children_ids).each(function(childid){
            if(self.$el.find('#treerow_'+childid).length){
                if(self.$el.find('#treerow_'+childid).is(':hidden')){
                    is_loaded=-1;
                }else{
                    is_loaded++;
                }
            }
        });
    if(is_loaded===0){
        if(!$this.parent().hasClass('oe_open')){
            self.getdata(record_id,children_ids);
        }
    }else{
    self.showcontent(record_id,is_loaded<0);
}
});
},
getdata:function(id,children_ids){
    var self=this;
    self.dataset.read_ids(children_ids,this.fields_list()).done(function(records){
        _(records).each(function(record){
            self.records[record.id]=record;
        });
        var $curr_node=self.$el.find('#treerow_'+id);
        var children_rows=QWeb.render('TreeView.rows',{
            'records':records,
            'children_field':self.children_field,
            'fields_view':self.fields_view.arch.children,
            'fields':self.fields,
            'level':$curr_node.data('level')||0,
            'render':instance.web.format_value,
            'color_for':self.color_for
            });
        if($curr_node.length){
            $curr_node.addClass('oe_open');
            $curr_node.after(children_rows);
        }else{
            self.$el.find('tbody').html(children_rows);
        }
    });
},
activate:function(id){
    var self=this;
    var local_context={
        active_model:self.dataset.model,
        active_id:id,
        active_ids:[id]
        };
        
    return this.rpc('/web/treeview/action',{
        id:id,
        model:this.dataset.model,
        context:instance.web.pyeval.eval('context',new instance.web.CompoundContext(this.dataset.get_context(),local_context))
        }).then(function(actions){
        if(!actions.length){
            return;
        }
        var action=actions[0][2];
        var c=new instance.web.CompoundContext(local_context);
        if(action.context){
            c.add(action.context);
        }
        return instance.web.pyeval.eval_domains_and_contexts({
            contexts:[c],
            domains:[]
        }).then(function(res){
            action.context=res.context;
            return self.do_action(action);
        },null);
    },null);
},
showcontent:function(record_id,show){
    this.$el.find('#treerow_'+record_id).toggleClass('oe_open',show);
    _(this.records[record_id][this.children_field]).each(function(child_id){
        var $child_row=this.$el.find('#treerow_'+child_id);
        if($child_row.hasClass('oe_open')){
            this.showcontent(child_id,false);
        }
        $child_row.toggle(show);
    },this);
},
do_show:function(){
    this.$el.show();
},
do_hide:function(){
    this.$el.hide();
    this.hidden=true;
}
});
};
;

openerp.web_kanban=function(instance){
    var _t=instance.web._t,_lt=instance.web._lt;
    var QWeb=instance.web.qweb;
    instance.web.views.add('kanban','instance.web_kanban.KanbanView');
    instance.web_kanban.KanbanView=instance.web.View.extend({
        template:"KanbanView",
        display_name:_lt('Kanban'),
        default_nr_columns:1,
        view_type:"kanban",
        quick_create_class:"instance.web_kanban.QuickCreate",
        number_of_color_schemes:10,
        init:function(parent,dataset,view_id,options){
            this._super(parent,dataset,view_id,options);
            var self=this;
            _.defaults(this.options,{
                "quick_creatable":true,
                "creatable":true,
                "create_text":undefined,
                "read_only_mode":false,
                "confirm_on_delete":true,
            });
            this.fields_view={};
            
            this.fields_keys=[];
            this.group_by=null;
            this.group_by_field={};
            
            this.grouped_by_m2o=false;
            this.many2manys=[];
            this.state={
                groups:{},
                records:{}
        };
        
        this.groups=[];
        this.aggregates={};
        
        this.group_operators=['avg','max','min','sum','count'];
        this.qweb=new QWeb2.Engine();
        this.qweb.debug=instance.session.debug;
        this.qweb.default_dict=_.clone(QWeb.default_dict);
        this.has_been_loaded=$.Deferred();
        this.search_domain=this.search_context=this.search_group_by=null;
        this.currently_dragging={};
        
        this.limit=options.limit||40;
        this.add_group_mutex=new $.Mutex();
    },
    view_loading:function(r){
        return this.load_kanban(r);
    },
    start:function(){
        var self=this;
        this._super.apply(this,arguments);
        this.$el.on('click','.oe_kanban_dummy_cell',function(){
            if(self.$buttons){
                self.$buttons.find('.oe_kanban_add_column').openerpBounce();
            }
        });
    },
    destroy:function(){
        this._super.apply(this,arguments);
        $('html').off('click.kanban');
    },
    load_kanban:function(data){
        this.fields_view=data;
        this.$el.addClass(this.fields_view.arch.attrs['class']);
        this.$buttons=$(QWeb.render("KanbanView.buttons",{
            'widget':this
        }));
        if(this.options.$buttons){
            this.$buttons.appendTo(this.options.$buttons);
        }else{
            this.$el.find('.oe_kanban_buttons').replaceWith(this.$buttons);
        }
        this.$buttons.on('click','button.oe_kanban_button_new',this.do_add_record).on('click','.oe_kanban_add_column',this.do_add_group);
        this.$groups=this.$el.find('.oe_kanban_groups tr');
        this.fields_keys=_.keys(this.fields_view.fields);
        this.add_qweb_template();
        this.has_been_loaded.resolve();
        this.trigger('kanban_view_loaded',data);
        return $.when();
    },
    _is_quick_create_enabled:function(){
        if(!this.options.quick_creatable||!this.is_action_enabled('create'))
            return false;
        if(this.fields_view.arch.attrs.quick_create!==undefined)
            return JSON.parse(this.fields_view.arch.attrs.quick_create);
        return!!this.group_by;
    },
    is_action_enabled:function(action){
        if(action==='create'&&!this.options.creatable)
            return false;
        return this._super(action);
    },
    add_qweb_template:function(){
        for(var i=0,ii=this.fields_view.arch.children.length;i<ii;i++){
            var child=this.fields_view.arch.children[i];
            if(child.tag==="templates"){
                this.transform_qweb_template(child);
                this.qweb.add_template(instance.web.json_node_to_xml(child));
                break;
            }else if(child.tag==='field'){
                this.extract_aggregates(child);
            }
        }
        },
extract_aggregates:function(node){
    for(var j=0,jj=this.group_operators.length;j<jj;j++){
        if(node.attrs[this.group_operators[j]]){
            this.aggregates[node.attrs.name]=node.attrs[this.group_operators[j]];
            break;
        }
    }
    },
transform_qweb_template:function(node){
    var qweb_add_if=function(node,condition){
        if(node.attrs[QWeb.prefix+'-if']){
            condition=_.str.sprintf("(%s) and (%s)",node.attrs[QWeb.prefix+'-if'],condition);
        }
        node.attrs[QWeb.prefix+'-if']=condition;
    };
    
    if(node.tag&&node.attrs.modifiers){
        var modifiers=JSON.parse(node.attrs.modifiers||'{}');
        if(modifiers.invisible){
            qweb_add_if(node,_.str.sprintf("!kanban_compute_domain(%s)",JSON.stringify(modifiers.invisible)));
        }
    }
switch(node.tag){
    case'field':
        if(this.fields_view.fields[node.attrs.name].type==='many2many'){
        if(_.indexOf(this.many2manys,node.attrs.name)<0){
            this.many2manys.push(node.attrs.name);
        }
        node.tag='div';
        node.attrs['class']=(node.attrs['class']||'')+' oe_form_field oe_tags';
    }else{
        node.tag=QWeb.prefix;
        node.attrs[QWeb.prefix+'-esc']='record.'+node.attrs['name']+'.value';
    }
    break;
    case'button':case'a':
        var type=node.attrs.type||'';
        if(_.indexOf('action,object,edit,open,delete'.split(','),type)!==-1){
        _.each(node.attrs,function(v,k){
            if(_.indexOf('icon,type,name,args,string,context,states,kanban_states'.split(','),k)!=-1){
                node.attrs['data-'+k]=v;
                delete(node.attrs[k]);
            }
        });
    if(node.attrs['data-string']){
        node.attrs.title=node.attrs['data-string'];
    }
    if(node.attrs['data-icon']){
        node.children=[{
            tag:'img',
            attrs:{
                src:instance.session.prefix+'/web/static/src/img/icons/'+node.attrs['data-icon']+'.png',
                width:'16',
                height:'16'
            }
        }];
    }
    if(node.tag=='a'){
        node.attrs.href='#';
    }else{
        node.attrs.type='button';
    }
    node.attrs['class']=(node.attrs['class']||'')+' oe_kanban_action oe_kanban_action_'+node.tag;
}
break;
}
if(node.children){
    for(var i=0,ii=node.children.length;i<ii;i++){
        this.transform_qweb_template(node.children[i]);
    }
    }
},
do_add_record:function(){
    this.dataset.index=null;
    this.do_switch_view('form');
},
do_add_group:function(){
    var self=this;
    self.do_action({
        name:_t("Add column"),
        res_model:self.group_by_field.relation,
        views:[[false,'form']],
        type:'ir.actions.act_window',
        target:"new",
        context:self.dataset.get_context(),
        flags:{
            action_buttons:true,
        }
    });
var am=instance.webclient.action_manager;
var form=am.dialog_widget.views.form.controller;
form.on("on_button_cancel",am.dialog,am.dialog.close);
form.on('record_created',self,function(r){
    (new instance.web.DataSet(self,self.group_by_field.relation)).name_get([r]).done(function(new_record){
        am.dialog.close();
        var domain=self.dataset.domain.slice(0);
        domain.push([self.group_by,'=',new_record[0][0]]);
        var dataset=new instance.web.DataSetSearch(self,self.dataset.model,self.dataset.get_context(),domain);
        var datagroup={
            get:function(key){
                return this[key];
            },
            value:new_record[0],
            length:0,
            aggregates:{},
        };
        
        var new_group=new instance.web_kanban.KanbanGroup(self,[],datagroup,dataset);
        self.do_add_groups([new_group]).done(function(){
            $(window).scrollTo(self.groups.slice(-1)[0].$el,{
                axis:'x'
            });
        });
    });
});
},
do_search:function(domain,context,group_by){
    var self=this;
    this.$el.find('.oe_view_nocontent').remove();
    this.search_domain=domain;
    this.search_context=context;
    this.search_group_by=group_by;
    return $.when(this.has_been_loaded).then(function(){
        self.group_by=group_by.length?group_by[0]:self.fields_view.arch.attrs.default_group_by;
        self.group_by_field=self.fields_view.fields[self.group_by]||{};
        
        self.grouped_by_m2o=(self.group_by_field.type==='many2one');
        self.$buttons.find('.oe_alternative').toggle(self.grouped_by_m2o);
        self.$el.toggleClass('oe_kanban_grouped_by_m2o',self.grouped_by_m2o);
        var grouping_fields=self.group_by?[self.group_by].concat(_.keys(self.aggregates)):undefined;
        var grouping=new instance.web.Model(self.dataset.model,context,domain).query().group_by(grouping_fields);
        return self.alive($.when(grouping)).done(function(groups){
            if(groups){
                self.do_process_groups(groups);
            }else{
                self.do_process_dataset();
            }
        });
    });
},
do_process_groups:function(groups){
    var self=this;
    this.$el.removeClass('oe_kanban_ungrouped').addClass('oe_kanban_grouped');
    this.add_group_mutex.exec(function(){
        self.do_clear_groups();
        self.dataset.ids=[];
        if(!groups.length){
            self.no_result();
            return false;
        }
        var remaining=groups.length-1,groups_array=[];
        return $.when.apply(null,_.map(groups,function(group,index){
            var dataset=new instance.web.DataSetSearch(self,self.dataset.model,new instance.web.CompoundContext(self.dataset.get_context(),group.model.context()),group.model.domain());
            return dataset.read_slice(self.fields_keys.concat(['__last_update']),{
                'limit':self.limit
                }).then(function(records){
                self.dataset.ids.push.apply(self.dataset.ids,dataset.ids);
                groups_array[index]=new instance.web_kanban.KanbanGroup(self,records,group,dataset);
                if(!remaining--){
                    self.dataset.index=self.dataset.size()?0:null;
                    return self.do_add_groups(groups_array);
                }
            });
        }));
    });
},
do_process_dataset:function(){
    var self=this;
    this.$el.removeClass('oe_kanban_grouped').addClass('oe_kanban_ungrouped');
    this.add_group_mutex.exec(function(){
        var def=$.Deferred();
        self.do_clear_groups();
        self.dataset.read_slice(self.fields_keys.concat(['__last_update']),{
            'limit':self.limit
            }).done(function(records){
            var kgroup=new instance.web_kanban.KanbanGroup(self,records,null,self.dataset);
            self.do_add_groups([kgroup]).done(function(){
                if(_.isEmpty(records)){
                    self.no_result();
                }
                def.resolve();
            });
        }).done(null,function(){
            def.reject();
        });
        return def;
    });
},
do_reload:function(){
    this.do_search(this.search_domain,this.search_context,this.search_group_by);
},
do_clear_groups:function(){
    var groups=this.groups.slice(0);
    this.groups=[];
    _.each(groups,function(group){
        group.destroy();
    });
},
do_add_groups:function(groups){
    var self=this;
    var $parent=this.$el.parent();
    this.$el.detach();
    _.each(groups,function(group){
        self.groups[group.undefined_title?'unshift':'push'](group);
    });
    var $last_td=self.$el.find('.oe_kanban_groups_headers td:last');
    var groups_started=_.map(this.groups,function(group){
        if(!group.is_started){
            return group.insertBefore($last_td);
        }
    });
return $.when.apply(null,groups_started).done(function(){
    self.on_groups_started();
    self.$el.appendTo($parent);
    _.each(self.groups,function(group){
        group.compute_cards_auto_height();
    });
});
},
on_groups_started:function(){
    var self=this;
    if(this.group_by){
        var $columns=this.$el.find('.oe_kanban_column .oe_kanban_column_cards');
        $columns.sortable({
            handle:'.oe_kanban_draghandle',
            start:function(event,ui){
                self.currently_dragging.index=ui.item.parent().children('.oe_kanban_record').index(ui.item);
                self.currently_dragging.group=ui.item.parents('.oe_kanban_column:first').data('widget');
                ui.item.find('*').on('click.prevent',function(ev){
                    return false;
                });
                ui.placeholder.height(ui.item.height());
            },
            revert:150,
            stop:function(event,ui){
                var record=ui.item.data('widget');
                var old_index=self.currently_dragging.index;
                var new_index=ui.item.parent().children('.oe_kanban_record').index(ui.item);
                var old_group=self.currently_dragging.group;
                var new_group=ui.item.parents('.oe_kanban_column:first').data('widget');
                if(!(old_group.title===new_group.title&&old_group.value===new_group.value&&old_index==new_index)){
                    self.on_record_moved(record,old_group,old_index,new_group,new_index);
                }
                setTimeout(function(){
                    ui.item.find('*').off('click.prevent');
                },0);
            },
            scroll:false
        });
        $columns.sortable({
            connectWith:$columns
        });
        var start_index;
        if(this.grouped_by_m2o){
            this.$('.oe_kanban_groups_headers').sortable({
                items:'.oe_kanban_group_header',
                helper:'clone',
                axis:'x',
                opacity:0.5,
                scroll:false,
                start:function(event,ui){
                    start_index=ui.item.index();
                    self.$('.oe_kanban_record, .oe_kanban_quick_create').css({
                        visibility:'hidden'
                    });
                },
                stop:function(event,ui){
                    var stop_index=ui.item.index();
                    if(start_index!==stop_index){
                        var $start_column=$('.oe_kanban_groups_records .oe_kanban_column').eq(start_index);
                        var $stop_column=$('.oe_kanban_groups_records .oe_kanban_column').eq(stop_index);
                        var method=(start_index>stop_index)?'insertBefore':'insertAfter';
                        $start_column[method]($stop_column);
                        var tmp_group=self.groups.splice(start_index,1)[0];
                        self.groups.splice(stop_index,0,tmp_group);
                        var new_sequence=_.pluck(self.groups,'value');
                        (new instance.web.DataSet(self,self.group_by_field.relation)).resequence(new_sequence).done(function(r){
                            if(r===false){
                                console.error("Kanban: could not resequence model '%s'. Probably no 'sequence' field.",self.group_by_field.relation);
                            }
                        });
                }
                self.$('.oe_kanban_record, .oe_kanban_quick_create').css({
                    visibility:'visible'
                });
            }
            });
}
}else{
    this.$el.find('.oe_kanban_draghandle').removeClass('oe_kanban_draghandle');
}
this.postprocess_m2m_tags();
},
on_record_moved:function(record,old_group,old_index,new_group,new_index){
    var self=this;
    $.fn.tipsy.clear();
    $(old_group.$el).add(new_group.$el).find('.oe_kanban_aggregates, .oe_kanban_group_length').hide();
    if(old_group===new_group){
        new_group.records.splice(old_index,1);
        new_group.records.splice(new_index,0,record);
        new_group.do_save_sequences();
    }else{
        old_group.records.splice(old_index,1);
        new_group.records.splice(new_index,0,record);
        record.group=new_group;
        var data={};
        
        data[this.group_by]=new_group.value;
        this.dataset.write(record.id,data,{}).done(function(){
            record.do_reload();
            new_group.do_save_sequences();
        }).fail(function(error,evt){
            evt.preventDefault();
            alert(_t("An error has occured while moving the record to this group: ")+data.fault_code);
            self.do_reload();
        });
    }
},
do_show:function(){
    if(this.$buttons){
        this.$buttons.show();
    }
    this.do_push_state({});
    return this._super();
},
do_hide:function(){
    if(this.$buttons){
        this.$buttons.hide();
    }
    return this._super();
},
open_record:function(id,editable){
    if(this.dataset.select_id(id)){
        this.do_switch_view('form',null,{
            mode:editable?"edit":undefined
            });
    }else{
        this.do_warn("Kanban: could not find id#"+id);
    }
},
no_result:function(){
    if(this.groups.group_by||!this.options.action||!this.options.action.help){
        return;
    }
    this.$el.find('.oe_view_nocontent').remove();
    this.$el.prepend($('<div class="oe_view_nocontent">').html(this.options.action.help));
    var create_nocontent=this.$buttons;
    this.$el.find('.oe_view_nocontent').click(function(){
        create_nocontent.openerpBounce();
    });
},
postprocess_m2m_tags:function(){
    var self=this;
    if(!this.many2manys.length){
        return;
    }
    var relations={};
    
    this.groups.forEach(function(group){
        group.records.forEach(function(record){
            self.many2manys.forEach(function(name){
                var field=record.record[name];
                var $el=record.$('.oe_form_field.oe_tags[name='+name+']').empty();
                if(!relations[field.relation]){
                    relations[field.relation]={
                        ids:[],
                        elements:{}
                };
            
            }
            var rel=relations[field.relation];
            field.raw_value.forEach(function(id){
                rel.ids.push(id);
                if(!rel.elements[id]){
                    rel.elements[id]=[];
                }
                rel.elements[id].push($el[0]);
            });
        });
    });
});
_.each(relations,function(rel,rel_name){
    var dataset=new instance.web.DataSetSearch(self,rel_name,self.dataset.get_context());
    dataset.name_get(_.uniq(rel.ids)).done(function(result){
        result.forEach(function(nameget){
            $(rel.elements[nameget[0]]).append('<span class="oe_tag">'+_.str.escapeHTML(nameget[1])+'</span>');
        });
    });
});
}
});
function get_class(name){
    return new instance.web.Registry({
        'tmp':name
    }).get_object("tmp");
}
instance.web_kanban.KanbanGroup=instance.web.Widget.extend({
    template:'KanbanView.group_header',
    init:function(parent,records,group,dataset){
        var self=this;
        this._super(parent);
        this.$has_been_started=$.Deferred();
        this.view=parent;
        this.group=group;
        this.dataset=dataset;
        this.dataset_offset=0;
        this.aggregates={};
        
        this.value=this.title=null;
        if(this.group){
            this.value=group.get('value');
            this.title=group.get('value');
            if(this.value instanceof Array){
                this.title=this.value[1];
                this.value=this.value[0];
            }
            var field=this.view.group_by_field;
            if(!_.isEmpty(field)){
                try{
                    this.title=instance.web.format_value(group.get('value'),field,false);
                }catch(e){}
            }
        _.each(this.view.aggregates,function(value,key){
            self.aggregates[value]=group.get('aggregates')[key];
        });
    }
    if(this.title===false){
        this.title=_t('Undefined');
        this.undefined_title=true;
    }
    var key=this.view.group_by+'-'+this.value;
    if(!this.view.state.groups[key]){
        this.view.state.groups[key]={
            folded:group?group.get('folded'):false
            };
        
}
this.state=this.view.state.groups[key];
this.$records=null;
this.records=[];
this.$has_been_started.done(function(){
    self.do_add_records(records);
});
},
start:function(){
    var self=this,def=this._super();
    if(!self.view.group_by){
        self.$el.addClass("oe_kanban_no_group");
        self.quick=new(get_class(self.view.quick_create_class))(this,self.dataset,{},false).on('added',self,self.proxy('quick_created'));
        self.quick.replace($(".oe_kanban_no_group_qc_placeholder"));
    }
    this.$records=$(QWeb.render('KanbanView.group_records_container',{
        widget:this
    }));
    this.$records.insertBefore(this.view.$el.find('.oe_kanban_groups_records td:last'));
    this.$el.on('click','.oe_kanban_group_dropdown li a',function(ev){
        var fn='do_action_'+$(ev.target).data().action;
        if(typeof(self[fn])==='function'){
            self[fn]($(ev.target));
        }
    });
this.$el.find('.oe_kanban_add').click(function(){
    if(self.quick){
        return self.quick.trigger('close');
    }
    var ctx={};
    
    ctx['default_'+self.view.group_by]=self.value;
    self.quick=new(get_class(self.view.quick_create_class))(this,self.dataset,ctx,true).on('added',self,self.proxy('quick_created')).on('close',self,function(){
        this.quick.destroy();
        delete this.quick;
    });
    self.quick.appendTo($(".oe_kanban_group_list_header",self.$records));
    self.quick.focus();
});
this.$records.on('click','.oe_kanban_show_more',this.do_show_more);
if(this.state.folded){
    this.do_toggle_fold();
}
this.$el.data('widget',this);
this.$records.data('widget',this);
this.$has_been_started.resolve();
var add_btn=this.$el.find('.oe_kanban_add');
add_btn.tipsy({
    delayIn:500,
    delayOut:1000
});
this.$records.find(".oe_kanban_column_cards").click(function(ev){
    if(ev.target==ev.currentTarget){
        if(!self.state.folded){
            add_btn.openerpBounce();
        }
    }
});
this.is_started=true;
return def;
},
compute_cards_auto_height:function(){
    if(!this.view.group_by){
        var min_height=0;
        var els=[];
        _.each(this.records,function(r){
            var $e=r.$el.children(':first:not(.oe_kanban_no_auto_height)').css('min-height',0);
            if($e.length){
                els.push($e[0]);
                min_height=Math.max(min_height,$e.outerHeight());
            }
        });
    $(els).css('min-height',min_height);
}
},
destroy:function(){
    this._super();
    if(this.$records){
        this.$records.remove();
    }
},
do_show_more:function(evt){
    var self=this;
    var ids=self.view.dataset.ids.splice(0);
    return this.dataset.read_slice(this.view.fields_keys.concat(['__last_update']),{
        'limit':self.view.limit,
        'offset':self.dataset_offset+=self.view.limit
        }).then(function(records){
        self.view.dataset.ids=ids.concat(self.dataset.ids);
        self.do_add_records(records);
        self.compute_cards_auto_height();
        self.view.postprocess_m2m_tags();
        return records;
    });
},
do_add_records:function(records,prepend){
    var self=this;
    var $list_header=this.$records.find('.oe_kanban_group_list_header');
    var $show_more=this.$records.find('.oe_kanban_show_more');
    var $cards=this.$records.find('.oe_kanban_column_cards');
    _.each(records,function(record){
        var rec=new instance.web_kanban.KanbanRecord(self,record);
        if(!prepend){
            rec.appendTo($cards);
            self.records.push(rec);
        }else{
            rec.prependTo($cards);
            self.records.unshift(rec);
        }
    });
if($show_more.length){
    var size=this.dataset.size();
    $show_more.toggle(this.records.length<size).find('.oe_kanban_remaining').text(size-this.records.length);
}
},
remove_record:function(id,remove_from_dataset){
    for(var i=0;i<this.records.length;i++){
        if(this.records[i]['id']===id){
            this.records.splice(i,1);
            i--;
        }
    }
    },
do_toggle_fold:function(compute_width){
    this.$el.add(this.$records).toggleClass('oe_kanban_group_folded');
    this.state.folded=this.$el.is('.oe_kanban_group_folded');
    this.$("ul.oe_kanban_group_dropdown li a[data-action=toggle_fold]").text((this.state.folded)?_t("Unfold"):_t("Fold"));
},
do_action_toggle_fold:function(){
    this.do_toggle_fold();
},
do_action_edit:function(){
    var self=this;
    self.do_action({
        res_id:this.value,
        name:_t("Edit column"),
        res_model:self.view.group_by_field.relation,
        views:[[false,'form']],
        type:'ir.actions.act_window',
        target:"new",
        flags:{
            action_buttons:true,
        }
    });
var am=instance.webclient.action_manager;
var form=am.dialog_widget.views.form.controller;
form.on("on_button_cancel",am.dialog,am.dialog.close);
form.on('record_saved',self,function(){
    am.dialog.close();
    self.view.do_reload();
});
},
do_action_delete:function(){
    var self=this;
    if(confirm(_t("Are you sure to remove this column ?"))){
        (new instance.web.DataSet(self,self.view.group_by_field.relation)).unlink([self.value]).done(function(r){
            self.view.do_reload();
        });
    }
},
do_save_sequences:function(){
    var self=this;
    if(_.indexOf(this.view.fields_keys,'sequence')>-1){
        var new_sequence=_.pluck(this.records,'id');
        self.view.dataset.resequence(new_sequence);
    }
},
quick_created:function(record){
    var id=record,self=this;
    this.dataset.read_ids([id],this.view.fields_keys).done(function(records){
        self.view.dataset.ids.push(id);
        self.do_add_records(records,true);
    });
}
});
instance.web_kanban.KanbanRecord=instance.web.Widget.extend({
    template:'KanbanView.record',
    init:function(parent,record){
        this._super(parent);
        this.group=parent;
        this.view=parent.view;
        this.id=null;
        this.set_record(record);
        if(!this.view.state.records[this.id]){
            this.view.state.records[this.id]={
                folded:false
            };
        
    }
    this.state=this.view.state.records[this.id];
},
set_record:function(record){
    var self=this;
    this.id=record.id;
    this.values={};
    
    _.each(record,function(v,k){
        self.values[k]={
            value:v
        };
    
    });
this.record=this.transform_record(record);
},
start:function(){
    this._super();
    this.$el.data('widget',this);
    this.bind_events();
},
transform_record:function(record){
    var self=this,new_record={};
    
    _.each(record,function(value,name){
        var r=_.clone(self.view.fields_view.fields[name]||{});
        if((r.type==='date'||r.type==='datetime')&&value){
            r.raw_value=instance.web.auto_str_to_date(value);
        }else{
            r.raw_value=value;
        }
        r.value=instance.web.format_value(value,r);
        new_record[name]=r;
    });
    return new_record;
},
renderElement:function(){
    this.qweb_context={
        instance:instance,
        record:this.record,
        widget:this,
        read_only_mode:this.view.options.read_only_mode,
    };
    
    for(var p in this){
        if(_.str.startsWith(p,'kanban_')){
            this.qweb_context[p]=_.bind(this[p],this);
        }
    }
var $el=instance.web.qweb.render(this.template,{
    'widget':this,
    'content':this.view.qweb.render('kanban-box',this.qweb_context)
    });
this.replaceElement($el);
},
bind_events:function(){
    var self=this;
    this.setup_color_picker();
    this.$el.find('[tooltip]').tipsy({
        delayIn:500,
        delayOut:0,
        fade:true,
        title:function(){
            var template=$(this).attr('tooltip');
            if(!self.view.qweb.has_template(template)){
                return false;
            }
            return self.view.qweb.render(template,self.qweb_context);
        },
        gravity:'s',
        html:true,
        opacity:0.8,
        trigger:'hover'
    });
    if(!this.$el.find('.oe_kanban_draghandle').length){
        this.$el.children(':first').toggleClass('oe_kanban_draghandle',this.view.is_action_enabled('edit'));
    }
    this.$el.find('.oe_kanban_action').click(function(ev){
        ev.preventDefault();
        var $action=$(this),type=$action.data('type')||'button',method='do_action_'+(type==='action'?'object':type);
        if((type==='edit'||type==='delete')&&!self.view.is_action_enabled(type)){
            self.view.open_record(self.id,true);
        }else if(_.str.startsWith(type,'switch_')){
            self.view.do_switch_view(type.substr(7));
        }else if(typeof self[method]==='function'){
            self[method]($action);
        }else{
            self.do_warn("Kanban: no action for type : "+type);
        }
    });
if(this.$el.find('.oe_kanban_global_click,.oe_kanban_global_click_edit').length){
    this.$el.on('click',function(ev){
        if(!ev.isTrigger&&!$._data(ev.target,'events')){
            var trigger=true;
            var elem=ev.target;
            var ischild=true;
            var children=[];
            while(elem){
                var events=$._data(elem,'events');
                if(elem==ev.currentTarget){
                    ischild=false;
                }
                if(ischild){
                    children.push(elem);
                    if(events&&events.click){
                        trigger=false;
                    }
                }
            if(trigger&&events&&events.click){
                _.each(events.click,function(click_event){
                    if(click_event.selector){
                        _.each(children,function(child){
                            if($(child).is(click_event.selector)){
                                trigger=false;
                            }
                        });
                }
                });
    }
    elem=elem.parentElement;
    }
    if(trigger){
        self.on_card_clicked(ev);
    }
}
});
}
},
on_card_clicked:function(ev){
    if(this.$el.find('.oe_kanban_global_click_edit').size()>0)
        this.do_action_edit();else
        this.do_action_open();
},
setup_color_picker:function(){
    var self=this;
    var $el=this.$el.find('ul.oe_kanban_colorpicker');
    if($el.length){
        $el.html(QWeb.render('KanbanColorPicker',{
            widget:this
        }));
        $el.on('click','a',function(ev){
            ev.preventDefault();
            var color_field=$(this).parents('.oe_kanban_colorpicker').first().data('field')||'color';
            var data={};
            
            data[color_field]=$(this).data('color');
            self.view.dataset.write(self.id,data,{}).done(function(){
                self.record[color_field]=$(this).data('color');
                self.do_reload();
            });
        });
    }
},
do_action_delete:function($action){
    var self=this;
    function do_it(){
        return $.when(self.view.dataset.unlink([self.id])).done(function(){
            self.group.remove_record(self.id);
            self.destroy();
        });
    }
    if(this.view.options.confirm_on_delete){
        if(confirm(_t("Are you sure you want to delete this record ?"))){
            return do_it();
        }
    }else
    return do_it();
},
do_action_edit:function($action){
    this.view.open_record(this.id,true);
},
do_action_open:function($action){
    this.view.open_record(this.id);
},
do_action_object:function($action){
    var button_attrs=$action.data();
    this.view.do_execute_action(button_attrs,this.view.dataset,this.id,this.do_reload);
},
do_reload:function(){
    var self=this;
    this.view.dataset.read_ids([this.id],this.view.fields_keys.concat(['__last_update'])).done(function(records){
        if(records.length){
            self.set_record(records[0]);
            self.renderElement();
            self.$el.data('widget',self);
            self.bind_events();
            self.group.compute_cards_auto_height();
            self.view.postprocess_m2m_tags();
        }else{
            self.destroy();
        }
    });
},
kanban_getcolor:function(variable){
    var index=0;
    switch(typeof(variable)){
        case'string':
            for(var i=0,ii=variable.length;i<ii;i++){
            index+=variable.charCodeAt(i);
        }
        break;
        case'number':
            index=Math.round(variable);
            break;
        default:
            return'';
    }
    var color=(index%this.view.number_of_color_schemes);
    return color;
},
kanban_color:function(variable){
    var color=this.kanban_getcolor(variable);
    return color===''?'':'oe_kanban_color_'+color;
},
kanban_gravatar:function(email,size){
    size=size||22;
    email=_.str.trim(email||'').toLowerCase();
    var default_=_.str.isBlank(email)?'mm':'identicon';
    var email_md5=$.md5(email);
    return'http://www.gravatar.com/avatar/'+email_md5+'.png?s='+size+'&d='+default_;
},
kanban_image:function(model,field,id,cache,options){
    options=options||{};
    
    var url;
    if(this.record[field]&&this.record[field].value&&!instance.web.form.is_bin_size(this.record[field].value)){
        url='data:image/png;base64,'+this.record[field].value;
    }else if(this.record[field]&&!this.record[field].value){
        url="/web/static/src/img/placeholder.png";
    }else{
        id=JSON.stringify(id);
        if(options.preview_image)
            field=options.preview_image;
        url=this.session.url('/web/binary/image',{
            model:model,
            field:field,
            id:id
        });
        if(cache!==undefined){
            url+='&cache='+parseInt(cache,10);
        }
    }
return url;
},
kanban_text_ellipsis:function(s,size){
    size=size||160;
    if(!s){
        return'';
    }else if(s.length<=size){
        return s;
    }else{
        return s.substr(0,size)+'...';
    }
},
kanban_compute_domain:function(domain){
    return instance.web.form.compute_domain(domain,this.values);
}
});
instance.web_kanban.QuickCreate=instance.web.Widget.extend({
    template:'KanbanView.quick_create',
    init:function(parent,dataset,context,buttons){
        this._super(parent);
        this._dataset=dataset;
        this._buttons=buttons||false;
        this._context=context||{};
    
},
start:function(){
    var self=this;
    self.$input=this.$el.find('input');
    self.$input.keyup(function(event){
        if(event.keyCode==13){
            self.quick_add();
        }
    });
$(".oe_kanban_quick_create_add",this.$el).click(function(){
    self.quick_add();
    self.focus();
});
$(".oe_kanban_quick_create_close",this.$el).click(function(ev){
    ev.preventDefault();
    self.trigger('close');
});
self.$input.keyup(function(e){
    if(e.keyCode==27&&self._buttons){
        self.trigger('close');
    }
});
},
focus:function(){
    this.$el.find('input').focus();
},
quick_add:function(){
    var self=this;
    var val=this.$input.val();
    if(/^\s*$/.test(val)){
        return;
    }
    this._dataset.call('name_create',[val,new instance.web.CompoundContext(this._dataset.get_context(),this._context)]).then(function(record){
        self.$input.val("");
        self.trigger('added',record[0]);
    },function(error,event){
        event.preventDefault();
        return self.slow_create();
    });
},
slow_create:function(){
    var self=this;
    var pop=new instance.web.form.SelectCreatePopup(this);
    pop.select_element(self._dataset.model,{
        title:_t("Create: ")+(this.string||this.name),
        initial_view:"form",
        disable_multiple_selection:true
    },[],{
        "default_name":self.$input.val()
        });
    pop.on("elements_selected",self,function(element_ids){
        self.$input.val("");
        self.trigger('added',element_ids[0]);
    });
}
});
};